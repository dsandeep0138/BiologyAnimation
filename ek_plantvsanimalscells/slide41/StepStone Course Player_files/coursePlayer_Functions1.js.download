// ! F - UI - wait cover controller ---
function waitCoverController( context ){
	console.log( "wcc context = " + JSON.stringify( context , null , 4 ) );
	var coverAction = 			context.coverAction;
	switch( coverAction ){
		case 'Launch' :
			//console.log( "wait cover controller LAUNCH" );
			$( ".waitCover" ).show(); /* fix for ie/edge leaving overlay stuck until forced browser redraw */
			$( ".waitCover" ).attr( "data-animAction" , "Launch" );
			$( ".waitCover" ).attr( "data-animState" , "Launching" );
			waitCoverControllerData.launchTimer = setTimeout(function(){
				$( ".waitCover" ).attr( "data-animState" , "Launched" );
				var loadStep = 			context.loadStep;
				if( loadStep != undefined && loadStep != "" ){
					var setCurrentPathType = context.setCurrentPathType;
					if( setCurrentPathType != undefined && setCurrentPathType != "" ){
						loadNewActivityPage({ 'loadDataFile' : loadStep , 'setCurrentPathType' : setCurrentPathType });
					}else{
						loadNewActivityPage({ 'loadDataFile' : loadStep });
					}
				}
				var loadPanel = 			context.loadPanel;
				if( loadPanel != undefined && loadPanel != "" ){
					switch( loadPanel ){
						case "Dashboard" : 
							level3LightboxLauncher("dashboard");
						break;
					}
				}
				var revertPanels = 			context.revertPanels;
				if( revertPanels != undefined && revertPanels != "" && revertPanels == true ){
					//console.log("oof");
					revertLightboxes('continue');
					lightBoxDialog_Level3_Engaged = false; // redundant?
					$('body').attr( 'data-lightBoxPanel3' , "None" );
					$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
				}
			}, 650); /* should set after css animation is complete */
		break;
		case 'Hide' :
			console.log( "wait cover controller HIDE" );
			if( $( ".waitCover" ).attr( "data-animState" ) == "Launched" || 
				$( ".waitCover" ).attr( "data-animState" ) == "Launching" ){
				$( ".waitCover" ).attr( "data-animAction" , "Hide" );
				waitCoverControllerData.hideTimer = setTimeout(function(){
					$( ".waitCover" ).attr( "data-animState" , "Dormant" );
					$( ".waitCover" ).attr( "data-animAction" , "Dormant" ); 
				}, 250); /* should set after css animation is complete */
				waitCoverControllerData.hideTimer2 = setTimeout(function(){ /* fix for ie/edge leaving overlay stuck until forced browser redraw */
					$( ".waitCover" ).hide();
				}, 260);
			}else{
				clearTimeout( waitCoverControllerData.launchTimer );
				clearTimeout( waitCoverControllerData.launchTimer2 );
				$( ".waitCover" ).attr( "data-animState" , "Dormant" );
				$( ".waitCover" ).attr( "data-animAction" , "Dormant" );
				$( ".waitCover" ).hide(); /* fix for ie/edge leaving overlay stuck until forced browser redraw */
			}
		break;
	}
}
// ! F. Refocus on last-focused element after window blur
function refocus(){
	if( focusControl.lastFocusedElement != null ){
		focusControl.lastFocusedElement.focus();
		$('.focused').removeClass( 'focused' );
		$(document.activeElement).addClass( 'focused' );
		//console.log( "focus window target last focused classlist = " + focusControl.lastFocusedElement.attr("class") );
		focusControl.lastFocusedElement = null;
	}
}

/* ! --[ F - popList ]--- */
function showPopList(context){
	switch( context.vizAction ){
		case "Show" : 
			switch( context.popMode ){
				case "CaptionSelect" : 
					
					var buildCaptionSelector = 	'<div class="popListHeader">' + langPack.ui.mediaViewer.videoAssistive.selectCaptionLang + '</div>';
					buildCaptionSelector += 	'<div class="popList UDArrowGroup" data-UDArrowGroup="VideoCaptionSelect">';
					buildCaptionSelector += 		'<div class="popListItem focalItem videoCaptionSelectFirst arrowNavUD" data-popListLangShort="x" data-popListItemLabel="None" tabindex="0">' + langPack.ui.globalElements.langList.none + '</div>';
					
					switch( context.playerType ){
						case "Vimeo" :
							if( html5VideoData.vmPlayerAPICaptionTracks != null &&
							html5VideoData.vmPlayerAPICaptionTracks != undefined &&
							html5VideoData.vmPlayerAPICaptionTracks.length > 0 ){
								for( var a = 0 ; a < html5VideoData.vmPlayerAPICaptionTracks.length ; a++ ){
									var languageLabel = "";
									var languageLabelDisplay = "";
									switch( html5VideoData.vmPlayerAPICaptionTracks[a].language ){
										case "en" : 
											languageLabel = "English";
											languageLabelDisplay = langPack.ui.globalElements.langList.english;
										break;
										case "es" : 
											languageLabel = "Spanish";
											languageLabelDisplay = langPack.ui.globalElements.langList.spanish;
										break;
										case "fr" : 
											languageLabel = "French";
											languageLabelDisplay = langPack.ui.globalElements.langList.french;
										break;
									}
									var videoCaptionSelectLastAdd = "";
									if( a = html5VideoData.vmPlayerAPICaptionTracks.length - 1 ){
										videoCaptionSelectLastAdd = " videoCaptionSelectLast";
									}
									buildCaptionSelector += '<div class="popListItem focalItem arrowNavUD' + videoCaptionSelectLastAdd + '" data-popListLangShort="' + html5VideoData.vmPlayerAPICaptionTracks[a].language + '" data-popListItemLabel="' + languageLabel + '" tabindex="0">' + languageLabelDisplay + '</div>';
								}
							}
							buildCaptionSelector += 	'</div>';
							$( '#videoAssistiveControlsPopList' ).html( buildCaptionSelector );	
							//$( '.popListItem[data-popListItemLabel="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '.popListItem[data-popListLangShort="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '#videoAssistiveControlsPopList' ).attr( 'data-videoAssistiveMode' , context.popMode );	
							$( '#videoAssistiveControlsPopList' ).addClass( "popListOpen" );
						break;
						case "YouTube" :
							
							if( html5VideoData.youtubeLanguageList != null &&
								html5VideoData.youtubeLanguageList != undefined &&
								html5VideoData.youtubeLanguageList.length > 0 ){
								
								for( var a = 0 ; a < html5VideoData.youtubeLanguageList.length ; a++ ){
									var languageLabel = "";
									var languageLabelDisplay = "";
									
									/*
									youtubeLanguageList[a] = 
									
									displayName 		"Albanian"
									id 					null
									is_default 			false
									is_servable 		false
									is_translateable 	true
									kind 				""
									languageCode 		"sq"
									languageName 		"Albanian"
									name 				null
									vss_id 				".sq"
									*/
									
									languageLabel = 			html5VideoData.youtubeLanguageList[a].languageName;
									languageLabelDisplay = 		html5VideoData.youtubeLanguageList[a].displayName; // langPack.ui.globalElements.langList.english;
									
									var videoCaptionSelectLastAdd = "";
									if( a == html5VideoData.youtubeLanguageList.length - 1 ){
										videoCaptionSelectLastAdd = " videoCaptionSelectLast";
									}
									buildCaptionSelector += '<div class="popListItem focalItem arrowNavUD' + videoCaptionSelectLastAdd + '" data-popListLangShort="' + html5VideoData.youtubeLanguageList[a].languageCode + '" data-popListItemLabel="' + languageLabel + '" tabindex="0">' + languageLabelDisplay + '</div>';
									
									/*
									switch( html5VideoData.youtubeLanguageList[a].languageCode ){
										case "en" : 
											languageLabel = "English";
											languageLabelDisplay = langPack.ui.globalElements.langList.english;
										break;
										case "es" : 
											languageLabel = "Spanish";
											languageLabelDisplay = langPack.ui.globalElements.langList.spanish;
										break;
										case "fr" : 
											languageLabel = "French";
											languageLabelDisplay = langPack.ui.globalElements.langList.french;
										break;
									}
									*/
									//console.log( "YT LL a = " + a );
							  	}
							}
							
							buildCaptionSelector += 	'</div>';
							$( '#videoAssistiveControlsPopList' ).html( buildCaptionSelector );	
							//$( '.popListItem[data-popListItemLabel="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '.popListItem[data-popListLangShort="' + html5VideoData.youtubeCCLangSelected + '"]' ).addClass("selected");
							$( '#videoAssistiveControlsPopList' ).attr( 'data-videoAssistiveMode' , context.popMode );	
							$( '#videoAssistiveControlsPopList' ).addClass( "popListOpen" );
							
							/*
							var buildLangSlotOff = 	'<div class="langStackSlot" data-langID="CC-Off">';
							buildLangSlotOff += 		'<div class="langStackSlotLabel">(Off)</div>';
							buildLangSlotOff += 	'</div>';
							$( '.langStackList' ).append( buildLangSlotOff );
							for( var a = 0 ; a < html5VideoData.youtubeLanguageList.length ; a++ ){
								var buildLangSlot = 	"";
								buildLangSlot += 	'<div class="langStackSlot" data-langID="' + html5VideoData.youtubeLanguageList[a].languageCode + '">';
								buildLangSlot += 			'<div class="langStackSlotLabel">' + html5VideoData.youtubeLanguageList[a].displayName + '</div>';
								buildLangSlot += 		'</div>';
								$( '.langStackList' ).append( buildLangSlot );
								if( html5VideoData.youtubeLanguageList[a].languageCode == html5VideoData.youtubeCurrentLang ){
									$('.langStackSlot').last().addClass("currentLangSlot");
								}
						  	}
							*/
						
							/*
							if( html5VideoData.vmPlayerAPICaptionTracks != null &&
							html5VideoData.vmPlayerAPICaptionTracks != undefined &&
							html5VideoData.vmPlayerAPICaptionTracks.length > 0 ){
								for( var a = 0 ; a < html5VideoData.vmPlayerAPICaptionTracks.length ; a++ ){
									var languageLabel = "";
									var languageLabelDisplay = "";
									switch( html5VideoData.vmPlayerAPICaptionTracks[a].language ){
										case "en" : 
											languageLabel = "English";
											languageLabelDisplay = langPack.ui.globalElements.langList.english;
										break;
										case "es" : 
											languageLabel = "Spanish";
											languageLabelDisplay = langPack.ui.globalElements.langList.spanish;
										break;
										case "fr" : 
											languageLabel = "French";
											languageLabelDisplay = langPack.ui.globalElements.langList.french;
										break;
									}
									var videoCaptionSelectLastAdd = "";
									if( a = html5VideoData.vmPlayerAPICaptionTracks.length - 1 ){
										videoCaptionSelectLastAdd = " videoCaptionSelectLast";
									}
									buildCaptionSelector += '<div class="popListItem focalItem arrowNavUD' + videoCaptionSelectLastAdd + '" data-popListLangShort="' + html5VideoData.vmPlayerAPICaptionTracks[a].language + '" data-popListItemLabel="' + languageLabel + '" tabindex="0">' + languageLabelDisplay + '</div>';
								}
							}
							buildCaptionSelector += 	'</div>';
							$( '#videoAssistiveControlsPopList' ).html( buildCaptionSelector );	
							//$( '.popListItem[data-popListItemLabel="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '.popListItem[data-popListLangShort="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '#videoAssistiveControlsPopList' ).attr( 'data-videoAssistiveMode' , context.popMode );	
							$( '#videoAssistiveControlsPopList' ).addClass( "popListOpen" );
							*/
						break;
						case "HTML5-MP4" :
							//console.log("TTL1 : ");
							//console.log( JSON.stringify( html5VideoData.html5mp4VPlayerAPICaptionTracks , null , 4 ) );
							//console.log( "TTL1 = " + html5VideoData.html5mp4VPlayerAPICaptionTracks );
							//console.log( "TTL2 = " + html5VideoData.allVideos[0].textTracks.length );
							//console.log("TTL2 : ");
							//console.log( JSON.stringify( html5VideoData.allVideos , null , 4 ) );
							//if()
							//[0][0].html5VideoData.allVideos[0].textTracks[0].language
							
							if( html5VideoData.html5mp4VPlayerAPICaptionTracks != null &&
							html5VideoData.html5mp4VPlayerAPICaptionTracks != undefined ){
								if( Object.keys( html5VideoData.html5mp4VPlayerAPICaptionTracks ).length > 0 ){
								
									var itemIteration;
									for( itemIteration in html5VideoData.html5mp4VPlayerAPICaptionTracks ){
									    if( html5VideoData.html5mp4VPlayerAPICaptionTracks.hasOwnProperty(itemIteration) ){
											var languageLabel = "";
											var languageLabelDisplay = "";
											//console.log( "itemiteration key (lang) = " + itemIteration );
											//console.log( "itemiteration val (file) = " + html5VideoData.html5mp4VPlayerAPICaptionTracks[itemIteration] );
											//*
											switch( itemIteration ){
												case "en" : 
												case "en-us" : 
													languageLabel = "English";
													languageLabelDisplay = "English";
												break;
												case "es" : 
												case "es-sa" :
													languageLabel = "Spanish";
													languageLabelDisplay = "Espa&ntilde;ol";
												break;
												case "fr" : 
												case "fr-fr" : 
													languageLabel = "French";
													languageLabelDisplay = "Fran&ccedil;ais";
												break;
											}
											var videoCaptionSelectLastAdd = "";
											//if( a = html5VideoData.vmPlayerAPICaptionTracks.length - 1 ){
												//videoCaptionSelectLastAdd = " videoCaptionSelectLast";
											//}
											var splitIterationLang = itemIteration.split("-");
											buildCaptionSelector += '<div class="popListItem focalItem arrowNavUD' + videoCaptionSelectLastAdd + '" data-popListLangShort="' + splitIterationLang[0] + '" data-popListItemLabel="' + languageLabel + '" tabindex="0">' + languageLabelDisplay + '</div>';
										    //*/
										    
									      //mediaLaunchBuild += 	'<track kind="captions" label="English captions" src="' + mediaPathConstructor({ 'mediaFileName' :  avCaptionTracks[itemIteration] }) + '" srclang="en" default>';
									    }
									}
								}
							}
							buildCaptionSelector += 	'</div>';
							$( '#videoAssistiveControlsPopList' ).html( buildCaptionSelector );	
							//$( '.popListItem[data-popListItemLabel="' + html5VideoData.vmPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '.popListItem[data-popListLangShort="' + html5VideoData.html5mp4VPlayerCaptionSelected + '"]' ).addClass("selected");
							$( '#videoAssistiveControlsPopList' ).attr( 'data-videoAssistiveMode' , context.popMode );	
							$( '#videoAssistiveControlsPopList' ).addClass( "popListOpen" );
						break;
					}	
					
					var currentCaptionSelected = "None";
					if( $( '#videoAssistiveControlsPopList.popListOpen[data-videoassistivemode="CaptionSelect"] .popListItem.selected' ).length > 0 ){
						//console.log( "cc = " + $( '#videoAssistiveControlsPopList.popListOpen[data-videoassistivemode="CaptionSelect"] .popListItem.selected' ).text() );
						currentCaptionSelected = $( '#videoAssistiveControlsPopList.popListOpen[data-videoassistivemode="CaptionSelect"] .popListItem.selected' ).text(); 
					}
					//$('#ariaLiveAssertive').text( "Please select a closed-caption option. Currently selected : " + currentCaptionSelected );
					placeLocalizedContent({
						'targetItem' : 		$( '#ariaLiveAssertive' ) ,
						'srcData' : 		langPack.screenreader.ariaLiveNotice.videoLanguageSelect , 
						'varSet' : 			[currentCaptionSelected]
					});
					
				break;
			}
			maximizeCETActivityContentHeight();
		break;
	}
	
}

/* ! --[ F - youtube init YouTube Vars ]--- */
function initYouTubeVars(){
	html5VideoData.youtubePlayerObj = 					null;
	html5VideoData.youtubeGetCCDataLoop = 				null;
	html5VideoData.youtubeInitIntervalCount = 			0;
	html5VideoData.youtubeDefaultLang = 				"en";
	html5VideoData.youtubeCurrentLang = 				html5VideoData.youtubeDefaultLang; 
	html5VideoData.youtubeLanguageList = 				null;
	html5VideoData.youtubeCurrentPlaybackStatus =  		-1; // (unstarted)
	html5VideoData.youtubeInitialPlaybackCompleted =  	false;
	html5VideoData.youtubeReadyPlaybackStarted =  		false;
	html5VideoData.youtubeCCLangLatch = 				"CC (Off)";
	html5VideoData.youtubeCCLangSelected = 				"x";
}
/* ! --[ F - youtube poll for changes - cycle ]--- */
function pollYTChangesCycle() {
    // need to poll for mute toggle status
    var langPackVideoAssistPath = langPack.ui.mediaViewer.videoAssistive;
    if( html5VideoData.youtubeInitialPlaybackCompleted ){
	    var isMuted = html5VideoData.youtubePlayerObj.isMuted();
	    if( isMuted ){
		   $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "UnMute" );
			$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.unmute );
	    }else{
		   $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
			$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
	    }
    }
    // need to poll for cc toggle status
    // have to check if cc exists, then can check external button text
    // CURRENTLY NO WAY TO CHECK FOR CC TOGGLE STATUS
    /*
    console.log( player.getOptions("captions") );
    console.log( JSON.stringify( player.getOption( "captions" , 'track' ) , null , 4 ) );
    if( player.getOptions().indexOf("captions") != -1 ){
	    //$('.ccToggle').text("CC Off");
	    if( languageList != null || languageList != undefined ){
	  		//$('.ccToggle').text("CC On");
	  	}
	}else{
		//$('.ccToggle').text("CC On");
	}
    */
    html5VideoData.youtubePollChanges = setTimeout(pollYTChangesCycle, 50);
}
/* ! --[ F - youtube poll for changes - stop ]--- */
function pollYTChangesStop() {
    clearTimeout(html5VideoData.youtubePollChanges);
    html5VideoData.youtubePollChanges = null;
}
/* ! --[ F - youtube iframe api ready ]--- */
function onYouTubeIframeAPIReady() { // YOUTUBE API FUNCTION -- fires when api ready, before video load
	//console.log("onYouTubeIframeAPIReady");
    /*
    html5VideoData.youtubePlayerObj = new YT.Player( 'player', {
        height: 				'390',
        width: 					'640',
        videoId: 				't6bbuDUPIgk', // multi lang caps -- should populate languageList with multiple obj array
        //videoId: 				'xco0qjszPHQ', // single lang caps -- should populate languageList with single obj in array
        //videoId: 				'i-3PEaXZcIA', // no caps -- should populate languageList as empty array
        enablejsapi: 			true,
        playerVars: {
        	//'hl' : 				"uk",
        	'playsinline' : 	0,
        	//'controls' : 		0,
        	'disablekb' : 		1,
			'cc_lang_pref' : 	html5VideoData.youtubeDefaultLang,
			'cc_load_policy' : 	1, // if not forcing captions at first, and they are turned off by user, can't get initial language list
			//cc_lang_pref: 	"uk",
        	'rel' : 			0
        },
        events: {
            'onReady': 			onYTPlayerReady ,
            'onStateChange': 	onYTPlayerStateChange , 
            'onApiChange': 		onYTApiChange 
        }
    });
    */
}
/* ! --[ F - youtube on player ready ]--- */
function onYTPlayerReady(event) { // fires after onYouTubeIframeAPIReady
	console.log( "onYTPlayerReady" );
	//*
	var alreadyMuted = false;
	if( html5VideoData.youtubePlayerObj.isMuted() ){
	    alreadyMuted = true;
    }
    html5VideoData.youtubePlayerObj.mute();
    html5VideoData.youtubePlayerObj.playVideo();
    clearInterval( html5VideoData.youtubeGetCCDataLoop );
    html5VideoData.youtubeInitIntervalCount = 0;
    html5VideoData.youtubeGetCCDataLoop = setInterval(function(){
	    if( html5VideoData.youtubeLanguageList != null && html5VideoData.youtubeLanguageList != undefined ){
		    console.log( "languageList should NOT be null or undefined -- " + html5VideoData.youtubeLanguageList );
		    clearInterval( html5VideoData.youtubeGetCCDataLoop );
		    html5VideoData.youtubeGetCCDataLoop = null;
		    html5VideoData.youtubePlayerObj.stopVideo();
		    if( !alreadyMuted ){
		    	html5VideoData.youtubePlayerObj.unMute();
	    	}
	    	var showPlayerDelay = setTimeout(function(){
		    	html5VideoData.youtubeInitialPlaybackCompleted = true;
				$( '#videoLoadBox' ).removeClass( "notReady" );
				$( '.videoAssistiveControlLauncher' ).focus();
				updateFocus({ 'action' : "Update" });
			},400);
			//playbackEnable({});
	    }else{
		    console.log( "languageList should be null or undefined -- " + html5VideoData.youtubeLanguageList );
		    html5VideoData.youtubeInitIntervalCount++;
		    if( html5VideoData.youtubeInitIntervalCount >= 2 ){
			    html5VideoData.youtubePlayerObj.pauseVideo();
		    }
	    }
	}, 20);
	pollYTChangesCycle();
	//*/
}
/* ! --[ F - youtube on player state change ]--- */
function onYTPlayerStateChange(event){ // fires after onPlayerReady
	console.log( "onYTPlayerStateChange" );
	var langPackVideoAssistPath = langPack.ui.mediaViewer.videoAssistive;
	/*
	-1 (unstarted)
	0 (ended)
	1 (playing)
	2 (paused)
	3 (buffering)
	5 (video cued).
	*/
	if( html5VideoData.youtubeInitialPlaybackCompleted ){
		switch( event.data ){
			case 1:
				$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
				$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
			break;
			case -1:
			case 0:
			case 2:
			case 3:
			case 5:
				$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
					$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
			break;
			
		}
		if( event.data == 1 ){
			if( !html5VideoData.youtubeReadyPlaybackStarted ){
				html5VideoData.youtubePlayerObj.unloadModule("captions"); // forcing captions off, as we are forcing them on at init to get language list.  unfortunately can't utilize user preference for this.
				if( html5VideoData.youtubeCCLangLatch != "" ){
				   setYTCCLanguage({ 'langCode' : html5VideoData.youtubeCCLangLatch });
				   html5VideoData.youtubeCCLangLatch = "";
			    }
			}
			html5VideoData.youtubeReadyPlaybackStarted = true;
		}
		html5VideoData.youtubeCurrentPlaybackStatus = event.data;
	}
	console.log("onPlayerStateChange - event data = " + event.data );
}
/* ! --[ F - youtube on player api change ]--- */
function onYTApiChange(event) { // fires after onPlayerStateChange
	console.log("onYTApiChange");
	var module;
	if( html5VideoData.youtubePlayerObj.getOptions().indexOf("cc") !== -1){
    	module = "cc";
  	}else if( html5VideoData.youtubePlayerObj.getOptions().indexOf("captions") != -1){
    	module = "captions";
  	}
	if( html5VideoData.youtubeLanguageList == null || html5VideoData.youtubeLanguageList == undefined ){
  		html5VideoData.youtubeLanguageList = html5VideoData.youtubePlayerObj.getOption(module, "tracklist");
  		populateYTCCLangList();
  	}
}
/* ! --[ F - youtube populate cc lang list ]--- */
function populateYTCCLangList(){
	var buildLangSlotOff = 	'<div class="langStackSlot" data-langID="CC-Off">';
	buildLangSlotOff += 		'<div class="langStackSlotLabel">(Off)</div>';
	buildLangSlotOff += 	'</div>';
	$( '.langStackList' ).append( buildLangSlotOff );
	for( var a = 0 ; a < html5VideoData.youtubeLanguageList.length ; a++ ){
		var buildLangSlot = 	"";
		buildLangSlot += 	'<div class="langStackSlot" data-langID="' + html5VideoData.youtubeLanguageList[a].languageCode + '">';
		buildLangSlot += 			'<div class="langStackSlotLabel">' + html5VideoData.youtubeLanguageList[a].displayName + '</div>';
		buildLangSlot += 		'</div>';
		$( '.langStackList' ).append( buildLangSlot );
		if( html5VideoData.youtubeLanguageList[a].languageCode == html5VideoData.youtubeCurrentLang ){
			$('.langStackSlot').last().addClass("currentLangSlot");
		}
  	}
}
/* ! --[ F - youtube set cc lang ]--- */
function setYTCCLanguage(context){
	var langCode = context.langCode;
	html5VideoData.youtubeCurrentLang = langCode;
	//if( html5VideoData.youtubeCurrentPlaybackStatus == -1 ){
		//html5VideoData.youtubeCCLangLatch = langCode;
	//}else{
		if( langCode == "x" ){
			$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")" );
			if( html5VideoData.youtubeCurrentPlaybackStatus == -1 ){
				html5VideoData.youtubeCCLangLatch = langCode;
			}else{
				html5VideoData.youtubePlayerObj.unloadModule("captions");
			}
		}else{
			$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.on + ")" );
			if( html5VideoData.youtubeCurrentPlaybackStatus == -1 ){
				html5VideoData.youtubeCCLangLatch = langCode;
			}else{
				html5VideoData.youtubePlayerObj.setOption( "captions" , 'track' , { 'languageCode' : langCode } );
			}
		}
	//}
	//$('.currentLangSlot').removeClass("currentLangSlot");
	//$( '.langStackSlot[data-langID="' + langCode + '"]' ).addClass("currentLangSlot");
	//var verboseLabel = $( '.langStackSlot[data-langID="' + langCode + '"] .langStackSlotLabel' ).text();
	//$( '.ccSelection' ).text( verboseLabel );
	//$( '.langStack' ).attr( 'data-viz' , "Closed" ); 
}
/* ! --[ F - youtube volume control ]--- */
function ytVolumeControl(context){
	var direction = 			context.dir;
	var min = 					0;
	var max = 					100;
	var increment = 			5;
	var checkCurrentVolume = 	html5VideoData.youtubePlayerObj.getVolume();
	var isMuted = 				html5VideoData.youtubePlayerObj.isMuted();
	switch( direction ){
		case "Down" :
			if( checkCurrentVolume > 0 ){
				html5VideoData.youtubePlayerObj.setVolume( checkCurrentVolume - increment );
				if( (checkCurrentVolume - increment) == 0 ){
					html5VideoData.youtubePlayerObj.mute();
				}else{
					if( isMuted ){
					    html5VideoData.youtubePlayerObj.unMute();
				    }
				}
			}
		break;
		case "Up" :
			if( checkCurrentVolume < 100 ){
				html5VideoData.youtubePlayerObj.setVolume( checkCurrentVolume + increment );
			}
			if( isMuted ){
			    html5VideoData.youtubePlayerObj.unMute();
		    }
		break;
	}
}

/* ! --[ F - video controls reactions ]--- */
function videoControlReact(context){
	
	var playerType = context.playerType; // Vimeo | YouTube | HTML5-MP4
	
	/*
	html5VideoData.html5mp4VPlayerAPI = 				null;
	html5VideoData.html5mp4VPlayerAPIPlayStatus = 		"Unplayed";
	html5VideoData.html5mp4VPlayerMuteStatus = 			"UnMuted";
	html5VideoData.html5mp4VPlayerCaptionSelected = 	"x";
	*/
	
	//console.log("play tag");
	console.log("videoControlReact action = " + context.action);
	
	var langPackVideoAssistPath = langPack.ui.mediaViewer.videoAssistive;
	
	switch( context.action ){
	    case "Play" :
	    	switch( context.playerType ){
				case "Vimeo" :
					//var targetControlState = $(this).attr( "data-videoAssistiveControlState" ); // "Play"
			    	if( html5VideoData.vmPlayerAPIPlayStatus != "Playing" ){
				    	html5VideoData.vmPlayerAPI.play().then(function() {
						    // the video was played
						    //console.log("play tag");
						    html5VideoData.vmPlayerAPIPlayStatus = "Playing";
						    $('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
						    $('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
						}).catch(function(error) {
						    switch( error.name ){
						        case 'PasswordError':
						            // the video is password-protected and the viewer needs to enter the
						            // password first
						        break;
						        case 'PrivacyError':
						            // the video is private
						         break;
						        default:
						            // some other error occurred
						        break;
						    }
						});
			    	}else{
				    	html5VideoData.vmPlayerAPIPlayStatus = "Playing";
						$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
			    	}
				break;
				case "YouTube" :
					html5VideoData.youtubePlayerObj.playVideo();
					$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
					$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
				break;
				case "HTML5-MP4" :
					if( html5VideoData.html5mp4VPlayerAPIPlayStatus != "Playing" ){
				    	html5VideoData.html5mp4VPlayerAPI.play();
					    html5VideoData.html5mp4VPlayerAPIPlayStatus = "Playing";
					    $('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
					    $('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
			    	}else{
				    	html5VideoData.html5mp4VPlayerAPIPlayStatus = "Playing";
						$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Pause" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.pause );
			    	}
				break;
			}
	    break;
	    case "Pause" :
	    	switch( context.playerType ){
				case "Vimeo" :
					//var targetControlState = $(this).attr( "data-videoAssistiveControlState" ); // "Play"
			    	if( html5VideoData.vmPlayerAPIPlayStatus != "Paused" ){
				    	html5VideoData.vmPlayerAPI.pause().then(function() {
						    // the video was played
						    //console.log("play tag");
						    html5VideoData.vmPlayerAPIPlayStatus = "Paused";
					    	$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
							$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
						}).catch(function(error) {
						    switch( error.name ){
						        default:
						            // some other error occurred
						        break;
						    }
						});
					}else{
				    	html5VideoData.vmPlayerAPIPlayStatus = "Paused";
					    $('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
			    	}
				break;
				case "YouTube" :
					html5VideoData.youtubePlayerObj.pauseVideo();
					$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
					$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
				break;
				case "HTML5-MP4" :
					if( html5VideoData.html5mp4VPlayerAPIPlayStatus != "Paused" ){
				    	html5VideoData.html5mp4VPlayerAPI.pause();
					    html5VideoData.html5mp4VPlayerAPIPlayStatus = "Paused";
					    $('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
					    $('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
			    	}else{
				    	html5VideoData.html5mp4VPlayerAPIPlayStatus = "Paused";
						$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
			    	}
				break;
			}
	    break;
	    case "Ended" :
	    	switch( context.playerType ){
				case "Vimeo" :
					//var targetControlState = $(this).attr( "data-videoAssistiveControlState" ); // "Play"
			    	if( html5VideoData.vmPlayerAPIPlayStatus == "Playing" || html5VideoData.vmPlayerAPIPlayStatus == "Paused" ){
				    	html5VideoData.vmPlayerAPIPlayStatus = "Ended";
				    	$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
					}
				break;
				case "HTML5-MP4" :
					if( html5VideoData.html5mp4VPlayerAPIPlayStatus == "Playing" || html5VideoData.html5mp4VPlayerAPIPlayStatus == "Paused" ){
				    	html5VideoData.html5mp4VPlayerAPIPlayStatus = "Ended";
				    	$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
						$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.play );
					}
				break;
			}
		break;
	    case "Restart" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					html5VideoData.vmPlayerAPI.setCurrentTime( 0 ).then(function(seconds) {
					    // seconds = the actual time that the player seeked to
					}).catch(function(error) {
					    switch( error.name ){
					        case 'RangeError':
					            // the time was less than 0 or greater than the video?s duration
					        break;
					        default:
					            // some other error occurred
					        break;
					    }
					});
				break;
				case "YouTube" :
					html5VideoData.youtubePlayerObj.seekTo( 0 , true );
				break;
				case "HTML5-MP4" :
					html5VideoData.html5mp4VPlayerAPI.seek( 0 );
				break;
			}
	    break;
	    case "VolumeChange" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					//console.log("vol change context.newVolume = " + context.newVolume);
			    	if( html5VideoData.html5mp4VPlayerMuteStatus == "Muted" ){
					    html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
					    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
					    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
			    	}
			    	html5VideoData.vmPlayerCurrentVolume = context.newVolume;
				break;
				case "HTML5-MP4" :
					
					if( html5VideoData.html5mp4VPlayerAPI.isMuted() ){
						console.log("IS MUTED");
						//html5VideoData.html5mp4VPlayerAPI.setVolume(0);
						//html5VideoData.html5mp4VPlayerMuteLock = true;
						html5VideoData.html5mp4VPlayerMuteStatus = "Muted";
						$('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "UnMute" );
						$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.unmute );
						
					}else{
						//console.log("BBBBBBBB");
						console.log("IS NOT MUTED");
						if( html5VideoData.html5mp4VPlayerMuteLock ){
							//console.log("AAAAAAAAA");
							//html5VideoData.html5mp4VPlayerAPI.toggleMute();
							html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
							$('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
							$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
					    	html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume();
					    	html5VideoData.html5mp4VPlayerMuteLock = false;
						}else{
							//console.log("BBBBBBBB");
							//html5VideoData.html5mp4VPlayerAPI.toggleMute();
							html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
							$('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
							$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
					    	html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume();	
						}
						
					}
					
					/*
					var allowVolChangeAction = true;
					if( html5VideoData.html5mp4VPlayerAssistiveVolChange ){
						console.log("IS ASSISTIVE VOL CHANGE");
						allowVolChangeAction = false;
					}else{
						console.log("IS NOT ASSISTIVE VOL CHANGE")
						//allowVolChangeAction = true;
						//html5VideoData.html5mp4VPlayerMuteLock = false;
					}
					
					// html5VideoData.html5mp4VPlayerAPI.isMuted();
					// html5VideoData.html5mp4VPlayerAPI.toggleMute();
					
					if( html5VideoData.html5mp4VPlayerMuteLock ){
						//if( html5VideoData.html5mp4VPlayerAssistiveVolChange ){
							
						//}
						//console.log("AAAAAAAAA");
						allowVolChangeAction = false;
					}else{
						//console.log("BBBBBBBB");
						
					}
					
					if( html5VideoData.html5mp4VPlayerAPI.isMuted() ){
						console.log("IS MUTED");
					}else{
						//console.log("BBBBBBBB");
						console.log("IS NOT MUTED");
					}
					
					
					// if vol is 0, should activate mute status
					
					if( allowVolChangeAction ){
						if( html5VideoData.html5mp4VPlayerMuteStatus == "Muted" ){
							//console.log("is muted");
						    html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
						    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
						    $('[data-videoAssistiveControl="Mute-Unmute"]').text( "Mute" );
				    	}
				    	html5VideoData.html5mp4VPlayerCurrentVolume = context.newVolume;
					}
					
					*/
					html5VideoData.html5mp4VPlayerAssistiveVolChange = false;
				break;
			}
	    break;
	    case "VolumeDown" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					// vimeo provides volume data
					//console.log("vol down context.newVolume = " + context.newVolume);
			    	if( html5VideoData.vmPlayerMuteStatus == "Muted" ){
				    	html5VideoData.vmPlayerAPI.setVolume( html5VideoData.vmPlayerUnMuteVolume ).then(function(volume) {
						    // volume was set
						    html5VideoData.vmPlayerMuteStatus = "UnMuted";
						    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
						    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
						}).catch(function(error) {
						    switch (error.name) {
						        case 'RangeError':
						            // the volume was less than 0 or greater than 1
						        break;
						        default:
						            // some other error occurred
						        break;
						    }
						});
			    	}
			    	
			    	html5VideoData.vmPlayerAPI.getVolume().then(function(volume) {
					    // volume = the volume level of the player
					    html5VideoData.vmPlayerCurrentVolume = volume;
					}).catch(function(error) {
					    // an error occurred
					});
					if( html5VideoData.vmPlayerCurrentVolume > 0 ){
					    html5VideoData.vmPlayerAPI.setVolume( html5VideoData.vmPlayerCurrentVolume - 0.1 ).then(function(volume) {
						    // volume was set
						}).catch(function(error) {
						    switch (error.name) {
						        case 'RangeError':
						            // the volume was less than 0 or greater than 1
						        break;
						        default:
						            // some other error occurred
						        break;
						    }
						});
				    }
				break;
				case "YouTube" :
					ytVolumeControl({ "dir" : "Down" });
				break;
				case "HTML5-MP4" :
					
					html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume(); // 0-1 scale
					var scaledVolume = Math.ceil(html5VideoData.html5mp4VPlayerCurrentVolume * 10); // setting plyr volume is 0-10 scale
					// context.newVolume is not always sent...
					//var scaledVolume = Math.ceil(context.newVolume * 10); // setting plyr volume is 0-10 scale
					if( scaledVolume > 0 ){
						html5VideoData.html5mp4VPlayerAssistiveVolChange = true;
						if( html5VideoData.html5mp4VPlayerMuteLock ){
							html5VideoData.html5mp4VPlayerMuteLock = false;
						}else{
							
						}
						if( html5VideoData.html5mp4VPlayerMuteStatus == "Muted" ){
							var scaledUnMuteVolume = Math.ceil( html5VideoData.html5mp4VPlayerUnMuteVolume * 10 ); // setting plyr volume is 0-10 scale
					    	html5VideoData.html5mp4VPlayerAPI.setVolume( scaledUnMuteVolume );
						    html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
						    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
						    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
				    	}
				    	
				    	html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume(); // 0-1 scale
						var scaledVolume = Math.ceil(html5VideoData.html5mp4VPlayerCurrentVolume * 10); // setting plyr volume is 0-10 scale
						// context.newVolume is not always sent...
						//var scaledVolume = Math.ceil(context.newVolume * 10); // setting plyr volume is 0-10 scale
						//if( scaledVolume > 0 ){
					    html5VideoData.html5mp4VPlayerAPI.setVolume( scaledVolume - 1 );
				    }
				break;
			}
	    break;
	    case "VolumeUp" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					// vimeo provides volume data
					//console.log("vol up context.newVolume = " + context.newVolume);
			    	if( html5VideoData.vmPlayerMuteStatus == "Muted" ){
				    	html5VideoData.vmPlayerAPI.setVolume( html5VideoData.vmPlayerUnMuteVolume ).then(function(volume) {
						    // volume was set
						    html5VideoData.vmPlayerMuteStatus = "UnMuted";
						    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
						    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
						}).catch(function(error) {
						    switch (error.name) {
						        case 'RangeError':
						            // the volume was less than 0 or greater than 1
						        break;
						        default:
						            // some other error occurred
						        break;
						    }
						});
			    	}
			    
			    	html5VideoData.vmPlayerAPI.getVolume().then(function(volume) {
					    // volume = the volume level of the player
					    html5VideoData.vmPlayerCurrentVolume = volume;
					}).catch(function(error) {
					    // an error occurred
					});
					if( html5VideoData.vmPlayerCurrentVolume < 1 ){
					    html5VideoData.vmPlayerAPI.setVolume( html5VideoData.vmPlayerCurrentVolume + 0.1 ).then(function(volume) {
						    // volume was set
						}).catch(function(error) {
						    switch (error.name) {
						        case 'RangeError':
						            // the volume was less than 0 or greater than 1
						        break;
						        default:
						            // some other error occurred
						        break;
						    }
						});
				    }
				break;
				case "YouTube" :
					ytVolumeControl({ "dir" : "Up" });
				break;
				case "HTML5-MP4" :
					html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume(); // 0-1 scale
					var scaledVolume = Math.ceil(html5VideoData.html5mp4VPlayerCurrentVolume * 10); // setting plyr volume is 0-10 scale
					if( scaledVolume < 10 ){
						html5VideoData.html5mp4VPlayerAssistiveVolChange = true;
						if( html5VideoData.html5mp4VPlayerMuteLock ){
							html5VideoData.html5mp4VPlayerMuteLock = false;
						}else{
							
						}
						if( html5VideoData.html5mp4VPlayerMuteStatus == "Muted" ){
							var scaledUnMuteVolume = Math.ceil( html5VideoData.html5mp4VPlayerUnMuteVolume * 10 ); // setting plyr volume is 0-10 scale
					    	html5VideoData.html5mp4VPlayerAPI.setVolume( scaledUnMuteVolume );
						    html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
						    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
						    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
				    	}
						// context.newVolume is not always sent...
						//var scaledVolume = Math.ceil(context.newVolume * 10); // setting plyr volume is 0-10 scale
						//if( scaledVolume < 10 ){
					    html5VideoData.html5mp4VPlayerAPI.setVolume( scaledVolume + 1 );
				    }
				break;
			}
	    break;
	    case "Mute" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					html5VideoData.vmPlayerAPI.getVolume().then(function(volume) {
					    // volume = the volume level of the player
					    //html5VideoData.vmPlayerCurrentVolume = volume;
					    html5VideoData.vmPlayerUnMuteVolume = volume;
					}).catch(function(error) {
					    // an error occurred
					});
				    html5VideoData.vmPlayerAPI.setVolume( 0 ).then(function(volume) {
					    // volume was set
					    html5VideoData.vmPlayerMuteStatus = "Muted";
					    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "UnMute" );
					    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.unmute );
					}).catch(function(error) {
					    switch (error.name) {
					        case 'RangeError':
					            // the volume was less than 0 or greater than 1
					        break;
					        default:
					            // some other error occurred
					        break;
					    }
					});
				break;
				case "YouTube" :
					html5VideoData.youtubePlayerObj.mute();
				break;
				case "HTML5-MP4" :
					//html5VideoData.html5mp4VPlayerAPI.getVolume();
					console.log("domute");
					html5VideoData.html5mp4VPlayerMuteLock = true;
					html5VideoData.html5mp4VPlayerUnMuteVolume = html5VideoData.html5mp4VPlayerAPI.getVolume(); // 0-1 scale
				    //html5VideoData.html5mp4VPlayerAPI.setVolume( 0 ); // force to 0
				    html5VideoData.html5mp4VPlayerAPI.toggleMute();
					html5VideoData.html5mp4VPlayerMuteStatus = "Muted";
					$('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "UnMute" );
					$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.unmute );
				break;
			}
	    break;
	    case "UnMute" : // custom button only, not in vimeo player
	    	switch( context.playerType ){
				case "Vimeo" :
					html5VideoData.vmPlayerAPI.setVolume( html5VideoData.vmPlayerUnMuteVolume ).then(function(volume) {
					    // volume was set
					    html5VideoData.vmPlayerMuteStatus = "UnMuted";
					    $('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
					    $('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
					}).catch(function(error) {
					    switch (error.name) {
					        case 'RangeError':
					            // the volume was less than 0 or greater than 1
					        break;
					        default:
					            // some other error occurred
					        break;
					    }
					});
				break;
				case "YouTube" :
					html5VideoData.youtubePlayerObj.unMute();
				break;
				case "HTML5-MP4" :
					html5VideoData.html5mp4VPlayerMuteLock = false;
					var scaledUnMuteVolume = Math.ceil( html5VideoData.html5mp4VPlayerUnMuteVolume * 10 ); // setting plyr volume is 0-10 scale
					console.log( "html5VideoData.html5mp4VPlayerUnMuteVolume = " + html5VideoData.html5mp4VPlayerUnMuteVolume );
					console.log( "scaledVolume = " + scaledUnMuteVolume );
					//html5VideoData.html5mp4VPlayerAPI.setVolume( scaledUnMuteVolume );
					html5VideoData.html5mp4VPlayerAPI.toggleMute();
					html5VideoData.html5mp4VPlayerMuteStatus = "UnMuted";
					$('[data-videoAssistiveControl="Mute-Unmute"]').attr( "data-videoAssistiveControlState" , "Mute" );
					$('[data-videoAssistiveControl="Mute-Unmute"] .videoAssistiveControlLabel').html( langPackVideoAssistPath.mute );
				break;
			}
	    break;
	    case "CaptionSelectLaunch" : // customized handling of vimeo data
	    	console.log( "launch context.playerType = " + context.playerType );
	    	switch( context.playerType ){
				case "Vimeo" :
					showPopList({ 'vizAction' : "Show" , 'popMode' : "CaptionSelect" , 'playerType' : "Vimeo" });
					$('.videoAssistiveControl').addClass("disabled");
				break;
				case "YouTube" :
					showPopList({ 'vizAction' : "Show" , 'popMode' : "CaptionSelect" , 'playerType' : "YouTube" });
					$('.videoAssistiveControl').addClass("disabled");
				break;
				case "HTML5-MP4" :
					showPopList({ 'vizAction' : "Show" , 'popMode' : "CaptionSelect" , 'playerType' : "HTML5-MP4" });
					$('.videoAssistiveControl').addClass("disabled");
				break;
			}
	    break;
	    case "CaptionSelect" : // caption select
	    	console.log( "select context.playerType = " + context.playerType );
	    	switch( context.playerType ){
				case "Vimeo" :
					$('.popListItem').removeClass( "selected" );
					//$(this).addClass( "selected" );
					//context.popListItem.addClass( "selected" );
					var passedLanguageSelection = context.languageSelection;
					var popListItemTarget = null;
					//console.log( "passedLanguageSelection = " + passedLanguageSelection );
					if( passedLanguageSelection == null ){
						//popListItemTarget = $('[data-popListLangShort="x"]');
						html5VideoData.vmPlayerCaptionSelected = "x";
					}else{
						popListItemTarget = $('[data-popListLangShort="' + passedLanguageSelection + '"]');
						html5VideoData.vmPlayerCaptionSelected = popListItemTarget.attr( "data-popListLangShort" );
					}
					//popListItemTarget.addClass( "selected" );
					//html5VideoData.vmPlayerCaptionSelected = popListItemTarget.attr( "data-popListItemLabel" );
					//html5VideoData.vmPlayerCaptionSelected = popListItemTarget.attr( "data-popListLangShort" );
					//console.log( 'popListItemTarget.attr( "data-popListItemLabel" ) = ' + popListItemTarget.attr( "data-popListItemLabel" ) );
					//if( html5VideoData.vmPlayerCaptionSelected != "None" ){
					if( html5VideoData.vmPlayerCaptionSelected != "x" ){
						$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.on + ")" );
						html5VideoData.vmPlayerAPI.enableTextTrack( popListItemTarget.attr( "data-popListLangShort" ) ).then(function(track) {
						    // track.language = the iso code for the language
						    // track.kind = 'captions' or 'subtitles'
						    // track.label = the human-readable label
						}).catch(function(error) {
						    switch (error.name) {
						        case 'InvalidTrackLanguageError':
						            // no track was available with the specified language
						            break;
						
						        case 'InvalidTrackError':
						            // no track was available with the specified language and kind
						            break;
						
						        default:
						            // some other error occurred
						            break;
						    }
						});
					}else{
						$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")" );
						html5VideoData.vmPlayerAPI.disableTextTrack().then(function() {
						    // the track was disabled
						}).catch(function(error) {
						    // an error occurred
						});
					}
					$( '#videoAssistiveControlsPopList' ).removeClass( "popListOpen" );
					$('.videoAssistiveControl').removeClass("disabled");
				break;
				case "YouTube" :
					$('.popListItem').removeClass( "selected" );
					var passedLanguageSelection = context.languageSelection;
					var popListItemTarget = null;
					if( passedLanguageSelection == null ){
						html5VideoData.youtubeCCLangSelected = "x";
					}else{
						popListItemTarget = $('[data-popListLangShort="' + passedLanguageSelection + '"]');
						html5VideoData.youtubeCCLangSelected = popListItemTarget.attr( "data-popListLangShort" );
					}
					setYTCCLanguage({ 'langCode' : html5VideoData.youtubeCCLangSelected });
					$( '#videoAssistiveControlsPopList' ).removeClass( "popListOpen" );
					$('.videoAssistiveControl').removeClass("disabled");
				break;
				case "HTML5-MP4" :
					//*
					$('.popListItem').removeClass( "selected" );
					var passedLanguageSelection = context.languageSelection;
					var popListItemTarget = null;
					if( passedLanguageSelection == null ){
						html5VideoData.html5mp4VPlayerCaptionSelected = "x";
					}else{
						popListItemTarget = $('[data-popListLangShort="' + passedLanguageSelection + '"]');
						html5VideoData.html5mp4VPlayerCaptionSelected = popListItemTarget.attr( "data-popListLangShort" );
					}
					if( html5VideoData.html5mp4VPlayerCaptionSelected != "x" ){
						$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.on + ")" );
						//html5VideoData.html5mp4VPlayerAPI.enableTextTrack( popListItemTarget.attr( "data-popListLangShort" ) );
					}else{
						$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")" );
						//html5VideoData.html5mp4VPlayerAPI.disableTextTrack();
					}
					
					if( $( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == "true" ){
						//captionStatus = "CC (On)";
						//$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').text( "CC (On)" );
						//html5VideoData.html5mp4VPlayerCaptionSelected = "x"
					}else{
						//$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').text( "CC (Off)" );
						//html5VideoData.html5mp4VPlayerCaptionSelected = "x"
					}
					
					if( html5VideoData.html5mp4VPlayerCaptionSelected == "x" &&
					$( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == "true" ){
						html5VideoData.html5mp4VPlayerAPI.toggleCaptions();
					}
					
					//console.log( "html5VideoData.html5mp4VPlayerCaptionSelected = " + html5VideoData.html5mp4VPlayerCaptionSelected );
					//console.log( "aria pressed = " + $( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) );
					
					if( html5VideoData.html5mp4VPlayerCaptionSelected != "x" &&
					$( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == "false" || 
					$( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == undefined || 
					$( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == null ){
						//console.log( "selected lang = " + passedLanguageSelection );
						html5VideoData.html5mp4VPlayerAPI.toggleCaptions();
					}
					
					$( '#videoAssistiveControlsPopList' ).removeClass( "popListOpen" );
					$('.videoAssistiveControl').removeClass("disabled");
					//*/
				break;
			}
	    break;
	    case "FullScreen" : // html5/js method of fullscreen api
	    	switch( context.playerType ){
				case "Vimeo" :
					if( BigScreen.enabled ){
						//BigScreen.request( element , onEnter , onExit , onError );
						//console.log("BSE");
						BigScreen.request( $('#vmPlayer')[0] );
						//BigScreen.request( vmPlayer );
						// You could also use .toggle(element, onEnter, onExit, onError)
					}else {
						// fallback for browsers that don't support full screen
						//console.log("no BSE");
					}
				break;
				case "YouTube" :
					if( BigScreen.enabled ){
						//BigScreen.request( element , onEnter , onExit , onError );
						//console.log("BSE");
						BigScreen.request( $('#ytPlayer')[0] );
						//BigScreen.request( vmPlayer );
						// You could also use .toggle(element, onEnter, onExit, onError)
					}else {
						// fallback for browsers that don't support full screen
						//console.log("no BSE");
					}
				break;
				case "HTML5-MP4" :
					//if( BigScreen.enabled ){
						//BigScreen.request( html5VideoData.html5mp4VPlayerAPI );
					//}else {
						// fallback for browsers that don't support full screen
						//console.log("no BSE");
						html5VideoData.html5mp4VPlayerAPI.toggleFullscreen();
					//}
				break;
			}
	    break;
	}
}

//! F.Focus.Set sandbox contents focus
function setFocusSandbox() {
	$( '#mainSandboxGuts' )[0].contentWindow.focus();
}
//! F.Focus.Update Focus
function updateFocus(context){
	var action = context.action;
	$('.focused').removeClass( 'focused' );
	switch(action){
		case "Update" : 
			$(document.activeElement).addClass( 'focused' );
			focusControl.lastFocusedElement = $(document.activeElement);
			focusControl.focusedLit = 					true;
		break;
		case "Purge" : 
			$(document.activeElement).removeClass( 'focused' ); // ensure removal(?)
			focusControl.updateFocusAfterAction = "";
			//focusControl.lastFocusedElement = $(document.activeElement);
			//focusControl.focusedLit = 					false;
		break;
	}
}

// ! F.HotSpot - trigger handler sent from clicking markers on map
function triggerHSMarker( event ){
	///console.log("eeee");
	// finds the newly(temporarily)-drawn markerIDPolyp class that is inside of the (hidden) tooltip hotspot popup data and grabs the marker id attr
	// triggerHSMarker({ 'markerID' : $('.markerIDPolyp').attr('data-hsMarkerID') });
	//var event = context.event;
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	
	var markerID = Number( event.id ) + 1; // context.markerID; // number
	//console.log( "id = " + event.id );
	
	//console.log("evt = " + JSON.stringify(event) );
	//console.log("thsmf event : ");
	//console.log( JSON.stringify( event , null , 4 ) );
	
	/*
	if( $(event).hasClass("HSNode") ){
		alert( "hsnode id a = " + $(event).attr("data-hsNodeID") );
		alert( "hsnode id aa = " + $(this).attr("data-hsNodeID") );
	}else{
		alert( "hsnode id b = " + $(event).closest('.HSNode').attr("data-hsNodeID") );
		alert( "hsnode id bb = " + $(event.target).closest('.HSNode').attr("data-hsNodeID") );
	}
	/*/
	
	//*
	//var markerID = $('.markerIDPolyp').attr('data-hsMarkerID'); // context.markerID; // number
	//console.log( markerID); 
	
	//console.log("thsmf event : ");
	//console.log( JSON.stringify( event , null , 4 ) );
	
	
	
	//var grabID = $(this).attr('id');
	//var grabID = $(this).attr('id');
	//var splitID = grabID.split('_');
	//var idNum = Number( splitID[1] );
	//var grabMarkerType = currentBasePage_Content_HotSpotArray[idNum - 1].markerType;
	//$('.markerHiliteImage').css( 'opacity' , 0 );
	//$(this).find('.markerHiliteImage').css( 'opacity' , 1 );
	//var alertBuilder = "";
	
	var markerAction = 			currentBasePage_Content_HotSpotArray[ markerID-1 ].markerAction;
	var markerType = 				currentBasePage_Content_HotSpotArray[ markerID-1 ].markerType;
	var markerVariant = 			currentBasePage_Content_HotSpotArray[ markerID-1 ].markerVariant;
	//if( $(this).hasClass( "markerType_MediaViewer" ) ){
	if( markerAction == "MediaViewer" ){
	//if( $(event.target).hasClass( "markerType_MediaViewer" ) ){
		
		//console.log( "mv : " );
		//console.log( JSON.stringify( event , null , 4 ) );
		//console.log( "mvt : " );
		//console.log( JSON.stringify( event.target , null , 4 ) );
		
		//console.log( event );
		
		//var passEvt;
		//if( !$(event.target).hasClass( 'hotSpotMarker' ) ){
			//passEvt = $(event.target).closest( '.hotSpotMarker' );
			//console.log("izza");
		//}else{
			//passEvt = event;
			//console.log("izzb");
		//}
		//level4LightboxLauncher(passEvt);
		//level4LightboxLauncher({ 'event' : event });
		switch( markerVariant ){
			case "Basic" : // hotspot still image launcher
				
			break;
			case "Document" : // hotspot document (currently pdf) launcher
			
			break;
			case "Vimeo" : // hotspot vimeo launcher
			
			break;
			case "Youtube" : // hotspot yto launcher
			
			break;
			case "HTML5Video" : // hotspot html5 video launcher
			
			break;
		}
		//console.log("hoot");
		level4LightboxLauncher({ 'event' : event , 'eventType' : "hsMarker" , 'markerID' : markerID ,  });
		
		
		//alertBuilder += currentBasePage_Content_HotSpotArray[idNum - 1].launchResponse;
		//alertBuilder += "\n\n";
		//alertBuilder += "This will launch a standard media viewer popup.  Map will be obscured by popup, but selected hotspot element will remain highlighted.";
	}
	//if( grabMarkerType == "SubSequence" ){
	//if( $(event.target).hasClass( "markerType_SubSequence" ) ){
	//if( $(this).hasClass( "markerType_SubSequence" ) ){
	if( markerAction == "SubSequence" ){
		//currentBasePage_Content_SubSequenceCurrentSequence = idNum; //(launchedMediaItem + 1);
		//console.log( 'idNum + 1 = ' + (idNum + 1) );
		//level2LightboxLauncher({ 'event' : event });
		level2LightboxLauncher({ 'event' : event , 'eventType' : "hsMarker" , 'markerID' : markerID });
		
		//alertBuilder += currentBasePage_Content_HotSpotArray[idNum - 1].launchResponse;
		//alertBuilder += "\n\n";
		//alertBuilder += "This will launch a standard subsequence popup.  Map will be obscured by popup, but selected hotspot element will remain highlighted.";
	}
	//alert(alertBuilder);
	//*/
}

// ! F.Core.User name sort - reorder "last, first" user name data ---
function sortUserName(userNameBase, sortMethod){
	var sortedName;
	var userNameSplit;
	if( sortMethod == 'Unchanged' ){ // as given
		sortedName = userNameBase;
	}else if( sortMethod == 'LCSF' ){ // Last, Comma, Space, First
		userNameSplit = userNameBase.split(", ");
		sortedName = userNameSplit[1] + " " + arr[0];
		if( userNameSplit.length == 3 ){
        	sortedName += ', ' + userNameSplit[2];
		} 
	}
    return sortedName;
}

// ! F.Core.WebFont force redraw ---
function webFontForceRedraw(passedElement){
	// removes a blank-content class that has been added to some elements, to force re-render of intended icon font :before content
	$(passedElement).removeClass('webFontForceRedrawClass');
}

// ! F.Core.Maximizer Delay Relay ---
function maximizerDelayRelay(context){
	//UIButtons_Supressed = true;
	var postAction = "";
	if( context != undefined && context.postAction != undefined){
		postAction = context.postAction;
	}
	clearTimeout(maximizerDelayTimer);
	//console.log( "delay relay postAction = " + postAction );
	maximizerDelayTimer = setTimeout(function(){
		if( postAction != undefined && postAction != "" ){
			//console.log( "delay relay postAction exists" );
			if( postAction == "HideWaitCover" ){
				//console.log( "delay relay postAction = HideWaitCover" );
				maximizeCETActivityContentHeight({ 'postAction' : "HideWaitCover" }); 
			}
		}else{
			maximizeCETActivityContentHeight(); 
		}
		rebuildMegazoomDelayRelay(); // updated megazoom has scaling on resize "built in", so work on disabling this?
	},500);
}

// ! F.Core.Check screen orientation---
function checkMobileOrientation(){
	// this also fires on desktop -- isolate?
  var o = window.orientation;
  ios7HeightShimToggle = 				false;
  if(o != 90 && o != -90){ // portrait
  	$('html').removeClass('landscape');
  	$('html').addClass('portrait');
    if( $('html').hasClass('iphone') || $('html').hasClass('ipod') ){
    	//enlargementItemPage_Nav_MidNumRange = 1;
		//enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page
    	//if(lightBoxViewerTool == "image-zoom-basic"){
			//$('.enlargementItemPageNav-MidGroup').hide();
			//enlargementItemPage_Nav_MidNumRange = 1;
			//enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page
	  	//}
    }
    
    //if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "about" || lightBoxDialog_Level3_EngagedContentType == "dashboard"){
		//sideNavDropListClosedH = $('.sideNavDropList .menuSelectedLabel').outerHeight(true);
		//console.log('sndch = ' + sideNavDropListClosedH);
		//$('.sideNavDropList .dropListContainer').css('height', (sideNavDropListClosedH) + 'px');
		//$('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
	//}
    
  }else{ // landscape, or default for desktop (?)
  	$('html').removeClass('portrait');
  	$('html').addClass('landscape');
    if( $('html').hasClass('ipad') && $('html').hasClass('ios7') && $('html').hasClass('mobilesafari') ){
    	ios7HeightShimToggle = 				true;
    }
    //if(lightBoxViewerTool == "image-zoom-basic"){
		//$('.enlargementItemPageNav-MidGroup').show();
		//enlargementItemPage_Nav_MidNumRange = 3;
		//enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page
  	//}
  }
  
  maximizerDelayRelay();
  //$('html').scrollTop = 0;
  //$('body').scrollTop = 0;
  window.scrollTo(0,0);
  //if(lightBoxViewerTool == "image-zoom-basic"){
	  //newEnlargementItemPageAction(true); // rebuild the zoomer to fit properly, difficult to resize directly
  //}
  //$('#CET-Activity-Container').scrollTop = 0;
  //alert("orient!");
  //newOrientationChange = false;
}

// ! F.Debugger1.Launch---
function debugger1Setup(){
	$("#CET-Activity-Content-Title-Bar").addClass('debugger1ClickEnabled');
	//$(document).off("click", "#CET-Activity-Content-Title-Bar");
	//$(document).on("click", "#CET-Activity-Content-Title-Bar", function(event){
	$(document).off("click", ".debugger1ClickEnabled #CET-Activity-Content-Title-Text");
	$(document).on("click", ".debugger1ClickEnabled #CET-Activity-Content-Title-Text", function(event){
		
		/*
		 if( $(event.target).hasClass('CET-Activity-Content-Title-PageTypeIndicator-Icon') || $(event.target).attr('id') = 'CET-Activity-Content-Title-Text' ){
		   helpSideNavItemActive = $(event.target).closest('li').index() + 1;
	    }else{
		    helpSideNavItemActive = $(event.target).index() + 1;
	    }
		*/
		
		if(debugga1Status == "remax"){
			maximizeCETActivityContentHeight();
			//$('#CET-Activity-Container').css('width', $('#CET-Activity-Container').width() - 1);
			//$('#CET-Activity-Container').css('height', $('#CET-Activity-Container').height() - 1);
			//$('#lightBoxDialog-Level3').closest('.ui-dialog')
			//$('#lightBoxDialog-Level4').closest('.ui-dialog').css('width', ($('#lightBoxDialog-Level4').closest('.ui-dialog').width() - 1) + 'px');
			//$('#lightBoxDialog-Level4').closest('.ui-dialog').css('height', ($('#lightBoxDialog-Level4').closest('.ui-dialog').height() + 2) + 'px');
		}else if( debugga1Status == "pageinfo" || debugga1Status == "Default" ){
			if( event.altKey && event.shiftKey ){
				var correctOut = '';
				var outNum;
				if(currentBasePage_Assessment_Present){
					var displayOutputStatusList = '';
					for(var m = 0 ; m < currentBasePage_Assessment_OutputList.length ; m++){
						displayOutputStatusList += ( " - " + currentBasePage_Assessment_OutputList[m].outputStatus + " \n" );
					}
					if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
						//for(var m = 0 ; m < currentBasePage_Assessment_OutputList.length ; m++){
							//var checkListForCorrectOutput = currentBasePage_Assessment_OutputList[m].outputStatus;
							/*
							if(checkListForCorrectOutput == "Correct"){
								outNum = m;
								break;
							}
							*/
						//}
						//correctOut = "\n\n Correct Choice Number: \n " + (outNum + 1);
					}else if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" ){
						//var correctItemList = [];
						//for(var m = 0 ; m < currentBasePage_Assessment_OutputList.length ; m++){
							//pageAssessmentSelectionArray[0]
							//currentBasePage_Assessment_OutputList[m].choiceID
							//var checkListForCorrectOutput = currentBasePage_Assessment_OutputList[m].outputStatus;
							//if( checkListForCorrectOutput == "Correct" ){
								//correctItemList.push(m + 1);
							//}
						//}
						//correctOut = "\n\n Output Status List: \n " + correctItemList.join(',');
					}
				}
				//alert(":::[ DEBUG 1 ]::: \n\n Currently loaded: \n " + activeDataSource + correctOut);
				//alert( ":::[ DEBUG 1 ]::: \n\n Currently Loaded: \n " + activeDataSource + " \n\n Current Choice Status List: \n" + displayOutputStatusList );
				alert( ":::[ DEBUG 1 ]::: \n\n Current Step ID : \n " + activeDataSource.match(/\d+/g).map(Number) );
			}
		}else if(debugga1Status == "clipboardviewstatus"){
			var suspendDataString = '';
			var clipboardGroupsViewStatusChain = ''; // empty cb view status chain
			for( var i = 0 ; i < courseStatusObject.courseModuleGroupStack.length ; i++ ){
				for( var j = 0 ; j < courseStatusObject.courseModuleGroupStack[i].length ; j++ ){
					if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ 
						var clipboardGroup = '';
						for( var k = 0 ; k < courseStatusObject.courseModuleGroupStack[i][j].clipboardElementViewStatus.length ; k++ ){
							if( k > 0 ){
								clipboardGroup += '-'; // separate the individual activity path string
							}
							for( var m = 0 ; m < courseStatusObject.courseModuleGroupStack[i][j].clipboardElementViewStatus[k].length ; m++ ){
								clipboardGroup += courseStatusObject.courseModuleGroupStack[i][j].clipboardElementViewStatus[k][m];
							}
						}
					}
					if( i > 0 ){
						clipboardGroupsViewStatusChain += '_'; // separate each group of activity path strings
					}
					clipboardGroupsViewStatusChain += clipboardGroup;
				}
				suspendDataString += clipboardGroupsViewStatusChain;
				alert(suspendDataString);
			}	
		}			
						//overviewContinuePointerIncrementer++;
						//minimumContinuePointerIndex++;
						//var courseProgressStatus = courseStatusObject.courseModuleGroupStack[i][j].moduleProgressStatus;	
				
			/*	
			for( var i = 0 ; i < sideNavLearningModuleTotalCount ; i++ ){	
				if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ 
					var clipboardGroup = '';
					for( var j = 0 ; j < courseStatusObject.courseModuleGroupStack[i].clipboardElementViewStatus.length ; j++ ){
						if( j > 0 ){
							clipboardGroup += '-'; // separate the individual activity path string
						}
						for( var k = 0 ; k < courseStatusObject.courseModuleGroupStack[i].clipboardElementViewStatus[j].length ; k++ ){
							clipboardGroup += courseStatusObject.courseModuleGroupStack[i].clipboardElementViewStatus[j][k];
						}
					}
				}
				if( i > 0 ){
					clipboardGroupsViewStatusChain += '_'; // separate each group of activity path strings
				}
				clipboardGroupsViewStatusChain += clipboardGroup;
			}
			suspendDataString += clipboardGroupsViewStatusChain;
			alert(suspendDataString);
		}
		*/
	});
}
// ! F.Core.UI.StepBackButton.Set ---
function stepBackButtonSet( context ){
	var setIcon = 	context.setIcon; // Dashboard | StepBackward
	var iconOverride = true;
	if( setIcon == undefined ){
		iconOverride = false;
	}
	var setLabel = 	context.setLabel; // RETURN | BACK
	var labelOverride = true;
	if( setLabel == undefined ){
		labelOverride = false;
	}
	var setAction = 	context.setAction; // Dashboard | StepBackward
	switch( setAction ){
		case "Dashboard" : 
			//console.log("aaa");
			if( !iconOverride ){
				//console.log("bbb");
				$('#navItem-back .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_dashboard)[0].data);
			}
			$('#navItem-back').attr( 'data-navItemAction' , 'Dashboard' );
			if( !labelOverride ){
				setLabel = "RETURN";
			}
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.backButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavBack"]' ) ,
				'srcData' : 		langPack.ui.globalNav.backButton.return
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavBackSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.backButton.backReturn
			});
			
			//$('#navItem-back .CET-NavItem-Text .navButtonLabel').text( setLabel );
			//$('#navItem-back .accessBackContextInstruction').text( " : Use space or return to return to the StepStone Dashboard." );
		break;
		case "StepBackward" : 
			//console.log("ccc");
			if( !iconOverride ){
				//console.log("ddd");
				$('#navItem-back .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_left)[0].data);
			}
			$('#navItem-back').attr( 'data-navItemAction' , 'StepBackward' );
			if( !labelOverride ){
				setLabel = "BACK";
			}
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.backButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavBack"]' ) ,
				'srcData' : 		langPack.ui.globalNav.backButton.back
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavBackSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.backButton.back
			});
			
			//$('#navItem-back .CET-NavItem-Text .navButtonLabel').text( setLabel );
			//$('#navItem-back .accessBackContextInstruction').text( " : Use space or return to step backward." );
		break;
	}
}

// ! F.Core.UI.BottomCornerButton.Enable ---
function continueButtonEnabler(){
	//console.log("continueEnabler");
	$('#navItem-continue').css('cursor','pointer');
	$('#navItem-continue div').css('color', 'white');
	$('#navItem-continue').css('background-color', skinPrimaryColor);	
	$('#navItem-continue').hover(
		function(){  
			//$(this).addClass('allowContinueHover');  
			//$('#navItem-continue.allowContinueHover').css('background-color', skinSecondaryColor);	
			$(this).css('background-color', skinSecondaryColor);	
		},function(){  
			//$(this).removeClass('allowContinueHover');  
			$(this).css('background-color', skinPrimaryColor);	
		}  
	);
	
	$('#navItem-continue').attr( 'data-buttonAction' , "Enabled" );
	
}
// ! F.Core.UI.BottomCornerButton.Disable ---
function continueButtonDisabler( context ){
	var returnData = {};
	if( context.previewAssessmentResult != undefined && context.previewAssessmentResult == true ){
		if( context.passedEvent.altKey && context.passedEvent.shiftKey ){
			alert( ":::[ Step Asssessment Result Preview ]::: \n\n Current Step ID : \n " + activeDataSource.match(/\d+/g).map(Number) + "\n\n Status Result : \n " + previewStepAssessmentResult({ 'resultDataType' : "Status" }) + "\n\n Score Result : \n " + previewStepAssessmentResult({ 'resultDataType' : "Score" }) );
			returnData.showAssessmentResultPreview = true;
			return returnData; // optional use
		}
	}
	// if not returning data, contingue performing disabler action
	var disablerOn = false;
	
	if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
		disablerOn = true;
	}
	if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
		if( $( 'body' ).attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
			disablerOn = true;
		}else{
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice":
				case "Multiple Answer - Multiple Choice":
					
				break;
				case "Matching":
					// keep disabled if engagement with matching assessment has already started but is not complete
					disablerOn = true;
				break;
				case "Ranking":
					//console.log("weep");
					// keep disabled if engagement with ranking assessment has already started but is not complete
					disablerOn = true;
				break;
			}
		}
	}
	if( disablerOn ){ 
		//console.log("continueDisabler2");
		//$('#navItem-continue').removeClass('allowContinueHover');  
		$('#navItem-continue').css('background-color', skinSecondaryColor);	
		$('#navItem-continue div').css( 'color', 'rgba(255,255,255,0.2)' );
		$(document).off("click", "#navItem-continue");
		$('#navItem-continue').off('mouseenter mouseleave'); // removes hover
		$('#navItem-continue').css( 'cursor', 'default' );
		$('#navItem-continue').attr( 'data-buttonAction' , "Disabled" );
	}
	returnData.showAssessmentResultPreview = false;
	return returnData; // optional use
}
// ! F.Preview Step Assessment Result ---
function previewStepAssessmentResult( context ){
	var resultDataType = context.resultDataType; // Status | Score
	// determine the assessment type
	var assessmentType = 	"SAMC";
	var checkStepData = 	courseModuleGroupedActive.split("_");
	var checkStep = 		Number(checkStepData[2]);
	var choiceUnitsPath = 	"";
	var handlingUnitsPath = "";
	var selectionArray = 	[];
	if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
		//assessmentType = 	"MAMC";
		choiceUnitsPath = 	currentBasePage_Assessment_OutputList;
		//handlingUnitsPath = currentBasePage_Assessment_SpecialHandlingData.data;
	}
	if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" ){
		assessmentType = 	"MAMC";
		choiceUnitsPath = 	currentBasePage_Assessment_OutputList;
		handlingUnitsPath = currentBasePage_Assessment_SpecialHandlingData.data;
	}
	if( currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
		assessmentType = 	"AMAMC";
		choiceUnitsPath = currentBasePage_Assessment_OutputList;
		handlingUnitsPath = currentBasePage_Assessment_SpecialHandlingData.data;
	}
	if( currentBasePage_Assessment_Type == "Write In - Field List" ){
		assessmentType = 	"WriteInFieldList";
		choiceUnitsPath = currentBasePage_Assessment_OutputList;
		handlingUnitsPath = currentBasePage_Assessment_SpecialHandlingData.data;
	}
	switch( resultDataType ){
		case "Status" : 
			// tally current assesssment status result
			
			// use the structure data, to allow for macros (full tally at conclusion step, etc.) later
			// some of the data used is or may be dependent on a currently loaded step, so review components and for now it is limited to on-step tests
			
			// can use pageAssessmentSelectionArray for now for all assessment types
			// pageAssessmentSelectionArray[0][0]
			// first zero should alsays be just that
			// second is the choice stack increment for samc, mamc, amamc.  
			// for write in, it is the value in each field.  "" if nothing entered
			
			// need to factor in the dirty/quasi stuff, nullify, 
			
			// in display for nullify, mention that it is nullify w/ incorrect's skin
			
			var resultStatus = "Unknown Status";
			
			switch( assessmentType ){
				case "SAMC" : 
					// selected (or nothing)
					//choiceUnitsPath = currentBasePage_Assessment_OutputList;
					cycleSAMCselections : 
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							selectionArray[0] = a;
							break cycleSAMCselections;
						}
					}
					masterJSONStorage.currentStepAssessmentResult.useResult = {};
					masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus = masterJSONStorage.currentStep.Assessment.outputs[selectionArray].outputStatus;
					resultStatus = masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus;
				break;
				case "MAMC" : 
					// selected, unselected (optional)
					/*
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							selectionArray.push( a );
						}
					}
					*/
					resultStatus = masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus;
				break;
				case "AMAMC" : 
					// selected, unselected (optional), pattern
					// need to check patterns, each has an ideal match, non-ideal match (optional, if exists), complete non-match (optional)
					/*
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							selectionArray.push( a );
						}
					}
					*/
					resultStatus = masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus;
				break;
				case "WriteInFieldList" : 
					// filled, unfilled (optional)
					
					// at least with write in (maybe others?) results are being tallied with each input field change
					/*
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] != "" ){
							selectionArray.push( a );
						}
					}
					*/
					resultStatus = masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus;
				break;
			}
			//authoringToolJSONStorage.pathStructure_Current.nodeMap.nodeMapUnits[checkStep].outputs
			
			//var resultStatus = masterJSONStorage.currentStepAssessmentResult.useResult.outputStatus;
			if( resultStatus == "Nullify" ){
				resultStatus += " (skinned as Incorrect)";
			}
			return resultStatus; //"Fake Status!";
		break;
		case "Score" : 
			// tally current assesssment score result
			var resultScore = "Not Scored"; // +0.00"; // "Fake Score!";
			switch( assessmentType ){
				case "SAMC" : 
					// selected (or nothing)
					cycleSAMCselections : 
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							selectionArray[0] = a;
							break cycleSAMCselections;
						}
					}
					if( masterJSONStorage.currentStep.Assessment.outputs[selectionArray].scoring != undefined ){
						resultScore = masterJSONStorage.currentStep.Assessment.outputs[selectionArray].scoring.selected;
					}
				break;
				case "MAMC" : 
					// selected, unselected (optional)
					/*
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							selectionArray.push(a);
						}
					}
					// if scoring is summed:
					// need to cycle choices (via choice id order)
					// if selection array has index of choice, tally the selected scoring value
					// if selection array does not have index of choice, and choice has unselected score value, tally this value
					//-----
					// if scoring is funneled, need to get the funneled result score
					
					console.log( "MAMC selectionArray =  " + selectionArray );
					
					var mamcScoreList = [];
					if( masterJSONStorage.currentStep.Assessment.scoring.captureMethod == "Sum Selections" ){
						for( var a = 0 ; a < masterJSONStorage.currentStep.Assessment.outputs.length ; a++ ){
							//console.log( "MAMC ouput cycle " + a + " = " + selectionArray );
							//if( selectionArray[a] == a ){
							if( selectionArray.indexOf(a) != -1 ){
								if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
									mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.selected );
								}
							}else{
								if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
									if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected != undefined ){
										mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected );
									}
								}
							}
						}
						console.log( "MAMC mamcScoreList =  " + mamcScoreList );
						resultScore = scoreListProcessor(mamcScoreList);
					}else{
						// use the funneled result function return
						resultScore = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
					}
					/*/
					
					resultScore = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
					
					
				break;
				case "AMAMC" : 
					// selected, unselected (optional), pattern
					// need to check patterns, each has an ideal match, non-ideal match (optional, if exists), complete non-match (optional)
					resultScore = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
					
				break;
				case "WriteInFieldList" : 
					// filled, unfilled (optional)
					// at least with write in and amamc (and mamc?) results are being tallied with each input field change
					resultScore = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
					
				break;
			}
			
			return resultScore;
		break;
	}
	/*
	// same as one in main funneld results processor.  need to consolidate.
	function scoreListProcessor(rawScoreList){
		for( var a = rawScoreList.length ; a >=0 ; a-- ){
		    if( rawScoreList[a] == "+0.00" || rawScoreList[a] == "-0.00" ){
		        rawScoreList.splice( a , 1);
		    }
		}
		//console.log( "rawScoreList =  " + rawScoreList.join(" ::: ") );
		var positiveList = 	[];
		var negativeList = 	[];
		for( var a = 0 ; a < rawScoreList.length ; a++ ){
			switch( rawScoreList[a].substring(0,1) ){
				case "+" : // sum positive adjustments first
					positiveList.push( rawScoreList[a].substr(1) );
				break;
				case "-" : // then subtract sum of negatives
					negativeList.push( rawScoreList[a].substr(1) );
				break;
			}
		}
		var sumPos = 	positiveList.reduce( sumFloat , 0 ); // sumFloat is a global function
		var sumNeg = 	negativeList.reduce( sumFloat , 0 );
		resultScore = (sumPos - sumNeg).toFixed(2);
		finalScore = "+0.00";
		//if( resultScore > baseLineScore ){ // this needed?
		if( String(resultScore).charAt(0) == "-" ){
			finalScore = String(resultScore);
		}else{
			finalScore = "+" + String(resultScore);
		}
		return finalScore;
	}
	*/
}
// ! F.Core.UI.BottomCornerButton.Handlers ---
function continueButtonUpdate( Icon , Label , ClickReact ){
	//console.log(Icon + " --- " + Label + " --- " + ClickReact);
	
	//console.log("BRB-ClickReact = " + ClickReact);
	
	//console.log();
	continueButtonDisabler({});
	var enableReaction = false;

	//$('#navItem-continue .CET-NavItem-Icon').removeClass('navItem-continue-Arrow-Up');
	//$('#navItem-continue .CET-NavItem-Icon').removeClass('navItem-continue-Arrow-Right');
	//$('#navItem-continue .CET-NavItem-Icon').removeClass('navItem-continue-Arrow-Down');
	//$('#navItem-continue .CET-NavItem-Icon').removeClass('navItem-continue-Arrow-Left');
	
	//$('#navItem-continue .CET-NavItem-Icon').addClass('navItem-continue-Arrow-' + Icon);
	
	switch( Icon ){ 
		case 'Up':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_up)[0].data);
		break;
		case 'Right':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_right)[0].data);
		break;
		case 'RightDouble':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.double_arrow1_right)[0].data);
		break;
		case 'Down':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_down)[0].data);
		break;
		case 'Left':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_left)[0].data);
		break;
		case 'Credits':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_credits)[0].data);
		break;
		case 'Course Assessment':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentcompleted)[0].data);
		break;
		case 'Course Survey':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursesurveycompleted)[0].data);
		break;
		case 'Course Certificate':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursecertificateavailable)[0].data);
		break;
		case 'Dashboard':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_dashboard)[0].data);
		break;
		case 'Finish':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_finish)[0].data);
		break;
		case 'Exit':
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_exit)[0].data);
		break;
		case 'Locked':
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.locked
			});
			$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
		break;
	}
	
	//$('#navItem-continue .CET-NavItem-Text .navButtonLabel').text(Label);
	
	//console.log(Icon + " --- " + Label + " --- " + ClickReact);
	
	//var disabledReactionList = ["FeedbackCheck", "StepForward", "ForceCorrect"];
	
	// for allowing multiple variants of disabled buttons
	var disabledReactionList = ["Disabled"];
	
	var currentSelection;
	//if(currentCourseModule !=	''){
	if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
		if( currentBasePage_Assessment_Present && pageAssessmentSelectionArray.length > 0 ){
			//console.log('indexofcheck1');
			if( pageAssessmentSelectionArray[0].indexOf("on") != -1 ){
				//enableReaction = true;
				currentSelection = pageAssessmentSelectionArray[0].indexOf("on");
				//break;
			}
		}
	}
	//console.log('indexofcheck2');
	//console.log("BEEF");
	// check if should be disabled
	if( disabledReactionList.indexOf( ClickReact ) == -1 ){
		//console.log("GEEF");
		enableReaction = true; 
		if( currentBasePage_Assessment_Requirement == "Correct" ){
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice":
					//console.log(currentSelection + "--- " + currentBasePage_Assessment_OutputList[currentSelection].outputStatus + " --- " + lightBoxDialog_Level1_Engaged );
					//if( currentBasePage_Assessment_OutputList[currentSelection].outputStatus != "Correct" && !lightBoxDialog_Level1_Engaged && currentBasePage_Assessment_FeedbackWasChecked ){
						//enableReaction = false;
						//currentBasePage_Assessment_FeedbackWasChecked = false;
					//}
				break;
				case "Multiple Answer - Multiple Choice":
					//
				break;
			}
		}
	}else{
		//console.log("MEEF");
		if( currentCourseModule != null ){ // for initial dashboard, before activity is selected
			//console.log("SEEF");
			if( !currentBasePage_Assessment_Present ){
				//console.log("WEEF");
				enableReaction = true;
				if( ClickReact == "Disabled" ){
					//console.log('wllok');
					ClickReact = "Redirect";
				}
			}
		}
	}
	
	if( ClickReact == "Disabled" ){
		//console.log("FEEF");
		if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
			//console.log("EEF");
			if( $( 'body' ).attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
				//console.log("TEEF");
				// don't let dashboard continue from locked status
			}else{
				// overrides for "pageAssessmentSelectionMade" function
				switch( currentBasePage_Assessment_Type ){
					case "Single Answer - Multiple Choice":
					case "Multiple Answer - Multiple Choice":
						//console.log("NEEF");
						enableReaction = true;
						//enableContinue = true;
						ClickReact = "StepForward";
					break;
					case "Matching":
						// keep disabled if engagement with matching assessment has already started but is not complete
					break;
					case "Ranking":
						//console.log("neep");
						// keep disabled if engagement with ranking assessment has already started but is not complete
					break;
				}
				
			}
		}else{
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"CONTINUE";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =		ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
		}
	}
	
	/*
	
	// this is from enablepagecontinue
	
	// ! [ vvv Continue Button vvv ]
	
	//console.log(continueAction);
	$('#navItem-continue').css('cursor','pointer');
	$('#navItem-continue div').css('color', 'white');
	$('#navItem-continue').hover(
		function(){  
			$(this).addClass('allowContinueHover');  
		},function(){  
			$(this).removeClass('allowContinueHover');  
		}  
	); 
	
	if(continueAction == "resumer" || continueAction == "forceForward"){
		//  (unused) --[ B - CBh - resumer || forceForward ]--- 
		$(document).off("click", "#navItem-continue");
		$(document).on("click", "#navItem-continue", function(event){
			revertLightboxes('resumer');
			disablePageContinueCheck(false);
		});
	}
	
	//if(continueAction == "forceForward"){ // should be performed AFTER any necessary feedback
		//  (unused) --[ B - CBh - forceForward ]--- 
		
		//$(document).off("click", "#navItem-continue");
		//$(document).on("click", "#navItem-continue", function(event){
			//console.log("newpage! === " + pageAssessmentSelectionResult.targetNode);
			//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
		//});
		
	//}
	
	
	
	if(continueAction == "feedbackCheck"){
		//  (unused) --[ B - CBh - feedbackCheck ]--- 
		$(document).off("click", "#navItem-continue");
		$(document).on("click", "#navItem-continue", function(event){
			level1LightboxLauncher(continueAction);
		});
	}
	/*/
	
	/*
	
	// ------- this is from disablePageContinueCheck
	
	var enableContinue = false;
	
	if(forceDisable){
		if(!currentBasePage_Assessment_Present){
			enableContinue = true;
		}
	}else{
	
		////////////////////////////////////////////////////////////
		
		var currentSelection;
		if(pageAssessmentSelectionArray[0].indexOf("on") != -1){
			enableContinue = true;
			currentSelection = pageAssessmentSelectionArray[0].indexOf("on");
			//break;
		}
		
		if(currentBasePage_Assessment_Requirement == "Correct"){
			//console.log(currentSelection + "--- " + currentBasePage_Assessment_OutputList[currentSelection].outputStatus + "--- " + lightBoxDialog_Level1_Engaged );
			if(currentBasePage_Assessment_OutputList[currentSelection].outputStatus != "Correct" && !lightBoxDialog_Level1_Engaged){
				enableContinue = false;
			}
		}
		
		////////////////////////////////////////////////////////////
		
	}
	
	if(!enableContinue){ // disable continue button again if no choices are made
		$('#navItem-continue').removeClass('allowContinueHover');  
		$('#navItem-continue div').css( 'color', 'rgba(255,255,255,0.2)' );
		$(document).off("click", "#navItem-continue");
		$('#navItem-continue').off('mouseenter mouseleave');
		$('#navItem-continue').css( 'cursor', 'default' );
		//return "disabled";
	}else{
		//return "enabled";
		$(document).off("click", "#navItem-continue");
		$(document).on("click", "#navItem-continue", function(event){
			//level1LightboxLauncher("forceForward");
			//level1LightboxLauncher("feedbackCheck")
			
			//console.log("newpage! === " + pageAssessmentSelectionResult.targetNode);
			revertLightboxes('continue');
			loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			
		});
	}
	
	//if(enableContinue && pageAssessmentNewSelectionState == "unchecked"){
		//continueButtonUpdate("Up", "CHECK");
	//}
	
	/*/
	
	//console.log("ER - " + enableReaction);
	
	if(!enableReaction){ // disable continue button again if no choices are made
		continueButtonDisabler({});
		//console.log("NO ENABLE REAKTION");
		placeLocalizedContent({
			'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
			'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueButtonLocked
		});
		//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : This navigation control is currently disabled." );
	}else{
		//console.log("ENABLE REAKTION");
		//console.log(continueAction);
		continueButtonEnabler();
		
		//console.log("CR = " + ClickReact);
		
		//console.log( 'clickreact - ' + ClickReact );
		
		if(ClickReact == "Resume"){
			// ! --[ Resume ]--- 
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.resume
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.subSeqResume
			});
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the subseqence panel and resume the current course module." );
			$(document).off("click", "#navItem-continue"); 
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				navMenuCloser();
				/*
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				*/
				
				currentCourseModule = dashboardSideNavItemActive - 1;
				
				revertLightboxes('resumer');
				
				if( $(lightBoxDialog_Level2_LaunchedFromElement).hasClass("mediaGridBoxInner") ){
					$(lightBoxDialog_Level2_LaunchedFromElement).closest('.mediaGridBoxOuter').focus();
				}
				//lightBoxDialog_Level4_LaunchedFromElement.focus();
				lightBoxDialog_Level2_LaunchedFromElement = null;
				//disablePageContinueCheck(false);
			});
		}
		
		if(ClickReact == "HideLbLvl1"){
			// ! --[ HideLbLvl1 ]--- 
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.hide
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.hideStepAssessmentFeedback
			});
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the step assessment feedback and resume the current course module." );
			$(document).off("click", "#navItem-continue"); 
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				navMenuCloser();
				$("#lightBoxDialog-Level1").dialog('close');
				/*
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				*/
				//revertLightboxes('resumer');
				//disablePageContinueCheck(false);
			});
		}
		
		if(ClickReact == "HideLbLvl3"){
			// ! --[ HideLbLvl3 ]--- 
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.hide
			});
			switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
				case "About" : 
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the About panel and resume the current course module." );
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.hideAbout
					});
				break;
				case "Help" :
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the Help panel and resume the current course module." );
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.hideHelp
					});
				break;
				case "DashboardHelp" :
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the Help panel and return to the StepStone Dashboard." );
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.hideHelp
					});
				break;
				case "Clipboard" : 
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the About panel and resume the current course module." );
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.hideClipboard
					});
				break;
			}
			$(document).off("click", "#navItem-continue"); 
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				lightBoxDialog_Level3_Engaged = false; // redundant?
				$('body').attr( 'data-lightBoxPanel3' , "None" );
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
				continueButtonDisabler({});
				navMenuCloser();
				$("#lightBoxDialog-Level3").dialog('close');
				/*
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				*/
				//revertLightboxes('resumer');
				//disablePageContinueCheck(false);
			});
		}
		
		//continueButtonUpdate("Down", "HIDE", "Hide");
		
		if(ClickReact == "Retry"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.retry
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.stepAssessmentRetry
			});
			// ! --[ Retry ]--- 
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the step assessment feedback and retry the step assessment." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"RETRY";
			//$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_down)[0].data);
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =		"Disabled"; //ClickReact;
			$('#navItem-continue').attr( 'data-buttonAction' , "Disabled" );
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
			$(document).off("click", "#navItem-continue"); 
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({}); 
				navMenuCloser();
				/*
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				*/
				revertLightboxes('resumer');
				//disablePageContinueCheck(false);
			});
		}
		
		if(ClickReact == "FeedbackCheck"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.check
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.stepAssessmentCheck
			});
			// ! --[ FeedbackCheck ]--- 
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to check the results of your step assessment selections and receive feedback." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"CHECK";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				var getAssessmentResultPreview = continueButtonDisabler({ 'passedEvent' : event , 'previewAssessmentResult' : true });
				if( getAssessmentResultPreview.showAssessmentResultPreview != undefined && getAssessmentResultPreview.showAssessmentResultPreview == true ){
					return;
				}
				debounceUIButtons();
				navMenuCloser();
				level1LightboxLauncher(ClickReact);
				
				updateStepChainRecord({});
				
			});
		}
		
		if(ClickReact == "AssessmentCompleteBypass"){
			// ! --[ AssessmentCompleteBypass ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				navMenuCloser();
				var minimumContinuePointerIndex = 0;
				if( $('.sideNavDropList').css('display') == "none" ){
					minimumContinuePointerIndex += $('.dashboardSideNavStack li.courseModuleChoice').length + 2;
				}else{
					minimumContinuePointerIndex += $('.dropListContent .qActivityChoice.courseModuleChoice').length + 2;
				}
				if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 1 ){
					minimumContinuePointerIndex++;
				}else{
					
				}
				if( $('.sideNavDropList').css('display') == "none" ){
					$('.dashboardSideNavStack li:nth-child(' + (minimumContinuePointerIndex + 1) + ')').trigger("click");		
				}else{
					$('.dropListContent .qActivityChoice:nth-child(' + (minimumContinuePointerIndex + 2) + ')').trigger("click");	
				}
			});
		}
		
		if(ClickReact == "SurveyCompleteBypass"){
			// ! --[ SurveyCompleteBypass ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				navMenuCloser();
				var minimumContinuePointerIndex = 0;
				if( $('.sideNavDropList').css('display') == "none" ){
					minimumContinuePointerIndex += $('.dashboardSideNavStack li.courseModuleChoice').length + 3;
				}else{
					minimumContinuePointerIndex += $('.dropListContent .qActivityChoice.courseModuleChoice').length + 3;
				}
				//console.log(minimumContinuePointerIndex);
				if( $('.sideNavDropList').css('display') == "none" ){
					$('.dashboardSideNavStack li:nth-child(' + (minimumContinuePointerIndex + 1) + ')').trigger("click");		
				}else{
					$('.dropListContent .qActivityChoice:nth-child(' + (minimumContinuePointerIndex + 2) + ')').trigger("click");	
				}
			});
		}
		
		if(ClickReact == "OverviewContinue"){
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.continue
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueModuleOverview
			});

			
			// ! --[ OverviewContinue ]--- 
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to continue to the course modules." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"CONTINUE";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				
				//alert( "continue - overviewcontinue - " + $(this).attr('class') + " --- " + $(event).attr('class') + " --- " + $(event.target).attr('class') );
				
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				navMenuCloser();
				var overviewContinuePointer = null;
				var overviewContinuePointerIncrementer = 0;
				var minimumContinuePointerIndex = 0;
				cycleStackLoop : 
				for( var i = 0 ; i < courseStatusObject.courseModuleGroupStack.length ; i++ ){
					for( var j = 0 ; j < courseStatusObject.courseModuleGroupStack[i].length ; j++ ){
						overviewContinuePointerIncrementer++;
						minimumContinuePointerIndex++;
						var courseProgressStatus = courseStatusObject.courseModuleGroupStack[i][j].moduleProgressStatus;
						switch( courseProgressStatus ){
							case "Unattempted" : 
							case "Incomplete" : 
								overviewContinuePointer = overviewContinuePointerIncrementer;
							break cycleStackLoop;
						}
					}
				}
				
				//console.log( "overviewContinuePointer = " + overviewContinuePointer );
				if( overviewContinuePointer != null ){
					// we are pointing to a course module
				}else{
					// we are pointing to a non-course module
					
					if( courseAssessment_Present || courseSurvey_Present ){
						minimumContinuePointerIndex++;
					}
					
					if( courseAssessment_Present ){
						if( courseStatusObject.courseAssessmentScore >= Number( persistentData.score_PassingThreshold ) ){
							minimumContinuePointerIndex++;
						}else{
							
						}
					}
					if( courseSurvey_Present ){
						if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 1 ){
							minimumContinuePointerIndex++;
						}else{
							
						}
					}
				}
				
				//if( overviewContinuePointer != null ){
					//if( $('.sideNavDropList').hasClass('hidden') ){
					if( $('.sideNavDropList').css('display') == "none" ){
						$('.dashboardSideNavStack li:nth-child(' + (minimumContinuePointerIndex + 1) + ')').trigger("click");		
					}else{
						$('.dropListContent .qActivityChoice:nth-child(' + (minimumContinuePointerIndex + 2) + ')').trigger("click");	
					}
				//}
				
				//$( ".activeDashboardContentArea" ).find('.dashboardSectionHeader').focus();
				//updateFocus();
				
			});
		}
		
		if(ClickReact == "StepForward"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.continue
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueActivity
			});
			
			//console.log("SF");
			// ! --[ StepForward ]--- 
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to continue this course module." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"CONTINUE";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				//waitCoverController({ 'coverAction' : "Launch" });
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				revertLightboxes('continue'); 
				
				$( '#focusDumper' ).focus();
				
				/*
				var activityTarget = 			dashboardSideNavItemActive - 2;
				var nodeTargetArray = pageAssessmentSelectionResult.targetNode.split('x'); // split at x in draggybox
				courseStatusObject.courseModuleGroupStack[activityTarget].userPath.push(nodeTargetArray[1]);
				*/
				
				//var lastUserPathIndex = 	courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1;
				//var lastUserPathEntry = 	courseStatusObject.courseModuleGroupStack[activityTarget].userPath[lastUserPathIndex];
				
				/*
				var activityTarget = dashboardSideNavItemActive - 2;
				var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1;
				var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[activityTarget].userPath[lastUserPathIndex];
				var lastUserPathStepNum;
				if(lastUserPathEntry != 'x'){
					var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[dashboardSideNavItemActive - 2].userPath[lastUserPathIndex].split(':');
					lastUserPathStepNum = lastUserPathStepArray[0];
				}else{
					lastUserPathStepNum = '1';
				}
				loadNewActivityPage("draggybox" + lastUserPathStepNum);
				*/
				
				if(currentBasePage_Assessment_Present){
					var getAssessmentResultPreview = continueButtonDisabler({ 'passedEvent' : event , 'previewAssessmentResult' : true });
					if( getAssessmentResultPreview.showAssessmentResultPreview != undefined && getAssessmentResultPreview.showAssessmentResultPreview == true ){
						return;
					}
					//loadNewActivityPage({ 'loadDataFile' : pageAssessmentSelectionResult.targetNode });
					if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
						updateStepChainRecord({ 
							'afterAction' : "LoadStep" , 
							'targetStep' : pageAssessmentSelectionResult.targetNode 
						});
					}
					if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
						// procedural isn't required, and all outputs are identical, so just grab the first relevant output
						var proceduralTargetNode;
						if( nodeAssessment_SpecialHandling_OutputCount > 0 ){
							proceduralTargetNode = nodeAssessment_SpecialHandling_OutputDataList[0].targetNode;
						}else{
							proceduralTargetNode = currentBasePage_Assessment_OutputList[0].targetNode;
						}
						updateStepChainRecord({ 
							'afterAction' : "LoadStep" , 
							'targetStep' : proceduralTargetNode // currentBasePage_Assessment_OutputList[0].targetNode 
						});
					}
				}else{
					//console.log( 'currentBasePage_Assessment_OutputList[0].targetNode  --- ' + currentBasePage_Assessment_OutputList[0].targetNode );
					waitCoverController({ 
						'coverAction' : 	"Launch" , 
						'loadStep' : 		currentBasePage_Assessment_OutputList[0].targetNode
					});
					//loadNewActivityPage({ 'loadDataFile' : currentBasePage_Assessment_OutputList[0].targetNode });
				}
				continueButtonDisabler({});
				
				//$( '#CET-Activity-Content-Title-Text' ).focus();
				//updateFocus({ 'action' : "Update" });
				//$('#CET-Activity-Content-Main').scrollTop = 0;
			});
		}
		
		if(ClickReact == "Redirect"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.continue
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueActivity
			});
			
			//console.log("RD");
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to continue this course module." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"CONTINUE";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
			// ! --[ Redirect ]--- 
			//console.log('fweeeee');
			//console.log("FF");
			//var correctOut = "none";
			//var outListLen = currentBasePage_Assessment_OutputList.length;
			//var loadNode;
			//console.log(outListLen);
			//loadNode = Number(pageAssessmentSelectionResult.targetNode);
			/*
			if(outListLen == 1){
				correctOut = 0;
				loadNode = currentBasePage_Assessment_OutputList[correctOut].targetNode;
			}else{
				var checkListForCorrectOutput;
				switch( currentBasePage_Assessment_Type ){
					case "Single Answer - Multiple Choice":
						for(var m = 0 ; m < currentBasePage_Assessment_OutputList.length ; m++){
							checkListForCorrectOutput = currentBasePage_Assessment_OutputList[m].outputStatus;
							if(checkListForCorrectOutput == "Correct"){
								correctOut = m;
								loadNode = currentBasePage_Assessment_OutputList[correctOut].targetNode;
								break;
							}
						}
						break;
					case "Multiple Answer - Multiple Choice":
						for(var m = 0 ; m < nodeAssessment_SpecialHandling_OutputDataList.length ; m++){
							checkListForCorrectOutput = nodeAssessment_SpecialHandling_OutputDataList[m].outputStatus;
							if( checkListForCorrectOutput == "Correct" ){
								correctOut = m;
								loadNode = nodeAssessment_SpecialHandling_OutputDataList[correctOut].targetNode;
								break;
							}
						}
						break;
				}
			}
			*/
			//console.log(correctOut);
			//for(var m = 0 ; m < pageAssessmentSelectionArray[0].length ; m++){
				//if(pageAssessmentSelectionArray[0].indexOf("on") != -1){
					//console.log(m);
					//var pageAssessmentSelectionResult = m;
					//pageAssessmentSelectionResult = currentBasePage_Assessment_OutputList[pageAssessmentSelectionArray[0].indexOf("on")];
					//console.log( "PASR . outputstatus = " + pageAssessmentSelectionResult.outputStatus + " --- " + pageAssessmentSelectionArray[0].indexOf("on") );
					//var pageAssessmentSelectionResultArray = $.makeArray(pageAssessmentSelectionResult);
					//var pageAssessmentSelectionResult_JSON = JSON.stringify(pageAssessmentSelectionResult);
					// this clears the escaped quotes around each object element id
					//var pageAssessmentSelectionResult_JSONCleansed = pageAssessmentSelectionResult_JSON.replace(/\"([^(\")"]+)\":/g,"$1:");
					//break;
				//}
			//}
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				//waitCoverController({ 'coverAction' : "Launch" });
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				//console.log(correctOut + " === " + currentBasePage_Assessment_OutputList[correctOut] );
				revertLightboxes('continue');
				
				$( '#focusDumper' ).focus();
				
				if(currentBasePage_Assessment_Present){
					var getAssessmentResultPreview = continueButtonDisabler({ 'passedEvent' : event , 'previewAssessmentResult' : true });
					if( getAssessmentResultPreview.showAssessmentResultPreview != undefined && getAssessmentResultPreview.showAssessmentResultPreview == true ){
						return;
					}
					//loadNode = Number(pageAssessmentSelectionResult.targetNode);
					updateStepChainRecord({ 
						'afterAction' : "LoadStep" , 
						'targetStep' : pageAssessmentSelectionResult.targetNode 
					});
				}else{
					//console.log( 'currentBasePage_Assessment_OutputList[0].targetNode  --- ' + currentBasePage_Assessment_OutputList[0].targetNode );
					//loadNewActivityPage({ 'loadDataFile' : currentBasePage_Assessment_OutputList[0].targetNode });
					//loadNode = Number(currentBasePage_Assessment_OutputList[0].targetNode);
					//loadNewActivityPage({ 'loadDataFile' : currentBasePage_Assessment_OutputList[0].targetNode });
					waitCoverController({ 
						'coverAction' : 	"Launch" , 
						'loadStep' : 		currentBasePage_Assessment_OutputList[0].targetNode
					});
				}
				
				//if( currentBasePage_Assessment_OutputList != undefined && currentBasePage_Assessment_OutputList != null && currentBasePage_Assessment_OutputList != '' ){
					//console.log("shood");
				//}else{
					//var checkLen = currentBasePage_Assessment_OutputList.length;
					//console.log("nerp");
				//}
				//loadNewActivityPage({ 'loadDataFile' : loadNode });
				continueButtonDisabler({});
				//$('#CET-Activity-Content-Main').scrollTop = 0;
			});
		}
		
		// no longer used?
		if(ClickReact == "LaunchCredits"){
			// ! --[ LaunchCredits ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				revertLightboxes('continue');
				sideNavTrigger('about', 'credits');
				continueButtonForceStatus = "BackToDashboard";
				level3LightboxLauncher("about");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		// no longer used?
		if(ClickReact == "ExitCourse"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.exitModule
			});
			// ! --[ ExitCourse ]--- 
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"EXIT";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		"Enabled";
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				exitCETCourse();
				//revertLightboxes('continue');
				//level3LightboxLauncher("about");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		if(ClickReact == "LaunchNextPathInGroup"){
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.next
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.stepNextActivity
			});
			// ! --[ Launch Next Path In Group ]--- 
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to continue on to the next course module." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"NEXT";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		"Enabled";
			$(document).off("click", "#navItem-continue"); 
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				//waitCoverController({ 'coverAction' : "Launch" });
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				//currentCourseModule = dashboardSideNavItemActive - 1;
				revertLightboxes('continue');
				
				$( '#focusDumper' ).focus();
				
				var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
				var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
				var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]); 
				/*
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				*/
				//currentCourseModule = dashboardSideNavItemActive - 1;
				//revertLightboxes('resumer');
				//disablePageContinueCheck(false);
				
				var targetPathStepID = 					1; 
				var newCourseModule_Module = 		courseModule_Module + 1;
				courseModuleGroupedActive = 		courseModule_Group + "_" + newCourseModule_Module + "_" + targetPathStepID;
				currentCourseModule = 					dashboardSideNavItemActive;
				dashboardSideNavItemActive++;
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
				var newPathActivityType = 			courseModuleArray[courseModule_Group - 1].modules[newCourseModule_Module - 1].activityType;
				CETActivityID = 								courseModuleArray[courseModule_Group - 1].modules[newCourseModule_Module - 1].moduleID;
				
				// "brute force" method of fixing issue with unwanted view status being added to clipboard
				// issue was rooted in returning to dashboard after collecting clipboard items, going to previous path in group, and re-jumping from conclusion to path with clipboard accumulation
				// need to check with procedurals, etc.
				// should effectively be like restarting a path
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][newCourseModule_Module - 1].userPath = ["x"];
				//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][newCourseModule_Module - 1].clipboardElementViewStatus = [[]];
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][newCourseModule_Module - 1].clipboardElementViewStatus = [["x"]];
				
				//loadNewActivityPage({ 'loadDataFile' : targetPathStepID , 'setCurrentPathType' : newPathActivityType });
				waitCoverController({ 
					'coverAction' : 	"Launch" , 
					'loadStep' : 		targetPathStepID ,
					'setCurrentPathType' : newPathActivityType
				});
				$( '#CET-Activity-Content-Title-Text' ).focus();
				updateFocus({ 'action' : "Update" });
			});
		}
		if( ClickReact == "ReviewActivity" || ClickReact == "LaunchModule" ){
			// ! --[ ReviewActivity || LaunchModule ]--- 
			
			switch( Label ){
				case "BEGIN" : 
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
						'srcData' : 		langPack.ui.globalNav.continueButton.begin
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueActivityOverview
					});
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to begin the current course module." );
				break;
				case "CONTINUE" :
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
						'srcData' : 		langPack.ui.globalNav.continueButton.continue
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
						'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueActivityOverview
					});
					//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to exit the Help panel and resume the current course module." );
				break;
			}
			
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				waitCoverController({ 
					'coverAction' : "Launch" ,
					'revertPanels' : true
				});
				continueButtonDisabler({});
				navMenuCloser();
				debounceUIButtons();
				currentCourseModule = dashboardSideNavItemActive - 1;
				//revertLightboxes('continue');
				var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
				var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
				var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]); 
				//var activityTarget = dashboardSideNavItemActive - 2;
				//currentCourseModule = activityTarget;
				//currentCourseModuleUserPassage = "Review";
				//var lastUserPathStepNum;
				//lastUserPathStepNum = '1';
				var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
				//console.log("lastUserPathIndex - " + lastUserPathIndex);
				var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex];
				//console.log("lastUserPathEntry - " + lastUserPathEntry);
				var lastUserPathStepNum;
				if( lastUserPathEntry != 'x' ){
					var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex].split(':');
					lastUserPathStepNum = lastUserPathStepArray[0];
				}else{
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.pop();
					lastUserPathStepNum = '1';
				}
				/*
				lightBoxDialog_Level3_Engaged = false; // redundant?
				$('body').attr( 'data-lightBoxPanel3' , "None" );
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
				*/
				//if(ClickReact == "LaunchModule"){
					//console.log("lastUserPathStepNum - " + lastUserPathStepNum);
					//console.log("lastUserPathStepNum - " + lastUserPathStepNum);
					//currentCourseModule = dashboardSideNavItemActive - 1;
					//for( var e = 0 ; e < sideNavArray.length ; e++ ){
					//	sideNavArray[e].active = 	false;
					//}
					//dashboardSideNavItemActive
					compareActivityClipboardList({ 
						'lastUserPathStepNum' : lastUserPathStepNum , 
						'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType 
					});
				//}
				$("#menuNavItem-about").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				$("#menuNavItem-clipboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				/*
				var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1;
				var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[activityTarget].userPath[lastUserPathIndex];
				var activityCurrentStatus = courseStatusObject.courseModuleGroupStack[v].moduleProgressStatus;
				switch(loadedSuspendData_moduleProgressStatusSplit[0]){
					case 'Unattempted':
						break;
					case 'Incomplete':
						break;
					case 'Completed':
						break;
				}
				if(lastUserPathEntry != 'x'){ 
					var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[dashboardSideNavItemActive - 2].userPath[lastUserPathIndex].split(':');
					lastUserPathStepNum = lastUserPathStepArray[0];
				}else{
					lastUserPathStepNum = '1';
				}*/
				//loadClipboardList();
				//loadNewActivityPage("draggybox" + lastUserPathStepNum);
				/*
				if(ClickReact == "ReviewActivity"){
					//loadNewActivityPage({ 'loadDataFile' : lastUserPathStepNum });
					loadNewActivityPage({ 'loadDataFile' : lastUserPathStepNum , 'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType }); // is the path type already set from the clipboard comparison above?
				}
				*/
				//$('#CET-Activity-Content-Main').scrollTop = 0;
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
				$( '#CET-Activity-Content-Title-Text' ).focus();
				updateFocus({ 'action' : "Update" });
			});
		}
		/*
		if(ClickReact == "LaunchModule"){
			//  (unused) --[ B - CBh - LaunchModule ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				debounceUIButtons();
				revertLightboxes('continue');
				
				var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
				var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
				var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
				//CETActivityID = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].moduleID;
				
				//var activityTarget = dashboardSideNavItemActive - 2;
				//currentCourseModule = activityTarget;
				var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
				//console.log("lastUserPathIndex - " + lastUserPathIndex);
				var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex];
				//console.log("lastUserPathEntry - " + lastUserPathEntry);
				var lastUserPathStepNum;
				if( lastUserPathEntry != 'x' ){
					var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex].split(':');
					lastUserPathStepNum = lastUserPathStepArray[0];
				}else{
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.pop();
					lastUserPathStepNum = '1';
				}
				//console.log("lastUserPathStepNum - " + lastUserPathStepNum);
				compareActivityClipboardList(lastUserPathStepNum);
				// moved following to inside compare function
				//loadNewActivityPage("draggybox" + lastUserPathStepNum);
				
				$("#menuNavItem-about").show();
				$("#menuNavItem-restart").show();
				$("#menuNavItem-clipboard").show();
				
				//$('#CET-Activity-Content-Main').scrollTop = 0;
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		*/
		if(ClickReact == "LaunchDashboard"){
			//console.log("db launch");
			// ! --[ LaunchDashboard ]--- 
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.globalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
				'srcData' : 		langPack.ui.globalNav.continueButton.return
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.lowerRightButton.continueReturn
			});
			//$( '.CET-NavItem-Text .accessContinueContextInstruction' ).text( " : Use space or return to return to the StepStone Dashboard." );
			courseStatusObject.currentBasePage_ContinueButtonLabel = 		"RETURN";
			courseStatusObject.currentBasePage_ContinueButtonIcon = 		Icon;
			courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
			courseStatusObject.currentBasePage_ContinueButtonStatus = 		"Enabled";
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				navMenuCloser();
				//$('body').attr( 'data-activePathType' , "None" );
				if(currentDashboardSelectedArea == "courseAssessment" || currentDashboardSelectedArea == "courseSurvey"){
					quizNavReact();
				}
				//console.log( 'currentDashboardSelectedArea = ' + currentDashboardSelectedArea );
				//  /// SCORM
				if( persistentData.dataModel == 'SCORM1.2' || persistentData.dataModel == 'SCORM2004.4' ){
					//console.log('here');
					//if(persistentData_Simulation){
						//setSuspendData({ 'method' : 'suspendStringTest' });
					//}else{
						// if course assessment is controlling the pass/fail course status
						if(currentDashboardSelectedArea == "courseAssessment"){
							if(courseStatusObject.courseAssessmentScore < useMasteryScore){ // failed
								setCourseProgressLMS('failed');
								setScore(); // also sets suspend data
							}
							if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
								prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
							    if( persistentData.toggleSessionTimeAccrue ){
							   	  setSessionTime(); 
						   	    }
						   	    setCourseProgressLMS('passed');
						   	    setScore(); // also sets suspend data
								persistentData.toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
							}
						}
						
						// currently the survey must be complete to return to the dashboard from the morphed continue button 
						if(currentDashboardSelectedArea == "courseSurvey"){
							setCourseProgressLMS('completed');
							prepareDateStamp(); // this should only make the verbose text, stamp should already be stored to suspend_data
							// pertinent interactions - likert, fill-in, performance.  just use performance.
							for( var c = 1 ; c < courseSurveyDataArray[0].length ; c++ ){
								var reduce1 = c - 1;
								switch ( courseSurveyDataArray[0][c][0].activityType ){
									case 'basic':
										for( var d = 1 ; d < courseSurveyDataArray[0][c].length ; d++ ){
											if( courseSurveyDataArray[0][c][d].selected ){
												//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
												//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
												//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
												switch( persistentData.dataModel ){
													case 'SCORM1.2' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".student_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][d].label
														});
													break;
													case 'SCORM2004.4' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".learner_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][d].label
														});
													break;
												}
											}
										}
									break;
									case 'dropList':
										for( var d = 1 ; d < courseSurveyDataArray[0][c].length ; d++ ){
											if( courseSurveyDataArray[0][c][d].selected ){
												//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
												//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
												//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
												switch( persistentData.dataModel ){
													case 'SCORM1.2' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".student_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][d].label
														});
													break;
													case 'SCORM2004.4' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".learner_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][d].label
														});
													break;
												}
											}
										}
									break;
									case 'textArea':
										//for( var d = 1 ; d < courseSurveyDataArray[c].length ; d++ ){
											//if( courseSurveyDataArray[c][d].selected ){
												//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
												//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
												//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
												switch( persistentData.dataModel ){
													case 'SCORM1.2' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".student_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][0].capturedData
														});
													break;
													case 'SCORM2004.4' : 
														LMSPersistData_Set({ 
															'dataElement' : 	"cmi.interactions." + reduce1 + ".learner_response" ,
															'dataContent' : 	courseSurveyDataArray[0][c][0].capturedData
														});
													break;
												}
											//}
										//}
									break;
								}
							}
							setSuspendData();
							// end survey handle block
						}
						// moved following handling to page build end / lms portion
						/*
						if(currentDashboardSelectedArea == "courseModule"){
							if( !courseAssessment_Present ){
								if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // all activities / modules completed
								//if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
									courseStatusObject.courseAssessmentScore = 100;
									if( !courseSurvey_Present ){
										setCourseProgressLMS('passed');
									}else{
										setCourseProgressLMS('completed');
									}
									prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
								    if( toggleSessionTimeAccrue ){
										setSessionTime();
									}
									setScore(); // also sets suspend data
									toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
								}
							}else{
								setSuspendData();
							}
						}
						*/
					//}
				}
				debounceUIButtons();
				revertLightboxes('continue');
				level3LightboxLauncher("dashboard");
				//loadNewActivityPage("draggybox1");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		if(ClickReact == "CourseAssessmentNextPage"){
			// ! --[ CourseAssessmentNextPage ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				revertLightboxes('continue');
				quizNavReact();
				//$('#CET-Activity-Content-Main').scrollTop = 0;
				//loadNewActivityPage("draggybox1");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		if(ClickReact == "LaunchAssessment"){
			// ! --[ LaunchAssessment ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				continueButtonDisabler({});
				debounceUIButtons();
				navMenuCloser();
				revertLightboxes('continue');
				quizLoader("RACE Assessment");
				//$('#CET-Activity-Content-Main').scrollTop = 0;
				
				//loadNewActivityPage("draggybox1");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		if(ClickReact == "LaunchSurvey"){
			// ! --[ LaunchSurvey ]--- 
			$(document).off("click", "#navItem-continue");
			$(document).on("click", "#navItem-continue", function(event){
				if(UIButtons_Supressed){
					return;
				}
				debounceUIButtons();
				navMenuCloser();
				revertLightboxes('continue');
				quizLoader("RACE Survey");
				//$('#CET-Activity-Content-Main').scrollTop = 0;
				
				//loadNewActivityPage("draggybox1");
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			});
		}
		
		// ! [ ^^^ Continue Button ^^^ ]
	}
	
	/*
	if(Icon == "Down"){
		//enablePageContinue("resumer");
		//disablePageContinueCheck();
	}else{
		if(pageAssessmentSelectionResult != undefined && pageAssessmentSelectionResult.outputStatus == "Correct"){
			//enablePageContinue("forceForward");
			if(lightBoxDialog_Level1_closeMethod == 'internal'){ // may not be correct value to check...
				disablePageContinueCheck(false);
			}else{
				revertLightboxes('continue');
				//loadNewActivityPage(pageAssessmentSelectionResult.targetNode);
			}
		}else{
			disablePageContinueCheck(false);
		}
		
	}
	*/
	
	
	
	/*
	switch (Direction){
		
		case "Up":
			$('#navItem-continue .CET-NavItem-Icon').addClass('navItem-continue-Arrow-Up');
			$('#navItem-continue .CET-NavItem-Text').text(Label);
			break;
		case "Right": // ---[ default rotation ]--- 
			$('#navItem-continue .CET-NavItem-Icon').addClass('navItem-continue-Arrow-Right');
			$('#navItem-continue .CET-NavItem-Text').text('CONTINUE');
			break;
		case "Down":
			$('#navItem-continue .CET-NavItem-Icon').addClass('navItem-continue-Arrow-Down');
			$('#navItem-continue .CET-NavItem-Text').text('RESUME');
			break;
		case "Left":
			$('#navItem-continue .CET-NavItem-Icon').addClass('navItem-continue-Arrow-Left');
			$('#navItem-continue .CET-NavItem-Text').text('REVIEW');
			break;
		
	}
	*/
}


// ! F.Nav Menu Closer ---
function navMenuCloser(){
	if( $( '#navItem-menu').hasClass("open") ){
		$( '#navItem-menu').trigger( "click" );
	}
}

// ! =============================================================
// ! F.Lightboxes.overlay placer ---
function lightboxOverlayBGPlacer(topMostDialog){
	//var dropOverlayVal =  $('#lightBoxDialog-Level' + topMostDialog).closest('.ui-dialog').zIndex();
	var dropOverlayVal =  $('#lightBoxDialog-Level' + topMostDialog).closest('.ui-dialog').css( "z-index" );
	$('.ui-widget-overlay').css( 'z-index' , dropOverlayVal - 1 );
}
// ! F.checkLightBoxStack - Lightboxes.Count stack, update notify num ---
function checkLightBoxStack(numChange){
	var enableContinue = false;
	var currentSelection;
	if( courseModuleGroupedActive != null ){
		var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
		var courseModule_Group = 				Number(splitCourseModuleGroupedActive[0]);
		var courseModule_Module = 				Number(splitCourseModuleGroupedActive[1]);
		var currentPathStep = 					parseInt(splitCourseModuleGroupedActive[2]);
		var currentGroupPathsCount = 			masterJSONStorage.pathParamsSet[courseModule_Group-1].length;
	}
	//for(var k = 0 ; k < pageAssessmentSelectionArray[0].length ; k++){
		//console.log("ioo = " + pageAssessmentSelectionArray[0].indexOf("on"));
		//console.log('indexofcheck3');
	if(currentBasePage_Assessment_Present){
		//if(pageAssessmentSelectionArray[0].indexOf("on") != -1){
			enableContinue = true;
			if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
				if(pageAssessmentSelectionArray[0] != undefined && pageAssessmentSelectionArray[0].indexOf("on") != -1){
					enableContinue = true;
					currentSelection = pageAssessmentSelectionArray[0].indexOf("on");
				}
			}else if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" ){
				//currentSelectionStatus = pageAssessmentSelectionResult.outputStatus;
			}
			//break;
		//}
	}else{
		enableContinue = true;
	}
	//}
	//if(!enableContinue){ // disable continue button again if no choices are made
	//}else{
	//} 
	lightBoxStackArray = [];
	//activeLightBoxCount = 0;
	if(lightBoxDialog_Level1_Engaged){
		lightBoxStackArray[0] = "on";
		// continue button result if level 1 is open 
		if( currentBasePage_Assessment_Requirement == "Correct" ){ // if page requires correct selection for forward movement
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice" :
					//console.log(currentSelection + "--- " + currentBasePage_Assessment_OutputList[currentSelection].outputStatus + " --- " + lightBoxDialog_Level1_Engaged );
					if( currentBasePage_Assessment_OutputList[currentSelection].outputStatus != "Correct" ){
						if( currentBasePage_Assessment_OutputList[currentSelection].outputBehavior == "Retry" ){
							continueButtonUpdate("Down", "RETRY", "Retry");
						}
					}else{
						continueButtonUpdate("Right", "CONTINUE", "StepForward");
					}
				break;
				case "Multiple Answer - Multiple Choice" :
				case "Advanced Multiple Answer - Multiple Choice" :
				case "Write In - Field List" :
				case "Matching" :
				case "Ranking" :
					if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
						if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
							continueButtonUpdate("Down", "RETRY", "Retry");
						}
					}else{
						continueButtonUpdate("Right", "CONTINUE", "StepForward");
					}
				break;
			}
		}else{ // if page allows forward movement without correct selections
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice" :
					//console.log(currentBasePage_Assessment_OutputList[currentSelection].outputBehavior);
					if( currentBasePage_Assessment_OutputList[currentSelection].outputStatus != "Correct" ){
						if( currentBasePage_Assessment_OutputList[currentSelection].outputBehavior == "Retry" ){
							continueButtonUpdate("Down", "RETRY", "Retry");
						}
						if( currentBasePage_Assessment_OutputList[currentSelection].outputBehavior == "Redirect" ){
							//console.log('wrrk');
							continueButtonUpdate("Right", "CONTINUE", "Redirect");
						}
					}else{
						continueButtonUpdate("Right", "CONTINUE", "StepForward");
					}
				break;
				case "Multiple Answer - Multiple Choice" :
				case "Advanced Multiple Answer - Multiple Choice" :
				case "Write In - Field List" :
				case "Matching" :
				case "Ranking" :
					if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
						if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
							continueButtonUpdate("Down", "RETRY", "Retry");
						}
						if( pageAssessmentSelectionResult.outputBehavior == "Redirect" ){
							//console.log('wnnk');
							continueButtonUpdate("Right", "CONTINUE", "Redirect");
						}
					}else{
						continueButtonUpdate("Right", "CONTINUE", "StepForward");
					}
				break;
			}
		}
	}
	if(lightBoxDialog_Level2_Engaged){
		lightBoxStackArray[1] = "on";
		continueButtonUpdate("Down", "RESUME", "Resume");
	}
	if(lightBoxDialog_Level3_Engaged){
		lightBoxStackArray[2] = "on";
		if(currentCourseModule != null){
			//continueButtonUpdate("Down", "RESUME", "Resume");
			//continueButtonUpdate("Down", "HIDE", "HideLbLvl3");
		}
	}
	if(lightBoxDialog_Level4_Engaged){
		lightBoxStackArray[3] = "on";
	}
	
	if(numChange == 'add'){
		//activeLightBoxCount++;
		activeLightBoxCount = 0;
		for(var b = 0 ; b < lightBoxStackArray.length ; b++){
			if(lightBoxStackArray[b] == "on"){
				activeLightBoxCount++;
			}
		}
	}else if(numChange == 'remove'){
		activeLightBoxCount--;
	}
	
	if( activeLightBoxCount > 0 || 
	lightBoxDialog_Level4_LaunchedFrom == 'RestartActivityConfirmation' || 
	lightBoxDialog_Level4_LaunchedFrom == 'BasePage_SingleMedia' ||
	lightBoxDialog_Level4_LaunchedFrom == 'BasePage_MediaGrid'
	){ // if any popup layers are open
		//if( lightBoxDialog_Level4_LaunchedFrom == 'RestartActivityConfirmation' ){
			lightBoxDialog_Level4_LaunchedFrom = '';
		//}
		//console.log('goo');
	}else{ // if just base layer
		if( currentDashboardSelectedArea == "courseSurvey" ){
			enableContinue = false;
		}
		//console.log('bah');
		var enableFeedback = false;
		if( enableContinue ){
			if( currentBasePage_Assessment_Present ){ // has base step assessment
				if( currentBasePage_Assessment_Requirement == "Correct" ){ // if page assessment exists & requires correct selection for forward movement
					switch( currentBasePage_Assessment_Type ){
						case "Single Answer - Multiple Choice" :
							
							//*////////////////////
							var choiceSelectionGateSAMCData = 		currentBasePage_Assessment_OutputList;
							var choiceSelectionGateSAMCDataLen = 	choiceSelectionGateSAMCData.length;
							for( var a = 0 ; a < choiceSelectionGateSAMCDataLen ; a++ ){
								if( choiceSelectionGateSAMCData[a].outputFeedback_Text != undefined ){
									enableFeedback = true;
									break;
								}
							}
							if( enableFeedback ){
								//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
								/*
								if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
									if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
										continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
									}else{
										continueButtonUpdate("Right", "CONTINUE", "StepForward");
									}
								}else{
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}
								*/
								continueButtonUpdate(
									courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", RightDouble
									courseStatusObject.currentBasePage_ContinueButtonLabel, //NEXT
									courseStatusObject.currentBasePage_ContinueButtonReaction //LaunchNextPathInGroup
								);
							}else{
								//console.log('outputBehavior = ' + currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior);
								if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
									continueButtonUpdate("Right", "CONTINUE", "Redirect");
								}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
									continueButtonUpdate("Down", "RETRY", "Disabled");
								}
							}
							//*////////////////////////
							
							// currentBasePage_Assessment_OutputList.length == 0
							
							
						break;
						case "Multiple Answer - Multiple Choice" : 
						case "Advanced Multiple Answer - Multiple Choice" :
						case "Write In - Field List" :
						case "Matching" :
						case "Ranking" :
							
							//*////////////////////
							var choiceSelectionGateMAMCData = currentBasePage_Assessment_SpecialHandlingData.data;
							var choiceSelectionGateMAMCDataLen = choiceSelectionGateMAMCData.length;
							for( var a = 0 ; a < choiceSelectionGateMAMCDataLen ; a++ ){
								if( choiceSelectionGateMAMCData[a].feedback != undefined &&
								choiceSelectionGateMAMCData[a].feedback != null &&
								choiceSelectionGateMAMCData[a].feedback != "" ){
									enableFeedback = true;
									break;
								}
							}
							if( enableFeedback ){
								//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
								/*
								if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
									if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
										//continueButtonUpdate("Down", "RETRY", "Retry");
										//continueButtonUpdate("Right", "CONTINUE", "ForceForward");
										//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
									}
									if( pageAssessmentSelectionResult.outputBehavior == "Redirect" ){
										//continueButtonUpdate("Right", "CONTINUE", "ForceForward");
									}
									continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
								}else{
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}
								*/
								continueButtonUpdate(
									courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", RightDouble
									courseStatusObject.currentBasePage_ContinueButtonLabel, //NEXT
									courseStatusObject.currentBasePage_ContinueButtonReaction //LaunchNextPathInGroup
								);
							}else{
								//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
								if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
									continueButtonUpdate("Right", "CONTINUE", "Redirect");
								}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
									continueButtonUpdate("Down", "RETRY", "Disabled");
								}
							}
							//*////////////////////////
							
							
						break;
					}
				}else{ // if page assessment exists & allows forward movement without correct selections
					//if( pageAssessmentNewSelectionState == "unchecked" ){
					if( courseStatusObject.currentBasePage_ContinueButtonStatus == "Disabled" ){
						//if( currentBasePage_Assessment_OutputList.length == 0 ){
							//continueButtonUpdate("Right", "CONTINUE", "StepForward");
						//}else{
							//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
								continueButtonUpdate("Right", "CONTINUE", "Disabled");
							//}
							//if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
								//continueButtonUpdate("Right", "CONTINUE", "Disabled");
							//}
						//}
					}else{
						switch( currentBasePage_Assessment_Type ){
							case "Single Answer - Multiple Choice" :
								
								/*
								if( courseStatusObject.currentBasePage_ContinueButtonReaction == "FeedbackCheck" ){
									continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
								}else{
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}	
								*/
								
								//*////////////////////
								var choiceSelectionGateSAMCData = 		currentBasePage_Assessment_OutputList;
								var choiceSelectionGateSAMCDataLen = 	choiceSelectionGateSAMCData.length;
								for( var a = 0 ; a < choiceSelectionGateSAMCDataLen ; a++ ){
									if( choiceSelectionGateSAMCData[a].outputFeedback_Text != undefined ){
										enableFeedback = true;
										break;
									}
								}
								if( enableFeedback ){
									//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
									
									/*
									if( pageAssessmentNewSelectionState == "unchecked"){
										//console.log("eef");
										if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
											//console.log("beef");
											if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
												continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
											}else{
												continueButtonUpdate("Right", "CONTINUE", "StepForward");
											}
										}else{
											//console.log("neef");
											continueButtonUpdate("Right", "CONTINUE", "StepForward");
										}
									}
									if( pageAssessmentNewSelectionState == "checked"){
										continueButtonUpdate("Right", "CONTINUE", "StepForward");
									}
									*/
									continueButtonUpdate(
										courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", RightDouble
										courseStatusObject.currentBasePage_ContinueButtonLabel, //NEXT
										courseStatusObject.currentBasePage_ContinueButtonReaction //LaunchNextPathInGroup
									);
									
								}else{
									//console.log('outputBehavior = ' + currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior);
									if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
										continueButtonUpdate("Right", "CONTINUE", "StepForward");
									}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
										continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
										continueButtonUpdate("Down", "RETRY", "Disabled");
									}
								}
								//*////////////////////////
							
								/*
								if( currentBasePage_Assessment_OutputList[currentSelection].outputStatus != "Correct" ){
									if( currentBasePage_Assessment_OutputList[currentSelection].outputBehavior == "Retry" ){
										//console.log('wmmk');
										continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
										//continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}
									if(currentBasePage_Assessment_OutputList[currentSelection].outputBehavior == "Redirect"){
										//console.log('wxxk');
										continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}
								}else{
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}
								/*/
							break;
							case "Multiple Answer - Multiple Choice" :
							case "Advanced Multiple Answer - Multiple Choice" :
							case "Write In - Field List" :
							case "Matching" :
							case "Ranking" :
							
								//*////////////////////
								var choiceSelectionGateMAMCData = currentBasePage_Assessment_SpecialHandlingData.data;
								var choiceSelectionGateMAMCDataLen = choiceSelectionGateMAMCData.length;
								for( var a = 0 ; a < choiceSelectionGateMAMCDataLen ; a++ ){
									if( choiceSelectionGateMAMCData[a].feedback != undefined &&
									choiceSelectionGateMAMCData[a].feedback != null &&
									choiceSelectionGateMAMCData[a].feedback != "" ){
										enableFeedback = true;
										break;
									}
								}
								if( enableFeedback ){
									//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
									/*
									if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
										if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
											//continueButtonUpdate("Down", "RETRY", "Retry");
											//continueButtonUpdate("Right", "CONTINUE", "ForceForward");
											//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
										}
										if( pageAssessmentSelectionResult.outputBehavior == "Redirect" ){
											//continueButtonUpdate("Right", "CONTINUE", "ForceForward");
										}
										continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
									}else{
										continueButtonUpdate("Right", "CONTINUE", "StepForward");
									}
									*/
									continueButtonUpdate(
										courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", RightDouble
										courseStatusObject.currentBasePage_ContinueButtonLabel, //NEXT
										courseStatusObject.currentBasePage_ContinueButtonReaction //LaunchNextPathInGroup
									);
								}else{
									//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
									if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
										continueButtonUpdate("Right", "CONTINUE", "StepForward");
									}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
										continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
										continueButtonUpdate("Down", "RETRY", "Disabled");
									}
								}
								//*////////////////////////
								
								/*
								if( pageAssessmentSelectionResult.outputStatus != "Correct" ){
									if( pageAssessmentSelectionResult.outputBehavior == "Retry" ){
										//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
										//console.log('waak');
										continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}
									if( pageAssessmentSelectionResult.outputBehavior == "Redirect" ){
										//console.log('w66k');
										continueButtonUpdate("Right", "CONTINUE", "Redirect");
									}
								}else{
									continueButtonUpdate("Right", "CONTINUE", "StepForward");
								}
								/*/
							break;
						}
					}
				}
			}else{ // no assessment present - allow step forward if not blocked or aletered
				
				//courseStatusObject.currentBasePage_ContinueButtonLabel = 		"Retry";
				//courseStatusObject.currentBasePage_ContinueButtonReaction =	ClickReact;
				//courseStatusObject.currentBasePage_ContinueButtonStatus = 		$('#navItem-continue').attr( 'data-buttonAction' ); // Disabled | Enabled;
				//continueButtonUpdate("Right", "CONTINUE", "StepForward");
				
				if( activeDataSource == "draggybox1" ){
					continueButtonUpdate("Right", "CONTINUE", "StepForward");
				}else if( activeDataSource == "draggybox2" ){
					if( courseModule_Module == currentGroupPathsCount ){ // current path in group is the last path in parent group
						continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
					}else{
						continueButtonUpdate("RightDouble", "NEXT", "LaunchNextPathInGroup");
					}
				}else{
					if( courseStatusObject.currentBasePage_ContinueButtonStatus == "Enabled" ){
						continueButtonUpdate("Right", "CONTINUE", "StepForward");
					}else{
						continueButtonUpdate("Right", "CONTINUE", "Disabled");
					}
				}
				
				
				/*
				if( courseStatusObject.currentBasePage_ContinueButtonStatus == "Enabled" ){
					continueButtonUpdate(
						courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", RightDouble
						courseStatusObject.currentBasePage_ContinueButtonLabel, //NEXT
						courseStatusObject.currentBasePage_ContinueButtonReaction //LaunchNextPathInGroup
					);
				}else{
					//continueButtonUpdate(
						//courseStatusObject.currentBasePage_ContinueButtonIcon,//"Right", 
						//courseStatusObject.currentBasePage_ContinueButtonLabel, 
						//courseStatusObject.currentBasePage_ContinueButtonReaction //"Disabled"
					//);
				}
				*/
			}
		}else{ // no enable continue
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
		}
		
		if(activeDataSource == "draggybox2"){
			
			//continueButtonUpdate("Credits", "CREDITS", "LaunchCredits");
		}
		
		/*
		if(enableContinue){
			if(pageAssessmentNewSelectionState == "unchecked"){
			//if(pageAssessmentNewSelectionState == "unchecked"){
				continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
			}else{
				continueButtonUpdate("Right", "CONTINUE", "StepForward");
			}
		}else{
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
		}
		*/
	}
}
// ! =============================================================
// ! F.Lightbox.Level1.Launcher ---
function level1LightboxLauncher(continueAction){
	lightBoxDialog_Level1_Engaged = true;
	checkLightBoxStack('add');
	showFooter = true;
	var level1LoaderType;
	if(continueAction == "FeedbackCheck"){
		pageAssessmentNewSelectionState = "checked";
		level1LoaderType = 'assessmentFeedbackHandler.html';
		//continueButtonUpdate("Right", "CONTINUE", "StepForward");
	}
	if(continueAction == "Hint"){
		level1LoaderType = 'assessmentHintHandler.html';
		//continueButtonUpdate("Down", "RESUME", "Resume");
		continueButtonUpdate("Down", "HIDE", "HideLbLvl1");
	}
	var winW = 						window.innerWidth; //$(window).width();
    var winH = 						window.innerHeight; //$(window).height();
    var contentBox = 				$('#CET-Activity-Content');
    var contentBoxW = 			contentBox.width();
    var contentBoxH = 			contentBox.height();
    var contentBoxPoz = 			contentBox.position(); // doesn't add margins
    var boxMarginTop = 			parseInt(contentBox.css('margin-top'));
    var boxMarginLeft = 			parseInt(contentBox.css('margin-left'));
    var contentBoxPozTop = 	contentBoxPoz.top + boxMarginTop;
    var contentBoxPozLeft = 	contentBoxPoz.left + boxMarginLeft; // figure out why DONT need to bump, like other dialog
    //var feedbackStatusLabel;
    var feedbackStatusLabelFull;
	var feedbackStatusIcon;
    var lightBoxLevel1Dialog = 	$("#lightBoxDialog-Level1").dialog({
        draggable: 	false,
        resizable: 		false,
        modal:     		true,
        closeOnEscape: 	false,
        autoOpen:  	false, // Don't open the dialog instantly. Let an event such as a button press open it. Optional.
        /*
        position: { // Set the position to center of the div.
            //my: 	"center top", 
            my: 	"center center", 
            //at: 	"center center-" + (winH / 4), 
            at: 	"center center", 
            
            //my: 	"center center", 
            //at: 	"center center+200", 
            
            //at: 	"center top+20", 
            //of: 	"#CET-Activity-Container",
            of: 	$("#CET-Activity-Content")
        },
        /*/
        width:	contentBoxW - 60,
		//height:	contentBoxH -  50,
		//height:	contentBoxH - (winH / 2),
		height:	contentBoxH - 100,
        open: function(event, ui){
        	// restricts to box shape in center
        	$('#lightBoxDialog-Level1').closest('.ui-dialog').css('min-height', '7em');
        	$('#lightBoxDialog-Level1').closest('.ui-dialog').css('padding-bottom', '0.3em');
        	$('#lightBoxDialog-Level1').closest('.ui-dialog').css( 'max-width', '600px' );
			$('#lightBoxDialog-Level1').closest('.ui-dialog').css( 'max-height', '600px' );
			$('#lightBoxDialog-Level1').css( 'padding-left', '0.5em' );
			$('#lightBoxDialog-Level1').css( 'padding-right', '0.5em' );
        	//lightBoxLevel1Dialog.dialog('option', 'position', "center");
            // position modal overlay
            var useW = 	contentBoxW + "px";
            var useH = 	contentBoxH + "px";
            
            var lightBoxDialog_Level1_TopNav = 	"";
            lightBoxDialog_Level1_TopNav += 		"<div class='lightBoxDialog_Level1_TopNav'>";
            lightBoxDialog_Level1_TopNav += 			"<div class='lightBoxDialog_Level1_TopNav_Inner'>";
            lightBoxDialog_Level1_TopNav += 				"<div class='lightBoxDialog_Level1_TopNav_CloseContainer'><div class='lightBoxDialog_Level1_TopNav_Close' data-StepStoneIcon='" + webFontAssignmentObject.ui_x1 + "'></div></div>";
            lightBoxDialog_Level1_TopNav += 			"</div>";
            lightBoxDialog_Level1_TopNav += 		"</div>";
            
            $('.ui-dialog').append(lightBoxDialog_Level1_TopNav);
            
            if( currentBasePage_Assessment_SingleAttempt ){
	            $('.lightBoxDialog_Level1_TopNav').hide();
            }
            
            $('.ui-widget-overlay').css('max-width', useW);
            $('.ui-widget-overlay').css('max-height', useH);
            $('.ui-widget-overlay').css('background', 'rgb(255,255,255)');
            $('.ui-widget-overlay').css('opacity', '.91');
            //$('.ui-widget-overlay').css('border-radius', '0 0 7px 7px');
            $('.ui-widget-overlay').offset({ 
                top: 	contentBoxPozTop, 
                left: 	contentBoxPozLeft
            });
            //var zzz = $('.ui-widget-overlay').zIndex();
            //('#CET-Activity-Footer').css('z-index', zzz +1);
            $('#lightBoxDialog-Level1').closest('.ui-dialog').css('box-shadow', '0px 0px 0px 3px #fff, 0 0 7px rgba(0,0,0,0.60)');
            $('#lightBoxDialog-Level1').closest('.ui-dialog').css('z-index', '300');
            
            var accessStatus = "";
            switch( pageAssessmentSelectionResult.outputStatus ){
				case "Correct" : 
					accessStatus = langPack.ui.stepAssessmentFeedback.status.correct;
				break;
				case "Partial" : 
					accessStatus = langPack.ui.stepAssessmentFeedback.status.partialCorrect;
				break;
				case "Incorrect" : 
					accessStatus = langPack.ui.stepAssessmentFeedback.status.incorrect;
				break;
				case "Neutral" : 
					
				break;
				case "Nullify" : 
					accessStatus = langPack.ui.stepAssessmentFeedback.status[pageAssessmentSelectionResult.outputSkin.toLowerCase()];
				break;
			}
            
            placeLocalizedContent({
				'targetItem' : 		$( '#ariaLiveAssertive' ) ,
				'srcData' : 		langPack.screenreader.ariaLiveNotice.stepAssessmentFeedbackLaunch , 
				'varSet' : 			[accessStatus]
			});
            //$('#ariaLiveAssertive').text( "You have launched the Assessment Feedback Panel. Status : " + feedbackStatusLabel );
            
            lightboxOverlayBGPlacer(1);
            maximizeCETActivityContentHeight();
        },
        close: function(event,ui){
	        lightBoxDialog_Level1_Engaged = false;
	        currentBasePage_Assessment_FeedbackWasChecked = true;
	        $('.lightBoxDialog_Level1_TopNav').remove();
	        checkLightBoxStack('remove');
	        lightBoxLevel1Dialog.empty().dialog("destroy");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
            $(this).appendTo( $("#lightBoxDialog-Level1-Breeder") );
	        maximizeCETActivityContentHeight();
        }
    });
    
    /*
    for(var m = 0 ; m < currentBasePage_Assessment_OutputList ; m++){
	    if(){
		    
	    }
    }
    */
    
    //for(var m = 0 ; m < pageAssessmentSelectionArray[0].length ; m++){
		//if(pageAssessmentSelectionArray[0].indexOf("on") != -1){
			//console.log(m);
			//var pageAssessmentSelectionResult = m;
			//pageAssessmentSelectionResult = currentBasePage_Assessment_OutputList[pageAssessmentSelectionArray[0].indexOf("on")];
			//console.log( "PASR . outputstatus = " + pageAssessmentSelectionResult.outputStatus + " --- " + pageAssessmentSelectionArray[0].indexOf("on") );
			//var pageAssessmentSelectionResultArray = $.makeArray(pageAssessmentSelectionResult);
			//var pageAssessmentSelectionResult_JSON = JSON.stringify(pageAssessmentSelectionResult);
			// this clears the escaped quotes around each object element id
			//var pageAssessmentSelectionResult_JSONCleansed = pageAssessmentSelectionResult_JSON.replace(/\"([^(\")"]+)\":/g,"$1:");
			//break;
		//}
	//}
    
    //var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
    $.ajax({
		type:			'GET',//'POST',
		url: 			level1LoaderType + dummyTStamp()
	}).done(function (doneResponse){
		$("#lightBoxDialog-Level1").html(doneResponse);
		/*
		<div id="CET-feedbackDialog-Content-Container">
			<div id="CET-feedbackStatus">
				<div id="CET-feedbackStatus-Icon-Container">
					<div class="CET-feedbackStatus-Icon indicator-incorrect" data-StepStoneIcon=<? echo $statusIcon ?>></div>
				</div>
			</div>
			<div id="CET-feedbackContent">
				<div id="feedbackIndicatorLabel" class="indicator-incorrect"><? echo $status ?></div>
				<div id="feedbackDetails"><? echo $fbText ?></div>
			</div>
		</div>
		
		$('#CET-Activity-Content-Assessment-PageChoiceSet li .CET-Choice-Radio').attr('data-StepStoneIcon', $.parseHTML("&#xe602;")[0].data); // set placeholder
		*/
		//var feedbackStatusLabel;
		//var feedbackStatusIcon;
		//console.log("pageAssessmentSelectionResult.outputStatus - " + pageAssessmentSelectionResult.outputStatus);
		if(pageAssessmentSelectionResult.outputStatus == "Correct"){
			//feedbackStatusLabel = 			"CORRECT";
			feedbackStatusIcon = 			webFontAssignmentObject.status_correct1;
			//echo alert("'. $selectedChoice . " --- " . $status . '");
			$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#dfedce');
			$('.CET-feedbackStatus-Icon').
				addClass('indicator-correct').
				removeClass('indicator-incorrect').
				removeClass('indicator-partial').
				removeClass('indicator-neutral')
			;
			$('#feedbackIndicatorLabel').
				addClass('indicator-correct').
				removeClass('indicator-incorrect').
				removeClass('indicator-partial').							
				removeClass('indicator-neutral')
			;
			continueButtonUpdate("Right", "CONTINUE", "StepForward");
		}else if(pageAssessmentSelectionResult.outputStatus == "Partial"){
			//feedbackStatusLabel = 			"PARTIALLY CORRECT";
			feedbackStatusIcon = 			webFontAssignmentObject.status_alert1;
			$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#f0efc5');
			$('.CET-feedbackStatus-Icon').
				removeClass('indicator-correct').
				removeClass('indicator-incorrect').
				addClass('indicator-partial').
				removeClass('indicator-neutral')
			;
			$('#feedbackIndicatorLabel').
				removeClass('indicator-correct').
				removeClass('indicator-incorrect').
				addClass('indicator-partial').
				removeClass('indicator-neutral')
			;
			//console.log("PASRRRR - " + pageAssessmentSelectionResult.outputBehavior);
			if( pageAssessmentSelectionResult.outputBehavior == "Retry" || currentBasePage_Assessment_Requirement == "Correct" ){
				continueButtonUpdate("Down", "RETRY", "Retry");
			}else{
				//console.log('wook');
				continueButtonUpdate("Right", "CONTINUE", "Redirect");
			}
			// partial bg = f4e8c3
		}else if(pageAssessmentSelectionResult.outputStatus == "Incorrect"){
			//feedbackStatusLabel = 			"INCORRECT";
			feedbackStatusIcon = 			webFontAssignmentObject.status_incorrect;
			$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#f2ccc5');
			$('.CET-feedbackStatus-Icon').
				removeClass('indicator-correct').
				addClass('indicator-incorrect').
				removeClass('indicator-partial').
				removeClass('indicator-neutral')
			;
			$('#feedbackIndicatorLabel').
				removeClass('indicator-correct').
				addClass('indicator-incorrect').
				removeClass('indicator-partial').
				removeClass('indicator-neutral')
			;
			//console.log("PASRRRR - " + pageAssessmentSelectionResult.outputBehavior);
			if( pageAssessmentSelectionResult.outputBehavior == "Retry" || currentBasePage_Assessment_Requirement == "Correct" ){
				continueButtonUpdate("Down", "RETRY", "Retry");
			}else if( pageAssessmentSelectionResult.outputBehavior == "Step Forward" ){
				continueButtonUpdate("Right", "CONTINUE", "StepForward");
			}else{
				//console.log('wiik');
				continueButtonUpdate("Right", "CONTINUE", "Redirect");
			}
			// partial bg = f4e8c3
		}else if(pageAssessmentSelectionResult.outputStatus == "Neutral"){
			//feedbackStatusLabel = 			"NEUTRAL";
			//feedbackStatusLabel = 			"";
			feedbackStatusIcon = 			webFontAssignmentObject.status_alert1;//webFontAssignmentObject.status_neutral;
			//$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#a6a6a6');
			$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#E3E3E3');
			//*
			$('.CET-feedbackStatus-Icon').
				removeClass('indicator-correct').
				removeClass('indicator-incorrect').
				removeClass('indicator-partial').
				addClass('indicator-neutral')
			;
			//*/
			//$('.CET-feedbackStatus-Icon').hide();
			//*
			$('#feedbackIndicatorLabel').
				removeClass('indicator-correct').
				removeClass('indicator-incorrect').
				removeClass('indicator-partial').
				addClass('indicator-neutral')
			;
			//*/
			//$('#feedbackIndicatorLabel').hide();
			//console.log("PASRRRR - " + pageAssessmentSelectionResult.outputBehavior);
			if( pageAssessmentSelectionResult.outputBehavior == "Retry" || currentBasePage_Assessment_Requirement == "Correct" ){
				continueButtonUpdate("Down", "RETRY", "Retry");
			}else if( pageAssessmentSelectionResult.outputBehavior == "Step Forward" ){
				continueButtonUpdate("Right", "CONTINUE", "StepForward");
			}else{
				//console.log('wffk');
				continueButtonUpdate("Right", "CONTINUE", "Redirect");
			}
			// partial bg = f4e8c3
		}else if(pageAssessmentSelectionResult.outputStatus == "Nullify"){
			var nullifySkin = pageAssessmentSelectionResult.outputSkin;
			switch( nullifySkin ){
				case "Correct" : 
					feedbackStatusIcon = 			webFontAssignmentObject.status_correct1;
					$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#dfedce');
					$('.CET-feedbackStatus-Icon').
						addClass('indicator-correct').
						removeClass('indicator-incorrect').
						removeClass('indicator-partial').
						removeClass('indicator-neutral')
					;
					$('#feedbackIndicatorLabel').
						addClass('indicator-correct').
						removeClass('indicator-incorrect').
						removeClass('indicator-partial').							
						removeClass('indicator-neutral')
					;
				break;
				case "Incorrect" : 
					feedbackStatusIcon = 			webFontAssignmentObject.status_incorrect;
					$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#f2ccc5');
					$('.CET-feedbackStatus-Icon').
						removeClass('indicator-correct').
						addClass('indicator-incorrect').
						removeClass('indicator-partial').
						removeClass('indicator-neutral')
					;
					$('#feedbackIndicatorLabel').
						removeClass('indicator-correct').
						addClass('indicator-incorrect').
						removeClass('indicator-partial').
						removeClass('indicator-neutral')
					;
				break;
				case "Partial" : 
					feedbackStatusIcon = 			webFontAssignmentObject.status_alert1;
					$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#f0efc5');
					$('.CET-feedbackStatus-Icon').
						removeClass('indicator-correct').
						removeClass('indicator-incorrect').
						addClass('indicator-partial').
						removeClass('indicator-neutral')
					;
					$('#feedbackIndicatorLabel').
						removeClass('indicator-correct').
						removeClass('indicator-incorrect').
						addClass('indicator-partial').
						removeClass('indicator-neutral')
					;
				break;
				case "Neutral" : 
					feedbackStatusIcon = 			webFontAssignmentObject.status_alert1;//webFontAssignmentObject.status_neutral;
					$('#lightBoxDialog-Level1').closest('.ui-dialog').css('background','#E3E3E3');
					$('.CET-feedbackStatus-Icon').
						removeClass('indicator-correct').
						removeClass('indicator-incorrect').
						removeClass('indicator-partial').
						addClass('indicator-neutral')
					;
					$('#feedbackIndicatorLabel').
						removeClass('indicator-correct').
						removeClass('indicator-incorrect').
						removeClass('indicator-partial').
						addClass('indicator-neutral')
					;
				break;
			}
			// accessStatus = langPack.ui.stepAssessmentFeedback.status[pageAssessmentSelectionResult.outputSkin.toLowerCase()];
			
		}
		
		//console.log('si ' + feedbackStatusIcon);
		$( '.CET-feedbackStatus-Icon' ).attr( 'data-StepStoneIcon' , $.parseHTML(feedbackStatusIcon)[0].data );
		
		//feedbackStatusLabelFull = '<span class="accessViz">Feedback Status: </span><span class="feedbackStatusLabel">' + feedbackStatusLabel + '</span>';
		// <div id="feedbackIndicatorLabel" class="feedbackIndicatorLabel indicator-incorrect"><span class="accessViz" data-uiText="feedbackIndicatorLabelAccess">Feedback Status: </span><span data-uiText="feedbackIndicatorLabelText">Feedback Status: </span></div>
		
		//$( '#feedbackIndicatorLabel' ).html( feedbackStatusLabelFull );
		//var useFeedbackStatus = "";
		
		placeLocalizedContent({
			'targetItem' : 		$( '[data-uiText="FeedbackIndicatorLabelAccess"]' ) ,
			'srcData' : 		langPack.screenreader.stepAssessmentFeedback.feedbackStatus
		});
		
		switch( pageAssessmentSelectionResult.outputStatus ){
			case "Correct" : 
				placeLocalizedContent({
					'targetItem' : 	$( '[data-uiText="FeedbackIndicatorLabelText"]' ) ,
					'srcData' : 	langPack.ui.stepAssessmentFeedback.status.correct
				});
			break;
			case "Partial" : 
				placeLocalizedContent({
					'targetItem' : 	$( '[data-uiText="FeedbackIndicatorLabelText"]' ) ,
					'srcData' : 	langPack.ui.stepAssessmentFeedback.status.partialCorrect
				});
			break;
			case "Incorrect" : 
				placeLocalizedContent({
					'targetItem' : 	$( '[data-uiText="FeedbackIndicatorLabelText"]' ) ,
					'srcData' : 	langPack.ui.stepAssessmentFeedback.status.incorrect
				});
			break;
			case "Neutral" : 
				
			break;
			case "Nullify" : 
				placeLocalizedContent({
					'targetItem' : 	$( '[data-uiText="FeedbackIndicatorLabelText"]' ) ,
					'srcData' : 	langPack.ui.stepAssessmentFeedback.status[pageAssessmentSelectionResult.outputSkin.toLowerCase()]
				});
			break;
		}
		
		//<span class="accessViz">Course Title: </span><span class="normalViz"></span>
		
		$( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' , pageAssessmentSelectionResult.outputStatus );
		
		// detailed feedback results, currently for matching
		/*
		<div id="CET-feedbackDetails">
			<!--<div id="feedbackMediaBlock"></div>-->
			<div id="feedbackDetailsContent"></div>
		</div>	
		*/
		var showFeedbackDetails_Correct = true; // toggle this
		//var buildSelectionDetailsContent = "";
		switch( currentBasePage_Assessment_Type ){
			case "Matching":
				if( currentBasePage_Assessment_FeedbackDetails != undefined && 
					currentBasePage_Assessment_FeedbackDetails != "" && 
					currentBasePage_Assessment_FeedbackDetails.length > 0 ){
					// cycling via the visual stack list, so shuffling is displayed in feedback as well
					cycleTop:
					for( var a = 0 ; a < currentBasePage_Assessment_OutputList.length ; a++ ){
						var buildSelectionDetailsContent = ""; // placed here for cyclic append method
						var choicePath = 									currentBasePage_Assessment_OutputList[a];
						buildSelectionDetailsContent += 				'<div class="feedbackDetailBlock">';
						buildSelectionDetailsContent += 					'<div class="feedbackDetailBlockStatusIcon"></div>';
						buildSelectionDetailsContent += 					'<div class="feedbackDetail_ChoiceText">';
						buildSelectionDetailsContent += 						choicePath.outputDisplayText;
						buildSelectionDetailsContent += 					'</div>';
						var selectedChoiceOID = 							pageAssessmentSelectionArray[0][a];
						cycleInner1:
						for( var b = 0 ; b < choicePath.choiceOptions.length ; b++ ){
							var selectedOptionPath = 						choicePath.choiceOptions[b];
							if( selectedOptionPath.oid == selectedChoiceOID ){
								if( currentBasePage_Assessment_FeedbackDetails.indexOf("Selected") != -1 ){
									buildSelectionDetailsContent += 		'<div class="feedbackDetail_SelectedOptionInfo">';
									//var indicatorLC = 								selectedOptionPath.outputStatus.toLowerCase();
									buildSelectionDetailsContent += 			'<div class="feedbackDetail_SelectedOptionStatusLabel">';
									if( currentBasePage_Assessment_FeedbackDetails.indexOf( "Status" ) != -1 ){
										buildSelectionDetailsContent += 				"Selected (" + selectedOptionPath.outputStatus + "): ";
									}else{
										buildSelectionDetailsContent += 				"Selected: ";
									}
									buildSelectionDetailsContent += 			'</div>';
									buildSelectionDetailsContent += 			'<div class="feedbackDetail_SelectedOptionText">';
									buildSelectionDetailsContent += 				selectedOptionPath.text;
									buildSelectionDetailsContent += 			'</div>';
									buildSelectionDetailsContent += 		'</div>'; // close feedbackDetail_SelectedOptionInfo
								}
								if( selectedOptionPath.outputStatus != "Correct" && currentBasePage_Assessment_FeedbackDetails.indexOf("Correct") != -1 ){
									buildSelectionDetailsContent += 		'<div class="feedbackDetail_CorrectOptionInfo">';
									buildSelectionDetailsContent += 			'<div class="feedbackDetail_CorrectOptionStatusLabel">';
									buildSelectionDetailsContent += 				"Correct option: ";
									buildSelectionDetailsContent += 			'</div>';
									buildSelectionDetailsContent += 			'<div class="feedbackDetail_CorrectOptionText">';
									cycleInner2:
									for( var c = 0 ; c < choicePath.choiceOptions.length ; c++ ){
										if( choicePath.choiceOptions[c].outputStatus == "Correct" ){
											buildSelectionDetailsContent += 		choicePath.choiceOptions[c].text;
											break cycleInner2;
										}
									}
									buildSelectionDetailsContent += 			'</div>';
									/*
									// not using the added-correct feedback for now
									var correctOptionFeedbackText = 		"";
									// check for choice-level feedback (all options)
									//var correctOptionFeedback =  				choicePath.choiceOptions[c].feedback;
									if( !useChoiceLevelFeedback ){
										var correctOptionFeedback =  			choicePath.choiceOptions[c].feedback;
										if( correctOptionFeedback != undefined && choiceOptionFeedback != "" ){
											var correctOptionFeedbackText =  	correctOptionFeedback.text;
											if( correctOptionFeedbackText != undefined && correctOptionFeedbackText != "" ){
												choiceFeedbackText = 				choiceOptionFeedbackText;
											}
										}
									}
									if( choiceFeedbackText != "" ){
										buildSelectionDetailsContent += 		'<div class="feedbackDetail_SelectedOptionFeedbackText">';
										buildSelectionDetailsContent += 			choiceFeedbackText;
										buildSelectionDetailsContent += 		'</div>';
									}
									*/
									buildSelectionDetailsContent += 		'</div>';	// close feedbackDetail_CorrectOptionInfo
								}
								// apply detail feedback for choice after the above selected/correct indications
								//if( currentBasePage_Assessment_FeedbackDetails.indexOf("DetailText") != -1 ){
								if( currentBasePage_Assessment_FeedbackDetails.indexOf("GranularText") != -1 ){
									var choiceFeedbackText = 					"";
									// check for choice-level feedback (all options)
									var choiceFeedback =  						choicePath.feedback;
									//console.log( "choicePath : " + choicePath );
									//console.log( JSON.stringify( choicePath , null , 4 ) );
									//console.log( "selectedOptionPath : " + selectedOptionPath );
									//console.log( JSON.stringify( selectedOptionPath , null , 4 ) );
									//var useChoiceLevelFeedback = 		false;
									if( choiceFeedback != undefined && choiceFeedback != "" ){
										var choiceFeedbackTextFetch =  	choiceFeedback.text;
										if( choiceFeedbackTextFetch != undefined && choiceFeedbackTextFetch != "" ){
											choiceFeedbackText = 				choiceFeedbackTextFetch;
										}
										//useChoiceLevelFeedback = true;
									}//else{ // if no choice-level feedback, check for option-level feedback
									var choiceOptionFeedbackText = 		"";
									var choiceOptionFeedback =  		selectedOptionPath.feedback;
									if( choiceOptionFeedback != undefined && choiceOptionFeedback != "" ){
										var choiceOptionFeedbackTextFetch =  choiceOptionFeedback.text;
										if( choiceOptionFeedbackTextFetch != undefined && choiceOptionFeedbackTextFetch != "" ){
											choiceOptionFeedbackText = 		choiceOptionFeedbackTextFetch;
										}
									}
									//}
									//console.log( "choiceFeedbackText = " + choiceFeedbackText );
									if( choiceFeedbackText != "" ){
										buildSelectionDetailsContent += 	'<div class="feedbackDetail_SelectedOptionFeedbackText">';
										buildSelectionDetailsContent += 		choiceFeedbackText;
										if( choiceFeedbackText!= "" && choiceOptionFeedbackText != "" ){
											buildSelectionDetailsContent += 		'<br /><br />';
										}
										if( choiceOptionFeedbackText != "" ){
											buildSelectionDetailsContent += 		choiceOptionFeedbackText;
										}
										buildSelectionDetailsContent += 	'</div>';
									}
								}
								break cycleInner1;
							} // end if selectedOptionPath.oid == selectedChoiceOID processing
						} // end cycleInner1;
						buildSelectionDetailsContent += 				'</div>'; // close feedbackDetailBlock
						//console.log( "doappend --- " + a );
						$( '#feedbackDetailsContent' ).append( buildSelectionDetailsContent );
						if( currentBasePage_Assessment_FeedbackDetails.indexOf( "Status" ) != -1 ){
							var feedbackDetailBlockStatusIcon;
							switch( selectedOptionPath.outputStatus ){
								case "Correct" :
									feedbackDetailBlockStatusIcon = webFontAssignmentObject.status_correct1;
								break;
								case "Incorrect" :
									feedbackDetailBlockStatusIcon = webFontAssignmentObject.status_incorrect;
								break;
								case "Partial" :
									feedbackDetailBlockStatusIcon = webFontAssignmentObject.status_alert1;
								break;
								/*case "Neutral" :
									feedbackDetailBlockStatusIcon = webFontAssignmentObject.status_neutral1;
								break;*/
								//case "Nullify" :
									
								//break;
							}
							$( '#feedbackDetailsContent' ).find( '.feedbackDetailBlock' ).last().find( '.feedbackDetailBlockStatusIcon' ).attr( 'data-StepStoneIcon' , $.parseHTML( feedbackDetailBlockStatusIcon )[0].data );
							$( '#feedbackDetailsContent' ).find( '.feedbackDetailBlock' ).last().addClass( "detailBlockStatusDisplayed" );
						}else{
							$( '#feedbackDetailsContent' ).find( '.feedbackDetailBlock' ).last().find( '.feedbackDetailBlockStatusIcon' ).remove();
						}
						//continue cycleTop;
					} // end cycleTop loop
					//$( '#feedbackDetailsContent' ).html( buildSelectionDetailsContent );
					$( '#CET-feedbackDetails' ).show();
				} // end currentBasePage_Assessment_FeedbackDetails check
			break;
		}
		
		var viewFBText = "";
		// look for feedback text in 2 possible locations (refine later)
		if( pageAssessmentSelectionResult.feedback != undefined &&  
			pageAssessmentSelectionResult.feedback != '' && 
			pageAssessmentSelectionResult.feedback != null && 
			pageAssessmentSelectionResult.feedback.text != undefined &&  
			pageAssessmentSelectionResult.feedback.text != '' && 
			pageAssessmentSelectionResult.feedback.text != null ){
			viewFBText = pageAssessmentSelectionResult.feedback.text;
		}
		if( pageAssessmentSelectionResult.outputFeedback_Text != undefined &&  
			pageAssessmentSelectionResult.outputFeedback_Text != '' && 
			pageAssessmentSelectionResult.outputFeedback_Text != null ){
			viewFBText = pageAssessmentSelectionResult.outputFeedback_Text;
		}
		if( viewFBText != "" ){
			viewFBText = '<span class="accessViz">' + langPack.screenreader.stepAssessmentFeedback.feedbackMainText + '</span><span class="feedbackTextVisible">' + viewFBText + '</span>';
			$( '#feedbackText' ).html( viewFBText );
		}else{
			$( '#feedbackText' ).hide();
		}
		
		// if media is present for the feedback window
		//console.log('before media check');
		
		
		switch( masterJSONStorage.currentStep.Assessment.type ){
			case "Single Answer - Multiple Choice" :
				if( 'outputFeedback_Media_Display' in pageAssessmentSelectionResult ){
					//console.log('media called');
					if( pageAssessmentSelectionResult.outputFeedback_Media_Display != undefined && 
						pageAssessmentSelectionResult.outputFeedback_Media_Display != '' && 
						pageAssessmentSelectionResult.outputFeedback_Media_Display != null ){
						//$('#feedbackMedia').html(pageAssessmentSelectionResult.outputFeedback_Media_Display);
						//singleMediaBuild( 'Image', '../../content/' + CETActivityID + '/media/' + pageAssessmentSelectionResult.outputFeedback_Media_Display, "Feedback", $('#feedbackMedia') );
						//singleMediaBuild( 'Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + pageAssessmentSelectionResult.outputFeedback_Media_Display, "Feedback", $('#feedbackMedia') );
						$('#feedbackMediaBlock').html('<div id="feedbackMedia"></div>');
						singleMediaBuild( 'Image', mediaPathConstructor({ 'mediaFileName' : pageAssessmentSelectionResult.outputFeedback_Media_Display }), "Feedback", $('#feedbackMedia') );
						var feedbackMediaCaption = pageAssessmentSelectionResult.outputFeedback_Media_Caption;
						if( feedbackMediaCaption != "" && 			
							feedbackMediaCaption != null && 
							feedbackMediaCaption != undefined){
							//if( currentBasePage_Content_PageMedia_Main.length  == 1 ){
								//if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1" ){
									var singleFeedbackMediaCaptionBuild = '<div class="singleFeedbackMediaDisplayCaptionBox">';
									singleFeedbackMediaCaptionBuild +=     	'<div class="singleFeedbackMediaDisplayCaptionBoxInner">' + feedbackMediaCaption + '</div>';
									singleFeedbackMediaCaptionBuild += 	'</div>';
									$('#feedbackMedia').css('border-radius', '0.3em .3em 0 0');
									//$('.CET-Activity-Content-Main-MediaBlock').after(singleMediaCaptionBuild);
									$('#feedbackMedia').after(singleFeedbackMediaCaptionBuild);
									// needed to place caption behind media block?
									//var mediaBoxZ = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').zIndex();
									//$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('z-index', mediaBoxZ - 1);
								//}
							//}
						}
						
						/*
							
						[16].pageAssessmentSelectionResult.outputFeedback_Media_Caption
							
						if(currentBasePage_Content_PageMedia_Main[g].mediaCaption != "" && currentBasePage_Content_PageMedia_Main[g].mediaCaption != null && currentBasePage_Content_PageMedia_Main[g].mediaCaption != undefined){
							if( currentBasePage_Content_PageMedia_Main.length  == 1 ){
								if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1" ){
									var singleMediaCaptionBuild = '<div class="singleMediaDisplayCaptionBox">';
									singleMediaCaptionBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner">' + currentBasePage_Content_PageMedia_Main[g].mediaCaption + '</div>';
									singleMediaCaptionBuild += 	'</div>';
									$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('border-radius', '0.3em .3em 0 0');
									//$('.CET-Activity-Content-Main-MediaBlock').after(singleMediaCaptionBuild);
									$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').after(singleMediaCaptionBuild);
									// needed to place caption behind media block?
									//var mediaBoxZ = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').zIndex();
									//$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('z-index', mediaBoxZ - 1);
								}
							}
						}
						*/
						
						var feedbackMediaDescriptionDisplay = pageAssessmentSelectionResult.outputFeedback_Media_descriptionDisplay;
						if( feedbackMediaDescriptionDisplay != "" && 			
							feedbackMediaDescriptionDisplay != null && 
							feedbackMediaDescriptionDisplay != undefined){
						//if( pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay !=  undefined && 
							//pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay != "" ){
							var singleFeedbackMediaAssistiveDescBuild = 	'<div class="accessViz">';
							//singleFeedbackMediaAssistiveDescBuild +=     		pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay;
							singleFeedbackMediaAssistiveDescBuild += feedbackMediaDescriptionDisplay
							singleFeedbackMediaAssistiveDescBuild += 		'</div>';
							$('#feedbackMedia').after(singleFeedbackMediaAssistiveDescBuild);
						}
						
					}
				}else{
					//console.log('no mmedia');
					$('#feedbackMediaBlock').hide();
				}
			break;
			case "Multiple Answer - Multiple Choice" :
			case "Advanced Multiple Answer - Multiple Choice" :
			case "Write In - Field List" :
			case "Matching" :
			case "Ranking" :
				if( pageAssessmentSelectionResult.feedback.media != undefined ){
					if( pageAssessmentSelectionResult.feedback.media[0].display != undefined ){
						$('#feedbackMediaBlock').html('<div id="feedbackMedia"></div>');
						singleMediaBuild( 'Image', mediaPathConstructor({ 'mediaFileName' : pageAssessmentSelectionResult.feedback.media[0].display }), "Feedback", $('#feedbackMedia') );
						var feedbackMediaCaption = pageAssessmentSelectionResult.feedback.media[0].caption;
						if( feedbackMediaCaption != "" && 			
							feedbackMediaCaption != null && 
							feedbackMediaCaption != undefined ){
							var singleFeedbackMediaCaptionBuild = '<div class="singleFeedbackMediaDisplayCaptionBox">';
							singleFeedbackMediaCaptionBuild +=     	'<div class="singleFeedbackMediaDisplayCaptionBoxInner">' + feedbackMediaCaption + '</div>';
							singleFeedbackMediaCaptionBuild += 	'</div>';
							$('#feedbackMedia').css('border-radius', '0.3em .3em 0 0');
							$('#feedbackMedia').after(singleFeedbackMediaCaptionBuild);
						}
						if( pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay != undefined && 
							pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay != "" ){
							var singleFeedbackMediaAssistiveDescBuild = 	'<div class="accessViz">';
							singleFeedbackMediaAssistiveDescBuild +=     		pageAssessmentSelectionResult.feedback.media[0].descriptionDisplay;
							singleFeedbackMediaAssistiveDescBuild += 		'</div>';
							$('#feedbackMedia').after(singleFeedbackMediaAssistiveDescBuild);
						}
					}else{
						$('#feedbackMediaBlock').hide();
					}
				}else{
					$('#feedbackMediaBlock').hide();
				}
			break;
		}
		
		/*
		// blank OR feedback text
		assessmentChoiceObjectData.outputFeedback_Text = $(this).find("nodeAssessment_OutputFeedbackText").text();
		
		// feedback image display
		assessmentChoiceObjectData.outputFeedback_Media_Display = $(this).find("nodeAssessment_OutputFeedbackMedia_Display").text();
		
		// feedback image launcher
		assessmentChoiceObjectData.outputFeedback_Media_Launched = $(this).find("nodeAssessment_OutputFeedbackMedia_Launched").text();
		*/
		
		lightBoxLevel1Dialog.dialog('open').focus();
		updateFocus({ 'action' : "Update" });
		//if(continueAction == "feedbackCheck"){
			$("#CET-Activity-Content-Assessment").addClass("stepAssessmentResultsReviewable");
			$("#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer").show();
		//}
		
		
		//$("#lightBoxDialog-Level1").closest('.ui-dialog').css('background', 'transparent');
		
		
		if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" ){
			
			var forcedFocus = false;
			//var fbTabTargetSet = false;
			if( !$('.CET-feedbackDetails' ).is(":hidden") && !forcedFocus ){
				forcedFocus = true;
				$('.CET-feedbackDetails').focus();
			}
			if( $('.feedbackText' ).text().length > 0 && !forcedFocus ){
				forcedFocus = true;
				$('.feedbackText' ).focus();
			}
			if( !$('.feedbackMediaBlock' ).is(":hidden") && !forcedFocus ){
				forcedFocus = true;
				$('.feedbackText' ).focus();
			}
			
		}else{
			//$( '#feedbackIndicatorLabel' ).focus();
			$( '.feedbackLabel' ).focus();
		}
		updateFocus({ 'action' : "Update" });
		
		//console.log( "lblvl1 focused id = " + $(document.activeElement).attr('id') );
		//console.log( "lblvl1 focused class = " + $(document.activeElement).attr('class') );
		
		if(continueAction == "hint"){
			$("#feedbackDetails").html(currentBasePage_Assessment_HintText);
		}
		
		// setup feedback text for ADA focusing
	    //$( '.authorInfo .authorBlock' ).each(function(){
			setupTextHyperlinks({ 
				'linkElement' : $('.CET-feedbackContent .feedbackText a'), 
				'uniqueClass' : "FeedbackTextMainHyperlink" 
			});
		//});
		
		
		/*
		var buildFeedbackViewContentSwitch = "";
		buildFeedbackViewContentSwitch += 	'<div id="CET-SwitchFeedbackContentButtonContainer" class="feedbackHeaderDrapedButton" data-triggerFeedback="Correct">';
		buildFeedbackViewContentSwitch += 		'<div class="CET-NavItem-Icon" data-StepStoneIcon="&#xe633;"></div>';
		buildFeedbackViewContentSwitch += 		'<div class="CET-NavItem-Text">VIEW <span class="switchFeedbackButtonTriggerStatus">CORRECT</span> FEEDBACK</div>';
		buildFeedbackViewContentSwitch += 	'</div>';
		$('.lightBoxDialog_Level1_TopNav_Inner' ).prepend( buildFeedbackViewContentSwitch );
		$('.lightBoxDialog_Level1_TopNav_Inner' ).closest( '.ui-dialog' ).addClass( "feedbackTopBarActive" );
		*/
		
		//$("#CET-feedbackContent").width($("#CET-feedbackContent").width() - 40); // temporary width reduction of feedback label and text box
	}).fail(function (failResponse){
		console.log('error');
	});
	//}
}

// ! =============================================================
// ! F.Lightbox.Level2.Launcher ---
function level2LightboxLauncher( context ){
	
	var event = context.event;
	
	//var originalPageIndicatorIcon = $('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon');
	//alert(originalPageIndicatorIcon);
	
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.launcher_subsequence)[0].data);
	//webFontAssignmentObject.badge_infoonly
	//currentBasePage_Meta_pageTypeIndicatorIcon
	
	lightBoxDialog_Level2_Engaged = true;
	continueButtonUpdate("Down", "RESUME", "Resume");
	checkLightBoxStack('add');
	showFooter = true;
	//lightBoxDialog_Level2_EngagedContentType = contentType;
	$('.lightBoxDialog_Level1_TopNav').hide();
	var headerBarH = 				$('#CET-Activity-Header').outerHeight(true);
	var footerBarH = 				$('#CET-Activity-Footer').outerHeight(true);
	var pageTitleBarH = 			$('#CET-Activity-Content-Title-Bar').outerHeight(true);
	var winW = 						window.innerWidth; //$(window).width();
	var winH = 						window.innerHeight; //$(window).height();
	var contentBox = 				$('#CET-Activity-Container');
	var contentBoxW = 			contentBox.width();
	var contentBoxH = 			contentBox.height();
	var contentBoxPoz = 			contentBox.position(); // doesn't add margins
	var boxMarginTop = 			parseInt(contentBox.css('margin-top'));
	var boxMarginLeft = 			parseInt(contentBox.css('margin-left'));
	var contentBoxPozTop = 	contentBoxPoz.top + boxMarginTop;
	var contentBoxPozLeft = 	contentBoxPoz.left + boxMarginLeft + 1; // figure out why need to bump 
	//var contentBoxPozLeft = contentBoxPoz.left + boxMarginLeft; // figure out why DONT need to bump, like other dialog
	var topNavPushDown = 	50;
	//var loadContentURL;
	var lightBoxLevel2Dialog = $("#lightBoxDialog-Level2").dialog({ // Set the settings for the jquery-ui dialog here.
		draggable: 	false,
	    resizable: 	false,
	    modal:     	true,
	    closeOnEscape: 	false,
	    autoOpen:  	false, // Don't open the dialog instantly. Let an event such as a button press open it. Optional.
	    position: { // Set the position to center of the div.
			my: 	"center top", 
			at: 	"center top", 
	        //at: 	"center top+" + (headerBarH + 20), 
	        //at: 	"center top+" + (headerBarH + topNavPushDown), 
	        //of: 	"#CET-Activity-Container",
	        //of: 	$("#CET-Activity-Container")
	        of: 	$("#CET-Activity-Content-Main")
	    },
	    width:	contentBoxW - 60,
		height:	contentBoxH -  (headerBarH + footerBarH + 30),
		//height:	contentBoxH - 100,
		open: function(event, ui){
	        // position modal overlay
	        //$('#lightBoxDialog-Level2').closest('.ui-dialog').css('min-height', '7em');
        	//$('#lightBoxDialog-Level2').closest('.ui-dialog').css('padding-bottom', '0.3em');
        	//$('#lightBoxDialog-Level2').closest('.ui-dialog').css( 'max-width', '600px' );
			//$('#lightBoxDialog-Level2').closest('.ui-dialog').css( 'max-height', '600px' );
			//$('#lightBoxDialog-Level2').css( 'padding-left', '0.5em' );
			//$('#lightBoxDialog-Level2').css( 'padding-right', '0.5em' );
	        
	        $("#lightBoxDialog-Level2").closest('.ui-dialog').css('padding', 0);
	        $("#lightBoxDialog-Level2").css('overflow', 'hidden');
	        var useW = 	contentBoxW + "px";
	        var useH = 	( (contentBoxH - footerBarH - pageTitleBarH - headerBarH) + 3 ) + "px"; // why extra px?
	        //var useH = 	contentBoxH + "px";
	        
	        $('.ui-widget-overlay').css('max-width', useW);
	        $('.ui-widget-overlay').css('max-height', useH);
	        //$('.ui-widget-overlay').css('border-radius', '0 0 7px 7px');
	        $('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
	        $('.ui-widget-overlay').css('opacity', '.91');
	        $('.ui-widget-overlay').offset({
	            top: 	contentBoxPozTop + headerBarH + pageTitleBarH, 
	            //top: 	contentBoxPozTop, 
	            left: 	contentBoxPozLeft
	        });
	        //var UIDialogBoxHeight = $('.lightBoxDialog_Level2_Content').closest('.ui-dialog-content').height();
	        //var contentBoxHeight = $('.lightBoxDialog_Level2_Content').height();
	        //var newH = UIDialogBoxHeight - $('.lightBoxDialog_Level2_TopNav_LabelBox').height();
	        
	        //var paperW;
	        
	        //$('#lightBoxDialog-Level2').closest('.ui-dialog').css('box-shadow', '0px 0px 0px 2px white');
	        
	        $('#lightBoxDialog-Level2').closest('.ui-dialog').css('z-index', '400');
	        lightboxOverlayBGPlacer(2);
	        
	        // default to first page in subsequence
	        currentBasePage_Content_SubSequenceCurrentPage = currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].currentPage;
	        
            //$('.subSequenceNav-NumBox-HardFirst').html('1');
			//$('.subSequenceNav-NumBox-HardLast').html(totalSubSeqPages);
			/*
			var grabNavNumTotal = addLeadingZeros({ 
				"baseNum" : currentBasePage_Content_SubSequenceCurrentPageTotal
			});
			$('.subSequenceNavNumTotal').html( grabNavNumTotal );
			*/
			$('.subSequenceNav-PrevBut').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_left)[0].data);
			$('.subSequenceNav-NextBut').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_right)[0].data);
			
	        newSubSequencePageAction({ 'action' : "LaunchSubSequencePanel" });   
	        
	        webFontForceRedraw('.subSequenceNav-PrevBut');
			webFontForceRedraw('.subSequenceNav-NextBut');
			
			maximizeCETActivityContentHeight();
			maximizerDelayRelay();
	    },
	    close: function(event, ui){
	        lightBoxDialog_Level2_Engaged = false;
	        $('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(currentBasePage_Meta_pageTypeIndicatorIcon)[0].data);
	        //$('.lightBoxDialog_Level2_TopNav').remove();
	        if(lightBoxDialog_Level1_Engaged && !lightBoxReset){
	        	$('#lightBoxDialog-Level1').closest('.ui-dialog').show();
	        	// if level 2 dialog is opened on top of level 1 dialog, this reverts level 1 overlay to its own params (that have been taken up by global styling)
		        $('.ui-widget-overlay').css('background', 'rgb(255,255,255)');
				$('.ui-widget-overlay').css('opacity', '.91');
				var useH = 	$('#CET-Activity-Content').height() + "px";
				$('.ui-widget-overlay').css('border-radius', '0');
				//$('.ui-widget-overlay').css('max-width', useW);
				$('.ui-widget-overlay').css('max-height', useH);
				$('.ui-widget-overlay').offset({ 
	            	top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
				});
				lightboxOverlayBGPlacer(1);
				$('.lightBoxDialog_Level1_TopNav').show();
				lightBoxReset = true;
	        }
	        //lightBoxDialog_Level2_EngagedContentType = 'none';
	        //launchedMediaItem = null;
	        //launchedMediaItem_BaseGrid = null;
	        launchedMediaItemTracker.BaseGrid = null;
	        checkLightBoxStack('remove');
	        lightBoxLevel2Dialog.empty().dialog("destroy");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
            $(this).appendTo( $("#lightBoxDialog-Level2-Breeder") );
            maximizeCETActivityContentHeight();
	    }
	//------------
	});
	
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	$.ajax({
		type:			'GET',//'POST',
		url: 			'subSequenceLoader.html' + dummyTStamp()
	}).done(function (doneResponse){
		$("#lightBoxDialog-Level2").html(doneResponse);
		//$("#lightBoxDialog-Level2").closest('.ui-dialog').find('.ui-dialog-titlebar').css('display', 'none');
		/*
		<div class='lightBoxDialog_Level2_TopNav_LabelBox'>
			<div class='lightBoxDialog_Level2_TopNav_LabelText'></div>
			<div class="lightBoxDialog_Level2_TopNav_SeparatorLineH"></div>
		</div>
		<div class="CET-SubSequence-Content-Main-MediaBlock"><!--<div class="mediaLauncher-image"></div>--><!-- <-- re-enable this line?  --></div>
		<div class="CET-SubSequence-Content-Main-TextBlock-Container">
			<div class="CET-SubSequence-Content-Main-TextBlock"></div>
		</div>
		<div class="CET-SubSequence-Content-Main-TextBlock-Accent-Container">
			<div class="CET-SubSequence-Content-Main-TextBlock-Accent"></div>
		</div>
		*/
		
		
		//currentBasePage_Content_SubSequenceStackObject = 		{};
		//currentBasePage_Content_SubSequenceTotal;
		//currentBasePage_Content_SubSequenceCurrentSequence;
		//currentBasePage_Content_SubSequenceCurrentPage;
		//currentBasePage_Content_SubSequenceCurrentPageTotal;
		
		//var totalBasePageSubSeqItems = currentBasePage_Content_SubSequenceStackObject.content.length;
		//totalSubSeqPages = currentBasePage_Content_SubSequenceStackObject.content.length;
		$('.lightBoxDialog_Level2_TopNav_SeparatorLineH').css('background-color', skinPrimaryColor);
		subSequencePageContentFill();
		lightBoxLevel2Dialog.dialog('open');	
	}).fail(function (failResponse){
		console.log('error');
	});
}
// ! =============================================================
// ! F.Lightbox.Level3.Revert ---
function level3LightboxReverter(contentType){
	//$('#lightBoxDialog-Level2').empty();
	//$('#lightBoxDialog-Level2').remove();
	// check that this doesn't interfere with another, maybe duplicate animation or transition
	$("#lightBoxDialog-Level3").empty().dialog("destroy");
    $("#lightBoxDialog-Level3").removeAttr("class");
    $("#lightBoxDialog-Level3").removeAttr("style");
    $("#lightBoxDialog-Level3").appendTo( $("#lightBoxDialog-Level3-Breeder") );
	lightBoxDialog_Level3_Engaged = false;
	if(navSubMenuLaunched){
		if(navSubMenuLaunched){
			rotateNavItem("in");
			$('#navItemSubMenu').hide();
		}
	}
	level3LightboxLauncher(contentType);
}
// ! F.Lightbox.Level3.Sidenav.Reset ---
function sideNavReset( context ){ 
	var sideNavStack = 		context.sideNavStack;
	var newNum = 				context.newNum;
	
	//console.log("sidenavreset courseModuleGroupedActive = " + courseModuleGroupedActive);
	//console.log("gwee = " + courseModule_Module);
	//console.log( JSON.stringify( masterJSONStorage.pathParamsSet , null , 4 ) );
	
	var localizedStatusPrefix = langPack.ui.dashboard.progressStatus.status + ": ";
	
	//console.log("aa");
	//aboutSideNavItemActive = $(event.target).index() + 1;
	var sideNavSet = newNum;
	for( var e = 0 ; e < sideNavArray.length ; e++ ){
		sideNavArray[e].active = 	false;
	}
	if(sideNavStack == "dashboard"){
		$('.lockNoticeBlock').remove();
		dashboardSideNavItemActive = newNum;
    	sideNavArray[dashboardSideNavItemActive - 1].active = 	true;
    	//console.log('courseModuleGroupedActive = ' + courseModuleGroupedActive);
    	
    	if( currentDashboardSelectedArea == "courseOverview" ){
        	// licensing check
        	$('.dashboardLicenseStack').empty();
			var checkForCourseLicensing = 					masterJSONStorage.courseParams.licensing;
			if( checkForCourseLicensing != undefined && checkForCourseLicensing != "" && checkForCourseLicensing != null ){
				courseLicensingStack = 							checkForCourseLicensing;
				for( var r = 0 ; r < courseLicensingStack.length ; r++ ){
					var licenseBlock = "";
					//console.log("licenseBlock = " + licenseBlock);
					var itemLine = 	courseLicensingStack[r].itemLine;
					if( itemLine == undefined || itemLine === '' ){
						itemLine = "This experience";
					}
					var byLine = 		courseLicensingStack[r].byLine;
					if( byLine == undefined || byLine === '' ){
						byLine = "The Center for Educational Technology";
					}
					switch( courseLicensingStack[r].type ){
						case "Creative Commons" : 
							switch( courseLicensingStack[r].version ){
								case "4.0" : 
								default : // no version supplied
									switch( courseLicensingStack[r].variant ){
										case "BY-NC-ND" : 
										default : // no variant supplied
											//licenseBlock = "<div class='licenseblock'><div class='licenseimage'><a rel='license' href='http://creativecommons.org/licenses/by-nc-nd/4.0/' target='_blank'><img alt='Creative Commons License' style='border-width:0' src='https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png' /></a></div><div class='licenseinfo'><span xmlns:dct='http://purl.org/dc/terms/' href='http://purl.org/dc/dcmitype/InteractiveResource' property='dct:title' rel='dct:type'>" + itemLine + "</span> by " + byLine + " is licensed under a <a rel='license' href='http://creativecommons.org/licenses/by-nc-nd/4.0/' target='_blank'>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</div></div>";
											licenseBlock = "<div class='licenseblock'><div class='licenseimage'><a rel='license' href='http://creativecommons.org/licenses/by-nc-nd/4.0/' target='_blank'><img alt='Creative Commons License' style='border-width:0' src='https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png' /></a></div><div class='licenseinfo'><span xmlns:dct='http://purl.org/dc/terms/' href='http://purl.org/dc/dcmitype/InteractiveResource' property='dct:title' rel='dct:type'>" + itemLine + "</span> by " + byLine + " is licensed under a <a rel='license' href='http://creativecommons.org/licenses/by-nc-nd/4.0/' target='_blank'>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</div></div>";
										break;
									}	
								break;
							}
						break;
					}
					$('.dashboardLicenseStack').append( licenseBlock );
				}
			}
			$('.dashboardLicenseStack').show();
			//$('body').attr( 'data-lightBoxPanel3' , "None" );
			$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseOverview" );
    	}else{
        	$('.dashboardLicenseStack').hide();
        	//$('body').attr( 'data-lightBoxPanel3' , "None" );
			$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseModule" );
    	}
    	
    	if( courseModuleGroupedActive != null ){
	    	//$('.dashboardSectionStepMap').show();
	    	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
		    var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
		    var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
	    	var checkPathType = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType;
	    	//console.log( "cpt = "  + checkPathType );
	    	switch( checkPathType ){
		    	case "Case Study" : 
		    		$('body').attr( 'data-activePathType' , "Case Study" );
		    	break;
		    	case "Procedural" : 
		    		$('body').attr( 'data-activePathType' , "Procedural" );
			    	buildDashboardPathMap();
			    	//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){ // force set, as the sidenav is "locked" in pathbuilder
				    	//$('body').attr( 'data-activePathType' , "Procedural" );
			    	///}
		    	break;
		    	case undefined : 
		    	case null : 
		    	case '' : 
		    		courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType = "Case Study";
					$('body').attr( 'data-activePathType' , "Case Study" );
		    	break;
	    	}
    	}else{
	    	//$('.dashboardSectionStepMap').hide();
	    	//$('body').attr( 'data-activePathType' , "None" );
    	}
    	
    	var passedStatus = "";
    	if( courseModule_Group - 1 > 0 ){
	    	if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus != undefined ){
				switch( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus ){
					//case "Completed" : 
						//passedStatus = langPack.ui.dashboard.progressStatus.completed;
					//break;
					case "Passed" : 
						passedStatus = langPack.ui.dashboard.progressStatus.passed;
					break;
					case "Failed" : 
						passedStatus = langPack.ui.dashboard.progressStatus.failed;
					break;
					//case "Unattempted" : 
						//passedStatus = langPack.ui.dashboard.progressStatus.unattempted;
					//break;
					//case "Incomplete" : 
						//passedStatus = langPack.ui.dashboard.progressStatus.incomplete;
					//break;
				}
			}
    	}
    	
        $('.dashboardContentStack > li').hide();
        $('.dashboardContentStack > li:nth-child(' + sideNavSet + ')').show();
        $('.dashboardContentStack > li').removeClass('activeDashboardContentArea');
        $('.dashboardContentStack > li:nth-child(' + sideNavSet + ')').addClass('activeDashboardContentArea');
        // get current index of elements displaced by arbitrary activity insertion in side nav
        // find assessment-bearing sidenav element
    	var assessmentSideNavNum = 0;
		for( r = 0 ; r < sideNavArray.length ; r++ ){
			if( sideNavArray[r].navSlotType == "courseAssessment" ){
				assessmentSideNavNum = r;
			}
		}
		// find survey-bearing sidenav element
    	var surveySideNavNum = 0;
		for( s = 0 ; s < sideNavArray.length ; s++ ){
			if( sideNavArray[s].navSlotType == "courseSurvey" ){
				surveySideNavNum = s;
			}
		}
		// find certificate-bearing sidenav element
    	var certificateSideNavNum = 0;
		for( t = 0 ; t < sideNavArray.length ; t++ ){
			if( sideNavArray[t].navSlotType == "courseCertificate" ){
				certificateSideNavNum = t;
			}
		}
    }        
    if(sideNavStack == "help" || sideNavStack == "dashboardHelp"){
    	helpSideNavItemActive = newNum; 
    	sideNavArray[helpSideNavItemActive - 1].active = 	true;
        $('.helpContentStack > li').hide();
        $('.helpContentStack > li:nth-child(' + sideNavSet + ')').show();
        if( helpSideNavItemActive == 1 ){ // if is "using stepstone" button
	    	//$('[data-helpSectionContentVariant="VideoLink"] .CET-MediaLauncher-MediaTypeOverlay-Image').attr( 'data-StepStoneIcon' , $.parseHTML(webFontAssignmentObject.launcher_video)[0].data );
        }
        switch( helpSideNavItemActive ){
	        case 1 : 
	        	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "UsingStepstone" );
	        break;
	        case 2 : 
	        	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "KeyboardShortcuts" );
	        break;
	        case 3 : 
	        	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "SystemRequirements" );
	        break;
        }
    }
    if(sideNavStack == "about"){
    	aboutSideNavItemActive = newNum;
    	sideNavArray[aboutSideNavItemActive - 1].active = 	true;
    	$('.aboutContentStack > li').hide();
        $('.aboutContentStack > li:nth-child(' + sideNavSet + ')').show();
        switch( aboutSideNavItemActive ){
	        case 1 : 
	        	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "AboutTheAuthors" );
	        break;
	        case 2 : 
	        	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "Acknowledgements" );
	        break;
        }
    }
    // for skinning we are directly updating the css, the add/remove class method doesn't seem to be working for skinning...
    $('.lightBoxDialog_Level3_Content_SideNavContainer li').removeClass('sidenavItem-Selected');
    $('.lightBoxDialog_Level3_Content_SideNavContainer li').addClass('sidenavItem-Normal');
    $('.lightBoxDialog_Level3_Content_SideNavContainer li').css('background-color', skinPrimaryColor);
    $('.lightBoxDialog_Level3_Content_SideNavContainer li').css('color', 'white');
    $('.sideNavDropList .qActivityChoice').removeClass('sidenavItem-Selected');
    $('.sideNavDropList .qActivityChoice').addClass('sidenavItem-Normal');
    $('.sideNavDropList .qActivityChoice').css('background-color', skinPrimaryColor);
    $('.sideNavDropList .qActivityChoice').css('color', 'white');
	
	//dynamic application of skin color hover behavior to sidenav
	$('.lightBoxDialog_Level3_Content_SideNavContainer li').removeClass("skinColor_Secondary");
	$('.sideNavDropList .qActivityChoice').removeClass("skinColor_Secondary");
	
	$(document).off("mouseover", '.lightBoxDialog_Level3_Content_SideNavContainer li:not(.sidenavItem-Selected)');
	$(document).on("mouseover", '.lightBoxDialog_Level3_Content_SideNavContainer li:not(.sidenavItem-Selected)', function(event){
		$(this).addClass("skinColor_Secondary");
	});
	$(document).off("mouseleave", '.lightBoxDialog_Level3_Content_SideNavContainer li:not(.sidenavItem-Selected)');
	$(document).on("mouseleave", '.lightBoxDialog_Level3_Content_SideNavContainer li:not(.sidenavItem-Selected)', function(event){
		$(this).removeClass("skinColor_Secondary");
	});
	
	$(document).off("mouseover", '.sideNavDropList .qActivityChoice:not(.sidenavItem-Selected)');
	$(document).on("mouseover", '.sideNavDropList .qActivityChoice:not(.sidenavItem-Selected)', function(event){
		$(this).addClass("skinColor_Secondary");
	});
	$(document).off("mouseleave", '.sideNavDropList .qActivityChoice:not(.sidenavItem-Selected)');
	$(document).on("mouseleave", '.sideNavDropList .qActivityChoice:not(.sidenavItem-Selected)', function(event){
		$(this).removeClass("skinColor_Secondary");
	});
    
    if(sideNavStack == "dashboard"){
	    if( !courseAssessment_Present ){
			$('.sidenavStatusIcon_courseAssessment').closest('li').hide();
			$('.sidenavStatusIcon_courseAssessment').closest('.qActivityChoice').hide();
		}
		if( !courseSurvey_Present ){
			$('.sidenavStatusIcon_courseSurvey').closest('li').hide();
			$('.sidenavStatusIcon_courseSurvey').closest('.qActivityChoice').hide();
		}
		if( !courseCertificate_Present ){
			$('.sidenavStatusIcon_courseCertificate').closest('li').hide();
			$('.sidenavStatusIcon_courseCertificate').closest('.qActivityChoice').hide();
		}
	    /////////////////////////////////////
	    // OVERVIEW
	    /////////////////////////////////////
    	$('.sidenavElementIcon').css('color', 'white');
    	var continueButtonUpdated = false;
    	if( courseOverviewHeader != '' && courseOverviewHeader != undefined ){
	    	var courseOverviewHeaderBuild = '';
	    	if( displayActivityType ){
		    	courseOverviewHeaderBuild += '<em>' + langPack.ui.dashboard.sidenav.moduleOverview + ':</em> ';
		    }
	    	courseOverviewHeaderBuild += courseOverviewHeader;
	    	$('.courseOverviewContent .dashboardSectionHeader').html( '<span class="accessViz">' + langPack.screenreader.dashboard.moduleTitle + '</span><strong>' + courseOverviewHeaderBuild + '</strong>');
    	}else{
	    	$('.courseOverviewContent .dashboardSectionHeader').html( '<span class="accessViz">' + langPack.screenreader.dashboard.moduleTitle + '</span><strong><em>' + langPack.ui.dashboard.sidenav.moduleOverview + '</em></strong>');
    	}
    	$('.courseOverviewContent .dashboardSectionText').html( '<span class="accessViz">' + langPack.screenreader.dashboard.moduleOverviewText + '</span>' + courseOverviewText );
    	
    	// setup course overview text for ADA focusing
		setupTextHyperlinks({ 
			'linkElement' : $('.courseOverviewContent .dashboardSectionText a'), 
			'uniqueClass' : "CourseOverviewTextHyperlink" 
		});
    	
    	//$('.courseOverviewContent .dashboardSectionText').append('<br /><br /><span class="courseOverviewTextTail">To begin, select an activity from the Dashboard Navigation.</span>');
    	//$('.courseOverviewContent .dashboardSectionSplash').empty();
    	if( masterJSONStorage.courseParams.overview.media != undefined &&  masterJSONStorage.courseParams.overview.media != '' ){
	    	$('.courseOverviewContent .dashboardSectionSplash').addClass('Custom');
	    }
    	if( $('.courseOverviewContent .dashboardSectionSplash').hasClass('Custom') ){
	    	//$('.courseOverviewContent .dashboardSectionText').append('<span class="courseOverviewTextTail">To begin, click/tap the Continue button on the lower right.</span>');
	    	$('.courseOverviewContent .dashboardSectionText').append('<span class="courseOverviewTextTail" data-uiText="CourseOverviewTextTail">' + langPack.ui.dashboard.textContent.toBeginSelectContinue + '</span>');
	    	
	    	$('.dashboardContentStack li:nth-child(1) .dashboardSectionSplash').css({
    			'background': 						'url("' + mediaPathConstructor({ 'mediaFileName' : masterJSONStorage.courseParams.overview.media[0].display , 'forcePath' : "CourseMedia" }) + '") no-repeat center center',
			    '-webkit-background-size': 		'contain',
			    '-moz-background-size': 			'contain',
			    '-ms-background-size': 			'contain',
			    '-o-background-size': 				'contain',
			    'background-size': 					'contain'
			});
    	}else{
	    	//$('.courseOverviewContent .dashboardSectionText').append('<br /><br /><span class="courseOverviewTextTail">To begin, click/tap the Continue button on the lower right.</span>');
	    	$('.courseOverviewContent .dashboardSectionText').append('<br /><br /><span class="courseOverviewTextTail" data-uiText="CourseOverviewTextTail">' + langPack.ui.dashboard.textContent.toBeginSelectContinue + '</span>');
	    	
	    	$('.courseOverviewContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
    	}
		$('.courseOverviewContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_courseoverview)[0].data);
    	//$('.courseOverviewContent .dashboardSectionSplash').html( '<img src="../../content/' + courseModuleArray[v].activityID + '/media/' + courseModuleArray[v].activityOverview_MediaFile + '" />' );
    	$('.courseAssessmentContent .dashboardSectionHeader').html( '<strong>RACE Assessment</strong>' );
    	$('.courseAssessmentContent .dashboardSectionSplash').empty();
    	$('.courseSurveyContent .dashboardSectionHeader').html( '<strong>RACE Survey</strong>' );
    	$('.courseSurveyContent .dashboardSectionSplash').empty();
    	$('.courseCertificateContent .dashboardSectionHeader').html( '<strong>RACE Certificate</strong>' );
    	$('.courseCertificateContent .dashboardSectionSplash').empty();
    	activitiesCompleteCount = 0;
    	activitiesCompleteCountArray = [];
    	/////////////////////////////////////
    	// MODULES
    	/////////////////////////////////////
    	var firstCourseModuleItem_Default = 	$('.dashboardSideNavStack .courseModuleChoice').first().index();
    	var firstCourseModuleItem_DropList = $('.sideNavDropList .courseModuleChoice').first().index();
    	var sideNavCourseModuleIncrement = 0;
    	var sideNavCourseModuleIncrement_2 = 	0;
    	var sideNavCourseModuleIncrement_3 = 	0;
    	
    	// this section does the initial styling and status setting for the activity module sidenav elements
    	//console.log('==================================================');
    	//console.log('---------- first course module group process - start ----------');
    	//console.log('====================');
	    
		//if( courseModuleGroupedActive != null ){
		/*if( currentDashboardSelectedArea == 'courseModule' && $( 'body' ).attr( 'data-lightBoxPanel3' ) == "Dashboard" ){*/
		if( $( 'body' ).attr( 'data-lightBoxPanel3' ) == "Dashboard" ){ // redundant if sideNavStack is already "dashboard", if we aren't also checking for selectedArea?
		    for( var w = 0 ; w < courseStatusObject.courseModuleGroupStack.length ; w++ ){
			    //console.log('w = ' + w + ' --- courseStatusObject.courseModuleGroupStack.length = '  + courseStatusObject.courseModuleGroupStack.length);
			    //console.log(  "masterJSONStorage.courseParams.activities[w].type = " + masterJSONStorage.courseParams.activities[w].type );
			    if( masterJSONStorage.courseParams.activities[w].type == "Course Module Group" ){
			    	//console.log('---------- module group '  + (w + 1) + ' first part pass start ----------');
			    	//*
			    	var newModuleGroupCompletionList = [];
			    	activitiesCompleteCountArray.push( newModuleGroupCompletionList );
			    	for( var v = 0 ; v < courseStatusObject.courseModuleGroupStack[w].length ; v++ ){
				    	var newModuleCompletionSlot = 0;
				    	activitiesCompleteCountArray[w].push( newModuleCompletionSlot );
				    	sideNavCourseModuleIncrement++;
				    	//console.log(firstCourseModuleItem_Default + " + " + firstCourseModuleItem_DropList + " + " + sideNavCourseModuleIncrement);
				    	//console.log(  "w = " + w );
				    	//console.log(  "v = " + v );
				    	var moduleHeaderBuild = '';
				    	if( displayActivityType ){
					    	moduleHeaderBuild += '<em>' + courseModuleArray[w].modules[v].activityType + '</em>: ';
					    }
				    	moduleHeaderBuild += courseModuleArray[w].modules[v].activityLabel;
				    	$('.courseOverviewContent .dashboardSectionHeader').html( '<span class="accessViz">' + langPack.screenreader.dashboard.moduleTitle + '</span><strong>' + courseOverviewHeaderBuild + '</strong>');
			    		$('.dashboardContentStack > li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionHeader').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathTitle + '</span><strong>' + moduleHeaderBuild + '</strong>');
						$('.dashboardContentStack > li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionText').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathOverviewText + '</span>' + courseModuleArray[w].modules[v].activityOverview_Text );
						
						// setup path overview text for ADA focusing
						setupTextHyperlinks({ 
							'linkElement' : $('.dashboardContentStack > li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionText a'), 
							'uniqueClass' : "ModuleOverviewTextHyperlink" 
						});
						
						//courseActivityContent
						
			    		//$('.dashboardContentStack li:nth-child(' + (v + 2) + ') .dashboardSectionSplash').html( '<img src="../../content/' + courseModuleArray[v].activityID + '/media/' + courseModuleArray[v].activityOverview_MediaFile + '" />' );
			    		//$('.dashboardContentStack li:nth-child(' + (v + 2) + ') .dashboardSectionSplash').html( '<div class="courseActivityDashboardSplash"></div>' );
			    		//$('.dashboardContentStack li:nth-child(' + (v + 2) + ') .courseActivityDashboardSplash').html( '<div class="courseActivityDashboardSplash";></div>' );
			    		//console.log('mirr -- ' + CETActivityID);
			    		//console.log('tirr -- ' + courseModuleArray[0].activityID);
			    		// need to set the activity id here so it can be used when loading splashes, etc.  before activity is actually engaged
			    		CETActivityID = courseModuleArray[w].modules[v].moduleID;
			    		//if( !$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionSplash').hasClass('disabled') ){
				    	if( courseModuleArray[w].modules[v].activityOverview_MediaFile != undefined && courseModuleArray[w].modules[v].activityOverview_MediaFile != '' ){	
				    		$('.dashboardContentStack > li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionSplash').css({
				    			//'background': 						'url("../../content/' + courseModuleArray[v].activityID + '/media/' + courseModuleArray[v].activityOverview_MediaFile + '") no-repeat center center',
				    			//'background': 						'url("' + CETActivityContentPath + '/' + courseModuleArray[v].activityID + CETActivityVersion + '/media/' + courseModuleArray[v].activityOverview_MediaFile + '") no-repeat center center',
				    			'background': 						'url("' + mediaPathConstructor({ 'mediaFileName' : courseModuleArray[w].modules[v].activityOverview_MediaFile }) + '") no-repeat center center',
							    '-webkit-background-size': 		'contain',
							    '-moz-background-size': 			'contain',
							    '-ms-background-size': 			'contain',
							    '-o-background-size': 				'contain',
							    'background-size': 					'contain'
							});
						}else{
							$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionSplash').addClass('disabled');
						}
			    		//if(courseStatusObject.courseModuleGroupStack[v].userPath.length > 0 && courseStatusObject.courseModuleGroupStack[v].userPath[0] != 'x'){ // if not x, not unattempted
			    		//if(courseStatusObject.courseModuleGroupStack[w][v].userPath.length > 0 && courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus != 'Unattempted'){ // if not x, not unattempted
			    		
			    		/*
				    	if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
							// if visited sequence matches the ideal path, then all "required" items have been visited and the path is comlete
							var currentPathStructure = 		masterJSONStorage.pathStructureSet[courseModule_Group-1][courseModule_Module-1];
							var linearPathList = 					currentPathStructure.idealPath;
							var pathCompletelyViewed = 		true;
							var currentPathHistory = 			courseStatusObject.courseModuleGroupStack[courseModule_Group-1][courseModule_Module-1].userPath;
							var cphOrderedNums = currentPathHistory.map(function (x){ // reorder attempting to match ideal path sequence 
						    	return parseInt( x ); 
							});
							pathHistoryLoop:
							for( var cphi = 0 ; cphi < cphOrderedNums.length ; cphi++ ){
								var pathHistoryCheck = 			cphOrderedNums[cphi]; //parseInt( currentPathHistory[cphi] );
								var linearPathStepCheck = 		parseInt( linearPathList[cphi] );
								if( pathHistoryCheck != linearPathStepCheck ){
									pathCompletelyViewed = 	false;
									break pathHistoryLoop;
								}
							}
							if( pathCompletelyViewed ){
								courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Completed';
							}
						}	
				    	*/
				    	
				    	if( masterJSONStorage.pathParamsSet[w][v].scoring != undefined ){
				    		$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').show();
			    		}else{
				    		$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').hide();
			    		}
				    	
						if( 
			    		courseStatusObject.courseModuleGroupStack[w][v].userPath.length > 0 && 
			    		courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus != 'Unattempted' && 
			    		courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus != 'Locked' ){ // if not x, not unattempted 
				    		
				    		var isCompleted = false;
				    		switch( $('body').attr( 'data-activePathType' ) ){
					    		case "Case Study" :
					    			// check if conclusion step has been reached
					    			//console.log("upn = " + courseStatusObject.courseModuleGroupStack[w][v].userPath[courseStatusObject.courseModuleGroupStack[w][v].userPath.length - 1]);
									if(courseStatusObject.courseModuleGroupStack[w][v].userPath[courseStatusObject.courseModuleGroupStack[w][v].userPath.length - 1] == '2'){
						    			isCompleted = true;
						    		}
					    		break;
					    		case "Procedural" :
					    			// check if all steps have been viewed -- just check matching length, not alignment of ids in sequence (for now)
									if( courseStatusObject.courseModuleGroupStack[w][v].userPath.length == masterJSONStorage.pathStructureSet[w][v].nodeMapUnits.length ){
										isCompleted = true;
									}
									/*
					    			// if visited sequence matches the ideal path, then all "required" items have been visited and the path is comlete
									var currentPathStructure = 		masterJSONStorage.pathStructureSet[w][v];
									var linearPathList = 					currentPathStructure.idealPath;
									var pathCompletelyViewed = 		true;
									var currentPathHistory = 			courseStatusObject.courseModuleGroupStack[w][v].userPath;
									var cphIntegers = currentPathHistory.map(function (x){ // reorder attempting to match ideal path sequence 
								    	return parseInt( x ); 
									});
									linearPathListLoop:
									//for( var cphi = 0 ; cphi < cphIntegers.length ; cphi++ ){
									for( var lpli = 0 ; lpli < linearPathList.length ; lpli++ ){
										//var pathHistoryCheck = 			cphOrderedNums[cphi]; //parseInt( currentPathHistory[cphi] );
										var linearPathStepCheck = 		parseInt( linearPathList[lpli] );
										//if( pathHistoryCheck != linearPathStepCheck ){
										//console.log( "linearPathStepCheck = " + linearPathStepCheck );
										//console.log( "cphIntegers join = " + cphIntegers.join("-") );
										if( cphIntegers.indexOf(linearPathStepCheck) == -1 ){
											//console.log( "no match for = " + lpli + "--" + linearPathStepCheck );
											pathCompletelyViewed = 	false;
											break linearPathListLoop;
										}
									}
									if( pathCompletelyViewed ){
										//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Completed';
										isCompleted = true;
									}
									*/
					    		break;
				    		}
				    		
				    		var completionResultLabel = "";
				    		
			    			if( isCompleted ){ // if is flagged as completed
				    			//console.log("111");
				    			$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
				    			$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
				    			courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = 'Completed';
								sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) - 1 ].navSlotStatus = "Completed";
								//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Completed</strong>' );
								//activitiesCompleteCount++;
								activitiesCompleteCountArray[w][v] = 1;
								
								//var pathScoringData = masterJSONStorage.pathParamsSet[w][v].scoring;
								//if( pathScoringData != undefined && pathScoringData !== "" ){ // redundant check if in function scope, already have this clearance?
									//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
									//if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].activitiesCompleteCount == 'Completed' ){
									//if( courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus == 'Completed' ){
										//if( activeDataSource == "draggybox2" ){
											//tallyPathProgressScoring({ 'courseModule' : courseModuleGroupedActive });
											tallyPathProgressScoring({ 
												'courseModule' : (w+1) + "_" + (v+1) ,
												'triggerID' : "Dashboard 1"
											});
										//}
									//}
								//}
								
								//console.log('is conclusion -- status module ' + sideNavCourseModuleIncrement + ' = completed');
				    			if( currentDashboardSelectedArea == 'courseModule' ){
					    			if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus != undefined && courseStatusObject.coursePassFailResultStatus != undefined && courseStatusObject.coursePassFailResultStatus != "" ){
							    		completionResultLabel = '<strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + ' (' + passedStatus + ')</strong>';
						    		}else{
							    		completionResultLabel = '<strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + '</strong>';
						    		}
									$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionStatusLabel').html( completionResultLabel );
									if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring != undefined ){
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Accrual" ){
											
											var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.basicScoreNotice;
											if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
												var sanitizedScore = "0.00";
											}else{
												var sanitizedScore = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore.replace(/[^a-z0-9\.]/gi,''); // @ ! - _ # % ( ) ' * . ~ ` + =
											}
											
											unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , sanitizedScore );
											unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var2]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMax );
											unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var3]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass );
											var preparedScoringNotice = unpreparedScoringNotice;
											
											//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + ' Your score is ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore + '/' + masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMax + ' (Passing score = ' + masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass + ')</strong>' );
											
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + ' ' +  preparedScoringNotice + '</strong>' );
											
										}
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Completion" ){
											
											var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.completedEarned;
											if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , "0.00" );
											}else{
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore );
											}
											var preparedScoringNotice = unpreparedScoringNotice;
											
											//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>You have earned ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore + ' points for completing this activity.</strong>' );
											
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + preparedScoringNotice + '</strong>' );
											
										}
									}
								}
							}else{
								//console.log("222");
								if(courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus != 'Completed'){ // if not already completed
									//console.log("333");
									$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityincomplete)[0].data);
									$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityincomplete)[0].data);
									courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = 'Incomplete';
									sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) - 1 ].navSlotStatus = "Incomplete";
									//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Incomplete</strong>' );
									//console.log('is not conclusion, original not completed -- status module ' + sideNavCourseModuleIncrement + ' = incomplete');
									if( currentDashboardSelectedArea == 'courseModule' ){
										$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionStatusLabel').html( '<strong>Status: In progress</strong>' );
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring != undefined ){
											if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Accrual" ){
												//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>This is a graded activity.  Please complete this course module to receive your score.</strong>' );
												$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + " " + langPack.ui.dashboard.scoringStatus.pleaseCompleteScore + '</strong>' );
											}
											if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Completion" ){
												//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>Please complete this course module to receive your points.</strong>' );
												$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.pleaseCompletePoints + '</strong>' );
											}
										}
									}
								}else{ // if already completed, in review
									//console.log("rrr");
									$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
									$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
									courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = 'Completed';
									sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) - 1 ].navSlotStatus = "Completed";
									//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Completed</strong>' );
									//activitiesCompleteCount++;
									activitiesCompleteCountArray[w][v] = 1;
									
									//var pathScoringData = masterJSONStorage.pathParamsSet[w][v].scoring;
									//if( pathScoringData != undefined && pathScoringData !== "" ){ // redundant check if in function scope, already have this clearance?
										//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
										//if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].activitiesCompleteCount == 'Completed' ){
										//if( courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus == 'Completed' ){
											//if( activeDataSource == "draggybox2" ){
												//tallyPathProgressScoring({ 'courseModule' : courseModuleGroupedActive });
												tallyPathProgressScoring({ 
													'courseModule' : (w+1) + "_" + (v+1) ,
													'triggerID' : "Dashboard 2"
												});
											//}
										//}
									//}
									
									//console.log('is not conclusion, original completed -- status module ' + sideNavCourseModuleIncrement + ' = completed');
									if( currentDashboardSelectedArea == 'courseModule' ){
										if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus != undefined && courseStatusObject.coursePassFailResultStatus != undefined && courseStatusObject.coursePassFailResultStatus != "" ){
											completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + '(' + passedStatus + ' - ' + langPack.ui.dashboard.progressStatus.reviewInProgress + ')</strong>';
							    		}else{
								    		completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + '</strong>';
							    		}
										$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionStatusLabel').html( completionResultLabel );
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring != undefined ){
											if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Accrual" ){
												
												var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.basicScoreNotice;
												
												if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
													unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , "0.00" );
												}else{
													unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore );
												}
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var2]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMax );
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var3]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass );
												var preparedScoringNotice = unpreparedScoringNotice;
												
												$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + ' ' + preparedScoringNotice + '</strong>' );
											}
											if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Completion" ){
												
											var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.completedEarned;
											if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , "0.00" );
											}else{
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore );
											}
											var preparedScoringNotice = unpreparedScoringNotice;
											
											//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>You have earned ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore + ' points for completing this activity.</strong>' );
											
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + preparedScoringNotice + '</strong>' );
											}
										}
									}
								}
							}
						}else{ // if unattempted or locked
							//console.log("555");
							if(courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus != 'Completed'){ // if not already completed
								//console.log("666");
								$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
								$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
								courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = 'Unattempted';
								sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) - 1 ].navSlotStatus = "Unattempted";
								//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Unattempted</strong>' );
								//console.log('locked/unattempted, original not completed -- status module ' + sideNavCourseModuleIncrement + ' = unattempted');
								if( currentDashboardSelectedArea == 'courseModule' ){
									$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + ' ' + langPack.ui.dashboard.progressStatus.notYetStarted + '</strong>' );
									//console.log("course module group = " + courseModule_Group);
									//console.log("course module module = " + courseModule_Module);
									//console.log("pathparamset = " + JSON.stringify( masterJSONStorage.pathParamsSet , null , 4 ) );
									/*
									var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
								    var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
								    var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
							    	var checkPathType = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType;
									*/
									if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring != undefined ){
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Accrual" ){
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + ' ' + langPack.ui.dashboard.scoringStatus.pleaseCompleteScore + '</strong>' );
										}
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Completion" ){
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + langPack.ui.dashboard.scoringStatus.pleaseCompletePoints + '</strong>' );
										}
									}
								}
							}else{ // if already completed, in review
								//console.log("777");
								$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
								$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement) + ') .sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
								courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = 'Completed';
								sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) - 1 ].navSlotStatus = "Completed";
								//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Completed</strong>' );
								//activitiesCompleteCount++;
								activitiesCompleteCountArray[w][v] = 1;
								
								//var pathScoringData = masterJSONStorage.pathParamsSet[w][v].scoring;
								//if( pathScoringData != undefined && pathScoringData !== "" ){ // redundant check if in function scope, already have this clearance?
									//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
									//if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].activitiesCompleteCount == 'Completed' ){
									//if( courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus == 'Completed' ){
										//if( activeDataSource == "draggybox2" ){
											//tallyPathProgressScoring({ 'courseModule' : courseModuleGroupedActive });
											tallyPathProgressScoring({ 
												'courseModule' : (w+1) + "_" + (v+1) ,
												'triggerID' : "Dashboard 3"
											});
										//}
									//}
								//}
								
								//console.log('locked/unattempted, original unattempted or locked-- status module ' + sideNavCourseModuleIncrement + ' = completed');
								if( currentDashboardSelectedArea == 'courseModule' ){
									if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus != undefined && courseStatusObject.coursePassFailResultStatus != undefined && courseStatusObject.coursePassFailResultStatus != "" ){
							    		completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + ' (' + passedStatus + ')</strong>';
						    		}else{
							    		completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + '</strong>';
						    		}
									$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionStatusLabel').html( completionResultLabel );
									if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring != undefined ){
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Accrual" ){
											
											var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.basicScoreNotice;
											if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , "0.00" );
											}else{
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore );
											}
											unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var2]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMax );
											unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var3]" , masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass );
											var preparedScoringNotice = unpreparedScoringNotice;
											
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + ' </span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice + ' ' + preparedScoringNotice + '</strong>' );
											
											//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>' + langPack.ui.dashboard.scoringStatus.gradedNotice +  Your score is ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore + '/' + masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMax + ' (Passing score = ' + masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass + ')</strong>' );
										}
										if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScoreMethod == "Completion" ){
											var unpreparedScoringNotice = langPack.ui.dashboard.scoringStatus.completedEarned;
											if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore == undefined ){
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , "0.00" );
											}else{
												unpreparedScoringNotice = unpreparedScoringNotice.replace( "[var1]" , courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore );
											}
											var preparedScoringNotice = unpreparedScoringNotice;
											
											//$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">Module Activity Scoring Status : </span><strong>You have earned ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore + ' points for completing this activity.</strong>' );
											
											$('.dashboardContentStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement) + ') .dashboardSectionScoreStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathScoringStatus + '</span><strong>' + preparedScoringNotice + '</strong>' );
											
										}
									}
								}
							}
						}
						//sideNavArray[v + 1].navSlotStatus = courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus;
						//sideNavArray[v + 1].navSlotStatus = courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus;
						//completeSideNavStackIncrement++:
						//sideNavCourseModuleIncrement++;
					}
					//*/
					//console.log('---------- module group ' + (w + 1) + ' first part pass end ----------');
					//console.log('end ----- w = ' + w + ' --- courseStatusObject.courseModuleGroupStack.length = '  + courseStatusObject.courseModuleGroupStack.length);
				}
			}
		}
		
		// make a temp array of the course prereqs
		//courseParamsActivityPreReqIDArray = [];
		function buildCourseParamsActivityPreReqIDArray(){
			if( courseParamsActivityPreReqIDArray.length == 0 ){ // only need to build this once, it could go elsewhere
				var courseParamsActivityArrayPath = masterJSONStorage.courseParams.activities;
				//cycleCourseActivityLoop:
				for( var cycleCourseActivityArray = 0 ; cycleCourseActivityArray < courseParamsActivityArrayPath.length ; cycleCourseActivityArray++){
					var courseParamsActivityPreReqIDArray_Sub1 = [];
					//cycleActivityModulesLoop:
					var modulesPath = courseParamsActivityArrayPath[cycleCourseActivityArray].modules;
					for( var cycleActivityModulesArray = 0 ; cycleActivityModulesArray < modulesPath.length ; cycleActivityModulesArray++){
						var courseParamsActivityPreReqIDArray_ActivityReqSlots = [];
						if( modulesPath[cycleActivityModulesArray].preReq != undefined ){
							//console.log( cycleCourseActivityArray + ' - ' + cycleActivityModulesArray + ' has prereq' );
							var cycleActivityModulesPreReqPath = modulesPath[cycleActivityModulesArray].preReq;
							//cycleModulePreReqLoop:
							for( var cycleModulePreReqArray = 0 ; cycleModulePreReqArray < cycleActivityModulesPreReqPath.activityList.length ; cycleModulePreReqArray++){
								//console.log( cycleCourseActivityArray + ' - ' + cycleActivityModulesArray + ' - ' + cycleModulePreReqArray + ' should push prereq ' + cycleActivityModulesPreReqPath.activityList[cycleModulePreReqArray] );
								courseParamsActivityPreReqIDArray_ActivityReqSlots.push( cycleActivityModulesPreReqPath.activityList[cycleModulePreReqArray] );
							}
						}else{
							//console.log( cycleCourseActivityArray + ' - ' + cycleActivityModulesArray + ' has noprereq' );
							//break cycleActivityModulesLoop;
							courseParamsActivityPreReqIDArray_ActivityReqSlots.push('x');
						}
						//for( var cycleActivityModulesArray = 0 ; cycleActivityModulesArray < courseParamsActivityArray[cycleCourseActivityArray].length ; cycleActivityModulesArray++){
						//courseParamsActivityPreReqIDArray_Sub1.push( courseParamsActivityArray[cycleCourseActivityArray][cycleActivityModulesArray].id );
						courseParamsActivityPreReqIDArray_Sub1.push( courseParamsActivityPreReqIDArray_ActivityReqSlots );
					}
					//console.log( 'end loop iteration for group ' + cycleCourseActivityArray + ' , should push to array : ' + courseParamsActivityPreReqIDArray.join(':') );
					//courseParamsActivityPreReqIDArray.push( courseParamsActivityPreReqIDArray_Sub1 );
					//console.log( courseParamsActivityPreReqIDArray.join(':') );
					courseParamsActivityPreReqIDArray.push( courseParamsActivityPreReqIDArray_Sub1 );
				}
			}
		}
		buildCourseParamsActivityPreReqIDArray();
		
		// make an object for easy lookup of courseStatusObject IDs
		courseStatusObjectIDStatusLookup = {};
		var courseStatusObjectGroupStackPath = courseStatusObject.courseModuleGroupStack;
		cycleCourseStatusObjectGroupStacksLoop:
		for( var cycleCourseStatusObjectGroupStacks = 0 ; cycleCourseStatusObjectGroupStacks < courseStatusObjectGroupStackPath.length ; cycleCourseStatusObjectGroupStacks++ ){
			cycleCourseStatusObjectGroupModulesLoop:
			for( var cycleCourseStatusObjectGroupModules = 0 ; cycleCourseStatusObjectGroupModules < courseStatusObjectGroupStackPath[cycleCourseStatusObjectGroupStacks].length ; cycleCourseStatusObjectGroupModules++ ){
				var grabIterationID = courseStatusObject.courseModuleGroupStack[cycleCourseStatusObjectGroupStacks][cycleCourseStatusObjectGroupModules].activityID;
				var grabIterationModuleProgressStatus = courseStatusObject.courseModuleGroupStack[cycleCourseStatusObjectGroupStacks][cycleCourseStatusObjectGroupModules].moduleProgressStatus;
				courseStatusObjectIDStatusLookup[grabIterationID] = grabIterationModuleProgressStatus;
			}
		}
		
		// cycle through courseParamsActivityPreReqIDArray
		// if a slot is not 'x', check for ids in courseStatusObjectIDStatusLookup obj, look at status
		// if status of all matching ids is "Completed", and corresponding slot is currently locked, set the slot sidenav data and button to unattempted
		function compareStatus(){
			for( var cycleGroups = 0 ; cycleGroups < courseParamsActivityPreReqIDArray.length ; cycleGroups++){
				var modulesPath = courseParamsActivityPreReqIDArray[cycleGroups]; // courseParamsActivityPreReqIDArray[0]
				for( var cycleGroupModules = 0 ; cycleGroupModules < modulesPath.length ; cycleGroupModules++){
					var preReqIDPath = modulesPath[cycleGroupModules];
					var preReqIDCount = preReqIDPath.length;
					var incrementCompleted = 0;
					var moduleHasPreReqs = false;
					for( var cycleModulesReqs = 0 ; cycleModulesReqs < preReqIDCount ; cycleModulesReqs++){
						if( preReqIDPath[cycleModulesReqs] != 'x' ){
							moduleHasPreReqs = true;
							var targetPreReqID = preReqIDPath[cycleModulesReqs]; // courseParamsActivityPreReqIDArray[0][0]
							if( courseStatusObjectIDStatusLookup[targetPreReqID] == "Completed" ){
								incrementCompleted++;
							}
							if( courseStatusObjectIDStatusLookup[targetPreReqID] != "Completed" ){
								//incrementCompleted++;
							}
						}
					}
					var pathToSideNavItem = 					$('.dashboardSideNavStack li[data-courseModuleGrouping="' + (cycleGroups+1) + '_' + (cycleGroupModules+1) + '"]');
					var grabSideNavItemIndex = 				pathToSideNavItem.index();
					var pathToSideNavDropListItem = 		$('.sideNavDropList .qActivityChoice[data-courseModuleGrouping="' + (cycleGroups+1) + '_' + (cycleGroupModules+1) + '"]');
					var grabSideNavDropListItemIndex = 	pathToSideNavDropListItem.index();
					if( preReqIDCount == incrementCompleted && moduleHasPreReqs){
						if( sideNavArray[ grabSideNavItemIndex ].navSlotStatus == "Locked" ){
							pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
				    		pathToSideNavItem.find('.sidenavElementIcon').css('color', '#ffffff');
					    	pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', '#ffffff');
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', '#ffffff');
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').closest('.qActivityChoice').css('color', '#ffffff');
							sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Unattempted";
							courseStatusObject.courseModuleGroupStack[cycleGroups][cycleGroupModules].moduleProgressStatus = "Unattempted";
						}
					}else{
						//*
						if( moduleHasPreReqs ){
				    		pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
				    		pathToSideNavItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
					    	pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', skinNeutralTextColor);
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
					    	pathToSideNavDropListItem.find('.sidenavElementIcon').closest('.qActivityChoice').css('color', skinNeutralTextColor);
							sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Locked";
							courseStatusObject.courseModuleGroupStack[cycleGroups][cycleGroupModules].moduleProgressStatus = "Locked";
						}
						//*/
					}
				}
			}
		}
		//courseParamsActivityPreReqIDArray[0][0][0]
		compareStatus();
		
		/*
		console.log('====================');
		console.log('---------- first course module group process - end ----------');
		console.log('==================================================');
		console.log('====================');
		
		 // this section first checks if the module group has a prereq, which should override the styling/status of its inner modules until the group prereq is met
		 // if the group prereq check is met or there isn't a prereq, move on to the styling and status checking of the individual group modules
		
		//console.log( "activitiesCompleteCount = " + activitiesCompleteCount );
		//console.log( "courseStatusObject.courseModuleGroupStack.length = " + courseStatusObject.courseModuleGroupStack.length );
		//console.log( "sideNavLearningModuleTotalCount = " + sideNavLearningModuleTotalCount )
		var moduleGroupCounter = 0;
		// resetting, reusing these from previous process
    	//var sideNavCourseModuleIncrement_2 = 	0;
    	console.log('==================================================');
    	console.log('---------- second course module group process - start ----------');
    	console.log('==================================================');
		var courseParamsActivitiesPath = masterJSONStorage.courseParams.activities;
		for( var w = 0 ; w < courseParamsActivitiesPath.length ; w++ ){
			var courseParamsActivitiesIteration = courseParamsActivitiesPath[w];
			// cycles activity list -- does not include overview item
			// path activities (modules) are stored in course module groups, each group is an activity in this context
			console.log( ' -------- activity container ' + w + ' start -------- ');
			console.log('----------------------------------------');
	    	var pathToSideNavItem;
			var pathToSideNavDropListItem;
	    	var activityPreReqExists = false;
		    var moduleGroupPreReqStatus = 'Default';
		    console.log( 'type = ' + courseParamsActivitiesIteration.type );
		    
		    // check if the module group has a prereq, which should override the inner modules
		    if( courseParamsActivitiesIteration.preReq != undefined ){
			    //moduleGroupPreReqStatus = 'Unmet';
			    if( courseParamsActivitiesIteration.preReq.activityList != undefined ){
					var activityListPath = 			courseParamsActivitiesIteration.preReq.activityList;
					var conditionCheck = 				courseParamsActivitiesIteration.preReq.condition;
					var effectCheck = 					courseParamsActivitiesIteration.preReq.effect; // Hidden
					// cycle each item in the activity list 
					activityListCycleLoop:
					for( var i = 0 ; i < activityListPath.length ; i++ ){
						console.log( 'activityListPath[' + i + '] = ' + activityListPath[i] );
						var activityListSlotSplit = 		activityListPath[i].split('-');
						var activityTargetID = 			Number(activityListSlotSplit[0]);
						if( activityListSlotSplit[1] != '' && activityListSlotSplit[1] != undefined ){
							var activityTargetList = 		activityListSlotSplit[1].split(',');
							// if checking an activity module group, cycle each activity to check against condition
							for( var g = 0 ; g < activityTargetList.length ; g++ ){
								var targetListElement = Number(activityTargetList[g])
								if( conditionCheck == "Complete" ){
									if( courseParamsActivitiesIteration.type == "Course Module Group" ){
										// activityTargetID + "_" +  targetListElement
										cycleThisGroupsModulesLoop:
										if( courseStatusObject.courseModuleGroupStack[activityTargetID - 1][targetListElement - 1].moduleProgressStatus != "Completed" ){
											console.log("NOT COMPLETED");
											for( var v = 0 ; v < courseParamsActivitiesIteration.modules.length ; v++ ){
												//pathToSideNavItem = 						$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_2) + ')');
									    		pathToSideNavItem = 						$('.dashboardSideNavStack li[data-courseModuleGrouping="' + (w+1) + '_' + (v+1) + '"]');
									    		var grabSideNavItemIndex = 				pathToSideNavItem.index();
									    		console.log("n grabSideNavItemIndex = " + grabSideNavItemIndex);
									    		pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
									    		pathToSideNavItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
										    	pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', skinNeutralTextColor);
										    	//pathToSideNavDropListItem = 			$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement_2) + ')');
										    	pathToSideNavDropListItem = 			$('.sideNavDropList .qActivityChoice[data-courseModuleGrouping="' + (w+1) + '_' + (v+1) + '"]');
										    	var grabSideNavDropListItemIndex = 	pathToSideNavDropListItem.index();
										    	console.log("n grabSideNavDropListItemIndex = " + grabSideNavDropListItemIndex);
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').closest('li').css('color', skinNeutralTextColor);
										    	//sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_2) ].navSlotStatus = "Locked";
												sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Locked";
												courseStatusObject.courseModuleGroupStack[w][v].moduleProgressStatus = "Locked";
											}
											moduleGroupPreReqStatus = 'Unmet';
							    		}
							    		if( moduleGroupPreReqStatus == 'Unmet' ){
								    		break activityListCycleLoop;
							    		}
							    		if( g == (activityListPath.length - 1) ){
								    		// if reaches here, it should be complete
								    		 moduleGroupPreReqStatus = 'Met';
							    		}
						    		}
								}
							}
						}
					}
				}
			}
			//var blah = "asdf";
			//if( blah == "blah" ){
			
			// inner module handling	, only executed if group prereq is met or doesn't exist
		    if( moduleGroupPreReqStatus == 'Default' || moduleGroupPreReqStatus == 'Met' ){
			    console.log('prereq attempt---');
			    // cycle through course module group's inner modules
			    console.log('courseParamsActivitiesIteration.type = ' + courseParamsActivitiesIteration.type);
				if( courseParamsActivitiesIteration.type == "Course Module Group" ){ // is this if-check redundant within status check?
					moduleGroupCounter++;
					var moduleCounter = 0;
					moduleCycleLoop:
					for( var f = 0 ; f < courseParamsActivitiesIteration.modules.length ; f++ ){
						//sideNavCourseModuleIncrement_3++;
						var moduleIteration = 	courseParamsActivitiesIteration.modules[f];
						var modulePreReq = 		moduleIteration.preReq;
						moduleCounter++;
						console.log( 'path ' + courseParamsActivitiesIteration + ' module ' + f + ' before pre req check' );
						if( modulePreReq != undefined ){
							console.log( 'path ' + courseParamsActivitiesIteration + ' module ' + f + ' has prereqs' );
							if( modulePreReq.activityList != undefined ){
								console.log( 'path ' + courseParamsActivitiesIteration + ' module ' + f + ' prereqs activity list exists' );
								//var activityListPath = 			masterJSONStorage.courseParams.activities[w].modules[f].preReq.activityList;
								var preReqTargetListArray = 	modulePreReq.activityList;
								var preReqConditionCheck = 	modulePreReq.condition;
								//var effectCheck = 					masterJSONStorage.courseParams.activities[w].modules[f].preReq.effect; // Hidden
								console.log( 'conditionCheck = ' + preReqConditionCheck );
								preReqListCycleLoop:
								for( var preReqListIteration = 0 ; preReqListIteration < preReqTargetListArray.length ; preReqListIteration++ ){
									if( preReqConditionCheck == "Complete" ){
										
										//if( courseStatusObject.courseModuleGroupStack[activityTargetID - 1][targetListElement - 1].moduleProgressStatus != "Completed" ){
										
										var pathPreReqConditionMet = false;
										for( var activityIDSeeker = 0 ; activityIDSeeker < courseStatusObject.courseModuleGroupStack[w].length ; activityIDSeeker++ ){
											console.log( 'courseStatusObject.courseModuleGroupStack[w][activityIDSeeker].activityID = ' + courseStatusObject.courseModuleGroupStack[w][activityIDSeeker].activityID );
											console.log( 'preReqTargetListArray[preReqListIteration] = ' + preReqTargetListArray[preReqListIteration] );
											if( courseStatusObject.courseModuleGroupStack[w][activityIDSeeker].activityID == preReqTargetListArray[preReqListIteration] ){
												pathPreReqConditionMet = true;
												break;
											}
										}
										
										//console.log();
										if( pathPreReqConditionMet ){
										//if( courseStatusObject.courseModuleGroupStack[w][f].moduleProgressStatus != "Completed" ){
										//if( courseStatusObject.courseModuleGroupStack[w][f].moduleProgressStatus != "Completed" ){
											//pathToSideNavItem = 				$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_3) + ')');
											console.log('oooh');
											
											console.log( 'w = ' + w + ' --- f = ' + f );
											
									    	pathToSideNavItem = 						$('.dashboardSideNavStack li[data-courseModuleGrouping="' + (w+1) + '_' + (f+1) + '"]');
									    	
									    	console.log( "grabNamee 1 = " + pathToSideNavItem.find('.sidenavItemInnerText').text() );
									    	
									    	//preReqTargetListArray[preReqListIteration]
									    	
									    	var grabSideNavItemIndex = 				pathToSideNavItem.index();
									    	//console.log("o grabSideNavItemIndex = " + grabSideNavItemIndex);
								    		pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
								    		pathToSideNavItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
									    	pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', skinNeutralTextColor);
									    	//pathToSideNavDropListItem = 	$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement_3) + ')');
									    	pathToSideNavDropListItem = 			$('.sideNavDropList .qActivityChoice[data-courseModuleGrouping="' + (w+1) + '_' + (f+1) + '"]');
									    	var grabSideNavDropListItemIndex = 	pathToSideNavDropListItem.index();
									    	//console.log("o grabSideNavDropListItemIndex = " + grabSideNavDropListItemIndex);
									    	pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
									    	pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', skinNeutralTextColor);
									    	pathToSideNavDropListItem.find('.sidenavElementIcon').closest('li').css('color', skinNeutralTextColor);
											//sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_3) - 1 ].navSlotStatus = "Locked";
											sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Locked";
											//courseStatusObject.courseModuleGroupStack[moduleGroupCounter - 1][moduleCounter - 1].moduleProgressStatus = "Locked";
											courseStatusObject.courseModuleGroupStack[w][f].moduleProgressStatus = "Locked";
								    		//console.log('group ' + (w+1) + ' - module ' + (f+1) + ' - completion check - status check: target not complete, iteration element locked');
								    		console.log('HERE? 1');
								    		break preReqListCycleLoop; //moduleCycleLoop;
								    		console.log('HERE? 2');
							    		}
							    		console.log('HERE? 3');
										if( preReqListIteration == (preReqTargetListArray.length - 1) ){
											console.log('HERE? 4');
								    		// if reaches here, it should be complete
								    		//pathToSideNavItem = 				$('.dashboardSideNavStack li:nth-child(' + (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_3) + ')');
								    		pathToSideNavItem = 						$('.dashboardSideNavStack li[data-courseModuleGrouping="' + (w+1) + '_' + (f+1) + '"]');
								    		
								    		console.log( "grabNamee 2 = " + pathToSideNavItem.find('.courseModuleChoice .sidenavItemInnerText').text() );
								    		
								    		var grabSideNavItemIndex = 				pathToSideNavItem.index();
								    		console.log("grabSideNavItemIndex = " + grabSideNavItemIndex);
								    		//pathToSideNavDropListItem = 	$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement_3) + ')');
										    pathToSideNavDropListItem = 			$('.sideNavDropList .qActivityChoice[data-courseModuleGrouping="' + (w+1) + '_' + (f+1) + '"]');
										    var grabSideNavDropListItemIndex = 	pathToSideNavDropListItem.index();
										    console.log("grabSideNavDropListItemIndex = " + grabSideNavDropListItemIndex);
								    		console.log('original slot status = ' + sideNavArray[ grabSideNavItemIndex ].navSlotStatus );
								    		if( sideNavArray[ grabSideNavItemIndex ].navSlotStatus == "Completed" ){
									    		
									    		//pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
									    		//pathToSideNavItem.find('.sidenavElementIcon').css('color', '#ffffff');
										    	//pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', '#ffffff');
										    	////pathToSideNavDropListItem = 	$('.sideNavDropList .qActivityChoice:nth-child(' + (firstCourseModuleItem_DropList + sideNavCourseModuleIncrement_3) + ')');
										    	//pathToSideNavDropListItem = 			$('.sideNavDropList .qActivityChoice[data-courseModuleGrouping="' + (w+1) + '_' + (f+1) + '"]');
										    	//var grabSideNavDropListItemIndex = 	pathToSideNavDropListItem.index();
										    	//console.log("g grabSideNavDropListItemIndex = " + grabSideNavDropListItemIndex);
										    	//pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
										    	//pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', '#ffffff');
										    	//pathToSideNavDropListItem.find('.sidenavElementIcon').closest('li').css('color', '#ffffff');
										    	
												////sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_3) - 1 ].navSlotStatus = "Unattempted";
												////sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Completed";
												////courseStatusObject.courseModuleGroupStack[moduleGroupCounter - 1][moduleCounter - 1].moduleProgressStatus = "Unattempted";
												////courseStatusObject.courseModuleGroupStack[w][f].moduleProgressStatus = "Completed";
									    		console.log('group ' + (w+1) + ' - module ' + (f+1) + ' - completion check - status check: target complete, iteration element unattempted');
								    		}else{
									    		pathToSideNavItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
									    		pathToSideNavItem.find('.sidenavElementIcon').css('color', '#ffffff');
										    	pathToSideNavItem.find('.sidenavElementIcon').closest('li').css('color', '#ffffff');
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').css('color', '#ffffff');
										    	pathToSideNavDropListItem.find('.sidenavElementIcon').closest('li').css('color', '#ffffff');
												//sideNavArray[ (firstCourseModuleItem_Default + sideNavCourseModuleIncrement_3) - 1 ].navSlotStatus = "Unattempted";
												console.log( "grabSideNavItemIndex = " + grabSideNavItemIndex );
												sideNavArray[ grabSideNavItemIndex ].navSlotStatus = "Unattempted";
												//courseStatusObject.courseModuleGroupStack[moduleGroupCounter - 1][moduleCounter - 1].moduleProgressStatus = "Unattempted";
												courseStatusObject.courseModuleGroupStack[w][f].moduleProgressStatus = "Unattempted";
									    		console.log('group ' + (w+1) + ' - module ' + (f+1) + ' - completion check - status check: target not complete, iteration element unattempted');
								    		}
							    		}
									}
								}
							}
						}
					}
				}
			}
	    	//console.log('---------- stop module group sets passes ----------');
	    	console.log('----------------------------------------');
	    	console.log( ' -------- activity container ' + w + ' stop -------- ');
	    	console.log('==================================================');
			
			console.log('====================');
			console.log('---------- second course module group process - end ----------');
			console.log('====================');
			console.log('========================================');
			console.log('========================================');
			
    	}*/
		activitiesCompleteCount = activitiesCompleteCountSum();
		/////////////////////////////////////
		// ASSESSMENT
		/////////////////////////////////////
		if( courseAssessment_Present ){
			if( persistentData.scoreType == 'perc' ){ // handling for percentage-based scoring (default)
		    	if( courseStatusObject.courseAssessmentScore == -1 ){ // unattempted / locked
		    		//if(activitiesCompleteCount >= courseStatusObject.courseModuleGroupStack.length){ // perform unlock, set as unattempted
		    		if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // perform unlock, set as unattempted
			    		$('.sidenavStatusIcon_courseAssessment').css('color', 'white');
						$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', 'white');
						$('.sidenavStatusIcon_courseAssessment').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
						sideNavArray[assessmentSideNavNum].navSlotStatus = "Unattempted";
						$('.courseAssessmentContent .dashboardSectionStatusLabel').html( '<strong>Status: Ready</strong>' );
						$('.courseAssessmentContent .dashboardSectionText').html( 'Please complete the assessment. A passing score of ' + useMasteryScore + '% is required to fulfill the RACE requirements and unlock the survey.' );
						if(organization == "Veritas"){
							$('.courseAssessmentContent .dashboardSectionText').append( '<br /></br />Per Veritas guidelines for CE credit, an answer key for the assessment will not be provided upon completion.' );
						}
						$('.courseAssessmentContent .dashboardSectionSplash').html( '<div class="dashboardSectionLauncher">Begin the Assessment</div>' );
		    		}else{ // display locked 
			    		//$('.sidenavStatusIcon_courseAssessment').css('color', skinSecondaryColor);
						//$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', skinSecondaryColor);
						$('.sidenavStatusIcon_courseAssessment').css('color', skinNeutralTextColor);
						$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', skinNeutralTextColor);
						$('.sidenavStatusIcon_courseAssessment').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
						sideNavArray[assessmentSideNavNum].navSlotStatus = "Locked";
						$('.courseAssessmentContent .dashboardSectionStatusLabel').html( '<strong>Status: Locked</strong>' );
						$('.courseAssessmentContent .dashboardSectionText').html( 'To unlock the assessment, please complete all of the above activities.' );
						$('.courseAssessmentContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
						$('.courseAssessmentContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentlocked)[0].data);
		    		}
		    	}else if(courseStatusObject.courseAssessmentScore < useMasteryScore){ // failed
			    	//$('.sidenavStatusIcon_courseAssessment').css('color', skinSecondaryColor);
			    	//$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', skinSecondaryColor);
			    	$('.sidenavStatusIcon_courseAssessment').css('color', 'white');
					$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', 'white');
			    	$('.sidenavStatusIcon_courseAssessment').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityfailed)[0].data);
			    	$('.courseAssessmentContent .dashboardSectionStatusLabel').html( '<strong>Status: Failed (Score = ' + courseStatusObject.courseAssessmentScore + '%)</strong>' );
					$('.courseAssessmentContent .dashboardSectionText').html( 'You have not acheived the required passing score. You may continue to retry the assessment until a score of at least ' + useMasteryScore + '% is acheived.<br /></br />Per Veritas guidelines for CE credit, an answer key for the assessment will not be provided upon completion.' );
					$('.courseAssessmentContent .dashboardSectionSplash').html( '<div class="dashboardSectionLauncher">Retry the Assessment</div>' );
		    	}else{ // passed
			    	//$('.sidenavStatusIcon_courseAssessment').css('color', skinSecondaryColor);
			    	//$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', skinSecondaryColor);
			    	$('.sidenavStatusIcon_courseAssessment').css('color', 'white');
					$('.sidenavStatusIcon_courseAssessment').closest('li').css('color', 'white');
			    	$('.sidenavStatusIcon_courseAssessment').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
			    	sideNavArray[assessmentSideNavNum].navSlotStatus = "Completed";		    	
			    	$('.courseAssessmentContent .dashboardSectionStatusLabel').html( '<strong>Status: Passed (Score = ' + courseStatusObject.courseAssessmentScore + '%)</strong>' );
					$('.courseAssessmentContent .dashboardSectionText').html( 'Thank you for completing the assessment. Your passing score has unlocked the survey.' );
					$('.courseAssessmentContent .dashboardSectionSplash').html('<div class="dashboardSectionBadge"></div>');
					$('.courseAssessmentContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentcompleted)[0].data);
					$('.sidenavStatusIcon_courseSurvey').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
				}
	    	}
		}
		
    	// SURVEY
    	if( courseSurvey_Present ){
	    	if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 0 ){ // unattempted / locked
	    		//$('.sidenavElementIcon').css('color', skinSecondaryColor);
	    		if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){
		    		$('.sidenavStatusIcon_courseSurvey').css('color', 'white');
		    		$('.sidenavStatusIcon_courseSurvey').closest('li').css('color', 'white');
		    		$('.sidenavStatusIcon_courseSurvey').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
		    		sideNavArray[surveySideNavNum].navSlotStatus = "Unattempted";
		    		$('.courseSurveyContent .dashboardSectionStatusLabel').html( '<strong>Status: Ready</strong>' );
					$('.courseSurveyContent .dashboardSectionText').html( 'To unlock the RACE Certificate of Completion, please complete the survey regarding your learning experience.' );
					$('.courseSurveyContent .dashboardSectionSplash').html( '<div class="dashboardSectionLauncher">Begin the Survey</div>' );
				}else{
	    			//$('.sidenavStatusIcon_courseSurvey').css('color', skinSecondaryColor);
		    		//$('.sidenavStatusIcon_courseSurvey').closest('li').css('color', skinSecondaryColor);
		    		$('.sidenavStatusIcon_courseSurvey').css('color', skinNeutralTextColor);
		    		$('.sidenavStatusIcon_courseSurvey').closest('li').css('color', skinNeutralTextColor);
		    		$('.sidenavStatusIcon_courseSurvey').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
		    		sideNavArray[surveySideNavNum].navSlotStatus = "Locked";
		    		$('.courseSurveyContent .dashboardSectionStatusLabel').html( '<strong>Status: Locked</strong>' );
					$('.courseSurveyContent .dashboardSectionText').html( 'To unlock the RACE Certificate of Completion, a survey regarding your learning experience must be completed. The survey will unlock once the following requirements are fulfilled:<ol><li>Complete both case studies</li><li>Pass the assessment with a score of at least ' + useMasteryScore + '%</li></ol>' );
					$('.courseSurveyContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
					$('.courseSurveyContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursesurveylocked)[0].data);
				}
	    		//$('.sidenavStatusIcon_courseCertificate').css('color', skinSecondaryColor);
	    		//$('.sidenavStatusIcon_courseCertificate').closest('li').css('color', skinSecondaryColor);
	    		$('.sidenavStatusIcon_courseCertificate').css('color', skinNeutralTextColor);
		    	$('.sidenavStatusIcon_courseCertificate').closest('li').css('color', skinNeutralTextColor);
	    		$('.sidenavStatusIcon_courseCertificate').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
	    		sideNavArray[certificateSideNavNum].navSlotStatus = "Locked";
	    		$('.courseCertificateContent .dashboardSectionStatusLabel').html( '<strong>Status: Locked</strong>' );
				$('.courseCertificateContent .dashboardSectionText').html( 'To unlock the RACE Certificate of Completion, the following requirements must be fulfilled:<ol><li>Complete both case studies</li><li>Pass the assessment with a score of at least ' + useMasteryScore + '%</li><li>Complete the survey regarding your learning experience</li></ol>' );
				$('.courseCertificateContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
				$('.courseCertificateContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursecertificatelocked)[0].data);
	    	}else{
	    		//$('.sidenavElementIcon').css('color', skinSecondaryColor);
	    		$('.sidenavStatusIcon_courseSurvey').css('color', 'white');
	    		$('.sidenavStatusIcon_courseSurvey').closest('li').css('color', 'white');
	    		$('.sidenavStatusIcon_courseSurvey').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
	    		sideNavArray[surveySideNavNum].navSlotStatus = "Completed";
	    		$('.courseSurveyContent .dashboardSectionStatusLabel').html( '<strong>Status: Complete</strong>' );
				$('.courseSurveyContent .dashboardSectionText').html( 'Thank you for completing the survey. The RACE Certificate of Completion has been unlocked.' );
				$('.courseSurveyContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
				$('.courseSurveyContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursesurveycompleted)[0].data);
	    		$('.sidenavStatusIcon_courseCertificate').css('color', 'white');
	    		$('.sidenavStatusIcon_courseCertificate').closest('li').css('color', 'white');
	    		$('.sidenavStatusIcon_courseCertificate').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
	    		sideNavArray[certificateSideNavNum].navSlotStatus = "Completed";
	    		$('.courseCertificateContent .dashboardSectionStatusLabel').html( '<strong>Status: Unlocked</strong>' );
				$('.courseCertificateContent .dashboardSectionText').html( 'You have fulfilled all the requirements toward a RACE Certificate of Completion. <br /><br /><span class="dashboardSmallPrint">This program was reviewed and approved by the AAVSB RACE program for continuing education. Please contact the AAVSB RACE program at <a class="emailLink" href="mailto:race@aavsb.org">race@aavsb.org</a> should you have any comments/concerns regarding this program&apos;s validity or relevancy to the veterinary profession.</span>' );
				//$('.courseCertificateContent .dashboardSectionSplash').html( '<div class="certificateLauncher"></div>' );
				if( $('.courseCertificateContent #canvasContainer').length ){
					// it exists
				}else{
					//$('.courseCertificateContent').append( '<div id="canvasContainer"></div>' );
					$('.courseCertificateContent .dashboardSectionStatusLabel').after( '<div id="canvasContainer"></div>' );
				}
				$('.courseCertificateContent .dashboardSectionSplash').html( '<div class="dashboardSectionBadge"></div>' );
				$('.courseCertificateContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_coursecertificateavailable)[0].data);
			}
    	}
    	webFontForceRedraw('.sidenavStatusIcon_courseAssessment');
    	webFontForceRedraw('.sidenavStatusIcon_courseSurvey');
    	webFontForceRedraw('.sidenavStatusIcon_courseCertificate');
    }
    $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ')').removeClass('sidenavItem-Normal');
    $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ')').addClass('sidenavItem-Selected');
    //$('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ')').css('color', skinSecondaryColor);
    //$('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ')').css('color', skinNeutralTextColor);
    //$('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ')').css('background-color', '#D3D0C7');
    $('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavSet + 1) + ')').removeClass('sidenavItem-Normal');
    $('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavSet + 1) + ')').addClass('sidenavItem-Selected');
   // $('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavSet + 1) + ')').css('color', skinNeutralTextColor);
    //$('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavSet + 1) + ')').css('background-color', '#D3D0C7');
    if(sideNavStack == "dashboard" || sideNavStack == "help" || sideNavStack == "dashboardHelp" || sideNavStack == "about"){
    	$('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavSet + ') .sidenavElementIcon').css('color', skinNeutralTextColor);
    	$('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavSet + 1) + ') .sidenavElementIcon').css('color', skinNeutralTextColor);
    	$('.sideNavDropList .menuSelectedLabel').css('background-color', '#D3D0C7');
    	$('.sideNavDropList .menuSelectedLabel').css('color', skinNeutralTextColor);
    	//$('.sideNavDropList .menuSelectedLabel').html( sideNavArray[(sideNavSet - 1)].navSlotLabel );
    	//$('.sideNavDropList .menuSelectedLabel').html('Contents');
    	$('.sideNavDropList .menuSelectedLabel').html( langPack.ui.globalElements.sideNav.dropListContents );
    }
    
    if( previewPageJump == "disabled" || previewPageJump == "done"){
	    if( currentDashboardSelectedArea == 'courseOverview'){
	    //if( sideNavStack == "dashboard" && currentDashboardSelectedArea == 'courseOverview'){
		//if( dashboardSideNavItemActive == 1 ){  
	    	//continueButtonUpdate("Right", "BEGIN", "Disabled");
	    	continueButtonUpdate("Finish", "CONTINUE", "OverviewContinue");
	    	//$( ".activeDashboardContentArea" ).find('.dashboardSectionHeader').focus();
			//updateFocus();
		}
    }
    
    if( currentDashboardSelectedArea == 'courseModule' && $( 'body' ).attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
	    //console.log('course module pass');
	    //courseModuleGroupedActive = $('.sideNavDropList .menuSelectDropButton').attr('data-courseModuleGrouping');
	    var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
	    var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
	    var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
    	CETActivityID = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].moduleID;
    	//console.log('dirA -- ' + CETActivityID);
    	switch( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus ){
	    	case 'Unattempted' :
	    		$('.courseActivityContent .dashboardSectionStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.unattempted + '</strong>' );
	    		continueButtonUpdate("Right", "BEGIN", "LaunchModule");
	    	break;
	    	case 'Incomplete' :
	    		$('.courseActivityContent .dashboardSectionStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.incomplete + '</strong>' );
	    		continueButtonUpdate("Right", "CONTINUE", "LaunchModule");
	    	break;
	    	case 'Completed' :
	    		if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus != undefined && courseStatusObject.coursePassFailResultStatus != undefined && courseStatusObject.coursePassFailResultStatus != "" ){
		    		completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + ' (' + passedStatus + ')</strong>';
	    		}else{
		    		completionResultLabel = '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.completed + '</strong>';
	    		}
	    		$('.courseActivityContent .dashboardSectionStatusLabel').html( completionResultLabel );
	    		if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
		    		if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[ courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1 ] == '2' ){
		    			continueButtonUpdate("Right", "REVIEW", "ReviewActivity");
		    		}else{
			    		continueButtonUpdate("Right", "CONTINUE", "LaunchModule");
		    		}
	    		}else{
		    		continueButtonUpdate("Right", "CONTINUE", "LaunchModule");
	    		}
	    	break;
	    	case 'Locked' :
	    		$('.courseActivityContent .dashboardSectionStatusLabel').html( '<span class="accessViz">' + langPack.screenreader.dashboard.pathProgress + '</span><strong>' + localizedStatusPrefix + langPack.ui.dashboard.progressStatus.locked + '</strong>' );
	    		//$('.courseActivityContent .dashboardSectionStatusLabel').html( '<strong>Status: Locked</strong>' );
	    		
	    		var buildLockNotice = 	'<div class="lockNoticeBlock focalItem" tabindex="0" role="section" aria-label="' + langPack.screenreader.dashboard.pathLocked + '">';
	    		buildLockNotice += 			'<div class="lockNoticeBlock_LockIcon StepStone-Icon-Font" data-StepStoneIcon="preReqLockNotice_LockIcon"></div>';
	    		buildLockNotice += 			'<div class="lockNoticeBlock_LockTextContainer">';
	    		buildLockNotice += 				'<div class="lockNoticeBlock_LockText lockNoticeBlock_LockTextDefault">' + langPack.ui.dashboard.lockedNotice.basicLockNotice + ': </div>';
	    		buildLockNotice += 				'<ul class="lockNoticeBlock_PreReqList UDArrowGroup" data-UDArrowGroup="PathDashboardUnlockList" tabindex="0"></ul">';
	    		//buildLockNotice = 				'<li class="lockNoticeBlock_PreReqListSlot"></li">';
	    		buildLockNotice += 			'</div">';
	    		buildLockNotice += 		'</div">';
	    		//$('.lockNoticeBlock').remove();
	    		$('.courseActivityContent .dashboardSectionText').before( buildLockNotice );
	    		//$('.lockNoticeBlock_LockIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
	    		$('.lockNoticeBlock_LockIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
				continueButtonUpdate("Locked", "LOCKED", "Disabled");
				
				var grabActiveSideNavLabel = sideNavArray[dashboardSideNavItemActive-1].navSlotLabel;
				// prepare list of ids to match to display names
	    		var preReqQuickList = [];
	    		cycleCourseModuleGroups:
	    		for(var i1 = 0 ; i1 < courseModuleArray.length ; i1++){
		    		//console.log( "i1 = " + i1 );
		    		cycleCourseModules:
		    		for(var i2 = 0 ; i2 < courseModuleArray[i1].modules.length ; i2++){
			    		//console.log( "i2 = " + i2 );
		    			if( courseModuleArray[i1].modules[i2].activityLabel == grabActiveSideNavLabel ){
			    			if( courseModuleArray[i1].modules[i2].modulePreReqs != undefined ){
				    			cycleModulePreReqs:
				    			for(var i3 = 0 ; i3 < courseModuleArray[i1].modules[i2].modulePreReqs.length ; i3++){
					    			//console.log( "i3 = " + i3 );
									//preReqQuickList.push(courseModuleArray[h].modules[r].modulePreReqs[s]);
									//$('.lockNoticeBlock_PreReqList').append('<li class="lockNoticeBlock_PreReqListSlot"><div class="statusIcon StepStone-Icon-Font" data-StepStoneIcon="preReqStatusIcon"></div><div class="lockNoticePreReqText">' + courseModuleArray[i1].modules[i2].modulePreReqs[i3] + '</div></li>');
									preReqQuickList.push( courseModuleArray[i1].modules[i2].modulePreReqs[i3] );
		    					}
		    					break cycleCourseModuleGroups;
			    			}
		    			}
	    			}
	    		}
	    		
	    		//console.log( 'preReqQuickList = ' + preReqQuickList.join(':') );
	    		
	    		// now match display names
	    		cycleCoursePreReqList:
	    		for(var i1 = 0 ; i1 < preReqQuickList.length ; i1++){
		    		//console.log( "i1 = " + i1 );
		    		cycleCourseModuleGroups2:
		    		for(var i2 = 0 ; i2 < courseModuleArray.length ; i2++){
			    		//console.log( "i2 = " + i2 );
			    		cycleCourseModules2:
			    		for(var i3 = 0 ; i3 < courseModuleArray[i2].modules.length ; i3++){
				    		//console.log( "i3 = " + i3 );
				    		//console.log( "courseModuleArray[i2].modules[i3].moduleID = " + courseModuleArray[i2].modules[i3].moduleID );
				    		//console.log( "preReqQuickList[i1] = " + preReqQuickList[i1] );
				    		if( courseModuleArray[i2].modules[i3].moduleID == preReqQuickList[i1] ){
					    		//console.log( "got in" );
					    		var grabActivityLabel = courseModuleArray[i2].modules[i3].activityLabel;
					    		
					    		var firstPathDashboardLockItem = "";
								var lastPathDashboardLockItem = "";
								
								if(i1 == 0){
						    		firstPathDashboardLockItem = " firstPathDashboardLockItem";
					    		}
					    		if(i1 == preReqQuickList.length - 1){
						    		lastPathDashboardLockItem = " lastPathDashboardLockItem";
					    		}
					    		
					    		$('.lockNoticeBlock_PreReqList').append('<li class="lockNoticeBlock_PreReqListSlot focalItem arrowNavUD' + firstPathDashboardLockItem + lastPathDashboardLockItem + '" tabindex="0" aria-label="' + langPack.screenreader.dashboard.pathPreReqItem + grabActivityLabel + langPack.screenreader.dashboard.pathPreReqItemLaunch + '"><div class="statusIcon StepStone-Icon-Font" data-StepStoneIcon="preReqStatusIcon"></div><div class="lockNoticePreReqText">' + grabActivityLabel + '</div></li>');
					    		cycleSideNavArray:
					    		for( var i4 = 0 ; i4 < sideNavArray.length ; i4++ ){ // starting at 1, skipping course overview
						    		//console.log("i4 = " + i4 );
						    		if( sideNavArray[i4].navSlotStatus == "" || sideNavArray[i4].navSlotStatus == null || sideNavArray[i4].navSlotStatus == undefined ){
							    		continue cycleSideNavArray;
						    		}
						    		//console.log("sideNavArray[i4].navSlotLabel = " + sideNavArray[i4].navSlotLabel );
						    		//console.log("grabActivityLabel = " + grabActivityLabel );
						    		if( sideNavArray[i4].navSlotLabel == grabActivityLabel ){
							    		var grabNavSlotStatus = sideNavArray[i4].navSlotStatus;
							    		//console.log("grabNavSlotStatus = " + grabNavSlotStatus )
							    		var pathToLastPreReqStatusIcon = $('.activeDashboardContentArea').find('.lockNoticeBlock_PreReqListSlot').last().find('.statusIcon');
							    		switch( grabNavSlotStatus ){
								    		case "Unattempted" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
								    		break;
								    		case "Incomplete" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityincomplete)[0].data);
								    		break;
								    		case "Completed" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
								    		break;
								    		case "Locked" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
								    		break;
							    		}
							    		break cycleSideNavArray;
						    		}
					    		}
					    		break cycleCourseModuleGroups2;
					    	}
				    	}
			    	}
		    	}
	    	break;
    	}
    	
    	$( ".activeDashboardContentArea" ).find('.dashboardSectionHeader').focus();
		updateFocus({ 'action' : "Update" });
    	
    	//if(currentDashboardSelectedArea == "courseModule"){
		//if( launchSource == "MenuButton" ){
			//console.log('mb launcher');
		// (unused ? ) --/// SCORM
		/*
		if(persistentData == 'SCORM'){
			if(persistentData_Simulation){
			
			}else{
				// does this trigger?
				console.log('sidenav reset triggering lms/scorm comms');
				if( sideNavStack != "help" && sideNavStack != "about" ){
					if( !courseAssessment_Present ){
						console.log('activitiesCompleteCount = ' + activitiesCompleteCount );
						console.log('sideNavLearningModuleTotalCount = ' + sideNavLearningModuleTotalCount );
						if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // all activities / modules completed
						//if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
							courseStatusObject.courseAssessmentScore = 100;
							if( !courseSurvey_Present ){
								setCourseProgressLMS('passed');
							}else{
								setCourseProgressLMS('completed');
							}
							prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
						    if( toggleSessionTimeAccrue ){
								setSessionTime();
							}
							setScore(); // also sets suspend data
							toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
						}
					}//else{
						//setSuspendData();
					//}
				}
			}
		}
    	*/
	}
	if( currentDashboardSelectedArea == 'courseAssessment' ){
		//if(activitiesCompleteCount >= courseStatusObject.courseModuleGroupStack.length){
		if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ 
			if(courseStatusObject.courseAssessmentScore == -1){
		    	continueButtonUpdate("Right", "BEGIN", "LaunchAssessment");
		    	$('.dashboardSectionLauncher').css('background', skinPrimaryColor);
	    	}else if(courseStatusObject.courseAssessmentScore < useMasteryScore){
		    	continueButtonUpdate("Right", "RETRY", "LaunchAssessment");
		    	$('.dashboardSectionLauncher').css('background', skinPrimaryColor);
	    	}else if(courseStatusObject.courseAssessmentScore >= useMasteryScore){
		    	//continueButtonUpdate("Finish", "DONE", "Disabled");
		    	continueButtonUpdate("Finish", "CONTINUE", "AssessmentCompleteBypass");
	    	}
	    }else{
		    continueButtonUpdate("Locked", "LOCKED", "Disabled");
	    }
	    //$('.courseAssessmentContent .dashboardSectionSplash').html('<div><div class="dashboardSectionBadge"></div></div>');
		//$('.courseAssessmentContent .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentcompleted)[0].data);
		//$('.courseAssessmentContent .dashboardSectionBadge').append('bad');
	    //$('.lightBoxDialog_Level3_TopNav_LabelBox').append('<div class="testee"></div>');
	    //$('.testee').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentcompleted)[0].data);
	    //$('.lightBoxDialog_Level3_TopNav_LabelBox').append( '<div class="dashboardSectionBadge"></div>' );
		//$('.lightBoxDialog_Level3_TopNav_LabelBox .dashboardSectionBadge').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.dashboardbadge_courseassessmentlocked)[0].data);
	}
	if( currentDashboardSelectedArea == 'courseSurvey' ){
		if(courseStatusObject.courseAssessmentScore >= useMasteryScore){
			if( courseStatusObject.courseSurveyStatus != undefined &&  courseStatusObject.courseSurveyStatus == 0 ){
		    	continueButtonUpdate("Right", "BEGIN", "LaunchSurvey");
		    	$('.dashboardSectionLauncher').css('background', skinPrimaryColor);
	    	}else if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 1 ){
		    	//continueButtonUpdate("Finish", "DONE", "Disabled");
		    	continueButtonUpdate("Finish", "CONTINUE", "SurveyCompleteBypass");
	    	}
	    }else{
	    	continueButtonUpdate("Locked", "LOCKED", "Disabled");
	    }
	}
	if( currentDashboardSelectedArea == 'courseCertificate' ){
		if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 0 ){
	    	continueButtonUpdate("Locked", "LOCKED", "Disabled");
    	}else if( courseStatusObject.courseSurveyStatus != undefined && courseStatusObject.courseSurveyStatus == 1 ){
	    	//continueButtonUpdate("Course Certificate", "SAVE", "SaveCertificate");
	    	//continueButtonUpdate("Credits", "CREDITS", "LaunchCredits");
	    	continueButtonUpdate("Exit", "EXIT", "ExitCourse");
	    	preInitCanvas();
    	}
	}
	if(sideNavStack == "help" || sideNavStack == "dashboardHelp" || sideNavStack == "about" ){ // help overrides continue button when necessary
		 //if( currentDashboardSelectedArea == 'courseActivity'){
        //if( currentCourseModuleUserPassage == "FirstPass" || currentCourseModuleUserPassage == "Review" ){
        //if( currentCourseModule != null ){
	        $('.lightBoxDialog_Level3_TopNav_CloseContainer').show(); 
	        //$("#lightBoxDialog-Level3").dialog( "option" , "closeOnEscape" , true );
	        if( $('body').attr( 'data-lightBoxPanel3' ) =="DashboardHelp" ){
				continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
			}else{
		        if( continueButtonForceStatus == "BackToDashboard" ){
			        continueButtonForceStatus = null;
			        continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
		        }else{
			        //continueButtonUpdate("Down", "RESUME", "Resume");
					continueButtonUpdate("Down", "HIDE", "HideLbLvl3");
		        }
	        }
		//}else{
			//$('.lightBoxDialog_Level3_TopNav_CloseContainer').hide(); 
			//$("#lightBoxDialog-Level3").dialog( "option" , "closeOnEscape" , false );
    		//continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
		//}
    }
    
    $('.sidenavActiveIndicator').css('background', skinPrimaryColor);
    /*$( ".courseOverviewContent" ).each(function(){
		if( $(this).find('.dashboardSectionHeader').text().length == 0 ){
			$(this).find('.dashboardSectionHeader').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $(this).find('.dashboardSectionStatusLabel').text().length == 0 ){
			$(this).find('.dashboardSectionStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $(this).find('.dashboardSectionScoreStatusLabel').text().length == 0 ){
			$(this).find('.dashboardSectionScoreStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $(this).find('.dashboardSectionText').text().length == 0 ){
			$(this).find('.dashboardSectionText').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
	});*/
    //$( ".courseActivityContent" ).each(function(){
	//$( ".activeDashboardContentArea" ).each(function(){    
		if( $( ".activeDashboardContentArea" ).find('.dashboardSectionHeader').text().length == 0 ){
			$( ".activeDashboardContentArea" ).find('.dashboardSectionHeader').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $( ".activeDashboardContentArea" ).find('.dashboardSectionStatusLabel').text().length == 0 ){
			$( ".activeDashboardContentArea" ).find('.dashboardSectionStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $( ".activeDashboardContentArea" ).find('.dashboardSectionScoreStatusLabel').text().length == 0 ){
			$( ".activeDashboardContentArea" ).find('.dashboardSectionScoreStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $( ".activeDashboardContentArea" ).find('.dashboardSectionText').text().length == 0 ){
			$( ".activeDashboardContentArea" ).find('.dashboardSectionText').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
		if( $( ".activeDashboardContentArea" ).find('.dashboardSectionStepMap').find('.stepMapItem').length == 0 ){
			$( ".activeDashboardContentArea" ).find('.dashboardSectionStepMap').removeClass( "focalItem" ).removeAttr( "tabindex" );
		}
	//});
    
    /*
	if( $('.dashboardSectionHeader').text().length == 0 ){
		$('.dashboardSectionHeader').removeClass( "focalItem" ).removeAttr( "tabindex" );
	} 
	if( $('.dashboardSectionStatusLabel').text().length == 0 ){
		$('.dashboardSectionStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
	}
	if( $('.dashboardSectionScoreStatusLabel').text().length == 0 ){
		$('.dashboardSectionScoreStatusLabel').removeClass( "focalItem" ).removeAttr( "tabindex" );
	}
	if( $('.dashboardSectionText').text().length == 0 ){
		$('.dashboardSectionText').removeClass( "focalItem" ).removeAttr( "tabindex" );
	}
	if( $('.dashboardSectionStepMap').find('.stepMapItem').length == 0 ){
		console.log("greeeeer");
		$('.dashboardSectionStepMap').removeClass( "focalItem" ).removeAttr( "tabindex" );
	}
    */
    
    maximizeCETActivityContentHeight();
    maximizerDelayRelay();
    $('.lightBoxDialog_Level3_Content_Container').animate({ scrollTop: 0 }, "slow");
    //console.log('----------end side nav reset process----------');
}

// ! F.Build Dashboard Path Map ---
function buildDashboardPathMap(){
	var currentPathStepIDSet = 				courseModuleGroupedActive;
	var currentPathStepIDSetSplit = 		currentPathStepIDSet.split("_");
	var currentPathGroup = 					parseInt(currentPathStepIDSetSplit[0]) - 1;
	var currentPathActivity = 				parseInt(currentPathStepIDSetSplit[1]) - 1;
	var currentPathStep = 					parseInt(currentPathStepIDSetSplit[2]);//parseInt(currentPathStepIDSetSplit[2]) - 1;
	var currentPathStructure = 				masterJSONStorage.pathStructureSet[currentPathGroup][currentPathActivity];
	var currentPathHistory = 				courseStatusObject.courseModuleGroupStack[currentPathGroup][currentPathActivity].userPath;
	var moduleProgressStatus = 				courseStatusObject.courseModuleGroupStack[currentPathGroup][currentPathActivity].moduleProgressStatus;
	var linearPathList = 					currentPathStructure.idealPath;
	var pathStepList = 						currentPathStructure.nodeMapUnits;
	var pathMapBuild = 						"";
	pathMapBuild += 						'<div class="dashboardStepMapHeader">' + langPack.ui.dashboard.tableOfContents.toc + '</div>';
	pathMapBuild += 						'<div class="dashboardStepMapList UDArrowGroup" data-UDArrowGroup="DashboardStepList">';
	
	//var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	//var courseModule_Group = 				Number(splitCourseModuleGroupedActive[0]);
	//var courseModule_Module = 				Number(splitCourseModuleGroupedActive[1]);
	//var moduleProgressStatus = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus;
	
	for( var a = 0 ; a < linearPathList.length ; a++ ){
		var linearPathStepID = parseInt( linearPathList[a] );
		//console.log( "pass a = " + a );
		var addStyles = "";
		var addDataAttributes = "";
		nodeSeek:
		for( var b = 0 ; b < pathStepList.length ; b++ ){
			//console.log( "pass b = " + b );
			var checkStepID = parseInt( pathStepList[b].nodeID );
			if( checkStepID == linearPathStepID ){
				var stepOutputs = currentPathStructure.nodeMapUnits[b].outputs;
				if( stepOutputs != undefined ){
					var stepOutputLength = currentPathStructure.nodeMapUnits[b].outputs.length;
					//var addStyles = "";
					if( stepOutputLength > 1 ){
						addStyles += " assessmentPresent";
					}
				}
				//console.log( "currentPathStep = " + currentPathStep );
				//console.log( "currentPathStep + 1 = " + (currentPathStep+1) );
				//console.log( "checkStepID = " + checkStepID );
				
				var checkLastViewedStep = courseStatusObject.courseModuleGroupStack[currentPathGroup][currentPathActivity].lastViewedStep;
				if( checkLastViewedStep != undefined ){
					//parseInt( checkLastViewedStep );
					if( parseInt(checkLastViewedStep) == checkStepID ){
						//console.log( "match" );
						//addStyles += " stepMapItemActive";
						addStyles += " stepMapItemActive";
					}else{
						
					}
					
				}
				
				
				var useStatus = "Default";
				pathHistoryLoop:
				for( var s = 0 ; s < currentPathHistory.length ; s++ ){
					var pathHistoryCheck = parseInt( currentPathHistory[s] );
					if( pathHistoryCheck == linearPathStepID ){
						useStatus = "Viewed";
						break pathHistoryLoop;
					}
				}
				
				//var addDataAttributes = "";
				// data-status="Viewed"
				addDataAttributes += ' data-status="' + useStatus + '"'; // Viewed
				var addFirstFlag = "";
				var addLastFlag = "";
				var stepMapItemDisabled = "";
				if(a == 0){
					addFirstFlag = " dashboardStepListItemFirst";
				}
				if(a == linearPathList.length - 1){
					addLastFlag = " dashboardStepListItemLast";
				}
				if( moduleProgressStatus == "Locked" ){
		    		stepMapItemDisabled = " disabled";
	    		}
				
				pathMapBuild += '<div class="stepMapItem' + addFirstFlag + addLastFlag + stepMapItemDisabled + ' focalItem arrowNavUD ' + addStyles + '"' + addDataAttributes + ' data-stepLaunch="' + checkStepID + '" tabindex="0">';
				pathMapBuild += 	'<div class="stepMapActiveIndicator"></div>';
				pathMapBuild += 	'<div class="stepMapStatusIcon"></div>';
				pathMapBuild += 	'<div class="stepMapAssessmentIcon"></div>'; // for text wrap
				pathMapBuild += 	'<div class="stepMapAssessmentIconOver"></div>'; // for visibility, offset
				pathMapBuild += 	'<div class="stepMapItemLabel"><span class="accessViz">' + langPack.screenreader.dashboard.pathTOCItem + '</span>' + currentPathStructure.nodeMapUnits[b].stepTitle + '<span class="accessViz">' + langPack.screenreader.dashboard.pathTOCItemLaunch + '</span></div>';
				pathMapBuild += '</div>';
				break nodeSeek;
			}
		}
		//var stepIteration = pathStepList[  ]
	}
	//return pathMapBuild;
	pathMapBuild += 							'</div>';
	$('.courseActivityContent .dashboardSectionStepMap').html( pathMapBuild );
	$('.stepMapItem.assessmentPresent .stepMapAssessmentIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_assessment)[0].data);
	$('.stepMapItem.assessmentPresent .stepMapAssessmentIconOver').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_assessment)[0].data);
	//$('.stepMapItem:not(.assessmentPresent) .stepMapItemLabel').css( 'marginRight' , '0' );
	$('.stepMapItem[data-status="Default"] .stepMapStatusIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
	$('.stepMapItem[data-status="Viewed"] .stepMapStatusIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
	$('.stepMapActiveIndicator').css('backgroundColor', skinPrimaryColor);
	
}

// ! F.Core - update course module grouped active
function updateCourseModuleGroupedActive( context ){
	var currentCMGA = 	courseModuleGroupedActive;
	var splitCMGA = 		currentCMGA.split("_");
	var updateStepID = 	context.updateStepID;
	if(updateStepID != "" || updateStepID != null || updateStepID != undefined){
		splitCMGA[2] = updateStepID;
	}else{
		
	}
	var rejoinedCMGA = 	splitCMGA[0] +"_" + splitCMGA[1] + "_" + splitCMGA[2];
	courseModuleGroupedActive = rejoinedCMGA;
	//currentCourseModule
	
	//dashboardSideNavItemActive
	
	//courseModuleGroupedActive
}

// ! F.Menu Nav - update subnav styling ---
function updateSubNavStyles(){
	$(".menuNavItemFirst").removeClass("menuNavItemFirst");
	$(".menuNavItemLast").removeClass("menuNavItemLast");
	$(".menuNavItem:not(.disabledmenuNavItem)").first().addClass("menuNavItemFirst");  
	$(".menuNavItem:not(.disabledmenuNavItem)").last().addClass("menuNavItemLast");
}

// ! F.Lightbox.Level3.Launcher ---
function level3LightboxLauncher(contentType){
	//console.log("lightBoxDialog_Level3_Engaged = " + lightBoxDialog_Level3_Engaged);
	if(lightBoxDialog_Level3_Engaged){
		level3LightboxReverter(contentType);
		return;
	}else{
	
	}
	//console.log("launch3");
	lightBoxDialog_Level3_Engaged = true;
	if(currentCourseModule != null){
		//continueButtonUpdate("Down", "RESUME", "Resume");
		//continueButtonUpdate("Down", "HIDE", "HideLbLvl3");
	}
	//$( '#menuNavItem-restart' ).addClass( "disabledmenuNavItem" );
	//console.log("oof");
	checkLightBoxStack('add');
	showFooter = true;
	lightBoxDialog_Level3_EngagedContentType = contentType;
	switch( lightBoxDialog_Level3_EngagedContentType ){
		case "dashboard" :
			//courseModuleGroupedActive = devPageJump;
			$( 'body' ).attr( 'data-lightBoxPanel3' , "Dashboard" ); 
			if( dashboardSideNavItemActive == 1 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseOverview" );
			}else{
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseModule" );
			}
			//$('body').attr( 'data-activePathType' , "None" );
		break;
		case "clipboard" :
			$( 'body' ).attr( 'data-lightBoxPanel3' , "Clipboard" );
			$( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' , "" );
			//courseStatusObject.continueButtonStatus = "Clipboard" // Init 
		break;
		case "about" :
			$( 'body' ).attr( 'data-lightBoxPanel3' , "About" );
			//courseStatusObject.continueButtonStatus = "About" // Init 
			if( aboutSideNavItemActive == 1 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "AboutTheAuthors" );
			}else if( aboutSideNavItemActive == 2 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "Acknowledgements" );
			}
		break;
		case "help" :
			$( 'body' ).attr( 'data-lightBoxPanel3' , "Help" );
			if( helpSideNavItemActive == 1 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "UsingStepstone" );
			}else if( helpSideNavItemActive == 2 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "SystemRequirements" );
			}
		break;
		case "dashboardHelp" :
			$( 'body' ).attr( 'data-lightBoxPanel3' , "DashboardHelp" );
			if( helpSideNavItemActive == 1 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "UsingStepstone" );
			}else if( helpSideNavItemActive == 2 ){
				$('body').attr( 'data-lightBoxPanel3ActiveSection' , "SystemRequirements" );
			}
		break;
		case "none" :
		default :
			$( 'body' ).attr( 'data-lightBoxPanel3' , "None" );
			$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
		break;
	}
	$('.lightBoxDialog_Level1_TopNav').hide();
	var headerBarH = 				$('#CET-Activity-Header').outerHeight(true);
	var footerBarH = 				$('#CET-Activity-Footer').outerHeight(true);
	var pageTitleBarH = 			$('#CET-Activity-Content-Title-Bar').outerHeight(true);
	var winW = 						window.innerWidth; //$(window).width();
	var winH = 						window.innerHeight; //$(window).height();
	var contentBox = 			$('#CET-Activity-Container');
	var contentBoxW = 			contentBox.width();
	var contentBoxH = 			contentBox.height();
	var contentBoxPoz = 		contentBox.position(); // doesn't add margins
	var boxMarginTop = 			parseInt(contentBox.css('margin-top'));
	var boxMarginLeft = 			parseInt(contentBox.css('margin-left'));
	var contentBoxPozTop = 	contentBoxPoz.top + boxMarginTop;
	var contentBoxPozLeft = 	contentBoxPoz.left + boxMarginLeft + 1; // figure out why need to bump 
	var topNavPushDown = 	50;
	var loadContentURL;
	var lightBoxLevel3Dialog = $("#lightBoxDialog-Level3").dialog({ // Set the settings for the jquery-ui dialog here.
		draggable: 		false,
	    resizable: 		false,
	    modal:     		true,
	    closeOnEscape: 	false,
	    autoOpen:  		false, // Don't open the dialog instantly. Let an event such as a button press open it. Optional.
	    position: { // Set the position to center of the div.
			my: 	"center top", 
	        at: 	"center top+" + (headerBarH + 20), 
	        //at: 	"center top+" + (headerBarH + topNavPushDown), 
	        //of: 	"#CET-Activity-Container",
	        of: 	$("#CET-Activity-Container")
	    },
	    width:	contentBoxW - 60,
		height:	contentBoxH -  (headerBarH + footerBarH + 30),
		/*_allowInteraction: function(event, ui) {
			return !!$(event.target).is( ".navItem" ) || this._super(event);
		},*/
		open: function(event, ui){
			/*
			$.ui.dialog.prototype._allowInteraction = function(e){
				//if(	$(e.target).closest('.select2-drop').length ){
					//return true;
				//}
				return ui_dialog_interaction.apply( this , arguments );
	  		$.ui.dialog.prototype._allowInteractionRemapped = true;
			},*/
	        // position modal overlay
	        $("#lightBoxDialog-Level3").closest('.ui-dialog').css('padding', 0);
	        $("#lightBoxDialog-Level3").css('overflow', 'hidden');
	        var useW = 	contentBoxW + "px";
	        var useH = 	((contentBoxH - footerBarH - headerBarH) + 3) + "px"; // why extra px?
	        $('.ui-widget-overlay').css('max-width', useW);
	        $('.ui-widget-overlay').css('max-height', useH);
	        //$('.ui-widget-overlay').css('border-radius', '0 0 7px 7px');
	        $('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
	        $('.ui-widget-overlay').css('opacity', '.76');
	        $('.ui-widget-overlay').offset({
	            top: 	contentBoxPozTop + headerBarH, 
	            left: 	contentBoxPozLeft
	        });
	        var UIDialogBoxHeight = $('.lightBoxDialog_Level3_Content').closest('.ui-dialog-content').height();
	        var contentBoxHeight = $('.lightBoxDialog_Level3_Content').height();
	        var newH = UIDialogBoxHeight - $('.lightBoxDialog_Level3_TopNav_LabelBox').height();
	        var paperW;
	        if(contentType == "resources"|| contentType == "clipboard" || contentType == "notepad"){
	        	$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding', '0.7em');
	        }
	        if(contentType == "resources"){
	        	$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top', '1em');
	        }
	        if(contentType == "clipboard"){
	        	$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top', '1em');
	        }
	        if(contentType == "dashboard"){
	        	//$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top', '1em');
	        }
	        if(contentType == "notepad"){
	        	$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top', '2em');
	        }
	        $('#lightBoxDialog-Level3').closest('.ui-dialog').css('z-index', '500');
	        lightboxOverlayBGPlacer(3);
	         // the top image resizing can probably be done in maximize, here....
	   	    /*
	        if(contentType == "resources"){
	        	paperW = $('.subPageContentType_Resources').outerWidth(true);
	        	$('#resourcesNoteClip').css('width', paperW + 'px');
	        	var clipZ = $('#resourcesNoteClipContainer').zIndex();
				$('.lightBoxDialog_Level3_TopNav_CloseContainer').css('z-index', clipZ + 1);
	        }
	        */
	        // the top image resizing can probably be done in maximize, here....
	        if(contentType == "clipboard"){
	        	paperW = $('.subPageContentType_Clipboard').outerWidth(true);
	        	//$('#clipboardClip').css('width', paperW + 'px');
	        	//lightBoxDialog_Level3_Main_OuterContainer
	        	//var clipZ = $('#clipboardClipContainer').zIndex();
	        	var clipZ = $('#clipboardClipContainer').css( "z-index" );
				$('.lightBoxDialog_Level2_TopNav_CloseContainer').css('z-index', clipZ + 1);
				//continueButtonUpdate("Down", "RESUME", "Resume");
	        }
	        // ... and here
	        /*
	        if(contentType == "notepad"){
	        	paperW = $('.subPageContentType_Notepad').outerWidth(true);
	        	$('#notepadSpiralStripContainer').css('width', paperW + 'px');
	        	$('.lightBoxDialog_Level3_Main_OuterContainer').css('background-color', '#9A998E');
				var spiralStripPreAndPostW = $('#notepadSpiralStripPre').width();
		        $('#notepadSpiralStrip').css('width', ((paperW - spiralStripPreAndPostW) + 1) + 'px'); // until css can be worked out, this sizes the h width of the strip between bookends
	        }
	        */
	         if(contentType == "resources"|| contentType == "clipboard" || contentType == "notepad"){
	        	var padH2 = parseInt( $('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top') ) + parseInt( $('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-bottom') );
		        $('.lightBoxDialog_Level3_Content_Container').css('height', (newH - padH2) + 'px');
	        }
	        if(contentType == "help" || contentType == "dashboardHelp" || contentType == "about" || contentType == "dashboard"){
	        	if( $('.lightBoxDialog_Level3_Content_SideNavContainer').css('overflow') == "hidden" ){
		            newH -= $('.lightBoxDialog_Level3_Content_SideNavContainer').height(); // add bottom padding?
		            newH -= parseInt( $('.lightBoxDialog_Level3_Content_SideNavContainer').css('padding-bottom') );
		        }
		        if( $( 'body' ).attr( 'data-lightBoxPanel3') == "None" ){
			        //newH -= parseInt( $('.dashboardLicenseStack').css('padding-bottom') );
		        }
		        /*
		        var sideNavW = $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavItemActive + ')').width()
		        	+ parseInt($('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavItemActive + ')').css('margin-left'))
					+ parseInt($('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavItemActive + ')').css('margin-right'))
		        ;
		        $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + sideNavItemActive + ')').css('width', sideNavW + 'px');
		         */
		        //sideNavArray = [];
		        if(contentType == "dashboard"){
			        //console.log("ey");
		        	if( isAuthoringMode ){
			        	if( authoringMode == "PathBuilder" ){
							if( $('.dashboardSideNavStack li').length > 0 ){
					        	$('.dashboardSideNavStack li').hide();
				        	}
				        	if( $('.dropListContent .qActivityChoice').length > 0 ){
					        	$('.dropListContent .qActivityChoice').hide();
				        	}
						}
			        	//for( $('.dashboardSideNavStack'). ){
			        	//}
						//.dashboardSideNavStack li.courseModuleChoice ! 
						//.sideNavDropList .qActivityChoice.courseModuleChoice
					}
		        	//currentCourseModule = null;
		        	currentCourseModuleUserPassage = 'None';
		        	$("#menuNavItem-help").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
		        	$("#menuNavItem-about").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					$("#menuNavItem-clipboard").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					$("#menuNavItem-dashboard").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					updateSubNavStyles();
					
		        	$('#CET-Activity-Header-Title .headerTitleTextVisible').html( courseTitle );
		        	// special handling of dashboard size for now, icon is appearing differently as default
		        	$('.lightBoxDialog_Level3_TopNav_LabelIcon').css({
			        	 'font-size': 		'1.35em',//'1.4em',
			        	 'line-height': 		'0.7em',//'0.7em',
			        	 'padding':  		'0.25em 0.1em 0.1em 0.3em'//'0.2em 0.1em 0.1em 0.2em'
		        	});
		        	$('.lightBoxDialog_Level3_TopNav_CloseContainer').hide();
		        	//$("#lightBoxDialog-Level3").dialog( "option" , "closeOnEscape" , false );
		        	$('.sidenavStatusIcon_courseOverview').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_courseoverview)[0].data);
		        	webFontForceRedraw('.sidenavStatusIcon_courseOverview');
		        	// add the slots for loaded course activities dynamically
		        	for(var w = 0 ; w < courseModuleArray.length ; w++){
			        	for(var v = 0 ; v < courseModuleArray[w].modules.length ; v++){
		        			var wBoosted = w + 1;
		        			var vBoosted = v + 1;
		        			var newSideNavSlotParams = {};
			        		var activityButtonBuilder = 		'';
			        		if( courseModuleArray[w].modules.length > 1 ){
				        		if( v == 0 ){
					        		activityButtonBuilder += 	'<li class="sideNavGroupSequence courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequenceFirst focalItem focalItemArrowAccessV" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}else if( v == (courseModuleArray[w].modules.length - 1) ){
					        		activityButtonBuilder += 	'<li class="sideNavGroupSequence courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequenceLast focalItem focalItemArrowAccessV" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}else{
					        		activityButtonBuilder += 	'<li class="sideNavGroupSequence courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequenceMid focalItem focalItemArrowAccessV" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}
			        		}else{
				        		activityButtonBuilder += 	'<li class="courseModuleChoice sidenavItem arrowNavUD focalItem focalItemArrowAccessV" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
			        		}
			        		activityButtonBuilder += 			'<div class="sidenavActiveIndicator"></div>';
			        		activityButtonBuilder += 			'<div class="sidenavElementIcon sidenavStatusIcon_courseActivity"></div>';
			        		activityButtonBuilder += 			'<div class="sidenavItemInnerText">';
			        		
			        		if( courseModuleArray[w].modules.length > 1 ){
				        		activityButtonBuilder += 			'<span class="accessViz">' + langPack.screenreader.dashboard.sideNavPathOverview + '</span>';
			        		}
			        		
			        		newSideNavSlotParams.navSlotLabel = '';
			        		if( displayActivityType ){
				        		newSideNavSlotParams.navSlotLabel += 		courseModuleArray[w].modules[v].activityType  + ': ';
			        		}
			        		newSideNavSlotParams.navSlotLabel += 			courseModuleArray[w].modules[v].activityLabel;
			        		activityButtonBuilder += 				'<span class="moduleLabel">' + newSideNavSlotParams.navSlotLabel + '</span>';
			        		if( courseModuleArray[w].modules.length > 1 ){
				        		activityButtonBuilder += 			'<span class="accessViz">' + langPack.screenreader.dashboard.sideNavPathOverviewLaunch + '</span>';
			        		}
			        		activityButtonBuilder += 			'</div>';
			        		activityButtonBuilder += 		'</li>';
				        	$('.dashboardSideNavStack').append(activityButtonBuilder);
				        	//webFontForceRedraw('.dashboardSideNavStack .sidenavElementIcon');
				        	//newSideNavSlotParams.navSlotLabel = courseModuleArray[w].modules[v].activityType  + ': ' + courseModuleArray[w].modules[v].activityLabel;
				        	//var activityLaunchPageBuilder = 	'<li style="display: none;">';
				        	var activityLaunchPageBuilder = 	'<li>';
				        	activityLaunchPageBuilder += 			'<div class="courseActivityContent"></div>';
				        	activityLaunchPageBuilder += 		'</li>';
				        	$('.dashboardContentStack').append(activityLaunchPageBuilder);
				        	//newSideNavSlotParams.navSlotStatus = "Default";
				        	//newSideNavSlotParams.navSlotStatus = "Unattempted";
				        	newSideNavSlotParams.navSlotType = 	'courseModule';//'courseActivity';
				        	newSideNavSlotParams.active = 	false;
				        	//sideNavArray.splice(v + 1, 0, newSideNavSlotParams);
							//var buildSideNavDropListActivityElement = 	'<div class="qActivityChoice">';
							
							
							placeLocalizedContent({
								'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-ModuleOverviewSpaceReturn"]' ) ,
								'srcData' : 		langPack.screenreader.dashboard.sideNavModuleOverviewLaunch
							});
							
							var buildSideNavDropListActivityElement = 		'';
			        		if( courseModuleArray[w].modules.length > 1 ){
				        		if( v == 0 ){
					        		buildSideNavDropListActivityElement += 	'<div class="qActivityChoice courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequence sideNavGroupSequenceFirst focalItem" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}else if( v == (courseModuleArray[w].modules.length - 1) ){
					        		buildSideNavDropListActivityElement += 	'<div class="qActivityChoice courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequence sideNavGroupSequenceLast focalItem" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}else{
					        		buildSideNavDropListActivityElement += 	'<div class="qActivityChoice courseModuleChoice sidenavItem arrowNavUD sideNavGroupSequence sideNavGroupSequenceMid focalItem" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
				        		}
			        		}else{
				        		buildSideNavDropListActivityElement += 		'<div class="qActivityChoice courseModuleChoice sidenavItem arrowNavUD focalItem" data-courseModuleGrouping="' + wBoosted + '_' + vBoosted + '" tabindex="0">';
			        		}
							buildSideNavDropListActivityElement += 				'<div class="sidenavActiveIndicator"></div>';
							buildSideNavDropListActivityElement +=				'<div class="sidenavElementIcon"></div>';
							buildSideNavDropListActivityElement += 				'<div class="sidenavItemInnerText">' + newSideNavSlotParams.navSlotLabel + '</div>';
							buildSideNavDropListActivityElement +=			'</div>';
								//$('.lightBoxDialog_Level3_Main_OuterContainer');
								//sideNavArray.push(newSideNavSlotParams);
							//}
							var moduleDrawnTotal = 		$('.sideNavDropList .courseModuleChoice').length;
							var firstDropListItemIndex = 	$('.sideNavDropList .qActivityChoice').first().index();
							//console.log( "test = " + moduleDrawnTotal );
							//console.log( "test1 = " + (test + 1) );
							var sideNavDropListAddPoz = firstDropListItemIndex + 1;
							if( moduleDrawnTotal > 0 ){
								//sideNavDropListAddPoz = test;
								sideNavDropListAddPoz = $('.sideNavDropList .courseModuleChoice').last().index() + 1;
							}
							//console.log( "sideNavDropListAddPoz = " + sideNavDropListAddPoz );
							//console.log( "first = " + $('.sideNavDropList .qActivityChoice').first().index() );
							sideNavArray.splice(sideNavDropListAddPoz - 1, 0, newSideNavSlotParams);
							$('.sideNavDropList .qActivityChoice:nth-child(' + sideNavDropListAddPoz + ')').after(buildSideNavDropListActivityElement);
							//$('.sideNavDropList .qActivityChoice:nth-child(' + sideNavDropListAddPoz + ')').find('.sidenavElementIcon').addClass('sidenavStatusIcon_' + sideNavArray[v + 1].navSlotType);
							$('.sideNavDropList .qActivityChoice:nth-child(' + (sideNavDropListAddPoz + 1) + ')').find('.sidenavElementIcon').addClass('sidenavStatusIcon_' + sideNavArray[sideNavDropListAddPoz - 1].navSlotType);
							$('.sidenavStatusIcon_courseActivity').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
							//('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
							/*
							$('.lightBoxDialog_Level3_Main_OuterContainer').before(buildSideNavDropList);
							for( var u = 0 ; u < $('.sideNavDropList .qActivityChoice').length ; u++ ){
								//console.log(sideNavArray[u].navSlotType);
								$('.sideNavDropList .qActivityChoice:nth-child(' + (u + 2) + ')').find('.sidenavElementIcon').addClass('sidenavStatusIcon_' + sideNavArray[u].navSlotType);
							}
							*/
			        	}
		        	}
		        	$('.dashboardSideNavStack').find( '.sidenavItem:not(.disabled)').last().addClass( "sideNavItemLast" );
		        	
		        	//$('.dashboardSideNavStack').prepend( '.sidenavStatusIcon_courseOverview' );
		        	//$('.sidenavStatusIcon_courseOverview').closest('li').prependTo( '.dashboardSideNavStack' );
		        	// reposition the buttons under the newly-added ones
		        	$('.sidenavStatusIcon_courseAssessment').closest('li').appendTo( '.dashboardSideNavStack' );
		        	$('.sidenavStatusIcon_courseSurvey').closest('li').appendTo( '.dashboardSideNavStack' );
		        	$('.sidenavStatusIcon_courseCertificate').closest('li').appendTo( '.dashboardSideNavStack' );
		        	// reposition the existing dash launcher pages under the newly-added ones
		        	$('.courseAssessmentContent').closest('li').appendTo( '.dashboardContentStack' );
		        	$('.courseSurveyContent').closest('li').appendTo( '.dashboardContentStack' );
		        	$('.courseCertificateContent').closest('li').appendTo( '.dashboardContentStack' );
		        	// set the default icons for the last items
		        	$('.sidenavStatusIcon_courseAssessment').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
		        	$('.sidenavStatusIcon_courseSurvey').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
		        	$('.sidenavStatusIcon_courseCertificate').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
		        	// drop in content containers for each dash section
		        	for(var e = 0 ; e < $('.dashboardContentStack li').length ; e++){
			        	//console.log( 'stack li = ' + e );
			        	
			        	
			        	
		        		var dashboardContentPageSectionBuild = 	'<div class="lightboxLvl3SectionHeader dashboardSectionHeader focalItem" tabindex="0"></div>';
		        		dashboardContentPageSectionBuild += 		'<div class="dashboardSectionStatusLabel focalItem" tabindex="0"></div>';
		        		dashboardContentPageSectionBuild += 		'<div class="dashboardSectionScoreStatusLabel focalItem" tabindex="0"></div>';
						dashboardContentPageSectionBuild += 		'<div class="dashboardSectionText focalItem" tabindex="0" role="document"></div>';
						dashboardContentPageSectionBuild += 		'<div class="dashboardSectionStepMap focalItem" tabindex="0" aria-label="' + langPack.screenreader.dashboard.pathTOC + '"></div>';
						dashboardContentPageSectionBuild += 		'<div class="dashboardSectionSplash"></div>';
						dashboardContentPageSectionBuild += 		'<div class="dashboardLicenseStack"></div>';
		        		$('.dashboardContentStack li:nth-child(' + (e + 1) + ') > div').append(dashboardContentPageSectionBuild);
		        	}
		        	
		        	//if( contentType == "dashboard" ){
			        if( currentDashboardSelectedArea == "courseModule" && $('body').attr( 'data-activePathType' ) == "Procedural" ){
			        	//$('.lightBoxDialog_Level3_Main_OuterContainer').css('padding-top', '1em');
						buildDashboardPathMap();
						
        			}
		        	if(currentCourseModule != null){
						//courseClipboardStorageArrayStack[currentCourseModule] = clipboardGridStackArray.concat();
						clipboardGridStackArray = [];
						$('.notifyNumBox-summed').remove();
						$('.notifyNumBox-cb').remove();
					}
					if( contentType == "dashboard" ){
						currentCourseModule = null;
					}
	        		sideNavReset({ 'sideNavStack' : contentType , 'newNum' : dashboardSideNavItemActive });
	        		//webFontForceRedraw('.sideNavDropList .sidenavElementIcon');
				}
		        if(contentType == "help" || contentType == "dashboardHelp"){
			        $("#menuNavItem-help").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
			        if(contentType == "help" ){
						$("#menuNavItem-about").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
						//$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
						$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
						$("#menuNavItem-clipboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
					}
				    if(contentType == "dashboardHelp"){
					    $("#menuNavItem-about").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
						$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
						$("#menuNavItem-clipboard").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					}
			        $("#menuNavItem-dashboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
					updateSubNavStyles();  
			        
	        		sideNavReset({ 'sideNavStack' : contentType , 'newNum' : helpSideNavItemActive });
	        		//$('.sideNavDropList .sidenavItemInnerText').css( 'marginLeft', '0.2em' );
	        		
	        		$( '#lightBoxDialog-Level3' ).closest( '.ui-dialog' ).attr( 'aria-label' , "Help Panel" ).removeAttr( 'aria-labelledby'  ).removeAttr( 'aria-describedby'  );
	        		
	        		$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.helpLaunch );
	        		
	        		//$('.lightBoxDialog_Level3_TopNav_LabelBox').focus();
	        		//$('.lightBoxDialog_Level3_TopNav_LabelBox').addClass( "focused" );
				}
		        if(contentType == "about"){
			        $("#menuNavItem-help").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
			        $("#menuNavItem-about").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					//$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
					$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
					$("#menuNavItem-clipboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
					$("#menuNavItem-dashboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
					updateSubNavStyles();  
			        
		        	//$('.sideNavDropList .sidenavItemInnerText').css( 'marginLeft', '0.2em' );
	        		//singleMediaBuild('Image','../img/contentImages/thumb/radiograph_1_t.jpg');
	        		/*
	        		$('.aboutSideNavStack').find('li').each(function(){
	        			//console.log("ooo");
		        		if( $(this).is(":visible") ){
			        		//console.log("aaaaa");
		        		}
		        		if( $(this).is(":hidden") ){
			        		//console.log("eeeee");
		        		}
	        		});
	        		
	        		//var waaa = $('.aboutSideNavStack').find('li:visible:first').index() + 1;
	        		//console.log( "asdfasdf = " + waaa +  " --- " + $('.aboutSideNavStack').find('li').length );
	        		sideNavReset(contentType, aboutSideNavItemActive);
	        		*/
	        		sideNavReset({ 'sideNavStack' : contentType , 'newNum' : aboutSideNavItemActive });
	        		$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.aboutLaunch );
				}
		        $('.lightBoxDialog_Level3_Content_Container').css('height', newH + 'px');
	        }
	        // probably handled by maximize cet content height func...
	        if(contentType == "clipboard"){
		        $("#menuNavItem-help").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
		        $("#menuNavItem-about").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				//$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
				$("#menuNavItem-clipboard").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
				$("#menuNavItem-dashboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
				updateSubNavStyles();
		        
	        	//maximizah('clipboard');
	        	//sideNavReset(contentType, dashboardSideNavItemActive);
	        	maximizeCETActivityContentHeight();
	        	continueButtonUpdate("Down", "HIDE", "HideLbLvl3");
	        	$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.clipboardLaunch );
	        }
	        // probably handled by maximize cet content height func...
	        if(contentType == "resources"){
	        	maximizah('resources');
	        }
	        
	        maximizeCETActivityContentHeight();
	        
	        if(lightBoxDialog_Level1_Engaged){
	        	$('#lightBoxDialog-Level1').closest('.ui-dialog').hide();
	        }
	        $("#lightBoxDialog-Level3").closest('.ui-dialog').after( $('#navItemSubMenu') );
	        //console.log("SKRAPPY");
	        $(".lightBoxDialog_Level3_TopNav_LabelText").focus();
	        if( $('.focus').length > 0 || focusControl.focusedLit == true ){
		        $('.focused').removeClass( 'focused' );
				$(document.activeElement).addClass( 'focused' );
	        }
	        
	        if( $( ".waitCover" ).attr( "data-animState" ) == "Launched" || 
				$( ".waitCover" ).attr( "data-animState" ) == "Launching" ){
				waitCoverController({ 'coverAction' : "Hide" });
			}
	        
	        if(contentType == "dashboard"){
		        
		        sideNavArray[0].navSlotType = 	'courseOverview';//'courseActivity';
		        
		        if( !initAcessibleWelcome ){
			        setTimeout(function(){
						//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						//updateFocus({ 'action' : "Update" });
						$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.dashboardInit );
					}, 800);
					initAcessibleWelcome = true;
				}else{
					$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.dashboardReturn );
				}
			}
	        
	    },
	    close: function(event,ui){
	        lightBoxDialog_Level3_Engaged = false;
	        mediaGridStacksEnabled = false;
	        var lightBoxReset = false;
	        $('.lightBoxDialog_Level3_TopNav').remove();
	        $( '#menuNavItem-restart' ).removeClass( "disabledmenuNavItem" ).attr( 'tabindex' , "0" );
	        if(lightBoxDialog_Level2_Engaged && !lightBoxReset){
	        	// if level 3 dialog is opened on top of level 2 dialog, this reverts level 2 overlay to its own params (that have been taken up by global styling)
	        	$('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
				$('.ui-widget-overlay').css('opacity', '.76');
				var useH = 	$('#CET-Activity-Content').height() + "px";
				$('.ui-widget-overlay').css('border-radius', '0');
				//$('.ui-widget-overlay').css('max-width', useW);
				$('.ui-widget-overlay').css('max-height', useH);
				$('.ui-widget-overlay').offset({ 
	            	//top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
	            	top: 	contentBoxPozTop + headerBarH + 2 // little bump
				});
				lightboxOverlayBGPlacer(2);
				lightBoxReset = true;
	        }
	        if(lightBoxDialog_Level1_Engaged && !lightBoxReset){
	        	$('#lightBoxDialog-Level1').closest('.ui-dialog').show();
	        	// if level 2 dialog is opened on top of level 1 dialog, this reverts level 1 overlay to its own params (that have been taken up by global styling)
		        $('.ui-widget-overlay').css('background', 'rgb(255,255,255)');
				$('.ui-widget-overlay').css('opacity', '.91');
				var useH = 	$('#CET-Activity-Content').height() + "px";
				$('.ui-widget-overlay').css('border-radius', '0');
				//$('.ui-widget-overlay').css('max-width', useW);
				$('.ui-widget-overlay').css('max-height', useH);
				$('.ui-widget-overlay').offset({ 
	            	top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
				});
				lightboxOverlayBGPlacer(1);
				$('.lightBoxDialog_Level1_TopNav').show();
				lightBoxReset = true;
	        }
	        lightBoxDialog_Level3_EngagedContentType = 'none';
	        checkLightBoxStack('remove');
	        
	        lightBoxLevel3Dialog.empty().dialog("destroy");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
            $(this).appendTo( $("#lightBoxDialog-Level3-Breeder") );
            
	        maximizeCETActivityContentHeight();
	    }
	//------------
	});
	
	switch(contentType){
		case 'resources':
			loadContentURL = 'resourcesLoader.html'; 
			break;
		case 'clipboard':
			loadContentURL = 'clipboardLoader.html';
			break;
		case 'dashboard':
			loadContentURL = 'dashboardLoader.html';
			break;
		case 'notepad':
			loadContentURL = 'notepadLoader.html';
			break;
		case 'help':
		case 'dashboardHelp':
			loadContentURL = 'helpLoader.html';
			break;
		case 'about':
			loadContentURL = 'aboutLoader.html';
			break;
	}
	
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	$.ajax({
		type:			'GET',//'POST',
		url: 			loadContentURL + dummyTStamp()
	}).done(function (doneResponse){
		$("#lightBoxDialog-Level3").html(doneResponse);
		//console.log();
		var buildSideNavDropList = 			'<div class="sideNavDropList qActivity">';
		buildSideNavDropList += 					'<div class="dropListContainer">';
		buildSideNavDropList += 						'<div class="dropListContent">';
		//buildSideNavDropList += 						'<div class="sidenavElementIcon sidenavStatusIcon_courseActivity" data-StepStoneIcon="" style="color: rgb(255, 255, 255);"></div>';
		buildSideNavDropList += 							'<div class="menuSelectedLabel">Please choose one...</div>';
		//console.log('here1');
		if( contentType == "help" || contentType == "dashboardHelp" || contentType == "about" || contentType == "dashboard" ){
			//$('.sidenavItem-Normal').css('background-color', skinPrimaryColor);
			//$('.sidenavItem-Selected').css('color', skinSecondaryColor);
			sideNavArray = [];
			//console.log('here2');
			for( var u = 1 ; u <= $('.lightBoxDialog_Level3_Content_SideNavContainer li').length ;  u++ ){
				//console.log('here3');
				var newSideNavSlotParams = {};
				newSideNavSlotParams.navSlotLabel = 	$('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')').find('.sidenavItemInnerText').text();
				
				if( contentType == "help" || contentType == "dashboardHelp" ){
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-UsingStepStone"]' ) ,
						'srcData' : 		langPack.ui.help.sidenav.usingStepStone
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-KbdShortcuts"]' ) ,
						'srcData' : 		langPack.ui.help.sidenav.keyboardShortcuts
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-SysReqs"]' ) ,
						'srcData' : 		langPack.ui.help.sidenav.sysReqs
					});
					
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3Title-HelpTitleAccess"]' ) ,
						'srcData' : 		langPack.screenreader.help.titlePre
					});
					
				}
				if( contentType == "about" ){
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-AboutAuthors"]' ) ,
						'srcData' : 		langPack.ui.about.sidenav.aboutAuthor
					});
					placeLocalizedContent({
						'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-Acknowledgements"]' ) ,
						'srcData' : 		langPack.ui.about.sidenav.acknowledgements
					});
				}
				
				newSideNavSlotParams.navSlotDisplayText = $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')').find('.sidenavItemInnerText .sideNavDisplayText').html();
				
				//console.log( "newSideNavSlotParams.navSlotDisplayText = " + newSideNavSlotParams.navSlotDisplayText );
				
				newSideNavSlotParams.navSlotID = $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')').find('.sidenavItemInnerText .sideNavDisplayText').attr( 'data-uiText' );
				
				//<li class="focalItem sidenavItem sideNavItemFirst arrowNavUD" tabindex="0"><div class="sidenavActiveIndicator"></div><div class="sidenavItemInnerText"><span class="accessViz">About Topic: </span><span class="sideNavDisplayText" data-uiText="LBLvl3SideNav-AboutAuthors">About the Author</span><span class="accessViz"> : Use space or return to learn about the author<span class="authorPluralS"></span> of this module.</span></div></li>
				
				var useSlotType;
				if( contentType == "dashboard" ){
					//*
					switch(newSideNavSlotParams.navSlotLabel){
						case "Course Overview":
							useSlotType = 'courseOverview';
							break;
						case "Assessment":
							useSlotType = 'courseAssessment';
							break;
						case "Survey":
							useSlotType = 'courseSurvey';
							break;
						case "Certificate":
							useSlotType = 'courseCertificate';
							break;
					}
					//*/
					//console.log(newSideNavSlotParams.navSlotLabel);
					//console.log( $( '.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')' ).find( 'div:nth-child(1)' ).attr('class') );
					var grabSideNavElementIconClasses = $( '.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')' ).find( 'div:nth-child(1)' ).attr('class').split(" ");                 
					for( var i = 0 ; i < grabSideNavElementIconClasses.length ; i++ ){
						//console.log('u : i = ' + u + " : " + i);
			          ////if( classes[i].match(/^wp-image-/) ){
						if( grabSideNavElementIconClasses[i].match(/^sidenavStatusIcon_/) ){
			          	////alert(classes[i]); 
			             	var splitClassName = grabSideNavElementIconClasses[i].split("_");
						 	useSlotType = splitClassName[1];
			            }
			        } 
			        //newSideNavSlotParams.navSlotType = 	useSlotType;
			        
			        newSideNavSlotParams.activityGroupStatus = "Default";
			        /*
			        if( $( '.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')' ).attr('class') != undefined ){
				        var grabSideNavElementClasses = $( '.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')' ).attr('class').split(" "); 
						
						for( var i = 0 ; i < grabSideNavElementClasses.length ; i++ ){
				        	if( grabSideNavElementClasses[i].match(/^sideNavGroupSequence/) ){
				          		newSideNavSlotParams.activityGroupStatus = "ActivityGroupMember";
				            }
				        }
				        
			        }
			        /*/
				}else{
					//useSlotType = 'Course Module';
					useSlotType = 'courseModule';
					//newSideNavSlotParams.navSlotType = 	"Course Activity";
				}
				//console.log("ust = " + useSlotType);
				newSideNavSlotParams.navSlotType = 	useSlotType;
				//newSideNavSlotParams.navSlotStatus = 	"Default";
				//newSideNavSlotParams.navSlotStatus = 	"Unattempted";
				newSideNavSlotParams.active = 			false;
				//if( newSideNavSlotParams.activityGroupStatus == "ActivityGroupMember" ){
					//buildSideNavDropList += 				'<div class="qActivityChoice sideNavGroupSequence">';
				//}else{
					buildSideNavDropList += 			'<div class="qActivityChoice sidenavItem">';
				//}
				buildSideNavDropList += 					'<div class="sidenavActiveIndicator"></div>';
				buildSideNavDropList += 					'<div class="sidenavElementIcon webFontForceRedrawClass"></div>';
				//buildSideNavDropList += 					'<div class="sidenavItemInnerText">' + newSideNavSlotParams.navSlotLabel + '</div>';
				if( u == 1 && contentType == "dashboard"){
					buildSideNavDropList += 				'<div class="sidenavItemInnerText">' + langPack.ui.dashboard.sidenav.moduleOverview + '</div>';
				}else{
					//buildSideNavDropList += 				'<div class="sidenavItemInnerText">' + newSideNavSlotParams.navSlotLabel + '</div>';
					
					//newSideNavSlotParams.navSlotID = $('.lightBoxDialog_Level3_Content_SideNavContainer li:nth-child(' + u + ')').find('.sidenavItemInnerText .sideNavDisplayText').attr( 'data-uiText' );
				
				//<li class="focalItem sidenavItem sideNavItemFirst arrowNavUD" tabindex="0"><div class="sidenavActiveIndicator"></div><div class="sidenavItemInnerText"><span class="accessViz">About Topic: </span><span class="sideNavDisplayText" data-uiText="LBLvl3SideNav-AboutAuthors">About the Author</span><span class="accessViz"> : Use space or return to learn about the author<span class="authorPluralS"></span> of this module.</span></div></li>
					
					var addAboutAuthorsIndicator = "";
					if( newSideNavSlotParams.navSlotID != undefined && newSideNavSlotParams.navSlotID != "" ){
						if( newSideNavSlotParams.navSlotID == "LBLvl3SideNav-AboutAuthors" ){
							addAboutAuthorsIndicator = " aboutAuthorsPluralizable";
						}
					}
					
					buildSideNavDropList += 				'<div class="sidenavItemInnerText' + addAboutAuthorsIndicator + '">' + newSideNavSlotParams.navSlotDisplayText + '</div>';
					
				}
				buildSideNavDropList += 				'</div>';
				//$('.lightBoxDialog_Level3_Main_OuterContainer');
				sideNavArray.push(newSideNavSlotParams);
				//console.log('here4');
			}
			buildSideNavDropList += 				'</div>';
			buildSideNavDropList += 			'</div>';
			buildSideNavDropList += 			'<div class="menuSelectDropButton webFontForceRedrawClass"></div>';
			buildSideNavDropList += 		'</div>';
			
			//console.log('here5');
			//('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
			
			$('.lightBoxDialog_Level3_Main_OuterContainer').before(buildSideNavDropList);
			for( var u = 0 ; u < $('.sideNavDropList .qActivityChoice').length ; u++ ){
				if( u == 0 && contentType == "dashboard"){
					$('.sideNavDropList .qActivityChoice:nth-child(' + (u + 2) + ')').find('.sidenavElementIcon').addClass('sidenavStatusIcon_courseOverview');
				}else{
					$('.sideNavDropList .qActivityChoice:nth-child(' + (u + 2) + ')').find('.sidenavElementIcon').addClass('sidenavStatusIcon_' + sideNavArray[u].navSlotType);
				}
				//console.log( "sideNavArray[u].navSlotType = " + sideNavArray[u].navSlotType );
			}
			
			//console.log('here6');
			//$('.sideNavDropList .menuSelectedLabel').append(newSideNavSlotParams.navSlotLabel);
			//courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH = $('#q' + currentCourseSurveyBlockIncrement + ' .menuSelectedLabel').outerHeight(true);
			//sideNavDropListClosedH = $('.sideNavDropList .menuSelectedLabel').outerHeight(true);
			//console.log(sideNavDropListClosedH);
			//$('.sideNavDropList .dropListContainer').css('height', (sideNavDropListClosedH) + 'px');
			//$('#q' + currentCourseSurveyBlockIncrement + ' .menuSelectedLabel').append(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label);
			//courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH = $('#q' + currentCourseSurveyBlockIncrement + ' .menuSelectedLabel').outerHeight(true);
			//$('#q' + currentCourseSurveyBlockIncrement + ' .dropListContainer').css('height', (courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH) + 'px');
			quizType = "Sidenav";
		}
		
		if(contentType == "dashboard"){
			//console.log("dash");
			//console.log('here7');
			$('.lightBoxDialog_Level3_TopNav_LabelIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_dashboard)[0].data);
			initBasePage();
			/*fillAriaLabel({ 
				'labelContent' : 	langPack.screenreader.dashboard.title , 
				'domElement' : 		$('.lightBoxDialog_Level3_TopNav_LabelText') 
			});*/
			placeLocalizedContent({
				'targetItem' : 		$('.lightBoxDialog_Level3_TopNav_LabelText')  ,
				'srcData' : 		langPack.screenreader.dashboard.title , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			//$( '#textProk' ).html( langPack.screenreader.dashboard.title );
			//$('.lightBoxDialog_Level3_TopNav_LabelText').attr( 'aria-label' , $( '#textProk' ).html() );
			//$('.lightBoxDialog_Level3_TopNav_LabelText').attr( 'aria-label' , langPack.screenreader.dashboard.title );
			//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).attr( 'aria-label' , langPack.screenreader.dashboard.sideNav );
			/*fillAriaLabel({ 
				'labelContent' : 	langPack.screenreader.dashboard.sideNav , 
				'domElement' : 		$( '.lightBoxDialog_Level3_Content_SideNavContainer' )
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '.lightBoxDialog_Level3_Content_SideNavContainer' )  ,
				'srcData' : 		langPack.screenreader.dashboard.sideNav , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-Dashboard"]' ) ,
				'srcData' : 		langPack.ui.dashboard.titleBar.dashboard
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-ModuleOverview"]' ) ,
				'srcData' : 		langPack.ui.globalElements.sideNav.dropListContents
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-ModuleOverview"]' ) ,
				'srcData' : 		langPack.ui.dashboard.sidenav.moduleOverview
			});/*
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-ModuleOverviewSpaceReturn"]' ) ,
				'srcData' : 		langPack.ui.globalNav.menuButton.menu
			});*/
			
		}
		
		if(contentType == "help" || contentType == "dashboardHelp"){
			//$(response).find('.aboutSideNavStack li').each(function(){
				//loadOrganizationHelp();
			//});
			$('.lightBoxDialog_Level3_TopNav_LabelIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_help)[0].data);
			$('[data-helpSectionContentVariant="VideoLink"] .CET-MediaLauncher-MediaTypeOverlay-Image').attr( 'data-StepStoneIcon' , $.parseHTML(webFontAssignmentObject.launcher_video)[0].data );
			buildHelpSections();
			//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).attr( 'aria-label' , langPack.screenreader.help.sideNav );
			//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).attr( 'aria-label' , $.parseHTML(langPack.screenreader.help.sideNav) );
			placeLocalizedContent({
				'targetItem' : 		$( '.lightBoxDialog_Level3_Content_SideNavContainer' )  ,
				'srcData' : 		langPack.screenreader.help.sideNav , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-HelpTitleAccess"]' ) ,
				'srcData' : 		langPack.ui.help.titleBar.needHelp
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-HelpTitle"]' ) ,
				'srcData' : 		langPack.ui.help.titleBar.needHelp
			});
			/*
			<li class="focalItem sidenavItem sideNavItemFirst arrowNavUD" tabindex="0"><div class="sidenavActiveIndicator"></div><div class="sidenavItemInnerText"><span class="accessViz" data-uiText="LBLvl3SideNav-TopicAccess">Help Topic: </span><span class="sideNavDisplayText" data-uiText="LBLvl3SideNav-UsingStepStone">Using StepStone</span><span class="accessViz" data-uiText="LBLvl3SideNav-UsingStepStoneSpaceReturn"> : Use space or return to learn about using StepStone.</span></div></li>
			<li class="focalItem sidenavItem arrowNavUD" tabindex="0"><div class="sidenavActiveIndicator"></div><div class="sidenavItemInnerText"><span class="accessViz" data-uiText="LBLvl3SideNav-TopicAccess">Help Topic: </span><span class="sideNavDisplayText" data-uiText="LBLvl3SideNav-KbdShortcuts">Keyboard Shortcuts</span><span class="accessViz" data-uiText="LBLvl3SideNav-KbdShortcutsSpaceReturn"> : Use space or return to learn about StepStone keyboard shortcuts.</span></div></li>
			<li class="focalItem sidenavItem sideNavItemLast arrowNavUD" tabindex="0"><div class="sidenavActiveIndicator"></div><div class="sidenavItemInnerText"><span class="accessViz" data-uiText="LBLvl3SideNav-TopicAccess">Help Topic: </span><span class="sideNavDisplayText" data-uiText="LBLvl3SideNav-SysReqs">System Requirements</span><span class="accessViz" data-uiText="LBLvl3SideNav-SysReqsSpaceReturn"> : Use space or return to learn about system requirements.</span></div></li>
			
			"help" : { 
			"titlePre" : 						"Help Panel : ",
			"sideNav" : 						"StepStone Help: Navigation : Use space or return to enter the help topic stack.  Then use the up or down arrow keys to cycle topics, and use space or return to launch the selected topic.",
			"sideNavPre" : 						"Help Topic : ",
			"sideNavUsingStepStone" : 			"Using StepStone : Use space or return to learn about using StepStone.",
			"sideNavKeyboard" : 				"Keyboard Shortcuts : Use space or return to learn about StepStone keyboard shortcuts.",
			"sideNavSysReqs" : 					"System Requirements : Use space or return to learn about system requirements.",
			*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-TopicAccess"]' ) ,
				'srcData' : 		langPack.screenreader.help.titlePre
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-UsingStepStoneSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.help.sideNavUsingStepStone
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-KbdShortcutsSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.help.sideNavKeyboard
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-SysReqsSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.help.sideNavSysReqs
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3ContentTitle-HelpTitleAccess"]' ) ,
				'srcData' : 		langPack.screenreader.help.usingStepStoneTitle
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="KbdShortcutsPrefixAccess"]' ) ,
				'srcData' : 		langPack.screenreader.help.keyboardShortcutsPrefix
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="SysReqsPrefixAccess"]' ) ,
				'srcData' : 		langPack.screenreader.help.sysReqsPrefix
			});
			
			/*
			placeLocalizedContent({
				'targetItem' : 		$( '#accessLabelMaker_CoreInterface' ) ,
				'srcData' : 		langPack.screenreader.help.usageCoreInterface
			});
			*/
			
			
			
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-TopicAccess"]' ) ,
				'srcData' : 		langPack.ui.help.sysReqs
			});*/
			
			/*
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-UsingStepStone"]' ) ,
				'srcData' : 		langPack.ui.help.sidenav.usingStepStone
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-KbdShortcuts"]' ) ,
				'srcData' : 		langPack.ui.help.sidenav.keyboardShortcuts
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-SysReqs"]' ) ,
				'srcData' : 		langPack.ui.help.sidenav.sysReqs
			});
			*/
			
			///////////////
			
			// USING STEPSTONE PLAYER
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpTopicTitle-UsingStepStonePlayer"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.usingPlayer
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-CoreInterface"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.coreInterface
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-Dashboard"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.dashboard
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-Dashboard"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.dashboardDesc
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-helpSubSection="CoreInterface"]' )  ,
				'srcData' : 		langPack.screenreader.help.usageCoreInterface , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-helpSubSection="Activities"]' )  ,
				'srcData' : 		langPack.screenreader.help.usageExercises , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-helpSubSection="Media"]' )  ,
				'srcData' : 		langPack.screenreader.help.usageMedia , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-helpSubSection="Assessments"]' )  ,
				'srcData' : 		langPack.screenreader.help.usageAssessments , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-ExerciseTypes"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.exerciseTypes
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-HotSpot"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.hotSpot
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-HotSpot"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.hotSpotDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-MultiItemGrid"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.multiItemGrid
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-MultiItemGrid"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.multiItemGridDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-PopupTopics"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.popupTopics
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-PopupTopics"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.popupTopicsDesc
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-Media"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.coreInterface
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-PDF"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.pdf
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-PDF"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.pdfDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-Video"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.video
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-Video"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.videoDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-Vimeo"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.vimeoDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-MP4"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.mp4Desc
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-Assessments"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.assessments
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-Matching"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.matching
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-Matching"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.matchingDesc
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionTitle-Ranking"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.ranking
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSectionDescription-Ranking"]' ) ,
				'srcData' : 		langPack.ui.help.usingStepStone.rankingDesc
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '.helpSectionPrefix_CoreUI' )  ,
				'srcData' : 		langPack.screenreader.help.usageSectionPrefix_CoreUI , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '.helpSectionPrefix_ExTypes' )  ,
				'srcData' : 		langPack.screenreader.help.usageSectionPrefix_Exercises , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '.helpSectionPrefix_Media' )  ,
				'srcData' : 		langPack.screenreader.help.usageSectionPrefix_Media , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			placeLocalizedContent({
				'targetItem' : 		$( '.helpSectionPrefix_Assessments' )  ,
				'srcData' : 		langPack.screenreader.help.usageSectionPrefix_Assessments , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			
			///////////////
			
			// KBD SHORTCUTS
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpTopicTitle-KbdShortcuts"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.kbdShortCuts
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-GeneralNav"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.generalNav
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyList"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyList
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameLeftArrow"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameLeftArrow
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescLeftArrow"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescLeftArrow
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameRightArrow"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameRightArrow
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescRightArrow"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescRightArrow
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameA"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameA
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescA"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescA
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameC"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameC
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescC"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescC
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameD"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameD
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescD"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescD
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameH"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameH
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescH"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescH
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameM"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameM
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescM"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescM
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameR"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameR
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescR"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescR
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyNameW"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyNameW
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpKbdShortcuts-KeyDescW"]' ) ,
				'srcData' : 		langPack.ui.help.kbdShortcuts.keyDescW
			});
			
			///////////////
			
			// SYS REQS
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpTopicTitle-SysReqs"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.sysReqs
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSubSectionTitle-MinOpReqs"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.minOpReqs
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-MinOpNotice1"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.experienceNotice
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-BrowserSupport"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.browserSupport
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-FireFoxLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.fireFox
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-FireFoxVersion"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.assessments
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-ChromeLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.chrome
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-ChromeVersion"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.matchingDesc
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-SafariLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.safari
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-SafariVersion"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.rankingDesc
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-IELabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.ie
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-IEVersion"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.matching
			});*/
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-EdgeLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.edge
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-EdgeVersion"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.ranking
			});*/
			
			
			// 
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-AddlReqs"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.addlReqs
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-JavascriptLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.javascript
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-JavascriptStatus"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.enabled
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-CookiesLabel"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.cookies
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="HelpSysReqs-CookiesStatus"]' ) ,
				'srcData' : 		langPack.ui.help.systemRequirements.enabled
			});

			
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNav-TopicSpaceReturn"]' ) ,
				'srcData' : 		langPack.ui.help.sysReqs
			});*/
			
		}
		
		if(contentType == "about"){
			aboutSideNavArray = [];
			$(doneResponse).find('.aboutSideNavStack li').each(function(){
				
				//var aboutSideNavArray = [];
				//var aboutSideNavMaxItems;
				//var aboutSideNavTotalItems;
				
				aboutSideNavTotalItems = 0;
				
				var aboutSideNavItemObject = {};
				aboutSideNavItemObject.label = $(this).find('.sidenavItemInnerText').text();
				aboutSideNavItemObject.available = false;
				aboutSideNavArray.push(aboutSideNavItemObject);
				
				/*
				switch ( $(this).find('span').text() ){
					case 'INTRODUCTION':
						aboutMenuStackList.intro = false;
						break;
					case 'ABOUT THE AUTHOR':
						aboutMenuStackList.aboutauthor = false;
						break;
					case 'REFERENCES':
						aboutMenuStackList.references = false;
						break;
					case 'PRODUCTION CREDITS':
						aboutMenuStackList.productioncredits = false;
						break;
				}
				*/
			});
			
			$('.lightBoxDialog_Level3_TopNav_LabelIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_about)[0].data);
				
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-AboutTitleAccess"]' ) ,
				'srcData' : 		langPack.screenreader.about.titlePre
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-AboutTitle"]' ) ,
				'srcData' : 		langPack.ui.about.titleBar.aboutModule
			});
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="AboutTopicTitle-Acknowledgements"]' ) ,
				'srcData' : 		langPack.ui.about.acknowledgements.acknowledgements
			});
			/*placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="AboutTopicTitle-Acknowledgements"]' ) ,
				'srcData' : 		langPack.ui.about.acknowledgements.stepStoneLegalNotice
			});*/
			
			
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNavTopicPrefix"]' ) ,
				'srcData' : 		langPack.screenreader.about.sideNavPrefix
			});
			if( currentCETActivity_AuthorDataArray > 1 ){
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="LBLvl3SideNavTopicSuffix_AboutAuthors"]' ) ,
					'srcData' : 		langPack.screenreader.about.sideNavAboutAuthorSingle
				});
			}else{
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="LBLvl3SideNavTopicSuffix_AboutAuthors"]' ) ,
					'srcData' : 		langPack.screenreader.about.sideNavAboutAuthorMulti
				});
			}
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3SideNavTopicSuffix_Acknowledgements"]' ) ,
				'srcData' : 		langPack.screenreader.about.sideNavAcknowledgements
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3AboutTopicPrefix"]' ) ,
				'srcData' : 		langPack.screenreader.about.topicTitlePrefix
			});
			
			//loadIntroductionData();
			loadAuthorData();
			//loadReferencesData();
			loadProductionCreditsData();
			
			placeLocalizedContent({
				'targetItem' : 		$( '.lightBoxDialog_Level3_Content_SideNavContainer' )  ,
				'srcData' : 		langPack.screenreader.about.sideNav , 
				'placementMode' : 	"Attribute" , 
				'placementMode2' : 	"aria-label"
			});
			//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).attr( 'aria-label' , "About This Module: Navigation : Use space or return to enter the about topic stack.  Then use the up or down arrow keys to cycle topics, and use space or return to launch the selected topic." );
			
			
			//aboutSideNavItemActive = $('.aboutSideNavStack').find('li:visible:first').index() + 1;
		}
		/*
		if(contentType == "resources"){
			buildResourcesStacks();
		}
		*/
		if(contentType == "clipboard"){
			buildClipboardStacks();
			$('.lightBoxDialog_Level3_TopNav_LabelIcon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_clipboard)[0].data);
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-ClipboardTitle"]' ) ,
				'srcData' : 		langPack.ui.clipboard.titleBar.clipboard
			});
			
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="LBLvl3Title-ClipboardTitleAccess"]' ) ,
				'srcData' : 		langPack.screenreader.clipboard.titlePre
			});
		}
		$('.lightBoxDialog_Level3_TopNav_Close').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.ui_x1)[0].data);
		//$("#lightBoxDialog-Level3").closest('.ui-dialog').find('.ui-dialog-titlebar').css('display', 'none');
		//if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "about" || lightBoxDialog_Level3_EngagedContentType == "dashboard"){
		
		lightBoxLevel3Dialog.dialog('open');
		
		var grabPrimaryColor = '#' + masterJSONStorage.courseParams.skinPrimary;
		var grabPrimaryColorDark = '#' + masterJSONStorage.courseParams.skinPrimaryDark;
		$('.dashboardSectionStatusLabel').css( 'color' , grabPrimaryColorDark );
		$('.dashboardSectionScoreStatusLabel').css( 'color' , grabPrimaryColorDark );
		$('.authorCardName').css( 'color' , grabPrimaryColorDark );
		
		if( contentType == "help" || contentType == "dashboardHelp" || contentType == "about" || contentType == "dashboard" ){
			sideNavDropListClosedH = $('.sideNavDropList .menuSelectedLabel').outerHeight(true);
			$('.sideNavDropList .dropListContainer').css('height', (sideNavDropListClosedH) + 'px');
			$('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
			webFontForceRedraw('.sideNavDropList .menuSelectDropButton');
			sideNavDropListStatus = "Closed";
		}
	}).fail(function (failResponse){
		console.log('error');
	});
}
// ! F.Help Section - buildout ---
function buildHelpSections(){
	// later
}

// ! =============================================================
// ! F.Lightbox.Level4.Launcher ---
function level4LightboxLauncher( context ){
	
	//console.log("level4LightboxLauncher contxt : ");
	//console.log( JSON.stringify( context , null , 4 ) );
	//console.log( context );
	
	var event = 									context.event;
	var eventType = 								context.eventType; // hsMarker
	var markerID = 									context.markerID; // for hotspot markers - number
	lightBoxDialog_Level4_LaunchedFromElement = 	event.target;
	
	//console.log("lb4l event : ");
	//console.log( JSON.stringify( event , null , 4 ) );
	
	//console.log( "classes = " + $(event.target).attr("class") );
	//console.log( "classes2 = " + $(event).attr("class") );
	
	lightBoxDialog_Level4_Engaged = 	true;
	checkLightBoxStack('add');
	var headerBarH = 							$('#CET-Activity-Header').outerHeight(true);
	var footerBarH = 							$('#CET-Activity-Footer').outerHeight(true);
	var pageTitleBarH = 						$('#CET-Activity-Content-Title-Bar').outerHeight(true);
	var winW = 									window.innerWidth; //$(window).width();
    var winH = 									window.innerHeight; //$(window).height();
    var contentBox = 						$('#CET-Activity-Container');
    var contentBoxW = 						contentBox.width();
    var contentBoxH = 						contentBox.height();
    var contentBoxPoz = 					contentBox.position(); // doesn't add margins
    var boxMarginTop = 						parseInt(contentBox.css('margin-top'));
    var boxMarginLeft = 						parseInt(contentBox.css('margin-left'));
    var contentBoxPozTop = 				contentBoxPoz.top + boxMarginTop;
    var contentBoxPozLeft = 				contentBoxPoz.left + boxMarginLeft + 1; // figure out why need to bump 
    var topNavPushDown = 				50;
    var passedEvent = 						event;
    var lightBoxLevel4Dialog = 			$("#lightBoxDialog-Level4").dialog({ // Set the settings for the jquery-ui dialog here.
        draggable: 		false,
        resizable: 		false,
        modal:     		true,
        closeOnEscape: 	false,
        autoOpen:  		false, // Don't open the dialog instantly. Let an event such as a button press open it. Optional.
        position: { // Set the position to center of the div.
            my: 	"center top", 
            //at: 	"center top+" + (headerBarH + 20), 
            at: 	"center top+" + (headerBarH + topNavPushDown), 
            //of: 	"#CET-Activity-Container",
            of: 	$("#CET-Activity-Container")
        },
        width:	contentBoxW - 10,
		height:	contentBoxH -  (headerBarH + topNavPushDown),
        open: function(event, ui){
            // position modal overlay
            var isConfirmation = false;
            var useW = 	contentBoxW + "px";
            var useH = 	(contentBoxH - headerBarH) + "px";
            var lightBoxDialog_Level4_TopNav = 	"";
            
            lightBoxDialog_Level4_TopNav += 		"<div class='lightBoxDialog_Level4_TopNav'>";
            lightBoxDialog_Level4_TopNav += 			"<div class='lightBoxDialog_Level4_TopNav_Inner'>";
            
            if( $(passedEvent.target).closest('.menuNavItem').attr('id') == 'menuNavItem-restart' ){
	            isConfirmation = true;
	            lightBoxViewerTool = 'confirmationRestart';
            }
            
            if( $(passedEvent.target).closest('.menuNavItem').attr('id') == 'menuNavItem-exit' ){
	             isConfirmation = true;
				 lightBoxViewerTool = 'confirmationExit';
            }
            
           // if(event != ){
	            
           // }
            
            if( !isConfirmation ){
	            //lightBoxDialog_TopMost_TopNav += 				"<strong>[ ( i ) ] --------------- << ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) . . . ( 12 ) >> --------------- X</strong>";
	            lightBoxDialog_Level4_TopNav += 				"<div class='lightBoxDialog_Level4_TopNav_CaptionToggleContainer'><div class='lightBoxDialog_Level4_TopNav_CaptionToggle' data-StepStoneIcon='" + webFontAssignmentObject.ui_smalli + "'></div></div>";
	            
	            // placing subpage navstrip after above in html for css handling
	            //lightBoxDialog_Level3_TopNav += 				"<div class='lightBoxDialog_Level3_TopNav_SubPageNavContainer'><div class='lightBoxDialog_Level3_TopNav_SubPageNav'>
	            
	            //console.log( $(event.target).closest('.mediaGridContainer').parent().attr('id') );
	            
	            //if( checkLauncherContainer != 'CET-Activity-Content-Assessment' && checkLauncherContainer != 'SingleItem'){
	            if( lightBoxDialog_Level4_LaunchedFrom != 'AssessmentMediaGrid' && 
	            lightBoxDialog_Level4_LaunchedFrom != 'BasePage_SingleMedia' && 
	            lightBoxDialog_Level4_LaunchedFrom != 'Feedback_SingleMedia' &&
	            lightBoxDialog_Level4_LaunchedFrom != "BasePage_HotSpotMap" ){
	            	if( enlargementItemPage_Nav_TotalPages > 1 ){
			            lightBoxDialog_Level4_TopNav += 				"<div class='lightBoxDialog_Level4_TopNav_enlargementItemPageNavContainer'>";
			            lightBoxDialog_Level4_TopNav += 					"<div id='enlargementItemPageNav-Strip'>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PrevBut webFontForceRedrawClass' data-StepStoneIcon='" + webFontAssignmentObject.arrow2_left + "'></div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-ButtonLabel enlargementItemPageNav-ButtonLabelPrev'>PREV</div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NumBox enlargementItemPageNav-NumBox-HardFirst'></div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PreGap'>...</div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-MidGroup'></div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-Splitter'>|</div>"; //////////////
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PostGap'>...</div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NumBox enlargementItemPageNav-NumBox-HardLast'></div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-ButtonLabel enlargementItemPageNav-ButtonLabelNext'>NEXT</div>";
						lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NextBut webFontForceRedrawClass' data-StepStoneIcon='" + webFontAssignmentObject.arrow2_right + "'></div>";
						lightBoxDialog_Level4_TopNav += 					"</div>";
			            lightBoxDialog_Level4_TopNav += 				"</div>";
		            }
	            }
            }
            
            lightBoxDialog_Level4_TopNav += 				"<div class='lightBoxDialog_Level4_TopNav_CloseContainer'><div class='lightBoxDialog_Level4_TopNav_Close' data-StepStoneIcon='" + webFontAssignmentObject.ui_x1 + "'></div></div>";
            lightBoxDialog_Level4_TopNav += 			"</div>";
            lightBoxDialog_Level4_TopNav += 		"</div>";
            
            $('.ui-dialog').before(lightBoxDialog_Level4_TopNav);
            //enlargementItemPage_Nav_CurrentPage = 1;
            //enlargementItemPage_Nav_CurrentPage = launchedMediaItem + 1;
            ////enlargementItemPage_Nav_TotalPages = mediaGridArray.length;
            //$('.enlargementItemPageNav-NumBox-HardFirst').html('1');
			//$('.enlargementItemPageNav-NumBox-HardLast').html(enlargementItemPage_Nav_TotalPages);
			//newSubSequencePageAction();
			newEnlargementItemPageAction(false);
			
            $('.ui-widget-overlay').css('max-width', useW);
            $('.ui-widget-overlay').css('max-height', useH);
            $('.ui-widget-overlay').css('border-radius', '0 0 7px 7px');
            $('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
            $('.ui-widget-overlay').css('opacity', '.90');
            $('.ui-widget-overlay').offset({ 
                top: 	contentBoxPozTop + headerBarH, 
                left: 	contentBoxPozLeft
            });
            $('#lightBoxDialog-Level4').closest('.ui-dialog').css('z-index', '600');
            lightboxOverlayBGPlacer(4);
            maximizeCETActivityContentHeight();
            webFontForceRedraw('.enlargementItemPageNav-PrevBut');
            webFontForceRedraw('.enlargementItemPageNav-NextBut');
            if(lightBoxDialog_Level3_Engaged){
	        	$('#lightBoxDialog-Level3').closest('.ui-dialog').hide();
	        }else{
		        if(lightBoxDialog_Level1_Engaged){
	        		$('#lightBoxDialog-Level1').closest('.ui-dialog').hide();
				}
	        }
	        if( eventType != undefined && eventType != "" && eventType != null ){
				$( '#lightBoxDialog-Level4' ).attr( 'data-eventType' , eventType  );
			}else{
				if( $( '#lightBoxDialog-Level4' )[0] != undefined && $( '#lightBoxDialog-Level4' )[0].hasAttribute("data-eventType") ){ // hasAttribute is "vanilla" js, hence the [0]
					//$( '#lightBoxDialog-Level4' )[0].removeAttr( "data-eventType" ); // need this?
				}
			}
			if( markerID != undefined && markerID != "" && markerID != null ){
				$( '#lightBoxDialog-Level4' ).attr( 'data-currentMarkerID' , markerID  );
			}else{
				//if( $( '#lightBoxDialog-Level4' )[0].hasAttribute("data-eventType") ){ // hasAttribute is "vanilla" js, hence the [0]
				if( $( '#lightBoxDialog-Level4' )[0] != undefined && $( '#lightBoxDialog-Level4' )[0].hasAttribute("data-currentMarkerID") ){ // hasAttribute is "vanilla" js, hence the [0]
					//$( '#lightBoxDialog-Level4' )[0].removeAttr( "data-currentMarkerID" ); // need this?
				}
			}
        },
        close: function(event,ui){
	        switch( lightBoxViewerTool ){
		        case "video-vimeo-basic":
		        	$('.vimeoVideoPlayer').attr('src','');
		        break;
		        case "video-youtube-basic":
		        	$('.youtubeVideoPlayer').attr('src','');
		        break;
		        case "video-html-basic":
		        	$('.html5AVPlayer').attr('src','');
		        break;
	        }
	        lightBoxDialog_Level4_Engaged = false;
	        confirmationBoxType = null;
	        var lightBoxReset = false;
	        lightBoxViewerTool = "none";
	        $(".lightBoxDialog_Level4_TopNav").remove();
	        // remove the video load box if it has been moved outside of the dialog box
			/*
			if( $("#videoLoadBox").length > 0 ){
				$("#videoLoadBox").remove();
			}
			*/
	        if(lightBoxDialog_Level3_Engaged){
	        		$('#lightBoxDialog-Level3').closest('.ui-dialog').show();
				// if level 3 dialog is opened on top of level 2 dialog, this reverts level 2 overlay to its own params (that have been taken up by global styling)
	        		$('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
				$('.ui-widget-overlay').css('opacity', '.76');
				var useH = 	$('#CET-Activity-Content').height() + "px";
				$('.ui-widget-overlay').css('border-radius', '0');
				//$('.ui-widget-overlay').css('max-width', useW);
				$('.ui-widget-overlay').css('max-height', useH);
				$('.ui-widget-overlay').offset({ 
                		//top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
                		top: 	contentBoxPozTop + headerBarH + 1 // little bump
				});
				lightBoxReset = true;
				lightboxOverlayBGPlacer(3);
				maximizerDelayRelay();
	        }
	        if(lightBoxDialog_Level2_Engaged && !lightBoxReset){
	        	// if level 3 dialog is opened on top of level 2 dialog, this reverts level 2 overlay to its own params (that have been taken up by global styling)
	        		$('.ui-widget-overlay').css('background', 'rgb(0,0,0)');
				$('.ui-widget-overlay').css('opacity', '.76');
				var useH = 	$('#CET-Activity-Content').height() + "px";
				$('.ui-widget-overlay').css('border-radius', '0');
				//$('.ui-widget-overlay').css('max-width', useW);
				$('.ui-widget-overlay').css('max-height', useH);
				$('.ui-widget-overlay').offset({ 
                	//top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
                	top: 	contentBoxPozTop + headerBarH + 1 // little bump
				});
				lightBoxReset = true;
				
				// reset the launched item reference to the stored variable, then reset the stored var to null
				//if(launchedMediaItem_BaseGrid != null){ // subseq grid, main page launched
		        		//launchedMediaItem = launchedMediaItem_BaseGrid;
					//launchedMediaItem_BaseGrid = null;
		        	//}
				
				//launchedMediaItemTracker.BaseGrid = null;
				//launchedMediaItemTracker.SubSeqGrid = null;
				
				lightboxOverlayBGPlacer(2);
				maximizerDelayRelay();
	        }
	        if(lightBoxDialog_Level1_Engaged && !lightBoxReset){
	        		if(!lightBoxDialog_Level3_Engaged){
		        	// if level 3 dialog is opened on top of level 1, this reverts level 1 overlay to its own params (that have been taken up by global styling)
		        		$('#lightBoxDialog-Level1').closest('.ui-dialog').show();
			        $('.ui-widget-overlay').css('background', 'rgb(255,255,255)');
					$('.ui-widget-overlay').css('opacity', '.91');
					var useH = 	$('#CET-Activity-Content').height() + "px";
					$('.ui-widget-overlay').css('border-radius', '0');
					//$('.ui-widget-overlay').css('max-width', useW);
					$('.ui-widget-overlay').css('max-height', useH);
					$('.ui-widget-overlay').offset({ 
	                		top: 	contentBoxPozTop + headerBarH + pageTitleBarH + 1 // little bump
					});
					lightBoxReset = true;
					lightboxOverlayBGPlacer(1);
					maximizerDelayRelay();
				}
	        }
	        if( lightBoxDialog_Level4_LaunchedFrom == "SubSequencePage_MediaGrid" ){
		        launchedMediaItemTracker.SubSeqGrid = null;
	        }
	        if( lightBoxDialog_Level4_LaunchedFrom == "Clipboard_MediaGrid" || 
	        	lightBoxDialog_Level4_LaunchedFrom == "ClipboardMediaGroupGrid" ){
		        launchedMediaItemTracker.ClipboardGrid = null;
	        }
	        if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_MediaGrid" ){
		        launchedMediaItemTracker.BaseGrid = null;
	        }
			checkLightBoxStack('remove');
	        //if( !lightBoxDialog_Level2_Engaged && 
	        		//!lightBoxDialog_Level3_Engaged ){
		        //launchedMediaItem = null;
	        //}
	        //if( lightBoxDialog_Level2_Engaged ){
		        //launchedMediaItem_SubSeqGrid = null;
	        //}
	        launchedGridStackGroup = 'none';
	        lightBoxLevel4Dialog.empty().dialog("destroy");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
            $(this).appendTo( $("#lightBoxDialog-Level4-Breeder") );
            
            /*
			if(currentDashboardSelectedArea == "courseActivity"){
				continueButtonUpdate("Right", "CONTINUE", "StepForward");
			}
			*/
            
	        maximizeCETActivityContentHeight();
        }
    });
    
    //console.log( $(event.target).parent().attr('class') );//mediaGridContainer);
   
   level4LightboxContentPlacer({
   		'navButtonReact' : 		null , 
   		'event' : 				event,
   		'eventType' : 			eventType , // $( '#lightBoxDialog-Level4' ).attr( 'data-eventType' ) , //eventType , 
   		'markerID' : 			markerID , // $( '#lightBoxDialog-Level4' ).attr( 'data-currentMarkerID' ) //markerID
   });

}

// ! F.Lightbox.Level4.Content Placer ---
function level4LightboxContentPlacer( context ){
	
	console.log("level4LightboxContentPlacer context : " + context );
	//console.log("level4LightboxContentPlacer context : " + JSON.stringify( context , null , 4 ) );
	
	var navButtonReact = 					context.navButtonReact;
	var event = 							context.event;
	var eventType = 						context.eventType; // hsMarker
	var markerID = 							context.markerID; // for hotspot markers - number
	
	var passedEvent = 						event;
	// remove the video load box if it has been moved outside of the dialog box
	if( $("#videoLoadBox").length > 0 ){
		$("#videoLoadBox").remove();
	}
	
	//currentDashboardSelectedArea
	
	if( courseModuleGroupedActive != undefined ){
		var splitCourseModuleGroupedActive = 		courseModuleGroupedActive.split('_');
		var courseModule_Group = 					Number(splitCourseModuleGroupedActive[0]);
		var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	}
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	
	/////////////////////
	//prepping lb4 launch state
	/////////////////////
	
	//// need to pass in the event, maybe along with a toggle if it is a nav button?  to be navbutton reaction, there must already be a launchedfrom var set, so if nav button toggled on, 
	//// function setupEnlargementMedia(navButtonReact, event) // navButtonReact: num value, or null
	
	//launchedMediaItem;
    //var checkLauncherContainer;
    // check launcher type
	var mediaLaunchBuild = '';
	var launchAction;
	var mediaTypeParse;
	var mediaVariantParse;
	var mediaFileParse;
	var mediaCaptionsParse = "";
	var avCaptionTracks;
	var posterParse = "";
	var navFileParse;
	var zoomNavPoz;
	enlargedMediaFileCaptionParse = "";
	//var gridStackGroup = "none";
	var useLaunchItem;
	//if(lightBoxDialog_Level4_LaunchedFrom != ''){
		
	//}
	//if(launchedMediaItem == null){
		
	//}
	if(navButtonReact != null){
		//level4LightboxContentPlacer(enlargementItemPage_Nav_CurrentPage, event);
		//launchedMediaItem = navButtonReact - 1;
		//useLaunchItem = enlargementItemPage_Nav_CurrentPage - 1;
		
		if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_HotSpotMap" ){
			useLaunchItem = 							markerID - 1;
			launchAction = 	currentBasePage_Content_HotSpotArray[useLaunchItem].markerAction;
			switch( launchAction ){
				case "MediaViewer" : 
					mediaTypeParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].markerType; //"HotSpotMap"; // fudge... // currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
					mediaVariantParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].markerVariant;
					//mediaTypeVariant = 						"Image"; // fudge... // currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
					//mediaFileParse = 							currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Launched;
					//enlargedMediaFileCaptionParse = 	currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Caption;
					
					//console.log("aaaa");
				break;
			}
		}else{
			useLaunchItem = enlargementItemPage_Nav_CurrentPage - 1;
		}
		
		//console.log('notnull');
	}else{
		if( lightBoxDialog_Level4_LaunchedFrom == "SubSequencePage_MediaGrid" ){
	        useLaunchItem = launchedMediaItemTracker.SubSeqGrid;
	    }
		if( lightBoxDialog_Level4_LaunchedFrom == "Clipboard_MediaGrid" || 
			lightBoxDialog_Level4_LaunchedFrom == "ClipboardMediaGroupGrid" ){
	       useLaunchItem = launchedMediaItemTracker.ClipboardGrid;
        }
        if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_MediaGrid" ){
	        useLaunchItem = launchedMediaItemTracker.BaseGrid;
        }
		//useLaunchItem = launchedMediaItem;
		//console.log('null');
	}
	//lightBoxDialog_Level4_LaunchedFrom = ''; // Section of launch: AssessmentMediaGrid, ClipboardMediaGroupGrid, ResourcesMediaGroupGrid, BasePage_SingleMedia, BasePage_MediaGrid, Feedback_SingleMedia
	//var lightBoxDialog_Level4_LaunchedItemInit; // initial launched item index num
	
	
	// assessment launched
	var isConfirmation = false;
	if( event == null ){
		if( lightBoxDialog_Level4_LaunchedFrom == "AssessmentMediaGrid" ){
			mediaTypeParse = 					currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchType;
			mediaVariantParse = 				currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
			mediaFileParse = 					currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Launched;
			enlargedMediaFileCaptionParse = 	currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Caption;
		}
		if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_HotSpotMap" ){
			useLaunchItem = 							markerID - 1;
			// redundant?
			launchAction = 	currentBasePage_Content_HotSpotArray[useLaunchItem].markerAction;
			switch( launchAction ){
				case "MediaViewer" : 
					mediaTypeParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].markerType; //"HotSpotMap"; // fudge... // currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
					mediaVariantParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].markerVariant;
					//mediaTypeVariant = 						"Image"; // fudge... // currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
					//mediaFileParse = 							currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Launched;
					//enlargedMediaFileCaptionParse = 	currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Caption;
					//console.log("aaaa");
				break;
			}
		}
	}else{
		
		if( $(passedEvent.target).closest('.menuNavItem').attr('id') == 'menuNavItem-restart' ){
			$("#lightBoxDialog-Level4").css('overflow-y', 'hidden');
			confirmationBoxType = "activityRestart";
			isConfirmation = true;
			mediaLaunchBuild += '<div id="confirmationBox">';
			mediaLaunchBuild += 		'<div class="confirmationTitle">' + langPack.ui.overlayNotice.restart.restartAsk + '</div>';
			mediaLaunchBuild += 		'<div class="confirmationNegative">' + langPack.ui.overlayNotice.restart.restartCancel + '</div>';
			mediaLaunchBuild += 		'<div class="confirmationPositive">' + langPack.ui.overlayNotice.restart.restartConfirm + '</div>';
			mediaLaunchBuild += '</div>';
			$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
		}
		
		if( $(passedEvent.target).closest('.menuNavItem').attr('id') == 'menuNavItem-exit' ){
			confirmationBoxType = "courseExit";
			$("#lightBoxDialog-Level4").css('overflow-y', 'hidden');
			isConfirmation = true;
			mediaLaunchBuild += '<div id="confirmationBox">';
			mediaLaunchBuild += 		'<div class="confirmationTitle">' + langPack.ui.overlayNotice.exitModule.exitModuleAsk + '</div>';
			mediaLaunchBuild += 		'<div class="confirmationNegative">' + langPack.ui.overlayNotice.exitModule.exitModuleCancel + '</div>';
			mediaLaunchBuild += 		'<div class="confirmationPositive">' + langPack.ui.overlayNotice.exitModule.exitModuleConfirm + '</div>';
			mediaLaunchBuild += '</div>';
			$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
		}
		
		// if launching from assessment grid
		if( $(event.target).parents('#CET-Activity-Content-Assessment-Main').length > 0 ){
			mediaTypeParse = 										currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchType;
			mediaVariantParse = 									currentBasePage_Assessment_OutputList[useLaunchItem].mediaLaunchVariant;
			mediaFileParse = 										currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Launched;
			enlargedMediaFileCaptionParse = 				currentBasePage_Assessment_OutputList[useLaunchItem].outputMedia_Caption;
			lightBoxDialog_Level4_LaunchedFrom = 		"AssessmentMediaGrid";
		}
	}
	
    if( !isConfirmation ){
    	$("#lightBoxDialog-Level4").css('overflow-y', 'auto');
	    //if(lightBoxDialog_Level3_EngagedContentType != 'clipboard' && lightBoxDialog_Level3_EngagedContentType != 'resources'){
		if(!mediaGridStacksEnabled){ // if not launched from clipboard or resources stacks
			
			if( !lightBoxDialog_Level2_Engaged && !lightBoxDialog_Level3_Engaged ){
				// main page single "regular media" launched
				if( currentBasePage_Content_PageMediaStyle == "singleMedia-ImageDisplay" || 
		   			currentBasePage_Content_PageMediaStyle == "singleMedia-ImageLauncher" || 
		   			currentBasePage_Content_PageMediaStyle == "singleMedia-VimeoLauncher" || 
		   			currentBasePage_Content_PageMediaStyle == "singleMedia-YoutubeLauncher" || 
		   			currentBasePage_Content_PageMediaStyle == "singleMedia-HTML5VideoLauncher" || 
		   			currentBasePage_Content_PageMediaStyle == "singleMedia-PDFLauncher" ){
					//launchedMediaItem = 								0;
					//checkLauncherContainer =  					'SingleItem';
					mediaTypeParse = 									currentBasePage_Content_PageMedia_Main[0].mediaType;
					mediaVariantParse = 								currentBasePage_Content_PageMedia_Main[0].mediaVariant;
					mediaFileParse = 									currentBasePage_Content_PageMedia_Main[0].mediaFile_Launched;
					//enlargedMediaFileCaptionParse = 			currentBasePage_Content_PageMedia_Main[0].mediaCaption;
					
					if( currentBasePage_Content_PageMediaStyle == "singleMedia-HTML5VideoLauncher" ){
						if( currentBasePage_Content_PageMedia_Main[0].mediaFile_Poster != undefined && 
						currentBasePage_Content_PageMedia_Main[0].mediaFile_Poster != ""  ){
							posterParse = 						currentBasePage_Content_PageMedia_Main[0].mediaFile_Poster;
						}
						if( currentBasePage_Content_PageMedia_Main[0].captionTracks != undefined && 
						currentBasePage_Content_PageMedia_Main[0].captionTracks != ""  ){
							console.log("SHOULD BE CAPTION TRACKS");
							avCaptionTracks = 					currentBasePage_Content_PageMedia_Main[0].captionTracks;
							console.log("avCaptionTracks : ");
							console.log( JSON.stringify( avCaptionTracks , null , 4 ) );
						}
					}
					
					enlargementItemPage_Nav_TotalPages = 1;
					lightBoxDialog_Level4_LaunchedFrom = 	"BasePage_SingleMedia";
					// be sure to hide top nav
				}
			}	
			
			if( lightBoxDialog_Level2_Engaged && !lightBoxDialog_Level3_Engaged ){	
				// main page single - subsequence launch
				//if(currentBasePage_Content_PageMediaStyle == "singleMedia-SubSequenceLauncher"){
					// subsequence single launched
					if( currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-ImageDisplay" || 
			   		 	currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-ImageLauncher" || 
			   		 	currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-VimeoLauncher" || 
			   		 	currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-YoutubeLauncher" || 
			   		 	currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-HTML5VideoLauncher" || 
			   		 	currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-PDFLauncher" ){
						//launchedMediaItem = 							0;
						//checkLauncherContainer =  					'SingleItem';
						mediaTypeParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaType;
						mediaVariantParse = 					currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaVariant;
						mediaFileParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Launched;
						//if( currentBasePage_Content_PageMediaStyle == "singleMedia-HTML5VideoLauncher" ){
						if( currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-HTML5VideoLauncher" ){
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Poster != undefined && 
							currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Poster != ""  ){
								posterParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Poster;
							}
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].captionTracks != undefined && 
							currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].captionTracks != ""  ){
								avCaptionTracks = 					currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].captionTracks;
							}
						}
						//enlargedMediaFileCaptionParse = 			currentBasePage_Content_PageMedia_Main[0].mediaCaption;
						enlargementItemPage_Nav_TotalPages = 1;
						lightBoxDialog_Level4_LaunchedFrom = 	"SubSequencePage_SingleMedia";
						// be sure to hide top nav
					}else{ // subsequence main page grid launched
						//if( launchedMediaItem == null ){
							//launchedMediaItem = 							$(event.target).closest('.mediaGridBoxOuter').index();
							useLaunchItem = launchedMediaItemTracker.SubSeqGrid; //$(event.target).closest('.mediaGridBoxOuter').index(); //launchedMediaItem;
						//}
						mediaTypeParse = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaType;
						mediaVariantParse = 	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaVariant;
						mediaFileParse = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Launched;
						//enlargedMediaFileCaptionParse = 				currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaCaption;
						
						
						if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaVariant == "HTML5Video" ){
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster != undefined && 
							currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster != ""  ){
								posterParse = 							currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster;
							}
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks != undefined && 
							currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks != ""  ){
								avCaptionTracks = 						currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks;
							}
						}
						
						enlargementItemPage_Nav_TotalPages = 	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length;
						lightBoxDialog_Level4_LaunchedFrom = 		"SubSequencePage_MediaGrid";
					}
				//}
			}
		
			//if( lightBoxDialog_Level3_Engaged ){ 
				//console.log( "classes3 = " + $(event).attr("class") );
				//console.log("event : ");
				//console.log( JSON.stringify( event , null , 4 ) );
				
				//if( $(event).closest('#CET-Activity-Content-Main-MediaBlock').find( '#basePageHotSpotMapContainer').length() > 0 ){
				//if( $(event).hasClass('hotSpotMarker') ){
				//console.log( "eventType = " + eventType );
				//console.log( "lightBoxDialog_Level4_LaunchedFrom = " + lightBoxDialog_Level4_LaunchedFrom );
				if( eventType != undefined && eventType != '' ){
					//console.log( "eventType = " + eventType );
					switch( eventType ){
						case "helpVideoLauncher" : 
							lightBoxDialog_Level4_LaunchedFrom = 		"Help_VideoLauncher";
							mediaTypeParse = 										"AV Media";
							mediaVariantParse = 									"Vimeo";
							//<div class="helpSectionContentThumbnail helpMediaLaunchable" data-videoID="227808308">
							//console.log("event : " + event );
							//console.log( "classes = " + $(event.target).attr("class") );
							//console.log( "classes2 = " + $(event).attr("class") );
							//console.log( JSON.stringify( event , null , 4 ) );
							//console.log( "event classes 1 = " + $(event.target).attr('class') );
							//console.log( "event classes 2 = " + $(this).attr('class') );
							//console.log( "event classes 2 = " + passedEvent.attr('class') );
							var videoIDExtract = "";
							if( $(event.target).hasClass('helpMediaLaunchable') ){
								videoIDExtract = $(event.target).attr( 'data-videoID' );
							}else{
								videoIDExtract = $(event.target).closest('.helpMediaLaunchable').attr( 'data-videoID' );
							}
							mediaFileParse = 					videoIDExtract; //$(event.target).attr( 'data-videoID' );
							//console.log( "mediaFileParse = " + mediaFileParse );
							//console.log( "lightBoxDialog_Level4_LaunchedFrom = " + lightBoxDialog_Level4_LaunchedFrom );
						break;
						case "hsMarker" : 
							useLaunchItem = 							markerID - 1;
							//redundant?
							launchAction = 	currentBasePage_Content_HotSpotArray[useLaunchItem].markerAction;
							switch( launchAction ){
								case "MediaViewer" : 
									mediaTypeParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].markerType;
									mediaVariantParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].markerVariant;
									mediaFileParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].launched;
									switch( mediaVariantParse ){
										case "HTML5Video" : // context? hotspot launchers?
										case "html5video" : // clipboard?
											if( currentBasePage_Content_HotSpotArray[useLaunchItem].poster != undefined && 
											currentBasePage_Content_HotSpotArray[useLaunchItem].poster != ""  ){
												posterParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].poster;
											}
											if( currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks != undefined && 
											currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks != ""  ){
												avCaptionTracks = 					currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks;
											}
										break;
									}
								break;
							}
							lightBoxDialog_Level4_LaunchedFrom = 			"BasePage_HotSpotMap";
						break;
					}
				}else{ // main page grid
					//if( lightBoxViewerTool == "image-zoom-basic" ){
					switch( lightBoxDialog_Level4_LaunchedFrom ){
						case "BasePage_HotSpotMap" :
							//redundant?
							useLaunchItem = 							markerID - 1;
							launchAction = 	currentBasePage_Content_HotSpotArray[useLaunchItem].markerAction;
							switch( launchAction ){
								case "MediaViewer" : 
									mediaTypeParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].markerType;
									mediaVariantParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].markerVariant;
									mediaFileParse = 							currentBasePage_Content_HotSpotArray[useLaunchItem].launched;
									switch( mediaVariantParse ){
										case "HTML5Video" : // context? hotspot launchers?
										case "html5video" : // clipboard?
											if( currentBasePage_Content_HotSpotArray[useLaunchItem].poster != undefined && 
											currentBasePage_Content_HotSpotArray[useLaunchItem].poster != ""  ){
												posterParse = 						currentBasePage_Content_HotSpotArray[useLaunchItem].poster;
											}
											if( currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks != undefined && 
											currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks != ""  ){
												avCaptionTracks = 					currentBasePage_Content_HotSpotArray[useLaunchItem].captionTracks;
											}
										break;
									}
									//enlargedMediaFileCaptionParse = 				currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaCaption;
									enlargementItemPage_Nav_TotalPages = 	currentBasePage_Content_PageMedia_MainGrid.length;
									lightBoxDialog_Level4_LaunchedFrom = 		"BasePage_MediaGrid";
								break;
							}	
						break;
						case "SubSequencePage_SingleMedia" :
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length > 0 ){
								useLaunchItem = 0;
								mediaTypeParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaType;
								mediaVariantParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaVariant;
								mediaFileParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaFile_Launched;
								switch( mediaVariantParse ){
									case "HTML5Video" : // context? hotspot launchers?
									case "html5video" : // clipboard?
										if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaFile_Poster != undefined && 
											currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaFile_Poster != ""  ){
											posterParse = 				currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].mediaFile_Poster;
										}
										if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].captionTracks != undefined && 
											currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].captionTracks != ""  ){
											avCaptionTracks = 			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[useLaunchItem].captionTracks;
										}
									break;
								}
							}
							lightBoxDialog_Level4_LaunchedFrom = 		"SubSequencePage_SingleMedia";
						break;
						case "SubSequencePage_MediaGrid" :
							if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length > 0 ){
								mediaTypeParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaType;
								mediaVariantParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaVariant;
								mediaFileParse = 						currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Launched;
								switch( mediaVariantParse ){
									case "HTML5Video" : // context? hotspot launchers?
									case "html5video" : // clipboard?
										if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster != undefined && 
											currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster != ""  ){
											posterParse = 				currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Poster;
										}
										if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks != undefined && 
											currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks != ""  ){
											avCaptionTracks = 			currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].captionTracks;
										}
									break;
								}
							}
							lightBoxDialog_Level4_LaunchedFrom = 		"SubSequencePage_MediaGrid";
						break;
						default :
							// base page media grid
							//useLaunchItem = 										markerID - 1;
							useLaunchItem = 			launchedMediaItemTracker.BaseGrid;
							if( currentBasePage_Content_PageMedia_MainGrid.length > 0 ){
								mediaTypeParse = 					currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaType;
								mediaVariantParse = 				currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaVariant;
								mediaFileParse = 					currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaFile_Launched;
								switch( mediaVariantParse ){
									case "HTML5Video" : // context? hotspot launchers?
									case "html5video" : // clipboard?
										if( currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaFile_Poster != undefined && 
										currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaFile_Poster != ""  ){
											posterParse = 						currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaFile_Poster;
										}
										if( currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].captionTracks != undefined && 
										currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].captionTracks != ""  ){
											avCaptionTracks = 					currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].captionTracks;
										}
									break;
								}
								//enlargedMediaFileCaptionParse = 				currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaCaption;
								enlargementItemPage_Nav_TotalPages = 	currentBasePage_Content_PageMedia_MainGrid.length;
								lightBoxDialog_Level4_LaunchedFrom = 		"BasePage_MediaGrid";
							}
						break;
					}
				}
			
				/*
				if(launchedMediaItem == null){
					launchedMediaItem = 							$(event.target).closest('.mediaGridBoxOuter').index();
					useLaunchItem = launchedMediaItem;
				}
				//if( $(event.target).parents('#CET-SubSequence-Content-Main').length > 0 ){ // subsequence grid
				if( lightBoxDialog_Level2_Engaged && !lightBoxDialog_Level3_Engaged ){ // subsequence grid
					mediaTypeParse = 								currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaVariant;
					mediaFileParse = 									currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[useLaunchItem].mediaFile_Launched;
					//enlargedMediaFileCaptionParse = 			currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaCaption;
					enlargementItemPage_Nav_TotalPages = 	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length;
					lightBoxDialog_Level4_LaunchedFrom = 	"SubSequencePage_MediaGrid";
				}else{ // main page grid
					mediaTypeParse = 								currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaVariant;
					mediaFileParse = 									currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaFile_Launched;
					//enlargedMediaFileCaptionParse = 			currentBasePage_Content_PageMedia_MainGrid[useLaunchItem].mediaCaption;
					enlargementItemPage_Nav_TotalPages = 	currentBasePage_Content_PageMedia_MainGrid.length;
					lightBoxDialog_Level4_LaunchedFrom = 	"BasePage_MediaGrid";
				}
				*/
			//}
			
			// update clipboard viewing stats if viewing media that is also on clipboard
			for( var a = 0 ; a < clipboardGridStackArray.length ; a++ ){ // step through groups
				for( var b = 1 ; b < clipboardGridStackArray[a].length ; b++ ){ // in each group, step through items
					//if( clipboardGridStackArray[a][b][3] == mediaFileParse ){
					if( clipboardGridStackArray[a][b].launchFile == mediaFileParse ){
						enlargedMediaFileCaptionParse = 			clipboardGridStackArray[a][b].caption;  //clipboardGridStackArray[a][b][4]; 
						
						//if( clipBoardQuarantineItem_DescriptionDisplay != undefined ){
							//clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].descriptionDisplay =		clipboardGridStackArray[a][b].descriptionDisplay; // ADA long description
						//}
						//if( clipBoardQuarantineItem_DescriptionLaunched != undefined ){
							//clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].descriptionLaunched = 		clipboardGridStackArray[a][b].descriptionLaunched; // ADA long description
						//}
						
						//clipboardGridStackArray[a][b][5] = "Viewed";
						clipboardGridStackArray[a][b].viewStatus = "Viewed";
						//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[a][b] = 1;
						courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[a][b-1] = 1;
						updateClipboardGridFreshNotification();
						if( persistentData.dataModel == 'SCORM1.2' ){
							//if(persistentData_Simulation){
							
							//}else{
								setSuspendData();
							//}
						}
					}
				}
			}
			
	    }else{ // if launched from grid stacks 
	    		if(lightBoxDialog_Level3_EngagedContentType == 'clipboard'){
		    	
		    	// store the reference to the launched item from the main grid, then force to null
				//if(lightBoxDialog_Level2_Engaged){ // subseq grid, main page launched
					//launchedMediaItem_BaseGrid = 		launchedMediaItem;
		        		//launchedMediaItem = null;
		        //}
		    	
		    	//var mediaGridDataArray = currentBasePage_Content_PageMedia_MainGrid; // main grid if not launching from clipboard, resource, or assessment
				//if(mediaGridStacksEnabled){ // if launched from clipboard or resources stacks
					
					// launchedGridStackGroup is global
					// launchedMediaItem is global
					// useLaunchItem is local
					
					//console.log( "launchedGridStackGroup a = " + launchedGridStackGroup );
					//console.log( "launchedMediaItem a = " + launchedMediaItem );
					//console.log( "useLaunchItem a = " + useLaunchItem );
				
					//console.log("is");
					if(launchedGridStackGroup == "none"){
						launchedGridStackGroup = $(event.target).closest('.gridGroupContainer').index();
		    		}else{
			    		
		    		}
					var clipboardGridDataArray = clipboardGridStackArray;
			    //}
			    //if(launchedMediaItem == null){
					//launchedMediaItem = 		$(event.target).closest('.mediaGridBoxOuter').index();
					useLaunchItem = 			launchedMediaItemTracker.ClipboardGrid; //launchedMediaItem;
				//}
				
				//checkLauncherContainer =  $(event.target).closest('.mediaGridContainer').parent().parent().attr('id');
				//if(gridGroup != "none"){ // if clipboard or resource
				
				// this should really be an object instead of a sub array
					//mediaTypeParse = 		mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][1];
					
					//console.log( "launchedGridStackGroup b = " + launchedGridStackGroup );
					//console.log( "launchedMediaItem b = " + launchedMediaItem );
					//console.log( "useLaunchItem b = " + useLaunchItem );
					
					mediaTypeParse = 			clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].launchMediaType; //mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][0];
					mediaVariantParse = 		clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].launchMediaVariant; //mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][0];
					mediaFileParse = 			clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].launchFile; //mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][3];
					navFileParse = 				clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].zoomNav; //mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][6];
					
					//if( currentBasePage_Content_PageMediaStyle == "singleMedia-HTML5VideoLauncher" ){
					if( mediaVariantParse == "html5video" || mediaVariantParse == "HTML5Video" ){ // clipboard indication
						posterParse = 			clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].poster;
						avCaptionTracks = 		clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].captionTracks; 
					}
					
					//console.log( "1 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][1] );
					//console.log( "2 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][2] );
					//console.log( "3 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][3] );
					//console.log( "4 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][4] );
					//console.log( "5 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][5] );
					//console.log( "6 - " + mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][6] );
					//clipboardItemParamsObject.mediaFile_ZoomNav
					
					//enlargedMediaFileCaptionParse = 	mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][3]; // enlargement filename
					enlargedMediaFileCaptionParse = 	clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].caption; // enlargement filename
					enlargementItemPage_Nav_TotalPages = clipboardGridDataArray[launchedGridStackGroup].length - 1;
					
					//mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][5] = "Viewed";
					clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].viewStatus = "Viewed";
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[launchedGridStackGroup][useLaunchItem] = 1;
					
					updateClipboardGridFreshNotification();
					if( persistentData.dataModel == 'SCORM1.2' ){
						//if(persistentData_Simulation){
						
						//}else{
							setSuspendData();
						//}
					}
					
				//}
				lightBoxDialog_Level4_LaunchedFrom = 	"ClipboardMediaGroupGrid";
			}
	    }
	    
	    // for each of the above processes, we end up with the following variables, can pass to function or global set (in js object?):
    	// launchedMediaItem (index num)
		// mediaTypeParse
		// mediaFileParse
		// enlargedMediaFileCaptionParse
		// enlargementItemPage_Nav_TotalPages // this doesn't need to be set each time, consider relocating
		// lightBoxDialog_Level4_LaunchedFrom
	    
		switch( mediaTypeParse ){
			case "Image" : // base page launcher
			case "Still Image" : // clipboard grid launcher
			case "Basic" : // context launcher, image
				mediaLaunchBuild += '<div id="imageLoadBox-Zoom"><div id="imageViewer-Zoom"></div></div>';
			break;
			case "AV Link" : // clipboard grid launcher, still used?
			case "Media Link" : // context launcher? grid?
			case "AV Media" : // context and clipboard grid launcher, latest??
				switch( mediaVariantParse ){
					case "Vimeo" : // context?
					case "vimeo" : // clipboard?
						mediaLaunchBuild += '<div id="videoLoadBox">';
						//mediaLaunchBuild += 	'<iframe class="vimeoVideoPlayer" src="' + vimeoHTTP + '://player.vimeo.com/video/' + mediaFileParse + '" width="1280" height="720" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
						
						// original iframe method:
						mediaLaunchBuild += 	'<iframe class="avPlayer vimeoVideoPlayer" id="vmPlayer" tabindex="-1" type="text/html" src="' + html5VideoData.vimeoHTTP + '://player.vimeo.com/video/' + mediaFileParse + '" width="1280" height="720" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
						
						// "experimental" vimeo background option, and overrides for default background behavior (works), no overlays at all:
						//mediaLaunchBuild += 	'<iframe class="avPlayer vimeoVideoPlayer" id="vmPlayer" tabindex="-1" type="text/html" src="' + html5VideoData.vimeoHTTP + '://player.vimeo.com/video/' + mediaFileParse + '?background=1&autoplay=0&mute=0&loop=0" width="1280" height="720" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
						
						
						//mediaLaunchBuild += 	'<video id="vmPlayer" class="avPlayer vimeoVideoPlayer" data-playerID="" data-type="htmlVideo" controls>';
						//mediaLaunchBuild += 		'<source src="' + mediaPathConstructor({ 'mediaFileName' : mediaFileParse }) + '" type="video/mp4">';
						//mediaLaunchBuild += 	'</video>';
						
						// attempted plyr inject method
						//mediaLaunchBuild += 	'<div id="vmPlayer" class="avPlayer vimeoVideoPlayer" data-playerID="" data-video-id="' + mediaFileParse + '" data-type="vimeo"></div>';
						
						mediaLaunchBuild += buildVideoAssistiveControls({ 'playerType' : "Vimeo" });
						
						mediaLaunchBuild += '</div>';
					break;
					case "Youtube" : // context?
					case "YouTube" : // context?
					case "youtube" : // clipboard?
						mediaLaunchBuild += '<div id="videoLoadBox" class="notReady">';
						//mediaLaunchBuild += 	'<iframe class="avPlayer youtubeVideoPlayer" id="ytPlayer" type="text/html" width="1280" height="720" src="' + html5VideoData.youtubeHTTP + '://www.youtube.com/embed/' + mediaFileParse+ '?autoplay=0" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
						//mediaLaunchBuild += 	'<iframe class="avPlayer youtubeVideoPlayer" id="ytPlayer" type="text/html" width="1280" height="720" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
						mediaLaunchBuild += 	'<div id="ytPlayer" class="avPlayer youtubeVideoPlayer"></div>';
						mediaLaunchBuild += buildVideoAssistiveControls({ 'playerType' : "YouTube" });
						
						mediaLaunchBuild += '</div>';
					break;
					case "HTML5Video" : // context? hotspot launchers?
					case "html5video" : // clipboard?
						mediaLaunchBuild += '<div id="videoLoadBox">';
						var posterBuild = "";
						if( posterParse != "" ){
							posterBuild = 'poster="' + mediaPathConstructor({ 'mediaFileName' : posterParse }) + '" ';
						}
						mediaLaunchBuild += 	'<video id="html5AVPlayer" ' + posterBuild + ' class="avPlayer htmlVideoPlayer" data-playerID="" data-type="htmlVideo" controls playsinline>';
						mediaLaunchBuild += 		'<source src="' + mediaPathConstructor({ 'mediaFileName' : mediaFileParse }) + '" type="video/mp4">';
						// Captions are optional
						//*
						//Object.keys(a).length;
						//console.log( "avCaptionTracks = " + avCaptionTracks );
						//console.log( "avCaptionTracks len = " + avCaptionTracks.length );
						if( avCaptionTracks !== undefined && avCaptionTracks !== null && typeof avCaptionTracks === 'object' ){
							//console.log( "Object.keys( avCaptionTracks ) len = " + Object.keys( avCaptionTracks ).length);
							if( Object.keys( avCaptionTracks ).length > 0 ){
								//html5VideoData.html5mp4VPlayerAPICaptionTracks = avCaptionTracks;
								
								//console.log("avCaptionTracks 2 : ");
								//console.log( JSON.stringify( avCaptionTracks , null , 4 ) );
								
								//html5VideoData.html5mp4VPlayerAPICaptionTracks = ( JSON.parse(JSON.stringify(avCaptionTracks)) );
								html5VideoData.html5mp4VPlayerAPICaptionTracks = ( JSON.parse(JSON.stringify(avCaptionTracks)) );
								//var countAVCaptionTracks = 0;
								var itemIteration;
								for( itemIteration in avCaptionTracks ){
								    if( avCaptionTracks.hasOwnProperty(itemIteration) ){
									    var splitIterationLang = itemIteration.split("-");
								       //mediaLaunchBuild += 			'<track kind="captions" label="English captions" src="' + avCaptionTracks[itemIteration] + '" srclang="en" default>';
								       mediaLaunchBuild += 	'<track kind="captions" label="English captions" src="' + mediaPathConstructor({ 'mediaFileName' :  avCaptionTracks[itemIteration] }) + '" srclang="' + splitIterationLang[0] + '" default>';
								    }
								}
							}
						}
						//*/
						mediaLaunchBuild += 	'</video>';
						mediaLaunchBuild += buildVideoAssistiveControls({ 'playerType' : "HTML5Video" });
						mediaLaunchBuild += '</div>';
					break;
				}
			break;
			case "Rich Document" : // clipboard grid launcher
			case "Document" : // main grid launcher
			//case "PDF" : // context launcher
				//console.log("weee");
				switch( mediaVariantParse ){
					case "pdf" : 
					case "PDF" : 
						//console.log("wooo");
						mediaLaunchBuild += '<div id="documentDownloader" class="documentDownloader"><div id="documentDownloaderInner" class="documentDownloaderInner focalItem" tabindex="0"><a class="downloadPDF" href="" target="_blank" download>' + langPack.ui.mediaViewer.pdf.downloadPdf + '</a></div></div>';
						mediaLaunchBuild += '<div id="documentLoadBox" style="-webkit-overflow-scrolling: touch;"></div>';
					break;
				}
			break;
		}
    }
	
	/*
	if( 
		mediaTypeParse == "Still Image" // clipboard grid launcher
		||
		mediaTypeParse == "Basic" // context launcher
	){
		//console.log(mediaFileParse);
		//console.log(navFileParse);
		megazoomEmbed(mediaFileParse , navFileParse);
		lightBoxViewerTool = "image-zoom-basic";
		$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
		//maximizeCETActivityContentHeight();
	}
	
	//if(mediaTypeParse == "Video"){
	//if(mediaTypeParse == "Vimeo"){
	if(
	mediaTypeParse == "AV Link" // clipboard grid launcher
	||
	mediaTypeParse == "Vimeo" // context launcher
	){	
		sizeVimeoVideo();
		lightBoxViewerTool = "video-vimeo-basic";
		$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
		
		//$('body').append( $("#videoOverLoader") );
		
		// fix for some devices having issue with fullscreen mode while player is contained inside the dialog box
		$("#lightBoxDialog-Level4").after( $("#videoLoadBox") );
		
		//maximizeCETActivityContentHeight();
	}
	
	//if(mediaTypeParse == "Document"){
	//if(mediaTypeParse == "PDF"){
	if(
	mediaTypeParse == "Rich Document" // clipboard grid launcher
	||
	mediaTypeParse == "PDF" // context launcher
	){
	*/
	
	//console.log( "mediaTypeParse = " + mediaTypeParse );
	//console.log( "mediaVariantParse = " + mediaVariantParse );
	//console.log( "mediaLaunchBuild = " + mediaLaunchBuild );
	//console.log( "mediaFileParse = " + mediaFileParse );
	
	$("#lightBoxDialog-Level4").html(mediaLaunchBuild);
	
	switch( mediaVariantParse ){
		case "Youtube" : // context?
		case "YouTube" : // context?
		case "youtube" : // clipboard?
			
			initYouTubeVars();
			
			html5VideoData.youtubePlayerObj = new YT.Player( 'ytPlayer', {
		        height: 				'1280',
		        width: 					'720',
		        videoId: 				mediaFileParse , 
		        //videoId: 				't6bbuDUPIgk', // multi lang caps -- should populate languageList with multiple obj array
		        //videoId: 				'xco0qjszPHQ', // single lang caps -- should populate languageList with single obj in array
		        //videoId: 				'i-3PEaXZcIA', // no caps -- should populate languageList as empty array
		        enablejsapi: 			true,
		        playerVars: {
		        	//'hl' : 				"uk",
		        	'playsinline' : 	0,
		        	//'controls' : 		0,
		        	'disablekb' : 		1,
					'cc_lang_pref' : 	html5VideoData.youtubeDefaultLang,
					'cc_load_policy' : 	1, // if not forcing captions at first, and they are turned off by user, can't get initial language list
					//cc_lang_pref: 	"uk",
		        	'rel' : 			0
		        },
		        events: {
		            'onReady': 			onYTPlayerReady ,
		            'onStateChange': 	onYTPlayerStateChange , 
		            'onApiChange': 		onYTApiChange 
		        }
		    });
		break;
	}
	
	switch( mediaTypeParse ){
		case "Image" : // base page launcher
		case "Still Image" : // clipboard grid launcher
		case "Basic" : // context launcher, image
			
		break;
		case "AV Link" : // clipboard grid launcher, still used?
		case "Media Link" : // context launcher? grid?
		case "AV Media" : // context and clipboard grid launcher, latest??
			$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.mediaLaunchVideo );
		break;
		case "Rich Document" : // clipboard grid launcher
		case "Document" : // main grid launcher
			$('#ariaLiveAssertive').text( langPack.screenreader.ariaLiveNotice.mediaLaunchPdf );
		break;
	}
	
	
	//console.log("mediaVariantParse  = " + mediaVariantParse);
	
	switch( mediaVariantParse ){
		case "Vimeo" : // context?
		case "vimeo" : // clipboard?
			//var player = new Vimeo.Player(iframe);
			//var vmPlayerElement = $('#vmPlayer')
			html5VideoData.vmPlayerAPI = new Vimeo.Player( $('#vmPlayer') );
			html5VideoData.vmPlayerAPI.setVolume( 1.0 ).then(function(volume) {
			    // volume was set
			}).catch(function(error) {
			    switch (error.name) {
			        case 'RangeError':
			            // the volume was less than 0 or greater than 1
			        break;
			        default:
			            // some other error occurred
			        break;
			    }
			});
			
			
			html5VideoData.vmPlayerAPI.getTextTracks().then(function(tracks) {
			    // tracks = an array of track objects
			    html5VideoData.vmPlayerAPICaptionTracks = tracks;
			}).catch(function(error) {
			    // an error occurred
			});
			/*
			Each track object looks like this:
			{
			    "label": "English CC",
			    "language": "en",
			    "kind": "captions", // captions or subtitles
			    "mode": "showing" // showing or disabled
			}
			*/
			
			/*
		    html5VideoData.eventPingers = {};
		    html5VideoData.eventPingers.play = function(data) {
			    // data is an object containing properties specific to that event
			    console.log("play data:");
				console.log( JSON.stringify( data , null , 4 ) );
			};
			html5VideoData.eventPingers.pause = function(data) {
			    // data is an object containing properties specific to that event
			    console.log("pause data:");
			    console.log( JSON.stringify( data , null , 4 ) );
			};
			*/
			//html5VideoData.vmPlayerAPI.on('play', html5VideoData.eventPingers.play);
			//html5VideoData.vmPlayerAPI.on('pause', html5VideoData.eventPingers.pause);
			
			html5VideoData.vmPlayerAPI.on('play', function(data) {
			    // data is an object containing properties specific to that event
			    //console.log("play data:");
				//console.log( JSON.stringify( data , null , 4 ) );
				videoControlReact({ 'playerType' : "Vimeo" , 'action' : "Play"  });
			});
			html5VideoData.vmPlayerAPI.on('pause', function(data) {
			    // data is an object containing properties specific to that event
			    //console.log("pause data:");
			    //console.log( JSON.stringify( data , null , 4 ) );
			    videoControlReact({ 'playerType' : "Vimeo" , 'action' : "Pause"  });
			});
			html5VideoData.vmPlayerAPI.on('ended', function(data) {
			    // data is an object containing properties specific to that event
			    // data:
			    /*
				{
				    duration: 61.857
				    percent: 1
				    seconds: 61.857
				}
				*/
			    videoControlReact({ 'playerType' : "Vimeo" , 'action' : "Ended" });
			});
			html5VideoData.vmPlayerAPI.on('texttrackchange', function(data) {
			    // data is an object containing properties specific to that event
			    //console.log("pause data:");
			    //console.log( JSON.stringify( data , null , 4 ) );
			    //videoControlReact({ 'playerType' : "Vimeo" , 'action' : "Pause"  });
			    // data:
			    /*
				{
				    kind: "captions",
				    label: "English CC",
				    language: "en"
				}
				*/
			    //console.log("changed text track : ");
			    //console.log( JSON.stringify( data , null , 4 ) );
			    // sends null for languageSelection if no caption track selected
			    videoControlReact({ 'playerType' : "Vimeo" , 'action' : "CaptionSelect" , 'languageSelection' : data.language });
			});
			html5VideoData.vmPlayerAPI.on('volumechange', function(data) {
				// may not fire on mobile or other devices where audio level is controlled by system
			    // data is an object containing properties specific to that event
			    //console.log("pause data:");
			    //console.log( JSON.stringify( data , null , 4 ) );
			    //videoControlReact({ 'playerType' : "Vimeo" , 'action' : "Pause"  });
			    // data:
			    /*
				{
				    volume : 0.5 // decimal number
				}
				*/
			    //console.log("changed text track : ");
			    //console.log( JSON.stringify( data , null , 4 ) );
			    // sends null for languageSelection if no caption track selected
			    videoControlReact({ 'playerType' : "Vimeo" , 'action' : "VolumeChange" , 'newVolume' : data.volume});
			});
			
			html5VideoData.vmPlayerAPIPlayStatus = "Unplayed";
	    	$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
			$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.play );
			
			/*
		    html5VideoData.vmPlayer.on('play', function() {
		        console.log('played the video!');
		    });
		    html5VideoData.vmPlayer.getVideoTitle().then(function(title) {
		        console.log('title:', title);
		    });	
		    */
		break;
		case "HTML5Video" : // context?
		case "html5video" : // clipboard?
			//html5VideoData.vmPlayerAPI = new Vimeo.Player( $('#vmPlayer') );
			
			console.log( "plyr icon path = " + CETUpwardLadderPath + 'common/img/svg/plyr.svg' );
			
			var plyrOptions = {
				//'captions' :			false , 
				'debug' : 				true ,
				'loadSprite' : 			false , // needed?
				//'blankUrl' :			'3p/plyr-blank.mp4' , 
				'blankUrl' :			CETUpwardLadderPath + 'common/js/3p/plyr-blank.mp4' , 
				//'iconUrl' : 			"../img/svg/plyr.svg" //, // ensure we are targeting a "local" instance of svg, not from default cdn
				'iconUrl' : 			"plyr.svg" //, // ensure we are targeting a "local" instance of svg, not from default cdn
				//'iconUrl' : 			CETUpwardLadderPath + 'common/img/svg/plyr.svg' //, // ensure we are targeting a "local" instance of svg, not from default cdn
				//'iconUrl' : 			'common/img/svg/plyr.svg' //, // ensure we are targeting a "local" instance of svg, not from default cdn
			};
			//html5VideoData.html5mp4VPlayerAPI = plyr.setup( '#videoLoadBox' , plyrOptions );
			//html5VideoData.plyrPlayers = plyr.setup( '#videoLoadBox' , plyrOptions )[0];
			var plyrPlayer = plyr.setup( '#videoLoadBox' , plyrOptions );
			//var plyrPlayers = plyrPlayer[0];
			html5VideoData.html5mp4VPlayerAPI = plyrPlayer[0];
			//html5VideoData.plyrPlayers[0].on('ready', function(event) {
			html5VideoData.html5mp4VPlayerAPI.on('ready', function(event) {
				//console.log("REDDY");
				$( '#videoLoadBox .plyr' ).attr( 'aria-hidden' , "true" );
				videoLoadBox
				
				$('.avPlayer').attr( 'data-aspectRatio' , "0.5625" ); // force 16:9 ratio otherwise is NaN
				html5VideoData.html5mp4VPlayerAPI.setVolume( 10 ); //.then(function(volume) { // volume is 0-10 scale)
			    // volume was set
				//}).catch(function(error) {
				   // switch (error.name) {
				        //case 'RangeError':
				            // the volume was less than 0 or greater than 1
				        //break;
				        //default:
				            // some other error occurred
				       // break;
				    //}
				//});
				
				//html5VideoData.html5mp4VPlayerAPICaptionTracks = 
				
				//html5VideoData.vmPlayerAPI.getTextTracks().then(function(tracks) { 
				    //html5VideoData.vmPlayerAPICaptionTracks = tracks;
				//}).catch(function(error) {
				    // an error occurred
				//});
				html5VideoData.html5mp4VPlayerAPI.on('play', function(event) {
					console.log("HTML5PLAY");
				    videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "Play"  });
				});
				html5VideoData.html5mp4VPlayerAPI.on('pause', function(event) {
				    console.log("HTML5PAUSE");
				    videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "Pause"  });
				});
				html5VideoData.html5mp4VPlayerAPI.on('ended', function(event) {
					console.log("HTML5ENDED");
				    videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "Ended" });
				});
				/*
				html5VideoData.html5mp4VPlayerAPI.on('texttrackchange', function(event) {
					console.log("HTML5CAPTIONCHANGE");
				    videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "CaptionSelect" , 'languageSelection' : event.language });
				});
				*/
				html5VideoData.html5mp4VPlayerAPI.on('captionsenabled', function(event) {
					console.log("HTML5CAPTION On");
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.on + ")" );
				    //videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "CaptionSelect" , 'languageSelection' : event.language });
				});
				html5VideoData.html5mp4VPlayerAPI.on('captionsdisabled', function(event) {
					console.log("HTML5CAPTION Off");
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")" );
				   // videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "CaptionSelect" , 'languageSelection' : event.language });
				});
				html5VideoData.html5mp4VPlayerAPI.on('volumechange', function(event) {
					console.log("HTML5VOLUMECHANGED");
					//var grabHTML5VideoVolume = html5VideoData.html5mp4VPlayerAPI.getVolume();
					//html5VideoData.html5mp4VPlayerCurrentVolume = html5VideoData.html5mp4VPlayerAPI.getVolume(); // 0-1 scale
					//console.log( "volchange = " + grabHTML5VideoVolume );
				    //videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "VolumeChange" , 'newVolume' : grabHTML5VideoVolume });
				    //videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "VolumeChange" , 'newVolume' : html5VideoData.html5mp4VPlayerCurrentVolume });
				    videoControlReact({ 'playerType' : "HTML5-MP4" , 'action' : "VolumeChange" });
				});
				html5VideoData.html5mp4VPlayerAPIPlayStatus = "Unplayed";
		    	$('[data-videoAssistiveControl="Play-Pause"]').attr( "data-videoAssistiveControlState" , "Play" );
				$('[data-videoAssistiveControl="Play-Pause"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps );
				
				/*
				if( html5VideoData.html5mp4VPlayerCaptionSelected != "x" ){
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').text( "CC (On)" );
					//html5VideoData.html5mp4VPlayerAPI.enableTextTrack( popListItemTarget.attr( "data-popListLangShort" ) );
				}else{
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').text( "CC (Off)" );
					//html5VideoData.html5mp4VPlayerAPI.disableTextTrack();
				}
				*/
				//html5VideoData.html5mp4VPlayerAPI.toggleCaptions();
				
				//var captionStatus = "CC (Off)";
				//if( $( '#videoLoadBox .plyr' ).hasClass( "plyr--captions-active" ) ){
				if( $( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == "true" ){
					//captionStatus = "CC (On)";
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.on + ")" );
					//html5VideoData.html5mp4VPlayerCaptionSelected = "x"
				}else{
					$('[data-videoAssistiveControl="CaptionSelectLaunch"] .videoAssistiveControlLabel').html( langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")" ); 
					//html5VideoData.html5mp4VPlayerCaptionSelected = "x"
				}
				
				
			});
		break;
	}
					
	
	//$("#videoOverLoader").html(mediaLaunchBuild);
	//$('body').append( $("#videoLoadBox") );
	//$('body').append( $("#videoOverLoader") );
	
	//console.log("asdfasdf - " + enlargedMediaFileCaptionParse);
	
	$("#lightBoxDialog-Level4").prepend("<div class='lightBoxDialog_Level4_CaptionBox'></div>");
	$(".lightBoxDialog_Level4_CaptionBox").hide();
	 
    $("#lightBoxDialog-Level4").closest('.ui-dialog').find('.ui-dialog-titlebar').css('display', 'none');
	
	//------------------------------------------------------------------
	//---[ opener! ] ------------------------------------------------
	if(navButtonReact == null){
		$("#lightBoxDialog-Level4").dialog('open');
	}
	//------------------------------------------------------------------
	//------------------------------------------------------------------
	
	if(enlargedMediaFileCaptionParse == "" || enlargedMediaFileCaptionParse == null || enlargedMediaFileCaptionParse == undefined){
		$(".lightBoxDialog_Level4_TopNav_CaptionToggleContainer").hide();
		//enlargedMediaFileCaptionParse = "Unlabeled Media";
	}else{
		$(".lightBoxDialog_Level4_TopNav_CaptionToggleContainer").show();
	}
	//$(".lightBoxDialog_Level4_TopNav_CaptionToggleContainer").show();
	
	//console.log('saa');
	
	console.log("mediaTypeParse  = " + mediaTypeParse);
	console.log("lightBoxDialog_Level4_LaunchedFrom  = " + lightBoxDialog_Level4_LaunchedFrom);
	
	switch( mediaTypeParse ){
		case "Image" : // base page launcher
		case "Still Image" : // clipboard grid launcher
		case "Basic" : // context launcher, image
			switch( lightBoxDialog_Level4_LaunchedFrom ){
				case 	'BasePage_SingleMedia' : 
					//for( var i = 0 ; i < currentBasePage_Content_PageMediaList ; i++ ){
						//if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" ){
						if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "MainGrid1" ){
							navFileParse = 			currentBasePage_Content_PageMedia_Main[0].mediaFile_ZoomNav;
							zoomNavPoz = 			currentBasePage_Content_PageMedia_Main[0].zoomNavPoz;
							if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
								zoomNavPoz = "topright";
							}
						}
					//}
				break;
				case 	'BasePage_MediaGrid' : 
					//console.log( 'launchedMediaItem -- ' + launchedMediaItem );
					//for( var i = 0 ; i < currentBasePage_Content_PageMediaList ; i++ ){
						//if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "MainGrid1" ){
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[launchedMediaItem].mediaFile_ZoomNav;
							navFileParse = 			currentBasePage_Content_PageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_ZoomNav;
							zoomNavPoz = 			currentBasePage_Content_PageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].zoomNavPoz;
							if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
								zoomNavPoz = "topright";
							}
						//}
					//}
				break;
				case 	'ClipboardMediaGroupGrid' : // shouldn't this stuff already be set??
					//console.log( 'launchedMediaItem -- ' + launchedMediaItem );
					//for( var i = 0 ; i < currentBasePage_Content_PageMediaList ; i++ ){
						//if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "MainGrid1" ){
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[launchedMediaItem].mediaFile_ZoomNav;
							navFileParse = 			clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].zoomNavFile;
							zoomNavPoz = 			clipboardGridDataArray[launchedGridStackGroup][useLaunchItem + 1].zoomNavPoz;
							if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
								zoomNavPoz = "topright";
							}
						//}
					//}
				break;
				case 	'BasePage_HotSpotMap' : 
					//console.log( 'launchedMediaItem -- ' + launchedMediaItem );
					//for( var i = 0 ; i < currentBasePage_Content_PageMediaList ; i++ ){
						//if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "MainGrid1" ){
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[launchedMediaItem].mediaFile_ZoomNav;
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_ZoomNav;
							
							navFileParse = 			currentBasePage_Content_HotSpotArray[useLaunchItem].zoomNav;
							zoomNavPoz = 			currentBasePage_Content_HotSpotArray[useLaunchItem].zoomNavPoz;
							if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
								zoomNavPoz = "topright";
							}
						//}
					//}
				break;
				case 	'SubSequencePage_SingleMedia' : 
					navFileParse = 			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_ZoomNav;
					zoomNavPoz = 			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].zoomNavPoz;
					if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
						zoomNavPoz = "topright";
					}
				break;
				case 	'SubSequencePage_MediaGrid' : 
					//console.log( 'launchedMediaItem -- ' + launchedMediaItem );
					//for( var i = 0 ; i < currentBasePage_Content_PageMediaList ; i++ ){
						//if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "Main1" ){
						//if( currentBasePage_Content_PageMedia_Main[0].mediaRole == "MainGrid1" ){
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[launchedMediaItem].mediaFile_ZoomNav;
							//navFileParse = currentBasePage_Content_PageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_ZoomNav;
							//console.log( "enlargementItemPage_Nav_CurrentPage - 1 = " + (enlargementItemPage_Nav_CurrentPage - 1) );
							//console.log( "TRGL = " + currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_Launched );
							//console.log( "TRGD = " + currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_Display );
							
							//navFileParse = 	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].mediaFile_ZoomNav;
							//zoomNavPoz = 			currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[enlargementItemPage_Nav_CurrentPage - 1].zoomNavPoz;
							
							navFileParse = 			currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[launchedMediaItemTracker.SubSeqGrid].mediaFile_ZoomNav;
							zoomNavPoz = 			currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[launchedMediaItemTracker.SubSeqGrid].zoomNavPoz;
							
							if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
								zoomNavPoz = "topright";
							}
						//}
					//}
				break;
			}
			//console.log("mediaFileParse - " + mediaFileParse);
			//console.log("navFileParse - " + navFileParse);
			//$('#imageLoadBox-Zoom').html( '<div id="imageViewer-Zoom"></div>' );
			//if( $( '#lightBoxDialog-Level4' ).find( '#imageLoadBox-Zoom' ).length == 0 ){
				megazoomEmbed({ 
					'usage' : 					'mediaViewer' , 
					'largeImage' : 				mediaFileParse , 
					'navImage' : 				navFileParse ,
					'zoomNavPoz' : 				zoomNavPoz
				});
			//}
			lightBoxViewerTool = "image-zoom-basic";
			//rebuildMegazoomDelayRelay();
			$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
			//maximizeCETActivityContentHeight();
		break;
		case "AV Link" : // clipboard grid launcher, still used?
		case "Media Link" : // context launcher? grid?
		case "AV Media" : // context and clipboard grid launcher, latest??
			switch( mediaVariantParse ){
				case "Vimeo" : // context?
				case "vimeo" : // clipboard?
					lightBoxViewerTool = 								"video-vimeo-basic";
					sizeAVWindow();
					// plyr vimeo inject attempt.  works but doubles controls....
					/*
					var plyrOptions = {
						'loadSprite' : 			false , // needed?
						//'blankUrl' :			'3p/plyr-blank.mp4' , 
						'blankUrl' :			CETUpwardLadderPath + 'common/js/3p/plyr-blank.mp4' , 
						//'iconUrl' : 			"../img/svg/plyr.svg" //, // ensure we are targeting a "local" instance of svg, not from default cdn
						'iconUrl' : 			CETUpwardLadderPath + 'common/img/svg/plyr.svg' //, // ensure we are targeting a "local" instance of svg, not from default cdn
					};
					//html5VideoData.plyrPlayers = plyr.setup( '#videoLoadBox' , plyrOptions );
					html5VideoData.plyrPlayers = plyr.setup( '#vmPlayer' , plyrOptions );
					html5VideoData.plyrPlayers[0].on('ready', function(event) {
						console.log("REDDY"); // fires, but is it really ready?
						//$('.avPlayer').attr( 'data-aspectratio' , "0.5625" ); // force 16:9 ratio otherwise is NaN
						//console.log( "avplayer iframe src = " + $('.avPlayer iframe').attr( 'src' ) );
						//$('.avPlayer iframe').attr( 'data-aspectRatio' , "0.5625" ); // force 16:9 ratio otherwise is NaN
						// isn't setting the aspect ratio...
						var grabIframeSrc = $('.avPlayer iframe').attr( 'src' );
						var appendedIframeSrc = grabIframeSrc + "&background=1&autoplay=0&mute=0&loop=0";
						console.log("appendedIframeSrc = " + appendedIframeSrc);
						$('.avPlayer iframe').attr( 'src' , appendedIframeSrc );
						sizeAVWindow();
						$('.avPlayer iframe').attr( 'data-aspectRatio' , "0.5625" );
					});
					html5VideoData.plyrPlayers[0].on('setup', function(event) {
						console.log("SETUP"); // no fire
					});
					html5VideoData.plyrPlayers[0].on('canplay', function(event) {
						console.log("CP"); // no fire
					});
					html5VideoData.plyrPlayers[0].on('canplaythrough', function(event) {
						console.log("CPT"); // no fire until playhead hits end
					});
					*/
					$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
					$("#lightBoxDialog-Level4").after( $("#videoLoadBox") );
					$( '.videoAssistiveControlLauncher' ).focus();
					updateFocus({ 'action' : "Update" });
				break;
				case "Youtube" : // context?
				case "YouTube" : // context?
				case "youtube" : // clipboard?
					lightBoxViewerTool = 								"video-youtube-basic";
					sizeAVWindow();
					$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
					$("#lightBoxDialog-Level4").after( $("#videoLoadBox") );
					$('.focused').blur();
				break;
				case "HTML5Video" : // context?
				case "html5video" : // clipboard?
					lightBoxViewerTool = 								"video-html-basic";
					/*
					var plyrOptions = {
						'loadSprite' : 			false , // needed?
						//'blankUrl' :			'3p/plyr-blank.mp4' , 
						'blankUrl' :			CETUpwardLadderPath + 'common/js/3p/plyr-blank.mp4' , 
						//'iconUrl' : 			"../img/svg/plyr.svg" //, // ensure we are targeting a "local" instance of svg, not from default cdn
						'iconUrl' : 			CETUpwardLadderPath + 'common/img/svg/plyr.svg' //, // ensure we are targeting a "local" instance of svg, not from default cdn
					};
					html5VideoData.plyrPlayers = plyr.setup( '#videoLoadBox' , plyrOptions );
					html5VideoData.plyrPlayers[0].on('ready', function(event) {
						//console.log("REDDY");
						$('.avPlayer').attr( 'data-aspectRatio' , "0.5625" ); // force 16:9 ratio otherwise is NaN
					});
					*/
					sizeAVWindow();
					$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
					$("#lightBoxDialog-Level4").after( $("#videoLoadBox") );
					$( '.videoAssistiveControlLauncher' ).focus();
					updateFocus({ 'action' : "Update" });
				break;
			}
			//console.log('???should focus');
		break;
		case "Rich Document" : // clipboard grid launcher
		case "Document" : // main grid launcher
		//case "PDF" : // context launcher
			//console.log("beee");
			//console.log(mediaFileParse);
			$( '#documentDownloaderInner' ).focus();
			updateFocus({ 'action' : "Update" });
			embedPDF(mediaFileParse);
			lightBoxViewerTool = "document-pdf-desktop";
			/*
			if(isMobileBrowser){
		    	$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'black');
	    	}else{
		    	$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
	    	}
	    	*/
			//maximizeCETActivityContentHeight();
		break;
	}
	
	//console.log("end lblvl4 fill");
	
}

// ! F.Video Player - Assistive control build ---
function buildVideoAssistiveControls(context){
	
	var playerType = context.playerType; // Vimeo | YouTube
	
	/*
	"mediaViewer" : {
		"videoControl" : 					"Video Control : ",
		"videoControlTrigger" : 			" : Use space or return to trigger.",
		"videoCCTrigger" : 					" : Use space or return open the closed-caption selection box, then use the up or down arrow keys cycle the available closed captioning options and use to select a closed-captioning option. Use escape key to exit the closed-caption selection box without making a selection.",
		"videoPlay" : 						"Play",
		"videoPause" : 						"Pause",
		"videoRestart" : 					"Restart",
		"videoMute" : 						"Mute",
		"videoUnMute" : 					"Unmute",
		"videoVolumeLess" : 				"Reduce Volume",
		"videoVolumeMore" : 				"Increase Volume",
		"videoCCOff" : 						"CC (off)",
		"videoCCOn" : 						"CC (on)",
		"videoFullScreen" : 				"Full Screen"	
	*/
	
	var mediaLaunchBuild = ""; 
	mediaLaunchBuild += 	'<div id="videoAssistiveControls" class="videoAssistiveControlsOff" data-videoAssistiveControlSet="' + playerType + '-Basic">';
	mediaLaunchBuild += 		'<div class="videoAssistiveControlLauncher focalItem" tabindex="0">' + langPack.ui.mediaViewer.videoAssistive.showAssistControls + ': <span class="accessViz">Use space or return to access assistive controls.  Use up or down arrow keys to cycle the controls, and use space or return to trigger a control.</span></div>';
	mediaLaunchBuild += 		'<div class="videoAssistiveControlStrip UDArrowGroup" data-UDArrowGroup="VideoAssistiveControls">';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD videoAssistiveControlFirst" data-videoAssistiveControl="Play-Pause" data-videoAssistiveControlType="ButtonToggle" data-videoAssistiveControlState="Play" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + '</span><span class="videoAssistiveControlLabel">' + langPack.ui.mediaViewer.videoAssistive.play + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD" data-videoAssistiveControl="Restart" data-videoAssistiveControlType="Button" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + '</span><span class="videoAssistiveControlLabel">' + langPack.ui.mediaViewer.videoAssistive.restart + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD" data-videoAssistiveControl="Mute-Unmute" data-videoAssistiveControlType="ButtonToggle" data-videoAssistiveControlState="Mute" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + '</span><span class="videoAssistiveControlLabel">' + langPack.ui.mediaViewer.videoAssistive.mute + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD" data-videoAssistiveControl="VolumeDown" data-videoAssistiveControlType="Button" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + langPack.screenreader.mediaViewer.videoVolumeLess + '</span><span class="videoAssistiveControlLabel" aria-hidden="true">-' + langPack.ui.mediaViewer.videoAssistive.volume + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD" data-videoAssistiveControl="VolumeUp" data-videoAssistiveControlType="Button" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + langPack.screenreader.mediaViewer.videoVolumeMore + '</span><span class="videoAssistiveControlLabel" aria-hidden="true">+' + langPack.ui.mediaViewer.videoAssistive.volume + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	
	var captionStatus = langPack.ui.mediaViewer.videoAssistive.closedCaps + " (" + langPack.ui.mediaViewer.videoAssistive.off + ")";
	//if( $( '#videoLoadBox .plyr' ).hasClass( "plyr--captions-active" ) ){
	//if( $( '#videoLoadBox .plyr button[data-plyr="captions"]' ).attr( 'aria-pressed' ) == "true" ){
		//captionStatus = "CC (On)";
	//}
	
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD" data-videoAssistiveControl="CaptionSelectLaunch" data-videoAssistiveControlType="ButtonPopList" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + '</span><span class="videoAssistiveControlLabel">' + captionStatus + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoCCTrigger + '</span></div>';
	mediaLaunchBuild += 			'<div class="videoAssistiveControl focalItem arrowNavUD videoAssistiveControlLast" data-videoAssistiveControl="FullScreen" data-videoAssistiveControlType="Button" tabindex="0"><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControl + '</span><span class="videoAssistiveControlLabel">' + langPack.ui.mediaViewer.videoAssistive.fullScreen + '</span><span class="accessViz">' + langPack.screenreader.mediaViewer.videoControlTrigger + '</span></div>';
	mediaLaunchBuild += 		'</div>';
	mediaLaunchBuild += 	'</div>';
	mediaLaunchBuild += 	'<div id="videoAssistiveControlsPopList" data-videoAssistiveMode="None"></div>';
	return mediaLaunchBuild;
}

// ! F.Lightbox.Level4.Embed pdf ---
function embedPDF(pdfFile){
	//var pdfPath = mediaGridLargePath + pdfFile;
	var pdfPath;
	if(mediaGridStacksEnabled){ // if launching from clipboard -- NEED TO HANDLE RESOURCES TOO
    	//var pdfPath = '../../content/' + CETActivityID + '/clipboard/' + pdfFile;
    	//var pdfPath = '../../content/' + CETActivityID + '/media/' + pdfFile;
    	//var pdfPath = CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + pdfFile;
    	pdfPath = mediaPathConstructor({ 'mediaFileName' : pdfFile });
	}else{
    	//var pdfPath = '../../content/' + CETActivityID + '/media/' + pdfFile;
    	//var pdfPath = CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + pdfFile;
    	pdfPath = mediaPathConstructor({ 'mediaFileName' : pdfFile });
	}
	
	//-------[ js method, not working in FF or ios safari ]-----------------
	//var myPDF = new PDFObject({url: pdfPath}).embed("documentLoadBox"); 
	//-------[ html5 object embed method - test in various browsers! ]-----------------
	//$('#documentLoadBox').append('<object	data="' + pdfPath + '#toolbar=1&amp;navpanes=0&amp;scrollbar=1&amp;page=1&amp;view=FitH" type="application/pdf" width="100%" height="100%"></object>');
	//$('#documentLoadBox').append('<object data="' + pdfPath + '#view=FitV" type="application/pdf" width="100%" height="100%"></object>');
	
	//$('#documentLoadBox').hide();
	/*
	var pdfParams = {
		url: pdfPath,
		pdfOpenParams: {
			scrollbar: 	1,
			navpanes: 	1,
			toolbar: 	1,
			statusbar: 	0,
			view: 		"FitBV"
		}
	};
	
	var myPDF = new PDFObject(pdfParams).embed("documentLoadBox");
	if(myPDF){
		$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
	} else {
		$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'black');
		$('#documentLoadBox').append('<div class="pdfBox-IOS-Notify-Text">Your browser does not allow pdf embedding</div><div class="pdfBox-IOS-Launcher-Box"><a href="' + pdfPath + '" target="_blank"><div class="pdfBox-IOS-Launcher-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_document + '"></div><div class="pdfBox-IOS-Launcher-Text"><strong>Tap to open PDF in new window</strong></div></a></div><div class="pdfBox-IOS-Notify-Text">Remember to return to this window to continue the case</div>');
	}
	*/
	//$('#documentLoadBox').show();
	
	//*
	//console.log('pdf launcher here');
	var notifyBox = 	'<div class="pdfBox-IOS-Notify-Text">' + langPack.ui.overlayNotice.pdfViewer.unsupported + '</div>';
	notifyBox +=		'<div class="pdfBox-IOS-Launcher-Box">';
	notifyBox +=			'<div><a href="' + pdfPath + '" target="_blank"><span class="pdfBox-IOS-Launcher-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_document + '"></span><span class="pdfBox-IOS-Launcher-Text"><strong>' + langPack.ui.overlayNotice.pdfViewer.viewPdfNewWindow + '</strong></span></a></div>';
	notifyBox +=		'</div>';
	notifyBox +=		'<div class="pdfBox-IOS-Notify-Text">' + langPack.ui.overlayNotice.pdfViewer.pleaseReturn + '</div>';
	$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'black');
	if(isMobileBrowser){
    	$('#documentLoadBox').append(notifyBox);
    	$('#documentLoadBox a').css('color', skinPrimaryColor);
	}else{
		//$("#lightBoxDialog-Level4").closest('.ui-dialog').css('background', 'transparent');
    	$('#documentLoadBox').append('<object data="' + pdfPath + '#view=FitBV&scrollbar=1&toolbar=1&statusbar=1&navpanes=1" type="application/pdf" width="100%" height="100%">' + notifyBox + '</object>');
    	$('.downloadPDF').attr('href', pdfPath);
    	$('#documentLoadBox').css('overflow-y', 'hidden');
	}
	//*/
	
	
	//documentDownloaderInner
	//$('#documentDownloaderInner').
	$('#documentLoadBox').css('height', ( $('#lightBoxDialog-Level4').height() - $('#documentDownloader').outerHeight(true) ) + 'px' ); 
	//$('#documentLoadBox').css('z-index', 2000);
	maximizerDelayRelay();
}
// ! =============================================================
// ! F.Step.Assessment.Funneled Results Handling ---
function filterSpecialHandlingOutputStatus( context ){
	// used during tallying mamc s.h. scores to determine target output
	// ...and for determining output targeting when choice selection array is updated for special handling (mamc, amamc, matching, ranking, write-in)
	var handlingData = 		context.handlingData; // structureNodePath or currentBasePage_Assessment_SpecialHandlingData
	var handlingType = 		context.handlingType;
	var quasiCorrect = 		handlingData.quasiCorrect;
	var dirtyCorrect = 		handlingData.dirtyCorrect;
	var correctList = 		context.correctList; // only passed during pathScoreTally
	var choiceIDList = 		context.choiceIDList; // only passed during pathScoreTally
	var action = 			context.action; // indicate usage, tallying or choice select updating -- choiceSelectionUpdate | pathScoreTally
	
	//console.log( "handlingType = " + handlingType );
	//console.log( "action = " + action );
	
	//console.log( "&&&& filterSpecialHandlingOutputStatus context = " + JSON.stringify( context , null , 4 ) );
	
	//switch( handlingType ){
		//case "AMAMC" :
		//case "WriteInFieldList" :
			switch( action ){
				case "pathScoreTally" : 
					var moduleGroup = 				Number(context.moduleGroup) - 1;
					var moduleComponent = 			Number(context.moduleComponent) - 1;
					//console.log( "moduleGroup = " + moduleGroup );
					//console.log( "moduleComponent = " + moduleComponent );
					var currentPathStructure = 		masterJSONStorage.pathStructureSet[moduleGroup][moduleComponent];
					var currentPathHistory = 		courseStatusObject.courseModuleGroupStack[moduleGroup][moduleComponent].userPath;
					//var moduleProgressStatus = 				courseStatusObject.courseModuleGroupStack[currentPathGroup][currentPathActivity].moduleProgressStatus;
					//var linearPathList = 					currentPathStructure.idealPath;
					var componentStep = 			Number(context.componentStep);
					var pathStepList = 				currentPathStructure.nodeMapUnits;
					
					structureNodesLoop: // seek the structure node with matching node id to user path element pre-colon id
					for( var a = 0 ; a < pathStepList.length ; a++ ){
						if( Number(pathStepList[a].nodeID) == Number(componentStep) ){
							var targetStep = 		pathStepList[a];
							//var targetStep = 				pathStepList[ componentStep - 1 ];
							//console.log( "filterSpecialHandlingOutputStatus targetStep = " + JSON.stringify( targetStep , null , 4 ) );
							break structureNodesLoop;
						}
					} // end structureNodesLoop
					
					userPathLoop: // cycle the learner's chain of step ids and choices
					for( var a = 0 ; a < currentPathHistory.length ; a++ ){
						var splitStepID = 					currentPathHistory[a].split(":");
						var grabStepID = 					splitStepID[0];
						//console.log( "grabStepID = " + grabStepID );
						//console.log( "componentStep = " + componentStep );
						if( Number(grabStepID) == componentStep ){
							var learnerInputList = 			splitStepID[1];
							//console.log( "learnerInputList = " + learnerInputList );
							if( learnerInputList != undefined && learnerInputList !== '' ){ // if assessment exists
								// remove first and last chars (should be curly brackets)
								// delimit split via the remaining bracket-surrounded commas
								// inputs should not have any curly brackets
								switch( handlingType ){
									case "WriteInFieldList" : 
										var learnerInputArray = 	learnerInputList.slice(1, -1).split("},{"); // input text values
										//learnerInputArray = 		learnerInputListSplit; 
									break;
									case "MAMC" : 
									case "AMAMC" : 
										var learnerInputArray = 	learnerInputList.split(","); // ids of selected choices
										//learnerInputArray = 		learnerInputListSplit; 
									break;
									
								}
								break userPathLoop;
							}
						}
					}
					
				break;
			}
		//break;
	//}
	
	var choiceStatusMatchList_Ref;
	var choiceStatusMatchList_Selections;
	var outputDataList; 
	// set possible status type to true if it is encountered as a selected choice status
	var scanChoiceList = 	context.scanChoiceList; // checkForMamcChoices | pageAssessmentSelectionArray[0]
	//console.log( "scanChoiceList = " + JSON.stringify( scanChoiceList , null , 4 ) );
	switch( action ){
		case "choiceSelectionUpdate" : 
			var currentStepAssessmentPath = 					masterJSONStorage.currentStep.Assessment;
			var currentStepAssessmentFunneledHandlingPath = 	currentStepAssessmentPath.specialHandling;
			var currentStepAssessmentOutputsPath = 				currentStepAssessmentPath.outputs;
			var scanFunneledList = 								currentStepAssessmentFunneledHandlingPath.data;
			
			// set data paths to currently-viewed step using current data (or could possibly be structure)
			// masterJSONStorage.currentStep.Assessment.scoring.captureMethod = "Sum Selections" | "Special Handler"
			// masterJSONStorage.currentStep.Assessment.outputs
			// mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.selected
			// masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected
			// currentBasePage_Assessment_OutputList[a].outputStatus.toLowerCase();
			
			switch( handlingType ){
				case "MAMC" :
					
				break;
				case "AMAMC" :
					var funneledHandlingRulesPath = 	masterJSONStorage.currentStep.Assessment.specialHandling.rules;
				break;
				case "WriteInFieldList" : 
					var learnerInputArray = 			pageAssessmentSelectionArray[0];
					var funneledHandlingRulesPath = 	masterJSONStorage.currentStep.Assessment.specialHandling.rules;
					var expectedInputList = 			currentBasePage_Assessment_OutputList;
				break;
			}
			
		break;
		case "pathScoreTally" : 
			var currentStepAssessmentInputsPath = 				context.scanChoiceList;
			var currentStepAssessmentFunneledHandlingPath = 	context.scanFunnelingList;
			//var currentStepAssessmentOutputsPath = 		context.handlingData;
			var scanFunneledList = 								context.scanFunnelingList;
			
			
			
			/*
			
			var checkForAdvancedMamcChoices = structureNodePath.amamcChoices; 
			if( checkForAdvancedMamcChoices != undefined && checkForAdvancedMamcChoices !== '' ){ 
				checkForSpecialHandling.type = "AMAMC";
				checkForSpecialHandling.data = checkForAdvancedMamcChoices; // array
				checkForSpecialHandling.funneling = structureNodePath.outputs; // array
				checkForSpecialHandling.rules = structureNodePath.amamcRules; // array
			}
				
			console.log( "AMAMC handlingType - " + checkForSpecialHandling.type );
			console.log( "AMAMC moduleGroup - " + courseModule_Group );
			console.log( "AMAMC moduleComponent - " + courseModule_Module );
			console.log( "AMAMC componentStep - " + grabStepID );
			console.log( "AMAMC scanChoiceList - " + checkForSpecialHandling.data );
			console.log( "AMAMC scanFunnelingList - " + checkForSpecialHandling.funneling );
			console.log( "AMAMC correctList - " + stepAssessmentCorrectList );
			console.log( "AMAMC choiceIDList - " + choiceIDList );
			console.log( "AMAMC handlingData - " + structureNodePath );
			
			//*
			var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
				'action' : 				"pathScoreTally" , 
				'handlingType' : 		checkForSpecialHandling.type ,
				'moduleGroup' : 		courseModule_Group , 
				'moduleComponent' : 	courseModule_Module , 
				'componentStep' : 		grabStepID , 
				'scanChoiceList' : 		checkForSpecialHandling.data ,
				'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
				'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
				'choiceIDList' :		choiceIDList , // only passed with tally action
				'
				
			///////////	
				
			var checkForWriteInExpectedInputs = structureNodePath.writeInFieldListExpectedInputs; 
			if( checkForWriteInExpectedInputs != undefined && checkForWriteInExpectedInputs !== '' ){ 
				checkForSpecialHandling.type = "WriteInFieldList";
				checkForSpecialHandling.data = checkForWriteInExpectedInputs; // array
				checkForSpecialHandling.funneling = structureNodePath.outputs; // array
				checkForSpecialHandling.rules = structureNodePath.writeInFieldListRules; 
			}
			
			'action' : 				"pathScoreTally" , 
			'handlingType' : 		checkForSpecialHandling.type ,
			'moduleGroup' : 		courseModule_Group , 
			'moduleComponent' : 	courseModule_Module , 
			'componentStep' : 		grabStepID , 
			'scanChoiceList' : 		checkForSpecialHandling.data ,
			'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
			'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
			'choiceIDList' :		choiceIDList , // only passed with tally action
			'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
			*/
			
			// set data paths to referencing a step in the learner's path using structure data
			
			switch( handlingType ){
				case "MAMC" :
					
				break;
				case "AMAMC" :
					var funneledHandlingRulesPath = 	targetStep.amamcRules;
				break;
				case "WriteInFieldList" : 
					//console.log( "currentPathHistory = " + currentPathHistory.join(",") );
					var prepWriteInFieldListScoreList = [];
					/*userPathLoop: // cycle the learner's chain of step ids and choices
					for( var a = 0 ; a < currentPathHistory.length ; a++ ){
						var splitStepID = 					currentPathHistory[a].split(":");
						var grabStepID = 					splitStepID[0];
						console.log( "grabStepID = " + grabStepID );
						console.log( "componentStep = " + componentStep );
						if( Number(grabStepID) == componentStep ){
							var learnerInputList = 			splitStepID[1];
							console.log( "learnerInputList = " + learnerInputList );
							if( learnerInputList != undefined && learnerInputList !== '' ){ // if assessment exists
								// remove first and last chars (should be curly brackets)
								// delimit split via the remaining bracket-surrounded commas
								// inputs should not have any curly brackets
								var learnerInputArray = 	learnerInputList.slice(1, -1).split("},{"); 
								//learnerInputArray = 		learnerInputListSplit; 
								break userPathLoop;
							}
						}
					}*/
					var funneledHandlingRulesPath = 	targetStep.writeInFieldListRules;
					var expectedInputList = 	scanChoiceList; //targetStep.writeInFieldListRules;
				break;
			}
			
		break;
	}
	//console.log( "scanFunneledList = " + JSON.stringify( scanFunneledList , null , 4 ) );
	var selectionStatusTypes = { // set all possible status types to false -- resulting order will always follow this pattern, allowing for blanks
		"correct" : 		false ,
		"incorrect" : 		false ,
		"partial" : 		false ,
		"neutral" : 		false , 
		"nullify" : 		false
	};
	var nullified = 		false;
	var vitalExpectedList = [];
	var countVitalMatches = 0;
	var countTotalVitals = 0;	
	var checkForVitalMatching = false;
	
	var allPatternsAreMatched = true;
	
	var inputListCompleteMatch = true; // seems that this is set multiple times but not actually used/checked?
	
	var scoreResult = "+0.00";
	
	/*
	var scoringMethod = "Sum Selections";
	var checkForFunneledScoringInit = scanFunneledList[ 0 ].scoring; // look for scoring data in the first funneled handler box
	// is trickier checking structure -- first item may not be correct and may not have score even if it is set to funneled!
	
	// equivalent to looking for "sum selections/selected" in step assessment scoring controls, but looking at structure instead
	if( checkForFunneledScoringInit != undefined && checkForFunneledScoringInit !== '' ){
		scoringMethod = "Funneled"; // Special Handler
	}
	*/
	// if using current step data, can just look at the current step's assessment handling. 
	var scoringMethod ="Sum Selections";
	
	
	// need to capture/determine scoring method if pulling scoring data from structure, as there is not currently a direct scoring method indicator
	// look in appropriate funneled section for scoring data in correct, incorrect, partial, neutral (not nullify)
	// -- can maybe just look at incorrect, as it is always present and will have a score if scoring is enabled and captured from handling area
	// -- already setting to sum selections by default, so can just check handling (always outputs in structure)
	
	switch( action ){
		case "choiceSelectionUpdate" : 
			if( masterJSONStorage.currentStep.Assessment.scoring != undefined ){
				scoringMethod = masterJSONStorage.currentStep.Assessment.scoring.captureMethod; // Sum Selections | Special Handler
			}
			outputDataList = 	handlingData.data;
			switch( handlingType ){
				
				case "MAMC":
					filterProcessor({});
					/*
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){
						var mamcChoiceStatus = scanChoiceList[ a ]; // on, off
						if( mamcChoiceStatus == "on" ){ // choice selection status is on... need another for off (for "unselected" handling)?
							//for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
								//if( selectionStatusTypes[ b ][ 0 ] == currentBasePage_Assessment_OutputList[a].outputStatus ){
									//selectionStatusTypes[ b ][ 1 ] = true; // indicate at least once instance of given status exists as output possibility
								//}
							//}
							var matchingChoiceStatus = currentBasePage_Assessment_OutputList[a].outputStatus.toLowerCase();
							selectionStatusTypes[ matchingChoiceStatus ] = true;
						}
					}
					/*/
				break;
				case "AMAMC":
					filterProcessor({
						/*'handlingType' : "AMAMC" //,*/
						//'action' : action
					});
					
					switch( action ){
						case "choiceSelectionUpdate" : 
							//var funneledRulesPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules;
						break;
						case "pathScoreTally" : 
							//var funneledRulesPath = targetStep.amamcRules;
						break;
					}
					
					var countFilledFields = 	0;
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							countFilledFields++;
						}
					}
				  	if( countFilledFields < Number(funneledHandlingRulesPath.filledFields.minFilled) ){
					  	switch( funneledHandlingRulesPath.filledFields.minFilledEnforcementStatus ){
						  	case "Forced" : 
						  		
						  	break;
						  	case "Nullify" : 
						  		selectionStatusTypes.nullify = true;
						  	break;
					  	}
					}
					if( countFilledFields > Number(funneledHandlingRulesPath.filledFields.maxFilled) ){
						switch( funneledHandlingRulesPath.filledFields.maxFilledEnforcementStatus ){
						  	case "Forced" : 
						  		
						  	break;
						  	case "Nullify" : 
						  		//nullified = 		true;
						  		selectionStatusTypes.nullify = true;
						  	break;
					  	}
					}
					
					//console.log( "countTotalVitals choiceSelectionUpdate after filter processor = " + countTotalVitals );
				break;
				case "WriteInFieldList":
					filterProcessor({});
				break;
				case "Matching":
					//console.log( "match check" );
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){
						//console.log( "scanChoiceList iter = " + a );
						// not possible to get quasi-correct with matching
						//var matchingChoiceValue = scanChoiceList[ a ]; // oid
						
						
						//cycleSelectionTypes:
						//for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
							//console.log( "cycleSelectionTypes = " + b );
							var incrementer = 1; 
							//cycleChoiceList:
							//for( var i = 0 ; i < currentBasePage_Assessment_OutputList.length ; i++ ){
								//console.log( "cycleChoiceList = " + i );
								cycleInner1:
								for( var j = 0 ; j < currentBasePage_Assessment_OutputList.length ; j++ ){
									//console.log( "cycleInner1 = " + j );
									if( currentBasePage_Assessment_OutputList[j].choiceID == String( incrementer ) ){
										var selectedChoiceOID = 	pageAssessmentSelectionArray[0][j];
										cycleInner2:
										for( var k = 0 ; k < currentBasePage_Assessment_OutputList[j].choiceOptions.length ; k++ ){
											//console.log( "cycleInner2 = " + k );
											//console.log("currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid = " + currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid);
											//console.log("selectedChoiceOID = " + selectedChoiceOID);
											if( Number(currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid) == Number(selectedChoiceOID) ){
												var matchingChoiceStatus = currentBasePage_Assessment_OutputList[j].choiceOptions[k].outputStatus.toLowerCase();
												selectionStatusTypes[ matchingChoiceStatus ] = true;
												//if( selectionStatusTypes[ b ][ 0 ] == currentBasePage_Assessment_OutputList[j].choiceOptions[k].outputStatus ){
													//selectionStatusTypes[ b ][ 1 ] = true; // indicate at least once instance of given status exists as output possibility
												//}
												break cycleInner2;
												//continue cycleChoiceList;
											}
										}
										incrementer++;
										//continue cycleChoiceList;
									}
								}
							//}
						//}
						
						/*
						cycleSelectionTypes:
						for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
							console.log( "cycleSelectionTypes = " + b );
							var incrementer = 1; 
							cycleChoiceList:
							for( var i = 0 ; i < currentBasePage_Assessment_OutputList.length ; i++ ){
								console.log( "cycleChoiceList = " + i );
								cycleInner1:
								for( var j = 0 ; j < currentBasePage_Assessment_OutputList.length ; j++ ){
									console.log( "cycleInner1 = " + j );
									if( currentBasePage_Assessment_OutputList[j].choiceID == String( incrementer ) ){
										var selectedChoiceOID = 	pageAssessmentSelectionArray[0][j];
										cycleInner2:
										for( var k = 0 ; k < currentBasePage_Assessment_OutputList[j].choiceOptions.length ; k++ ){
											console.log( "cycleInner2 = " + k );
											console.log("currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid = " + currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid);
											console.log("selectedChoiceOID = " + selectedChoiceOID);
											if( currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid == selectedChoiceOID ){
												var matchingChoiceStatus = currentBasePage_Assessment_OutputList[j].choiceOptions[k].outputStatus.toLowerCase();
												selectionStatusTypes[ matchingChoiceStatus ] = true;
												//if( selectionStatusTypes[ b ][ 0 ] == currentBasePage_Assessment_OutputList[j].choiceOptions[k].outputStatus ){
													//selectionStatusTypes[ b ][ 1 ] = true; // indicate at least once instance of given status exists as output possibility
												//}
												break cycleInner2;
												//continue cycleChoiceList;
											}
										}
										incrementer++;
										//continue cycleChoiceList;
									}
								}
							}
						}
						*/
					}
				break;
				case "Ranking":
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){
						//var rankingChoiceValue = scanChoiceList[ a ]; // cid
						// choices do not have outputStatus
						// status is derived from checking incrementing values
						// each item in sequence should be value + 1 of previous element in seq.
						// 0+1, 1+1, 2+1, 3+1,....
						// if any element falls out of this pattern, is incorrect (or partial, if dirtyCorrect and partial response is provided)
						// not possible to get quasi-correct with ranking
						//var fullRankingCorrect = true;
						for( var b = 0 ; b < pageAssessmentSelectionArray[0].length ; b++ ){
							if( Number( pageAssessmentSelectionArray[0][b] ) == (b + 1) ){
								//selectionStatusTypes[ 0 ][ 1 ] = true;
								selectionStatusTypes.correct = true;
							}else{
								//selectionStatusTypes[ 1 ][ 1 ] = true;
								selectionStatusTypes.incorrect = true;
							}
						}
						//if( fullRankingCorrect ){
							//selectionStatusTypes[ 0 ][ 1 ] = true;
						//}
					}
				break;
			}
			
			/*
			
			nodeAssessment_SpecialHandling_OutputStatusMatchList is array of indications of items that should be on/off for optimal results : 
			- array - "on"/"off" (mamc, write-in)
			- array - "on"/"off"/"pattern" (amamc)
			- array - string-wrapped number represenging correct droplist item (ranking, matching)
			
			pageAssessmentSelectionArray[0] is array of learner's selections/inputs : 
			- array - "on"/"off" (mamc, amamc, ranking)
			- array - "off"/droplist item selected (matching)
			- array - input field values (write-in)
			
			*/
			choiceStatusMatchList_Ref = 		nodeAssessment_SpecialHandling_OutputStatusMatchList;
			choiceStatusMatchList_Selections = 	pageAssessmentSelectionArray[0];
		break;
		case "pathScoreTally" : 
			cycleStructureNodeOutputs: // cycle handling elements
			for( var a = 0 ; a < currentStepAssessmentFunneledHandlingPath.length ; a++ ){
				if( currentStepAssessmentFunneledHandlingPath[a].outputStatus != "Nullify" && currentStepAssessmentFunneledHandlingPath[a].scoring != undefined ){
					scoringMethod = "Special Handler";
					break cycleStructureNodeOutputs;
				}
			}
			outputDataList = 	handlingData.outputs; // handlingData in pathscoretally is the structure node
			switch( handlingType ){
				case "MAMC":
					//filterProcessor({});
					//*
					// cycle choices in userpath, set selections to true
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){ // cycle choices of structure node
						var mamcChoiceStatus = scanChoiceList[ a ].outputStatus.toLowerCase(); // Correct, Incorrect, Partial, Neutral
						selectionStatusTypes[ mamcChoiceStatus ] = true;
						//if( context.choiceIDList.indexOf( String(a+1) ) != -1 ){ // choice selection status doesn't already exist in the status types selected chain
							//for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
								//if( selectionStatusTypes[ b ][ 0 ] == mamcChoiceStatus ){
									//selectionStatusTypes[ b ][ 1 ] = true;
								//}
							//}
						//}
					}
					choiceStatusMatchList_Ref = 		context.correctList; // set as strings at array creation, only provided by tally action
					choiceStatusMatchList_Selections = 	context.choiceIDList; // should be strings, not numbers, only provided by tally action
					//*/
				break;
				case "AMAMC":
					filterProcessor({});
					//console.log( "countTotalVitals pathscoretally after filter processor = " + countTotalVitals );
					var countFilledFields = 	0;
					
					userPathLoop: // cycle the learner's chain of step ids and choices
					for( var b = 0 ; b < currentPathHistory.length ; b++ ){
						var splitStepID = 					currentPathHistory[b].split(":");
						var grabStepID = 					splitStepID[0];
						if( Number(grabStepID) == componentStep ){
							var selectionsMade = 		splitStepID[1];
							if( selectionsMade != undefined && selectionsMade !== '' ){ // if assessment exists
								var splitSelectionsMade = 	selectionsMade.split(",");
								for( var c = 0 ; c < splitSelectionsMade.length ; c++ ){
									//if( Number( splitSelectionsMade[c] ) == (a+1) ){
										//selectionStatusCheck = "Selected";
										//break userPathLoop;
									//}
									countFilledFields++;
								}
							}
						}
					}
					
					/*
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" ){
							countFilledFields++;
						}
					}
					*/
				  	if( countFilledFields < Number(funneledHandlingRulesPath.filledFields.minFilled) ){
					  	switch( funneledHandlingRulesPath.filledFields.minFilledEnforcementStatus ){
						  	case "Forced" : 
						  		
						  	break;
						  	case "Nullify" : 
						  		selectionStatusTypes.nullify = true;
						  	break;
					  	}
					}
					if( countFilledFields > Number(funneledHandlingRulesPath.filledFields.maxFilled) ){
						switch( funneledHandlingRulesPath.filledFields.maxFilledEnforcementStatus ){
						  	case "Forced" : 
						  		
						  	break;
						  	case "Nullify" : 
						  		//nullified = 		true;
						  		selectionStatusTypes.nullify = true;
						  	break;
					  	}
					}
				break;
				case "WriteInFieldList":
					filterProcessor({});
				break;
				case "Matching":
					//console.log( "MATCHING TALLY scanChoiceList = " + JSON.stringify( scanChoiceList , null , 4 ) );
					//console.log( "MATCHING TALLY context.choiceIDList = " + JSON.stringify( context.choiceIDList , null , 4 ) );
					scanloop1:
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){ // choices
						scanloop2:
						for( var b = 0 ; b < scanChoiceList[a].length ; b++ ){ // choice options
							if( b == ( Number(context.choiceIDList[ a ]) - 1) ){ // choice id list should be same length as scanchoicelist
								var matchingChoiceStatus = scanChoiceList[ a ][ b ].status.toLowerCase();
								selectionStatusTypes[ matchingChoiceStatus ] = true;
								//scanloop3:
								//for( var c = 0 ; c < selectionStatusTypes.length ; c++ ){
									//if( selectionStatusTypes[ c ][ 0 ] == matchingChoiceStatus ){
										//selectionStatusTypes[ c ][ 1 ] = true;
									//}
								//}
								continue scanloop1;
							}
						}
					}
					choiceStatusMatchList_Ref = 		context.correctList; 
					choiceStatusMatchList_Selections = 	context.choiceIDList; 
					
					/*
					for( var a = 0 ; a < scanChoiceList.length ; a++ ){
						var incrementer = 1; 
						cycleInner1:
						for( var j = 0 ; j < currentBasePage_Assessment_OutputList.length ; j++ ){
							if( currentBasePage_Assessment_OutputList[j].choiceID == String( incrementer ) ){
								var selectedChoiceOID = 	pageAssessmentSelectionArray[0][j];
								cycleInner2:
								for( var k = 0 ; k < currentBasePage_Assessment_OutputList[j].choiceOptions.length ; k++ ){
									if( Number(currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid) == Number(selectedChoiceOID) ){
										var matchingChoiceStatus = currentBasePage_Assessment_OutputList[j].choiceOptions[k].outputStatus.toLowerCase();
										selectionStatusTypes[ matchingChoiceStatus ] = true;
										break cycleInner2;
									}
								}
								incrementer++;
							}
						}
					}	
					/*/
					
				break;
				case "Ranking":
					// each learner choice should be incrementing in order from 1
					for( var a = 0 ; a < context.choiceIDList.length ; a++ ){
						if( Number( context.choiceIDList[a] ) == (a + 1) ){
							//selectionStatusTypes[ 0 ][ 1 ] = true;
							selectionStatusTypes.correct = true;
						}else{
							//selectionStatusTypes[ 1 ][ 1 ] = true;
							selectionStatusTypes.incorrect = true;
						}
					}
					choiceStatusMatchList_Ref = 		context.correctList;
					choiceStatusMatchList_Selections = 	context.choiceIDList;
				break;
			}
		break;
	}
	
	//console.log( "scoreResult main stream after filter processor = " + scoreResult );
	
	//console.log( "selectionStatusTypes = " + selectionStatusTypes.join("_" ) );
	console.log( "selectionStatusTypes after filter proc = " + JSON.stringify( selectionStatusTypes , null , 4 ) );
	
	// build status combo to check against ruleset
	var trueStatus = []; // streamlined array for status combo build and status priority list check
	if( selectionStatusTypes.nullify == true ){
		//console.log( "Nullify 0" );
		trueStatus.push( "Nullify" );
	}else{
		if( selectionStatusTypes.correct == true ){
			trueStatus.push( "Correct" );
		}
		if( selectionStatusTypes.incorrect == true ){
			trueStatus.push( "Incorrect" );
		}
		if( selectionStatusTypes.partial == true ){
			trueStatus.push( "Partial" );
		}
		if( selectionStatusTypes.neutral == true ){
			trueStatus.push( "Neutral" );
		}
	}
	/*
	for( var a = 0 ; a < selectionStatusTypes.length ; a++ ){
		if( selectionStatusTypes[ a ][1] == true ){
			trueStatus.push( selectionStatusTypes[a][0] );
		}
	}
	*/
	// legacy check for noncorrectdefaulthandler, convert target output to the quasiCorrect target
	cycleHandlingData1:
	for( var b = 0 ; b < outputDataList.length ; b++ ){
		if( outputDataList[b].nonCorrectDefaultHandler != undefined && outputDataList[b].nonCorrectDefaultHandler == "true" || outputDataList[b].nonCorrectDefaultHandler == true ){
			quasiCorrect = outputDataList[b].outputStatus;
			break cycleHandlingData1;
		}
	}
	if( quasiCorrect == "Default" || quasiCorrect == undefined || quasiCorrect == "" ){ // if not supplied, or is default, then look at tree of default fallbacks
		quasiCorrect = unCorrectTargeter();
	}
	if( dirtyCorrect == "Default" || dirtyCorrect == undefined || dirtyCorrect == "" ){ // if not supplied, or is default, then look at tree of default fallbacks
		dirtyCorrect = unCorrectTargeter();
	}
	var statusCombo = trueStatus.join('_'); 
	// check status combo against ruleset
	var statusComboChecker = {
		"Correct" : 							"Correct",		// pure correct, only possible combo for correct result
		"Correct_Incorrect" : 					dirtyCorrect, //"Incorrect", 	// incorrect overrides correct
		"Correct_Incorrect_Partial" : 			dirtyCorrect, //"Partial", 		// partial overrides correct, incorrect
		"Correct_Incorrect_Partial_Neutral" : 	dirtyCorrect, //"Partial", 		// partial overrides correct, incorrect, neutral
		"Correct_Incorrect_Neutral" : 			dirtyCorrect, //"Incorrect", 	// incorrect overrides neutral
		"Correct_Partial" : 					dirtyCorrect, //"Partial",		// partial overrides correct
		"Correct_Partial_Neutral" : 			dirtyCorrect, //"Partial",		// partial overrides correct, neutral
		"Correct_Neutral" : 					dirtyCorrect, //"Neutral",		// neutral overrides correct
		"Incorrect" : 							"Incorrect",	// pure incorrect
		"Incorrect_Partial" : 					"Partial",		// partial overrides incorrect
		"Incorrect_Partial_Neutral" : 			"Partial",		// partial overrides incorrect, neutral
		"Incorrect_Neutral" : 					"Incorrect",	// incorrect overrides neutral
		"Partial" : 							"Partial",		// pure partial
		"Partial_Neutral" : 					"Partial",		// partial overrides neutral
		"Neutral" : 							"Neutral",		// pure neutral 
		"Nullify" : 							"Nullify"		// pure nullify 
	};
	var statusComboResult = statusComboChecker[statusCombo];
	//console.log( "dirtyCorrect = " + dirtyCorrect );
	console.log( "statusCombo = " + statusCombo );
	console.log( "statusComboResult = " + statusComboResult );
	// look for non-match in selections vs. reference
	var completeMatch = 		true; // disprove later // instant match of all positive selection item pairs
	
	//console.log( "choiceStatusMatchList_Ref = " + choiceStatusMatchList_Ref );
	//console.log( "choiceStatusMatchList_Selections = " + choiceStatusMatchList_Selections );
	
	//switch( handlingType ){
		//case "AMAMC" :
		//case "WriteInFieldList" :
			
		//break;
	//}
	
	/*
	if( statusComboResult == "Correct"){
		if( checkForVitalMatching && 
			vitalExpectedList.length > 0 && 
			countVitalMatches > 0 && 
			//countVitalMatches < Number(inputFieldAssessment.handleParams.filledFields.minFilled) ){
			countVitalMatches < vitalExpectedList.length ){
			statusComboResult = quasiCorrect;
		}
	}
	*/
	
	// choiceStatusMatchList_Ref | nodeAssessment_SpecialHandling_OutputStatusMatchList = ["on", "off"] 
	// (list of items that should be correct) 
	// -- is empty on samc
	// -- is ["on", "off", "pattern"] on amamc 
	
	// nodeAssessment_SpecialHandling_VitalCorrectMatchList = ["on", "off"] 
	// (list of items that must, vitally be correct) 
	// -- doesn't exist on samc (can make empty instead)
	// -- is empty on mamc, matching, ranking 
	// -- exists on write-in, amamc
	
	//console.log( "completeMatch 0 = " + completeMatch );
	
	switch( action ){
		case "choiceSelectionUpdate" : // match all positions
			switch( handlingType ){
				case "WriteInFieldList":
					//checkForCompleteMatchBreak : 
					//for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						
						// this needs more advanced comparison method
						// choiceStatusMatchList_Selections input values may be "out of order" compared to choiceStatusMatchList_Ref
						
						// choiceStatusMatchList_Ref = ["on", "off", "off", "off"] 
						// choiceStatusMatchList_Selections = ["input1text", "input2text", "input3text", "input4text"]
						//console.log( " choiceStatusMatchList_Ref[a] = " + choiceStatusMatchList_Ref[a] );
						//console.log( " choiceStatusMatchList_Selections[a] = " + choiceStatusMatchList_Selections[a] );
						//console.log( " inputListCompleteMatch = " + inputListCompleteMatch );
						//if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
						if( !inputListCompleteMatch ){
							completeMatch = false; // set false at first occurrence of mismatch
							//break checkForCompleteMatchBreak;
						}
					//}
					if( statusComboResult == "Correct"){
						if( checkForVitalMatching ){
							//for( var a = 0 ; a < scanChoiceList.length ; a++ ){
							//console.log( "countTotalVitals = " + countTotalVitals );
							//console.log( "countVitalMatches = " + countVitalMatches );
							if( countTotalVitals > 0 ){
								if( countVitalMatches < countTotalVitals ){
									completeMatch = false;
								}else{
									completeMatch = true;
								}
							}
						}
					}
				break;
				case "MAMC":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						// choiceStatusMatchList_Ref = ["on", "off", "off", "off"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
				case "AMAMC":
					/*
					var patternsPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules;
					var patternSets = {
						'and' : [],
						'or' : [],
						'avoid' : []
					};
					for( var a = 0 ; a < patternsPath.andPatterns.length ; a++ ){
						var patternDataObj = {
							'correctMatched' : false ,
							'patternMembers' : []
						}
						for( var b = 0 ; b < patternsPath.andPatterns[a].choices.length ; b++ ){
							var choiceObj = {};
							choiceObj.index = 			Number( patternsPath.andPatterns[a].choices[b] );
							choiceObj.selectedStatus = 	false;
							patternDataObj.patternMembers.push( choiceObj );
						}
						patternSets.and.push( patternDataObj );
					}
					for( var a = 0 ; a < patternsPath.orPatterns.length ; a++ ){
						var patternDataObj = {
							'correctMatched' : false ,
							'patternMembers' : []
						}
						for( var b = 0 ; b < patternsPath.orPatterns[a].choices.length ; b++ ){
							var choiceObj = {};
							choiceObj.index = 			Number( patternsPath.orPatterns[a].choices[b] );
							choiceObj.selectedStatus = 	false;
							patternDataObj.patternMembers.push( choiceObj );
						}
						patternSets.or.push( patternDataObj );
					}
					for( var a = 0 ; a < patternsPath.avoidPatterns.length ; a++ ){
						var patternDataObj = {
							'correctMatched' : false ,
							'patternMembers' : []
						}
						for( var b = 0 ; b < patternsPath.avoidPatterns[a].choices.length ; b++ ){
							var choiceObj = {};
							choiceObj.index = 			Number( patternsPath.avoidPatterns[a].choices[b] );
							choiceObj.selectedStatus = 	false;
							patternDataObj.patternMembers.push( choiceObj );
						}
						patternSets.avoid.push( patternDataObj );
					}
					*/
					
					//console.log( "patternSets init = " + JSON.stringify( patternSets , null , 4 ) );
					
					//console.log( "choiceStatusMatchList_Ref = " + JSON.stringify( choiceStatusMatchList_Ref , null , 4 ) );
					//console.log( "choiceStatusMatchList_Selections = " + JSON.stringify( choiceStatusMatchList_Selections , null , 4 ) );
					
					
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						
						// need to check on pattern ref elements
						
						// choiceStatusMatchList_Ref = ["on", "pattern", "off", "off"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						
						// idea 1 - build a quick array set of the patterns, with the required inner choices listed as off
						// -- as we cycle, we toggle those choice elements on respectively
						// -- after this process, can check for patterns that are incomplete
						// -- similar checking process for vitals, as they should follow same on/off/pattern notation as the reference list
						
						if( choiceStatusMatchList_Ref[a] == "pattern" ){
							/*
							var checkSelectStatus = choiceStatusMatchList_Selections[a]; // on, off
							// all selected for correct match
							for( var b = 0 ; b < patternSets.and.length ; b++ ){
								for( var c = 0 ; c < patternSets.and[b].patternMembers.length ; c++ ){
									if( patternSets.and[b].patternMembers[c].index == (a+1) && checkSelectStatus == "on" ){
										patternSets.and[b].patternMembers[c].selectedStatus = true;
									}
								}
							}
							// only one selected for correct match
							var orPatternMatched = false;
							for( var b = 0 ; b < patternSets.or.length ; b++ ){
								for( var c = 0 ; c < patternSets.or[b].patternMembers.length ; c++ ){
									if( patternSets.or[b].patternMembers[c].index == (a+1) && checkSelectStatus == "on" ){
										patternSets.or[b].patternMembers[c].selectedStatus = true;
									}
								}
							}
							// none selected for correct match
							for( var b = 0 ; b < patternSets.avoid.length ; b++ ){
								for( var c = 0 ; c < patternSets.avoid[b].patternMembers.length ; c++ ){
									if( patternSets.avoid[b].patternMembers[c].index == (a+1) && checkSelectStatus == "on" ){
										patternSets.avoid[b].patternMembers[c].selectedStatus = true;
									}
								}
							}
							*/
							
							
							/*
							cycleAndPatterns:
							for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns.length ; b++ ){
								cycleAndPatternChoices:
								for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].choices.length ; c++ ){
									if( currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].choices[c] == (a+1) ){
										if( currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].statusMatch == "Correct" ){
											nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'on-and_' + (b+1) );
											inPatternMatchFound = true;
											break cycleAndPatterns;
										}
									}
								}
							}
							if( !inPatternMatchFound ){
								cycleOrPatterns:
								for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns.length ; b++ ){
									cycleOrPatternChoices:
									for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].choices.length ; c++ ){
										if( currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].choices[c] == (a+1) ){
											if( currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].statusMatch == "Correct" ){
												nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'on-or_' + (b+1) );
												inPatternMatchFound = true;
												break cycleOrPatterns;
											}
										}
									}
								}
							}
							if( !inPatternMatchFound ){
								cycleAvoidPatterns:
								for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns.length ; b++ ){
									cycleAvoidPatternChoices:
									for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].choices.length ; c++ ){
										if( currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].choices[c] == (a+1) ){
											if( currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].statusMatch == "Correct" ){
												nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'off-avoid_' + (b+1) ); //needs to be off, not on
												inPatternMatchFound = true;
												break cycleAvoidPatterns;
											}
										}
									}
								}
							}
							if( !inPatternMatchFound ){
								nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off');
							}
							*/
							
							// NEED TO CHECK VITAL REQUIREMENT
							
						}else{
							//console.log( "choiceStatusMatchList_Ref[a] = " + choiceStatusMatchList_Ref[a] );
							//console.log( "choiceStatusMatchList_Selections[a] = " + choiceStatusMatchList_Selections[a] );
							if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
								completeMatch = false; // set false at first occurrence of mismatch
								break checkForCompleteMatchBreak;
							}
							
							// NEED TO CHECK VITAL REQUIREMENT
							
						}
						
					}
					
					if( !allPatternsAreMatched ){
						completeMatch = false;
					}
					
					//console.log( "patternSets updated = " + JSON.stringify( patternSets , null , 4 ) );
					
					if( statusComboResult == "Correct"){
						if( checkForVitalMatching ){
							//for( var a = 0 ; a < scanChoiceList.length ; a++ ){
							//console.log( "countTotalVitals = " + countTotalVitals );
							//console.log( "countVitalMatches = " + countVitalMatches );
							if( countTotalVitals > 0 ){
								if( countVitalMatches < countTotalVitals ){
									completeMatch = false;
								}else{
									completeMatch = true;
								}
							}
						}
					}
					
				break;
				case "Matching":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						
						// current comparison method seems like it won't work! (not QA tested?!) 
						
						// choiceStatusMatchList_Ref = ["1", "2", "5", "6"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
				case "Ranking":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						// choiceStatusMatchList_Ref = ["on", "off", "off", "off"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
			}
		break;
		case "pathScoreTally" : // id exists in selection and reference
			switch( handlingType ){
				case "WriteInFieldList":
					/*
					if( !inputListCompleteMatch ){
						completeMatch = false; // set false at first occurrence of mismatch
					}
					if( statusComboResult == "Correct"){
						if( checkForVitalMatching ){
							if( countTotalVitals > 0 ){
								if( countVitalMatches < countTotalVitals ){
									completeMatch = false;
								}else{
									completeMatch = true;
								}
							}
						}
					}
					*/
				break;
				case "MAMC":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						// choiceStatusMatchList_Ref[a] = ["1", "2", "4"] 
						//choiceStatusMatchList_Selections = ["1", "2", "4"]
						if( choiceStatusMatchList_Selections.indexOf( choiceStatusMatchList_Ref[a] ) == -1 ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
				case "AMAMC":
					/*
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						if( choiceStatusMatchList_Ref[a] == "pattern" ){
							// NEED TO CHECK VITAL REQUIREMENT
						}else{
							if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
								completeMatch = false; // set false at first occurrence of mismatch
								break checkForCompleteMatchBreak;
							}
							// NEED TO CHECK VITAL REQUIREMENT
						}
					}
					if( !allPatternsAreMatched ){
						completeMatch = false;
					}
					if( statusComboResult == "Correct"){
						if( checkForVitalMatching ){
							if( countTotalVitals > 0 ){
								if( countVitalMatches < countTotalVitals ){
									completeMatch = false;
								}else{
									completeMatch = true;
								}
							}
						}
					}
					*/
				break;
				case "Matching":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						
						// current comparison method seems like it won't work! (not QA tested?!) 
						
						// choiceStatusMatchList_Ref = ["1", "2", "5", "6"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
				case "Ranking":
					checkForCompleteMatchBreak : 
					for( var a = 0 ; a < choiceStatusMatchList_Ref.length ; a++ ){
						// choiceStatusMatchList_Ref = ["on", "off", "off", "off"] 
						// choiceStatusMatchList_Selections = ["off", "off", "off", "off"]
						if( choiceStatusMatchList_Ref[a] != choiceStatusMatchList_Selections[a] ){
							completeMatch = false; // set false at first occurrence of mismatch
							break checkForCompleteMatchBreak;
						}
					}
				break;
			}
		break;
	}
	//console.log( "statusComboResult = " + statusComboResult );
	//console.log( "completeMatch 1 = " + completeMatch );
	var useResult;
	var manipulableResult;
	
	//console.log( "scoringMethod = " + scoringMethod );
	
	//console.log( "scoreResult 1 = " + scoreResult );
	
	if( statusComboResult == "Correct" ){ // if selection combo only has Correct choice(s)
		if( !completeMatch ){ // if isn't the exact correct choice selection array
			cycleHandlingData2: // if some selections are Correct but not all of them - thus it is not completely correct
			for( var b = 0 ; b < outputDataList.length ; b++ ){
				if( outputDataList[b].outputStatus == quasiCorrect ){ 
					manipulableResult = JSON.parse( JSON.stringify(outputDataList[b]) );
					switch( scoringMethod ){
						case "Sum Selections" :
							if( manipulableResult.outputStatus != "Nullify" ){
								if( manipulableResult.scoring == undefined ){
									manipulableResult.scoring = {};
								}
								manipulableResult.scoring.scoreVal = scoreResult;
							}
							useResult = manipulableResult;
						break;
						case "Special Handler" :
							useResult = outputDataList[b]; // could this be used for both, and remove action switch?
						break;
					}
					break cycleHandlingData2;
				}
			}
		}else{ // if the selected Correct array exactly matches the keyed Correct choices, use the Correct handler
			cycleHandlingData2:
			for( var b = 0 ; b < outputDataList.length ; b++ ){
				//console.log( "outputDataList[b] = " + JSON.stringify( outputDataList[b] , null , 4 ) );
				if( outputDataList[b].outputStatus == "Correct" ){
					manipulableResult = JSON.parse( JSON.stringify(outputDataList[b]) );
					switch( scoringMethod ){
						case "Sum Selections" :
							if( manipulableResult.outputStatus != "Nullify" ){
								if( manipulableResult.scoring == undefined ){
									manipulableResult.scoring = {};
								}
								manipulableResult.scoring.scoreVal = scoreResult;
							}
							useResult = manipulableResult;
						break;
						case "Special Handler" :
							useResult = outputDataList[b]; // could this be used for both, and remove action switch?
						break;
					}
					break cycleHandlingData2;
				}
			}
		}
	}else{ // if does NOT only contain Correct selections
		// if it has 1 or more Correct selections
		cycleHandlingData2:
		for( var b = 0 ; b < outputDataList.length ; b++ ){
			if( outputDataList[b].outputStatus == statusComboResult ){
				manipulableResult = JSON.parse( JSON.stringify(outputDataList[b]) );
				switch( scoringMethod ){
					case "Sum Selections" :
						if( manipulableResult.outputStatus != "Nullify" ){
							if( manipulableResult.scoring == undefined ){
								manipulableResult.scoring = {};
							}
							manipulableResult.scoring.scoreVal = scoreResult;
						}
						useResult = manipulableResult;
					break;
					case "Special Handler" :
						useResult = outputDataList[b]; // could this be used for both, and remove action switch?
					break;
				}
				break cycleHandlingData2;
			}
		}
	}
	
	switch( scoringMethod ){
		case "Sum Selections" :
			//prepWriteInFieldListScoreList.push( expectedInputs[expectedInputIteration].scoring.scoreFilledMatch );
		break;
		case "Special Handler" :
			//scoreResult
		break;
	}
	//console.log( "useResult = " + useResult );
	//console.log( "useResult = " + JSON.stringify( useResult , null , 4 ) );
	//console.log( "===================" );
	masterJSONStorage.currentStepAssessmentResult.useResult = useResult;
	return useResult;
	
	function scoreListProcessor(rawScoreList){
		//console.log( "rawScoreList = " + rawScoreList );
		for( var a = rawScoreList.length ; a >=0 ; a-- ){
		    if( rawScoreList[a] == "+0.00" || rawScoreList[a] == "-0.00" ){
		        rawScoreList.splice( a , 1);
		    }
		}
		//console.log( "rawScoreList =  " + rawScoreList.join(" ::: ") );
		var positiveList = 	[];
		var negativeList = 	[];
		for( var a = 0 ; a < rawScoreList.length ; a++ ){
			switch( rawScoreList[a].substring(0,1) ){
				case "+" : // sum positive adjustments first
					positiveList.push( rawScoreList[a].substr(1) );
				break;
				case "-" : // then subtract sum of negatives
					negativeList.push( rawScoreList[a].substr(1) );
				break;
			}
		}
		var sumPos = 	positiveList.reduce( sumFloat , 0 ); // sumFloat is a global function
		var sumNeg = 	negativeList.reduce( sumFloat , 0 );
		resultScore = (sumPos - sumNeg).toFixed(2);
		finalScore = "+0.00";
		//if( resultScore > baseLineScore ){ // this needed?
		if( String(resultScore).charAt(0) == "-" ){
			finalScore = String(resultScore);
		}else{
			finalScore = "+" + String(resultScore);
		}
		return finalScore;
	}
	
	function filterProcessor(context){
		
		//handlingType = context.handlingType;
		/*
		switch( action ){
			case "choiceSelectionUpdate" : 
				
			break;
			case "pathScoreTally" : 
				
			break;
		}
		
		// cycle choices in userpath, set selections to true
		for( var a = 0 ; a < scanChoiceList.length ; a++ ){ // cycle choices of structure node
			var mamcChoiceStatus = scanChoiceList[ a ].outputStatus.toLowerCase(); // Correct, Incorrect, Partial, Neutral
			selectionStatusTypes[ mamcChoiceStatus ] = true;
			//if( context.choiceIDList.indexOf( String(a+1) ) != -1 ){ // choice selection status doesn't already exist in the status types selected chain
				//for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
					//if( selectionStatusTypes[ b ][ 0 ] == mamcChoiceStatus ){
						//selectionStatusTypes[ b ][ 1 ] = true;
					//}
				//}
			//}
		}
		choiceStatusMatchList_Ref = 		context.correctList; // set as strings at array creation, only provided by tally action
		choiceStatusMatchList_Selections = 	context.choiceIDList; // should be strings, not numbers, only provided by tally action
		
		*/
		switch( handlingType ){
			case "MAMC" :
				var mamcSelectionArray = 	[];
				
				switch( action ){
					case "choiceSelectionUpdate" : 
						for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
							if( pageAssessmentSelectionArray[0][a] == "on" ){
								mamcSelectionArray.push( Number(currentBasePage_Assessment_OutputList[a].choiceID)-1 );
								//console.log( "amamcSelectionArray = " + amamcSelectionArray );
							}
						}
					break;
					case "pathScoreTally" : 
						
					break;
				}
				
				var prepMAMCScoreList = [];
				var prepMAMCStatusList = [];
				/*
				for( var a = 0 ; a < scanChoiceList.length ; a++ ){
					var mamcChoiceStatus = scanChoiceList[ a ]; // on, off
					if( mamcChoiceStatus == "on" ){ // choice selection status is on... need another for off (for "unselected" handling)?
						//for( var b = 0 ; b < selectionStatusTypes.length ; b++ ){
							//if( selectionStatusTypes[ b ][ 0 ] == currentBasePage_Assessment_OutputList[a].outputStatus ){
								//selectionStatusTypes[ b ][ 1 ] = true; // indicate at least once instance of given status exists as output possibility
							//}
						//}
						var matchingChoiceStatus = currentBasePage_Assessment_OutputList[a].outputStatus.toLowerCase();
						selectionStatusTypes[ matchingChoiceStatus ] = true;
					}
				}
				*/
				/*
				for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
					if( pageAssessmentSelectionArray[0][a] == "on" ){
						mamcSelectionArray.push(a);
					}
				}
				*/
				
				//var scanChoiceList = 	context.scanChoiceList; // checkForMamcChoices | pageAssessmentSelectionArray[0]
				//console.log( "scanChoiceList 2 = " + JSON.stringify( scanChoiceList , null , 4 ) );
				
				var mamcScoreList = [];
				cycleChoiceList:
				for( var a = 0 ; a < scanChoiceList.length ; a++ ){ // scanChoiceList will not be shuffled
					//console.log( "a = " + a );
					
					var selectionStatusCheck;
					switch( action ){
						case "choiceSelectionUpdate" : 
							if( currentBasePage_Assessment_Variant == "Media" ){
								var grabChoiceIDRaw = 				$( '.mediaGridBoxOuter:nth-child(' + (a+1) + ' )' ).attr( 'data-mamcChoice' );
							}else{
								var grabChoiceIDRaw = 				$( '.choiceList_Item:nth-child(' + (a+1) + ' )' ).attr( 'data-mamcChoice' );
							}
					  		var grabChoiceIDPrep = 				grabChoiceIDRaw.split("-");
					  		var grabChoiceID = 					grabChoiceIDPrep[1];
					  		//console.log( "grabChoiceID = " + grabChoiceID );
					  		//nodeAssessment_SpecialHandling_OutputStatusMatchList[a]
					  		var choiceIndex = 					Number( grabChoiceID ) - 1;
					  		var scanChoiceID = 					Number( grabChoiceID ) - 1;
					  		if( currentBasePage_Assessment_Variant == "Media" ){
								selectionStatusCheck = $( '.mediaGridBoxOuter:nth-child(' + (a+1) + ' )' ).attr( 'data-selectionStatus' );
							}else{
								selectionStatusCheck = $( '.choiceList_Item:nth-child(' + (a+1) + ' )' ).attr( 'data-selectionStatus' );
							}
					  		var checkOutputStatus = currentBasePage_Assessment_OutputList[choiceIndex].outputStatus;
					  		//var checkRequire = currentBasePage_Assessment_OutputList[choiceIndex].require;
					  		//var checkRequire = currentBasePage_Assessment_OutputList[choiceIndex].selectionRequirement;
						break;
						case "pathScoreTally" : 
							var choiceIndex = 	a;
							var scanChoiceID = 	a;
							selectionStatusCheck = "Unselected";
							userPathLoop: // cycle the learner's chain of step ids and choices
							for( var b = 0 ; b < currentPathHistory.length ; b++ ){
								//var stepChainIteration = 0;
								//var structureNodePath;
								var splitStepID = 					currentPathHistory[b].split(":");
								var grabStepID = 					splitStepID[0];
								//if( Number(grabStepID) == (a+1) ){
								if( Number(grabStepID) == componentStep ){
									//selectionStatusCheck = "Selected";
									//break;
									var selectionsMade = 		splitStepID[1];
									if( selectionsMade != undefined && selectionsMade !== '' ){ // if assessment exists
										var splitSelectionsMade = 	selectionsMade.split(",");
										for( var c = 0 ; c < splitSelectionsMade.length ; c++ ){
											if( Number( splitSelectionsMade[c] ) == (a+1) ){
												selectionStatusCheck = "Selected";
												break userPathLoop;
											}
										}
									}
								}
							}
							var checkOutputStatus = targetStep.mamcChoices[choiceIndex].outputStatus;
							//var checkRequire = 		targetStep.amamcChoices[choiceIndex].require;
						break;
					}
					
					switch( selectionStatusCheck ){ // act on choices in stack that are selected/on
						case "Selected" :
							switch( action ){
								case "choiceSelectionUpdate" : 
									//console.log( "currentBasePage_Assessment_OutputList[a].outputStatus = " + currentBasePage_Assessment_OutputList[a].outputStatus );
									prepMAMCStatusList.push( currentBasePage_Assessment_OutputList[a].outputStatus );
									//console.log( "currentBasePage_Assessment_OutputList[a].outputStatus = " + JSON.stringify( currentBasePage_Assessment_OutputList[a].outputStatus , null , 4 ) );
									switch( scoringMethod ){
										case "Sum Selections" :
											
											if( mamcSelectionArray.indexOf( choiceIndex ) != -1 ){
												//console.log( "amamcSelectionArray - index of a+1 = " + amamcSelectionArray.indexOf( (a+1) ) );
												if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring != undefined ){
													prepMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.selected );
												}
											}
											
											/*
											for( var b = 0 ; b < masterJSONStorage.currentStep.Assessment.outputs.length ; b++ ){
												if( mamcSelectionArray.indexOf(b) != -1 ){
													if( masterJSONStorage.currentStep.Assessment.outputs[b].scoring != undefined ){
														prepMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[b].scoring.selected );
													}
												}else{
													if( masterJSONStorage.currentStep.Assessment.outputs[b].scoring != undefined ){
														if( masterJSONStorage.currentStep.Assessment.outputs[b].scoring.unselected != undefined ){
															prepMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[b].scoring.unselected );
														}
													}
												}
											}
											*/
											//scoreResult = scoreListProcessor(mamcScoreList);
										break;
										case "Special Handler" :
											
										break;
									}
								break;
								case "pathScoreTally" : 
									prepMAMCStatusList.push( targetStep.mamcChoices[choiceIndex].outputStatus );
									
									switch( scoringMethod ){
										case "Sum Selections" :
											if( targetStep.mamcChoices[choiceIndex].scoring != undefined ){
												if( targetStep.mamcChoices[choiceIndex].scoring.selected != undefined ){
													prepMAMCScoreList.push( targetStep.mamcChoices[choiceIndex].scoring.selected );
												}
											}
										break;
										case "Special Handler" :
											
										break;
									}
									
									
								break;
							}
						break;
						case "Unselected" :
				  			/*if( inputFieldAssessment.outputs[choiceIndex].scoring.unselected != undefined &&
				  				inputFieldAssessment.outputs[choiceIndex].scoring.unselected != '' ){
					  			prepScoreList.push( inputFieldAssessment.outputs[choiceIndex].scoring.unselected );
				  			}*/
				  			switch( action ){
					  			case "choiceSelectionUpdate" : 
									//prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus );
									switch( scoringMethod ){
										case "Sum Selections" :
											/*
											if( scanChoiceList[ a ].scoring != undefined ){
												if( scanChoiceList[ a ].scoring.unselected != undefined ){
													prepAMAMCScoreList.push( scanChoiceList[ a ].scoring.unselected );
												}
											}
											*/
											//if( amamcSelectionArray.indexOf(a) == -1 ){
											if( mamcSelectionArray.indexOf( choiceIndex ) == -1 ){
												if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring != undefined ){
													if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.unselected != undefined ){
														prepMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.unselected );
													}
												}
											}
										break;
										case "Special Handler" :
											
										break;
									}
								break;
								case "pathScoreTally" : 
									switch( scoringMethod ){
										case "Sum Selections" :
											if( targetStep.mamcChoices[choiceIndex].scoring != undefined ){
												if( targetStep.mamcChoices[choiceIndex].scoring.unselected != undefined ){
													prepAMAMCScoreList.push( targetStep.mamcChoices[choiceIndex].scoring.unselected );
												}
											}
										break;
										case "Special Handler" :
											
										break;
									}
								break;
							}
				  		break;
					}
				}	
				
				/*
				if( masterJSONStorage.currentStep.Assessment.scoring.captureMethod == "Sum Selections" ){
					for( var a = 0 ; a < masterJSONStorage.currentStep.Assessment.outputs.length ; a++ ){
						if( mamcSelectionArray.indexOf(a) != -1 ){
							if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
								mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.selected );
							}
						}else{
							if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
								if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected != undefined ){
									mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected );
								}
							}
						}
					}
					//console.log( "MAMC mamcScoreList =  " + mamcScoreList );
					scoreResult = scoreListProcessor(mamcScoreList);
				}else{
					// use the funneled result function return
					//scoreResult = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
				}
				*/
				/*
				switch( scoringMethod ){
					case "Sum Selections" :
						scoreResult = scoreListProcessor( prepAMAMCScoreList );
					break;
					case "Special Handler" :
						
					break;
				}
				*/
				//console.log( "prepMAMCStatusList = " + JSON.stringify( prepMAMCStatusList , null , 4 ) );
				//console.log( "prepMAMCScoreList = " + JSON.stringify( prepMAMCScoreList , null , 4 ) );
				
				cycleStatusList:
				for( var a = 0 ; a < prepMAMCStatusList.length ; a++ ){
					//console.log( "rawStatusList[a] = " + rawStatusList[a] );
				    switch( prepMAMCStatusList[a] ){
					    case "Correct" :
					    	selectionStatusTypes.correct = 		true;
					    break;
					    case "Incorrect" :
					    	selectionStatusTypes.incorrect = 	true;
					    break;
					    case "Partial" :
					    	selectionStatusTypes.partial = 		true;
					    break;
					    case "Neutral" :
					    	selectionStatusTypes.neutral = 		true;
					    break;
				    }
		    	}
				
				switch( scoringMethod ){
					case "Sum Selections" :
						//console.log( "prepAMAMCScoreList = " + prepAMAMCScoreList );
						scoreResult = scoreListProcessor( prepMAMCScoreList );
						//console.log( "scoreResult = " + scoreResult );
					break;
					case "Special Handler" :
						
					break;
				}
				
			break;
			case "AMAMC" : 
				switch( action ){
					case "choiceSelectionUpdate" : 
						//var funneledHandlingRulesPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules;
					break;
					case "pathScoreTally" : 
						//var funneledHandlingRulesPath = targetStep.amamcRules;
					break;
				}
				/*
				reference: 
				var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
					'action' : 				"pathScoreTally" , 
					'handlingType' : 		checkForSpecialHandling.type ,
					'moduleGroup' : 		courseModule_Group , 
					'moduleComponent' : 	courseModule_Module , 
					'componentStep' : 		grabStepID , 
					'scanChoiceList' : 		checkForSpecialHandling.data ,
					'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
					'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
					'choiceIDList' :		choiceIDList , // only passed with tally action
					'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
				});
				*/
				
				var targetChoiceID;
				var grabChoiceSelectionStatus;
				checkForVitalMatching = 	true;
				var setCheckList = [];
				var patternResultStatus;
				var patternResultScore;
				var patternedIDList = [];
				var prepAMAMCScoreList = [];
				var prepAMAMCStatusList = [];
				//var allPatternsAreMatched = true;
				var patternIndexPath;
				
				//console.log( "countTotalVitals before pattern tally = " + countTotalVitals );
				
				tallyPatternResults({
					'patternType' : 	"and"	
				});
				tallyPatternResults({
					'patternType' : 	"or"	
				});
				tallyPatternResults({
					'patternType' : 	"avoid"	
				});
				
				//console.log( "countTotalVitals after pattern tally = " + countTotalVitals );
				
				/*
				patternedIDList and prepAMAMCStatusList are now populated, add non-patterned choices to prepAMAMCStatusList below 
				*/
				
				//console.log( "action = " + action );
				
				var amamcSelectionArray = 	[];
				
				switch( action ){
					case "choiceSelectionUpdate" : 
						for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
							if( pageAssessmentSelectionArray[0][a] == "on" ){
								//amamcSelectionArray.push(b); // gets the after-shuffled position 
								//var grabSelectedChoiceID = data-amamcChoice="1-2"
								//amamcSelectionArray.push(b); // gets the after-shuffled index of the toggled-on choice
								//amamcSelectionArray.push( Number(currentBasePage_Assessment_OutputList[b].choiceID) );
								amamcSelectionArray.push( Number(currentBasePage_Assessment_OutputList[a].choiceID)-1 );
								//console.log( "amamcSelectionArray = " + amamcSelectionArray );
							}
						}
					break;
					case "pathScoreTally" : 
						// "1,3,2"
						// ["1","3","2"]
						//for( var b = 0 ; b < learnerInputArray.length ; b++ ){
							//if( learnerInputArray[b] == "on" ){
								//amamcSelectionArray.push(b);
							//}
						//}
					break;
				}
				
//				console.log( "amamcSelectionArray = " + amamcSelectionArray );
				
				
				/* 
				during cycle of choice list data (cycle occurs on un-shuffled data):
				- if choice selection update, choiceIndex is the 
				*/
				
				cycleChoiceList:
				for( var a = 0 ; a < scanChoiceList.length ; a++ ){ // scanChoiceList will not be shuffled
					//var mamcChoiceStatus = scanChoiceList[ a ]; // on, off
					//if( mamcChoiceStatus == "on" ){ // choice selection status is on... need another for off (for "unselected" handling)?
						
						//var matchingChoiceStatus = currentBasePage_Assessment_OutputList[a].outputStatus.toLowerCase();
						//selectionStatusTypes[ matchingChoiceStatus ] = true;
					//}
					//var grabChoiceIDRaw = 				$(this).attr( 'data-amamcChoice' );
					var selectionStatusCheck;
					switch( action ){
						case "choiceSelectionUpdate" : 
							if( currentBasePage_Assessment_Variant == "Media" ){
								var grabChoiceIDRaw = 				$( '.mediaGridBoxOuter:nth-child(' + (a+1) + ' )' ).attr( 'data-amamcChoice' );
							}else{
								var grabChoiceIDRaw = 				$( '.choiceList_Item:nth-child(' + (a+1) + ' )' ).attr( 'data-amamcChoice' );
							}
					  		var grabChoiceIDPrep = 				grabChoiceIDRaw.split("-");
					  		var grabChoiceID = 					grabChoiceIDPrep[1];
					  		//console.log( "grabChoiceID = " + grabChoiceID );
					  		//nodeAssessment_SpecialHandling_OutputStatusMatchList[a]
					  		var choiceIndex = 					Number( grabChoiceID ) - 1;
					  		var scanChoiceID = 					Number( grabChoiceID ) - 1;
					  		if( currentBasePage_Assessment_Variant == "Media" ){
								selectionStatusCheck = $( '.mediaGridBoxOuter:nth-child(' + (a+1) + ' )' ).attr( 'data-selectionStatus' );
							}else{
								selectionStatusCheck = $( '.choiceList_Item:nth-child(' + (a+1) + ' )' ).attr( 'data-selectionStatus' );
							}
					  		var checkOutputStatus = currentBasePage_Assessment_OutputList[choiceIndex].outputStatus;
					  		//var checkRequire = currentBasePage_Assessment_OutputList[choiceIndex].require;
					  		var checkRequire = currentBasePage_Assessment_OutputList[choiceIndex].selectionRequirement;
						break;
						case "pathScoreTally" : 
							var choiceIndex = 	a;
							var scanChoiceID = 	a;
							selectionStatusCheck = "Unselected";
							userPathLoop: // cycle the learner's chain of step ids and choices
							for( var b = 0 ; b < currentPathHistory.length ; b++ ){
								//var stepChainIteration = 0;
								//var structureNodePath;
								var splitStepID = 					currentPathHistory[b].split(":");
								var grabStepID = 					splitStepID[0];
								//if( Number(grabStepID) == (a+1) ){
								if( Number(grabStepID) == componentStep ){
									//selectionStatusCheck = "Selected";
									//break;
									var selectionsMade = 		splitStepID[1];
									if( selectionsMade != undefined && selectionsMade !== '' ){ // if assessment exists
										var splitSelectionsMade = 	selectionsMade.split(",");
										for( var c = 0 ; c < splitSelectionsMade.length ; c++ ){
											if( Number( splitSelectionsMade[c] ) == (a+1) ){
												selectionStatusCheck = "Selected";
												break userPathLoop;
											}
										}
									}
								}
							}
							var checkOutputStatus = targetStep.amamcChoices[choiceIndex].outputStatus;
							var checkRequire = 		targetStep.amamcChoices[choiceIndex].require;
						break;
					}
					
					//console.log( action + " - checkOutputStatus = " + checkOutputStatus );
					//console.log( action + " - checkRequire = " + checkRequire );
					
					//console.log( "choiceIndex = " + choiceIndex );
					
					
			  		//if( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus != undefined &&
						//currentBasePage_Assessment_OutputList[choiceIndex].outputStatus != '' ){
				  		
			  		//}else{
				  		//if( patternedIDList.indexOf( grabChoiceID ) == -1 ){
							//console.log( "choiceIndex = " + choiceIndex );
							//console.log( "selectionStatusCheck " + a + " = " + selectionStatusCheck );
							//switch( $(this).attr( 'data-selectionStatus' ) ){
							if( checkRequire != undefined && 
				  				checkRequire == "Vital" ){
								countTotalVitals++;
							}
							switch( selectionStatusCheck ){ // act on choices in stack that are selected/on
						  		case "Selected" :
						  			/*if( inputFieldAssessment.outputs[choiceIndex].scoring.selected != undefined &&
						  				inputFieldAssessment.outputs[choiceIndex].scoring.selected != '' ){
							  			prepScoreList.push( inputFieldAssessment.outputs[choiceIndex].scoring.selected );
						  			}*/
						  			
						  			//masterJSONStorage.pathStructureSet[0][0].nodeMapUnits[2].amamcChoices[0].scoring 
						  			
						  			//if( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus != undefined &&
						  				//currentBasePage_Assessment_OutputList[choiceIndex].outputStatus != '' ){
							  		//if( targetStep.outputs[choiceIndex].outputStatus != undefined &&
							  		//if( targetStep.outputs[choiceIndex].outputStatus != "Pattern" ){
								  	if( checkOutputStatus != "Pattern" && // is "Pattern" when checking against structure
								  		checkOutputStatus != undefined &&
								  		checkOutputStatus != "" ){
							  			// non-patterned
							  			//if( patternedIDList.indexOf( grabChoiceID ) == -1 ){
							  				//prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus );
							  			//}
							  			//console.log( "NON pattern selected = " + prepPatternStatusList[prepPatternStatusList.length - 1] );
							  			
										//prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus );
										
										/*
										var mamcScoreList = [];
										if( masterJSONStorage.currentStep.Assessment.scoring.captureMethod == "Sum Selections" ){
											for( var a = 0 ; a < masterJSONStorage.currentStep.Assessment.outputs.length ; a++ ){
												if( mamcSelectionArray.indexOf(a) != -1 ){
													if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
														mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.selected );
													}
												}else{
													if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring != undefined ){
														if( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected != undefined ){
															mamcScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[a].scoring.unselected );
														}
													}
												}
											}
											//console.log( "MAMC mamcScoreList =  " + mamcScoreList );
											scoreResult = scoreListProcessor(mamcScoreList);
										}else{
											// use the funneled result function return
											//scoreResult = masterJSONStorage.currentStepAssessmentResult.useResult.scoring.scoreVal;
										}
										*/
										
										//console.log( "$$$ choiceIndex = " + choiceIndex );
										//console.log( "loop a = " + a );
										
										// currentBasePage_Assessment_OutputList is ordered post-shuffle
										// choiceIndex is the 0-index position of the selected choice, 
										// a from loop is the 0-index position of the selected choice
										
										switch( action ){
											case "choiceSelectionUpdate" : 
												
												prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[a].outputStatus );
												//console.log("MOOP0");
												switch( scoringMethod ){
													case "Sum Selections" :
														//console.log("MOOP1");
														//console.log( "scanChoiceList[ a ] = " + JSON.stringify( scanChoiceList[ a ] , null , 4 ) );
														/*
														if( scanChoiceList[ a ].scoring != undefined ){
															//console.log("MOOP2");
															if( scanChoiceList[ a ].scoring.selected != undefined ){
																//console.log("MOOP3");
																prepAMAMCScoreList.push( scanChoiceList[ a ].scoring.selected );
															}
														}
														*/
														//for( var a = 0 ; a < masterJSONStorage.currentStep.Assessment.outputs.length ; a++ ){
															//console.log( "amamcSelectionArray - index of " + (a+1) + " = " + amamcSelectionArray.indexOf( (a+1) ) );
															//if( amamcSelectionArray.indexOf( (a+1) ) != -1 ){
															if( amamcSelectionArray.indexOf( choiceIndex ) != -1 ){
																//console.log( "amamcSelectionArray - index of a+1 = " + amamcSelectionArray.indexOf( (a+1) ) );
																if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring != undefined ){
																	prepAMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.selected );
																}
															}
														//}
													break;
													case "Special Handler" :
														
													break;
												}
											break;
											case "pathScoreTally" : 
												prepAMAMCStatusList.push( targetStep.amamcChoices[choiceIndex].outputStatus );
												
												switch( scoringMethod ){
													case "Sum Selections" :
														if( targetStep.amamcChoices[choiceIndex].scoring != undefined ){
															if( targetStep.amamcChoices[choiceIndex].scoring.selected != undefined ){
																prepAMAMCScoreList.push( targetStep.amamcChoices[choiceIndex].scoring.selected );
															}
														}
													break;
													case "Special Handler" :
														
													break;
												}
												
												
											break;
										}
										
										//console.log( "checkRequire = " + checkRequire );
										
										if( checkRequire != undefined && 
							  				checkRequire == "Vital" ){
											countVitalMatches++;
										}
										
						  			}else{
							  			// patterned
							  			//if( patternedIDList.indexOf( grabChoiceID ) == -1 ){
							  				//prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus );
							  			//}
							  			/*
							  			if( currentBasePage_Assessment_OutputList[choiceIndex].require != undefined && 
							  				currentBasePage_Assessment_OutputList[choiceIndex].require == "Vital" ){
											countTotalVitals++;
										}
										*/
						  			}
						  		break;
						  		case "Unselected" :
						  			/*if( inputFieldAssessment.outputs[choiceIndex].scoring.unselected != undefined &&
						  				inputFieldAssessment.outputs[choiceIndex].scoring.unselected != '' ){
							  			prepScoreList.push( inputFieldAssessment.outputs[choiceIndex].scoring.unselected );
						  			}*/
						  			switch( action ){
							  			case "choiceSelectionUpdate" : 
											//prepAMAMCStatusList.push( currentBasePage_Assessment_OutputList[choiceIndex].outputStatus );
											switch( scoringMethod ){
												case "Sum Selections" :
													/*
													if( scanChoiceList[ a ].scoring != undefined ){
														if( scanChoiceList[ a ].scoring.unselected != undefined ){
															prepAMAMCScoreList.push( scanChoiceList[ a ].scoring.unselected );
														}
													}
													*/
													//if( amamcSelectionArray.indexOf(a) == -1 ){
													if( amamcSelectionArray.indexOf( choiceIndex ) == -1 ){
														if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring != undefined ){
															if( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.unselected != undefined ){
																prepAMAMCScoreList.push( masterJSONStorage.currentStep.Assessment.outputs[choiceIndex].scoring.unselected );
															}
														}
													}
												break;
												case "Special Handler" :
													
												break;
											}
										break;
										case "pathScoreTally" : 
											switch( scoringMethod ){
												case "Sum Selections" :
													if( targetStep.amamcChoices[choiceIndex].scoring != undefined ){
														if( targetStep.amamcChoices[choiceIndex].scoring.unselected != undefined ){
															prepAMAMCScoreList.push( targetStep.amamcChoices[choiceIndex].scoring.unselected );
														}
													}
												break;
												case "Special Handler" :
													
												break;
											}
										break;
									}
						  		break;
					  		}
				  		//}
			  		//}
				}
				
				console.log( "prepAMAMCStatusList = " + JSON.stringify( prepAMAMCStatusList , null , 4 ) );
				//console.log( "prepAMAMCScoreList = " + JSON.stringify( prepAMAMCScoreList , null , 4 ) );
				
				cycleStatusList:
				for( var a = 0 ; a < prepAMAMCStatusList.length ; a++ ){
					//console.log( "rawStatusList[a] = " + rawStatusList[a] );
				    switch( prepAMAMCStatusList[a] ){
					    case "Correct" :
					    	selectionStatusTypes.correct = 		true;
					    	//countCorrects++;
					    break;
					    case "Incorrect" :
					    	selectionStatusTypes.incorrect = 	true;
					    break;
					    case "Partial" :
					    	selectionStatusTypes.partial = 		true;
					    break;
					    case "Neutral" :
					    	selectionStatusTypes.neutral = 		true;
					    break;
					    case "Nullify" :
					    	//nullified = 						true;
					    	selectionStatusTypes.nullify = 		true;
					    	break cycleStatusList;
					    break;
				    }
		    	}
		    	
		    	switch( scoringMethod ){
					case "Sum Selections" :
						//console.log( "prepAMAMCScoreList = " + prepAMAMCScoreList );
						scoreResult = scoreListProcessor( prepAMAMCScoreList );
						//console.log( "scoreResult = " + scoreResult );
					break;
					case "Special Handler" :
						
					break;
				}
		    	
		    	function tallyPatternResults(context){
					// allow and & avoid patterns to have single member, this allows for more "advanced" scrutiny of selection (allows multiple status handling of a single selection) -- the results would be polar opposites in this case -- single member "and" patterns would be none if unselected, and single member "avoid" patterns would be none if selected
					var patternType = context.patternType;
					if( funneledHandlingRulesPath[patternType + "Patterns"] != undefined && 
						funneledHandlingRulesPath[patternType + "Patterns"] != '' ){
						// cycle sets of patterns in pattern type list	
						cyclePatternType:
						for ( var a = 0 ; a < funneledHandlingRulesPath[patternType + "Patterns"].length ; a++ ){
							// don't include pattern in results if a conflict exists
							if( funneledHandlingRulesPath[patternType + "Patterns"][a].patternConflict != undefined ){
								if( funneledHandlingRulesPath[patternType + "Patterns"][a].patternConflict == "No Members" || 
									funneledHandlingRulesPath[patternType + "Patterns"][a].patternConflict == "Insufficient Members" ){
									continue cyclePatternType;
								}
								//masterJSONStorage.currentStep.Assessment.specialHandling.rules.andPatterns[1].patternConflict
							}
							
							setCheckList = [];
							var patternIndex = a;
							// build a reference list of selection states of all indexed choices
						    patternIndexPath = funneledHandlingRulesPath[patternType + "Patterns"][patternIndex];
						    for ( var b = 0 ; b < patternIndexPath.choices.length ; b++ ) {
						    	patternItem = 					patternIndexPath.choices[b];
						    	if( patternedIDList.indexOf( patternItem ) == -1 ){
							    	patternedIDList.push( patternItem );
						    	}
						    	//console.log( "avoidPatternsItem = " + avoidPatternsItem );
						    	switch( action ){
									case "choiceSelectionUpdate" : 
										targetChoiceID = 				$( '[data-amamcChoice="1-' + patternItem + '"]' );
										grabChoiceSelectionStatus = 	targetChoiceID.attr( 'data-selectionStatus' );
									break;
									case "pathScoreTally" : 
										//targetChoiceID = 				
										grabChoiceSelectionStatus = 	"Unselected";
										if( choiceIDList.indexOf( Number(patternItem) ) != -1 || choiceIDList.indexOf( String(patternItem) ) != -1 ){
											grabChoiceSelectionStatus = 	"Selected";
										}
									break;
								}
						  		switch( grabChoiceSelectionStatus ){
							  		case "Selected" :
							  			setCheckList.push(1);
							  		break;
							  		case "Unselected" :
							  			setCheckList.push(0);
							  		break;
						  		}
						    }
						    //console.log( "pattern " + patternIndexPath.setLabel + " : setCheckList = " + setCheckList );
						    if( setCheckList.indexOf(0) != -1 && setCheckList.indexOf(1) == -1 ){ // no indexes in pattern selected
							   //console.log(" no indexes" + " -- " + patternType );
							   switch( patternType ){
									case "and" : // pattern no match (zero indexed selections)
										setPatternResult("None");
									break;
									case "or" : // pattern no match (zero indexed selections)
										setPatternResult("None");
									break;
									case "avoid" : // pattern perfect match (zero indexed selections - this is "reversed" from other pattern types)
										setPatternResult("Match");
										
									break;
							    }
							}
							if( setCheckList.indexOf(0) == -1 && setCheckList.indexOf(1) != -1 ){ // all indexed in pattern selected
								//console.log(" all indexes" + " -- " + patternType );
								switch( patternType ){
									case "and" : // pattern perfect match
										setPatternResult("Match");
									break;
									case "or" : // pattern partial match (all indexed items selected), assumes set has 2+ elements (make this required for "or" patterns)
										setPatternResult("NonMatch");
									break;
									case "avoid" : // pattern no match (all indexed items selected)
										setPatternResult("None");
									break;
							    }
							}
							if( setCheckList.indexOf(0) != -1 && setCheckList.indexOf(1) != -1 ){ // selected and unselected from pattern indexes
								//console.log(" some indexes" + " -- " + patternType );
								switch( patternType ){
									case "and" : // pattern partial match
										setPatternResult("NonMatch"); 
									break;
									case "or" : // pattern perfect OR partial match 
										var sumOnes = setCheckList.reduce(function(element_a, element_b) { return element_a + element_b; }, 0);
										if( sumOnes > 1 ){ // partial match, 2+ "selected" items in pattern
											setPatternResult("NonMatch");
										}
										if( sumOnes == 1 ){ // perfect match, single "selected" item in pattern
											setPatternResult("Match");
										}
									break;
									case "avoid" : // pattern partial match, some indexed items selected
										setPatternResult("NonMatch");
									break;
							    }
							}
						}
					}
					
					function setPatternResult(result){
						switch(result){
							case "Match" : 
								patternData({ 'dataType' : "Status" , 'dataVal': patternIndexPath.statusMatch });
								switch( action ){
									case "choiceSelectionUpdate" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreMatch });
									break;
									case "pathScoreTally" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreMatch });
									break;
								}
								if( patternIndexPath.require != undefined && 
					  				patternIndexPath.require == "Vital" ){
									countVitalMatches++;
									countTotalVitals++;
								}
								//patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreMatch });
							break;
							case "NonMatch" : 
								allPatternsAreMatched = false;
								patternData({ 'dataType' : "Status" , 'dataVal': patternIndexPath.statusNonMatch });
								switch( action ){
									case "choiceSelectionUpdate" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNonMatch });
									break;
									case "pathScoreTally" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNonMatch });
									break;
								}
								//patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNonMatch });
								if( patternIndexPath.require != undefined && 
					  				patternIndexPath.require == "Vital" ){
									countTotalVitals++;
								}
							break;
							case "None" : 
								allPatternsAreMatched = false;
								patternData({ 'dataType' : "Status" , 'dataVal': patternIndexPath.statusNone });
								switch( action ){
									case "choiceSelectionUpdate" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNone });
									break;
									case "pathScoreTally" : 
										patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNone });
									break;
								}
								//patternData({ 'dataType' : "Score" , 'dataVal': patternIndexPath.scoreNone });
								if( patternIndexPath.require != undefined && 
					  				patternIndexPath.require == "Vital" ){
									countTotalVitals++;
								}
							break;
						}
						//console.log( result + " patternResultScore = " + patternResultScore );
						//console.log( result + " patternResultStatus = " + patternResultStatus );
						//prepScoreList.push( patternResultScore );
						//console.log( "pattern selected = " + prepAMAMCStatusList[prepAMAMCStatusList.length - 1] );
						function patternData( context ){
							if( context.dataVal != undefined && context.dataVal != "" && context.dataVal != null ){
								if( context.dataType == "Status" ){
									//patternResultStatus = 	context.dataVal;
									prepAMAMCStatusList.push( context.dataVal );
								}
								if( context.dataType == "Score" ){
									//patternResultScore = 	context.dataVal;
									switch( scoringMethod ){
										case "Sum Selections" :
											prepAMAMCScoreList.push( context.dataVal );
										break;
										case "Special Handler" :
											
										break;
									}
								}
							}
						}
					}
				}
			break;
			case "WriteInFieldList" : 
				//console.log("filter wifl");
				var testInputValue = 		"";
				var usedValueList = 		[];
				var rawStatusList = 		[];
				checkForVitalMatching = 	true;
				//var rawScoreList = 			[];
				//var caseSensitive = 		false;
				//var inputListCompleteMatch = true;
				//var learnerInputArray = [];
				var prepWriteInFieldListStatusList = [];
				var prepWriteInFieldListScoreList = [];
				switch( action ){
					case "choiceSelectionUpdate" : 
						//learnerInputArray = pageAssessmentSelectionArray[0];
					break;
					case "pathScoreTally" : 
						/*
						console.log( "currentPathHistory = " + currentPathHistory.join(",") );
						var prepWriteInFieldListScoreList = [];
						userPathLoop: // cycle the learner's chain of step ids and choices
						for( var a = 0 ; a < currentPathHistory.length ; a++ ){
							var splitStepID = 					currentPathHistory[a].split(":");
							var grabStepID = 					splitStepID[0];
							console.log( "grabStepID = " + grabStepID );
							console.log( "componentStep = " + componentStep );
							if( Number(grabStepID) == componentStep ){
								var learnerInputList = 			splitStepID[1];
								console.log( "learnerInputList = " + learnerInputList );
								if( learnerInputList != undefined && learnerInputList !== '' ){ // if assessment exists
									// remove first and last chars (should be curly brackets)
									// delimit split via the remaining bracket-surrounded commas
									// inputs should not have any curly brackets
									learnerInputArray = 		learnerInputList.slice(1, -1).split("},{"); 
									//learnerInputArray = 		learnerInputListSplit; 
									break userPathLoop;
								}
							}
						}
						*/
						//var checkOutputStatus = targetStep.amamcChoices[choiceIndex].outputStatus;
						//var checkRequire = targetStep.amamcChoices[choiceIndex].require;
					break;
				}
				
				//console.log( "wifl learnerInputArray = " + learnerInputArray.join(",") );
				
				switch( action ){
					case "choiceSelectionUpdate" : 
						//var funneledRulesPath = 	masterJSONStorage.currentStep.Assessment.specialHandling.rules;
					break;
					case "pathScoreTally" : 
						//var funneledRulesPath = 	targetStep.writeInFieldListRules;
					break;
				}
				//var funneledRulesPath = 	masterJSONStorage.currentStep.Assessment.specialHandling.rules;
				var caseSensitive = 		false;
				if( funneledHandlingRulesPath.caseSensitive == "True" || funneledHandlingRulesPath.caseSensitive == "true" || funneledHandlingRulesPath.caseSensitive == true ){ 
					caseSensitive = 		true;
				}
				var punctuationSensitive = 	false; // also disregards spaces
				if( funneledHandlingRulesPath.punctuationSensitive == "True" || funneledHandlingRulesPath.punctuationSensitive == "true" || funneledHandlingRulesPath.punctuationSensitive == true ){
					punctuationSensitive = 	true;
				}
				//console.log( "caseSensitive = " + caseSensitive );
				//console.log( "punctuationSensitive = " + punctuationSensitive );
				var countFilledFields = 	0;
				for( var a = 0 ; a < learnerInputArray.length ; a++ ){
			  		grabInputValue = 		learnerInputArray[a];
			  		var checkGrabInputValueForContent = 		inputGrinder( grabInputValue, "spacesRemoved" );
			  		if( checkGrabInputValueForContent != "" ){
				  		countFilledFields++;
			  		}
			  	}
			  	if( countFilledFields < Number(funneledHandlingRulesPath.filledFields.minFilled) ){
				  	switch( funneledHandlingRulesPath.filledFields.minFilledEnforcementStatus ){
					  	case "Forced" : 
					  		
					  	break;
					  	case "Nullify" : 
					  		nullified = 		true;
					  		inputListCompleteMatch = false;
					  	break;
				  	}
				}
				if( countFilledFields > Number(funneledHandlingRulesPath.filledFields.maxFilled) ){
					switch( funneledHandlingRulesPath.filledFields.maxFilledEnforcementStatus ){
					  	case "Forced" : 
					  		
					  	break;
					  	case "Nullify" : 
					  		nullified = 		true;
					  		inputListCompleteMatch = false;
					  	break;
				  	}
				}
				//console.log( "wifl nullified = " + nullified );
				if( !nullified ){
					
					switch( action ){
						case "choiceSelectionUpdate" : 
							var expectedInputsOriginal = masterJSONStorage.currentStep.Assessment.outputs;
							// make a clone of the exp. inputs array, purging conflicted groups
							var expectedInputs = ( JSON.parse(JSON.stringify(masterJSONStorage.currentStep.Assessment.outputs)) );
							//console.log( "expectedInputs before = " + JSON.stringify( expectedInputs , null , 4 ) );
							cycleExpectedItems: 
							for( var expectedInputIteration = expectedInputs.length-1 ; expectedInputIteration > 0 ; expectedInputIteration-- ){
								// don't include exp. input box in results if a conflict exists
								//console.log( "pass ' + expectedInputIteration + ' = " + expectedInputs[expectedInputIteration].valueMatchingConflict ) );
								if( expectedInputs[expectedInputIteration].valueMatchingConflict != undefined ){
									if( expectedInputs[expectedInputIteration].valueMatchingConflict == "Expected Input Redundancy" || 
										expectedInputs[expectedInputIteration].valueMatchingConflict == "All Blank Inputs" ){
										expectedInputs.splice( expectedInputIteration , 1 );
									}
								}
							}
							//console.log( "expectedInputs after = " + JSON.stringify( expectedInputs , null , 4 ) );
						break;
						case "pathScoreTally" : 
							var expectedInputs = 	scanChoiceList; //targetStep.writeInFieldListRules;
						break;
					}
					
					//console.log( "expectedInputs after = " + JSON.stringify( expectedInputs , null , 4 ) );
					
					var inputsOriginalStored = [];
					var inputsCleanedStored = [];
					
					for( var a = 0 ; a < learnerInputArray.length ; a++ ){
						var grabInputValue = learnerInputArray[a];
						inputsOriginalStored.push( grabInputValue );
				  		if( grabInputValue == "" ){ // restart the each loop, don't tally up the status or score -- we only collect filled input field values
					  		inputsCleanedStored.push( grabInputValue );
				  		}else{
					  		if( !caseSensitive ){
						  		// set input value to all lower case before comparing to expected inputs
						  		grabInputValue = inputGrinder( grabInputValue, "forceLowerCase" );
					  		}
					  		if( !punctuationSensitive ){
						  		// remove non-alpha-numeric chars before comparing to expected inputs
						  		grabInputValue = inputGrinder( grabInputValue, "alphaNumUnderscoreFilter_caseInsensitive" );
					  		}
					  		// remove any strings from the global ignore list 
					  		// if punctuation sensitivity is enabled, and any punctuation is included in ignore list, the ignored punctuation will be "allowed" for a correct response
					  		if( funneledHandlingRulesPath.ignoreListGlobal != undefined && funneledHandlingRulesPath.ignoreListGlobal.length > 0 ){
						  		for( var ignoreListGlobalIteration = 0 ; ignoreListGlobalIteration < funneledHandlingRulesPath.ignoreListGlobal.length ; ignoreListGlobalIteration++ ){
							  		grabInputValue = grabInputValue.split( funneledHandlingRulesPath.ignoreListGlobal[ignoreListGlobalIteration] ).join('');
						  		}
					  		}
					  		inputsCleanedStored.push( grabInputValue );
					  	}
					//});
					}
					var usageIndexList = [];
					var inputMatch = false;
					//console.log( "selectionStatusTypes r = " + JSON.stringify( selectionStatusTypes , null , 4 ) );
					var expectedMatchListHits = [];
					
					cycleExpectedItems: 
					for( var expectedInputIteration = 0 ; expectedInputIteration < expectedInputs.length ; expectedInputIteration++ ){
						expectedMatchListHits.push(0);
					}
					// cycle the cleaned list
					var cycleCleanedListIteration = 0;
					$.each( inputsCleanedStored , function( inputIndex , inputValue ){ 
						cycleCleanedListIteration++;
						//console.log( "cycleCleanedListIteration = " + cycleCleanedListIteration );
				  		var grabInputValue = inputValue;
				  		//console.log( "grabInputValue 1 = " + grabInputValue );
				  		// if punctuation sensitivity is enabled, and any punctuation is included in ignore list, the ignored punctuation will be "allowed" for a correct response
				  		cycleExpectedItems: // cycle the expected input groups
				  		for( var expectedInputIteration = 0 ; expectedInputIteration < expectedInputs.length ; expectedInputIteration++ ){
					  		//console.log( "expectedInputIteration = " + expectedInputIteration );
					  		inputMatch = false;
					  		/*
					  		// don't include exp. input box in results if a conflict exists
							if( expectedInputs[expectedInputIteration].valueMatchingConflict != undefined ){
								if( expectedInputs[expectedInputIteration].valueMatchingConflict == "Expected Input Redundancy" || 
									expectedInputs[expectedInputIteration].valueMatchingConflict == "All Blank Inputs" ){
									continue cycleExpectedItems;
								}
							}
					  		*/
					  		// strip local ignore list strings from the input being tested
						  	if( expectedInputs[expectedInputIteration].ignoreList != undefined ){
							  	var localIgnoreListLen = expectedInputs[expectedInputIteration].ignoreList.length;
						  		for( var localIgnorePass = 0 ; localIgnorePass < localIgnoreListLen ; localIgnorePass++ ){
							  		grabInputValue = grabInputValue.split( expectedInputs[expectedInputIteration].ignoreList[localIgnorePass] ).join('');
								}
							}
						  	var textAllowedListLen = expectedInputs[expectedInputIteration].textValsAllowed.length;
							// make a nested array of fields that have overlapping inputs?
							cycleInputAllowedTextValsOuter:
							for( var textAllowedIterationOuterPass = 0 ; textAllowedIterationOuterPass < textAllowedListLen ; textAllowedIterationOuterPass++ ){
								// we've already stripped any global-ignore strings from all of the inputs
								var matched = 					true;
								// for regexp object, no surrounding fw slashes, sometimes no starting ^ or ending $
								// with the curly-brace "focus group" option, we are allowing non-sequential positive matches to be found
								var charsOutsideCurlyBraces = 	new RegExp( "[^{}](?=([^{}]*\{[^{}]*\})*[^{}]*$)" , "g" );
								var testExpectedValue = 		String( expectedInputs[expectedInputIteration].textValsAllowed[textAllowedIterationOuterPass] );
								var testInputValue = 			String( grabInputValue );
								if( !caseSensitive ){
							  		testExpectedValue = inputGrinder( testExpectedValue, "forceLowerCase" );
						  		}
						  		if( !punctuationSensitive ){
							  		// keep wildcard chars
							  		//testValue = inputGrinder( testValue, "alphaNumUnderscoreFilter_caseInsensitive" );
							  		testExpectedValue = inputGrinder( testExpectedValue, "alphaNumWriteInWildCardFilter_caseInsensitive" );
						  		}
						  		//console.log( "testExpectedValue 0 = " + testExpectedValue );
							  	//console.log( "testInputValue 0 = " + testInputValue );
								if( testExpectedValue == "" || testInputValue == "" ){
							  		matched = 					false;
							  	}else{
							    	if( testExpectedValue.indexOf("{") != -1 && testExpectedValue.indexOf("}") != -1 ){
										var clearOutsideBraces = 	testExpectedValue.replace( charsOutsideCurlyBraces , '' );
										var bracedBlocks = 			clearOutsideBraces.slice( 1 , clearOutsideBraces.length - 1 ).split( "}{" );
										/*
										cycleBlocks:
										for( var a = 0 ; a < bracedBlocks.length ; a++ ){
											if( !testWriteInAllowedStringRegExpString( String(bracedBlocks[a]) , testInputValue , "Array" ) ){
												matched = 		false;
												break cycleBlocks;
							        		}
							      		}
							      		*/
							      		if( !testWriteInAllowedStringRegExpString( bracedBlocks , testInputValue , "Array" ) ){
											matched = 		false;
											//break cycleBlocks;
						        		}
							    	}else{
								    	//console.log( "no curlies = " + testValue + " -- " + testAgainst );
										if( !testWriteInAllowedStringRegExpString( testExpectedValue , testInputValue , "String" ) ){
											matched = 			false;
							      		}
							    	}
							  	}
							  	//console.log( "testValue 1 = " + testValue );
							  	//console.log( "testAgainst 1 = " + testAgainst );
								if( matched){
									//console.log( "matched pass = " + textAllowedIterationOuterPass );
									usageIndexList.push( expectedInputIteration ); // note index of expected input element
									inputMatch = true;
									expectedMatchListHits[expectedInputIteration] = 1;
									prepWriteInFieldListStatusList.push( expectedInputs[expectedInputIteration].outputStatus.statusFilledMatch );
									switch( scoringMethod ){
										case "Sum Selections" :
											if( expectedInputs[expectedInputIteration].scoring != undefined && 
												expectedInputs[expectedInputIteration].scoring != "" && 
												expectedInputs[expectedInputIteration].scoring != null && 
												expectedInputs[expectedInputIteration].scoring.scoreFilledMatch != undefined && 
												expectedInputs[expectedInputIteration].scoring.scoreFilledMatch != "" && 
												expectedInputs[expectedInputIteration].scoring.scoreFilledMatch != null ){
												prepWriteInFieldListScoreList.push( expectedInputs[expectedInputIteration].scoring.scoreFilledMatch );
											}
										break;
										case "Special Handler" :
											
										break;
									}
									
									break cycleExpectedItems;
								}else{
									//inputListCompleteMatch = false;
								}
								function testWriteInAllowedStringRegExpString( testExpectedValue , testInputValue , testType ){
									//console.log( "testWriteInAllowedStringRegExpString testExpectedValue = " + testExpectedValue );
									//console.log( "testWriteInAllowedStringRegExpString testInputValue = " + testInputValue );
									var testExpectedValueList =  [];
									if( testType == "Array" ){
										testExpectedValueList = 		testExpectedValue;
									}else{
										testExpectedValueList[0] = 		testExpectedValue;
									}
									//console.log( "testWriteInAllowedStringRegExpString testExpectedValueList = " + testExpectedValueList );
									//console.log( "testWriteInAllowedStringRegExpString testInputValue = " + testInputValue );
									var sustainedMatch = true;
									cycleExpectedValueListIterations:
									for( var testExpectedValueListIteration = 0 ; testExpectedValueListIteration < testExpectedValueList.length ; testExpectedValueListIteration++ ){
										var regExpString = testExpectedValueList[testExpectedValueListIteration].replace( /\./g , "\." ).replace( /\*/g , "." ).replace( /\~/g , ".*" );
										if( !caseSensitive ){
											var testRegEx = new RegExp( regExpString , "i" );
										}else{
											var testRegEx = new RegExp( regExpString );
										}
										//console.log( "regExpString = " + regExpString );
										//console.log( "testRegEx = " + testRegEx );
										//console.log( "testRegEx.test( testInputValue ) = " + testRegEx.test( testInputValue ) );
										//console.log( "---------------" );
										/*
										if( testExpectedValueListIteration == testExpectedValueList.length - 1 ){
											if( !testRegEx.test( testInputValue ) ){
										    	return false;
										  	}else{
											  	var strictMatchLength = true;
											  	if( regExpString.indexOf(".*") != -1 ){ // no strict match length if "bridge" characters exist in allowed string
												  	strictMatchLength = false;
											  	}
											  	if( strictMatchLength ){
												  	if( testValue.length == testAgainst.length ){
												  		return true;
											  		}else{
												  		return false;
											  		}
											  	}else{
												  	return true;
											  	}
										  	}
									  	}
									  	/*/
									  	
									  	if( !testRegEx.test( testInputValue ) ){ // check if testRegEx is inside testInputValue
									    	sustainedMatch = false;
									  	}else{
										  	var strictMatchLength = true;
										  	//if( regExpString.indexOf(".*") != -1 ){ // no strict match length if "bridge" characters exist in allowed string
										  	if( regExpString.indexOf(".*") != -1 ){
											  	// if expected string segment first char or last char is not a wildcard symbol, and doesn't match the input value's first/last character, break match
											  	var checkInputFirstChar = 						testInputValue[0];
											  	var checkExpectedValueListIterationFirstChar = 	testExpectedValueList[testExpectedValueListIteration][0];
											  	//console.log( "checkInputFirstChar = " + checkInputFirstChar );
											  	//console.log( "checkExpectedValueListIterationFirstChar = " + checkExpectedValueListIterationFirstChar );
											  	if( checkExpectedValueListIterationFirstChar != "." && 
											  		checkExpectedValueListIterationFirstChar != checkInputFirstChar ){
												  	sustainedMatch = false;
											  	}
											  	var checkInputLastChar = 						testInputValue[testInputValue.length - 1];
											  	var checkExpectedValueListIterationLastChar = 	testExpectedValueList[testExpectedValueListIteration][testExpectedValueList[testExpectedValueListIteration].length - 1];
											  	//console.log( "checkInputLastChar = " + checkInputLastChar );
											  	//console.log( "checkExpectedValueListIterationLastChar = " + checkExpectedValueListIterationLastChar );
											  	if( checkExpectedValueListIterationLastChar != "." && 
											  		checkExpectedValueListIterationLastChar != "./" && 
											  		checkInputLastChar != checkExpectedValueListIterationLastChar ){
												  	sustainedMatch = false;
											  	}
										  	}
										  	if( regExpString.indexOf(".*") != -1 || testType == "Array" ){
											  	strictMatchLength = false;
										  	}
										  	if( strictMatchLength ){
											  	if( testExpectedValue.length != testInputValue.length ){
											  		sustainedMatch = false;
										  		}
										  	}
									  	}
									}
									return sustainedMatch;
								}
							}
							if( !matched ){
								//console.log( "not-matched pass = " + textAllowedIterationOuterPass );
								if( expectedInputs[expectedInputIteration].outputStatus.statusNoMatch != undefined && 
									expectedInputs[expectedInputIteration].outputStatus.statusNoMatch != "" && 
									expectedInputs[expectedInputIteration].outputStatus.statusNoMatch != null ){
									prepWriteInFieldListStatusList.push( expectedInputs[expectedInputIteration].outputStatus.statusNoMatch );
								}
								switch( scoringMethod ){
									case "Sum Selections" :
										if( expectedInputs[expectedInputIteration].scoring != undefined && 
											expectedInputs[expectedInputIteration].scoring != "" && 
											expectedInputs[expectedInputIteration].scoring != null && 
											expectedInputs[expectedInputIteration].scoring.scoreNoMatch != undefined && 
											expectedInputs[expectedInputIteration].scoring.scoreNoMatch != "" && 
											expectedInputs[expectedInputIteration].scoring.scoreNoMatch != null ){
											prepWriteInFieldListScoreList.push( expectedInputs[expectedInputIteration].scoring.scoreNoMatch );
										}
									break;
									case "Special Handler" :
										
									break;
								}
							}
						}
						if( !inputMatch ){
							//inputListCompleteMatch = false;
							if( grabInputValue == "" ){
								usageIndexList.push( "Blank" );
							}else{
								usageIndexList.push( "NonMatch" );
								inputListCompleteMatch = false;
							}
						}
					}); // end cycle of input fields
					
					//console.log( "usageIndexList = " + JSON.stringify( usageIndexList , null , 4 ) );
					//masterJSONStorage.currentStepAssessmentResult.usageIndexList = usageIndexList;
					//console.log( "handlingData.outputs = " + JSON.stringify( handlingData.outputs , null , 4 ) );
					//var expectedInputList = currentBasePage_Assessment_OutputList; // handlingData.outputs;
					switch( action ){
						case "choiceSelectionUpdate" : 
							//var expectedInputList = currentBasePage_Assessment_OutputList;
						break;
						case "pathScoreTally" : 
							//var expectedInputList = scanChoiceList; //targetStep.writeInFieldListRules;
						break;
					}
					var rawStatusList = 	[]; // context.rawStatusList;
					for( var a = 0 ; a < expectedInputList.length ; a++ ){
					    if( expectedInputList[a].matchRequirement != undefined ){
					        switch( expectedInputList[a].matchRequirement ){
					        	case "Vital" : 
					        		vitalExpectedList.push( a );
					        		countTotalVitals++;
					        		if( expectedMatchListHits[a] != 1 ){
						        		inputListCompleteMatch = false;
					        		}
					        	break;
					    	}
					    }
					}
					
					//console.log( "selectionStatusTypes s = " + JSON.stringify( selectionStatusTypes , null , 4 ) );
					
					//var countVitalMatches = 0;
					var initialCloneCapture = [];
					for( var a = 0 ; a < usageIndexList.length ; a++ ){
						switch( usageIndexList[a] ){
							case "Blank" :
								
							break;
							case "NonMatch" :
								//var nonMatchStatusResult = funneledRulesPath.unexpectedInputStatus.toLowerCase();
								//selectionStatusTypes[ matchingChoiceStatus ] = true;
								selectionStatusTypes[ "incorrect" ] = true;
							break;
							default: // is number index, we have a match
								// TEST NON-CONTIGUOUS CLONES!
								// TEST MULTIPLE CLONE SETS!
								if( getArrayElementMatchCount( usageIndexList , usageIndexList[a] ) > 1 ){ // learner input is matched more than once in field set
									if( initialCloneCapture.indexOf( usageIndexList[a] ) == -1 ){ // index of matched expected item not yet used
										initialCloneCapture.push( usageIndexList[a] ); // add index of matched expected item, or "Blank"
										if( funneledHandlingRulesPath.doubleUsage.firstInstanceStatus != undefined ){ // override control exists in json
											var doubleUsageFirstInstanceStatusResult = funneledHandlingRulesPath.doubleUsage.firstInstanceStatus.toLowerCase();
											selectionStatusTypes[ doubleUsageFirstInstanceStatusResult ] = true;
										}else{ // no override exists, use the original expected item slot data
											var statusFilledMatchStatusResult = expectedInputList[usageIndexList[a]].outputStatus.statusFilledMatch.toLowerCase();
											selectionStatusTypes[ statusFilledMatchStatusResult ] = true;
										}
									}else{ // index of matched expected item already used
										var doubleUsageCloneStatusResult = funneledHandlingRulesPath.doubleUsage.cloneStatus.toLowerCase();
										selectionStatusTypes[ doubleUsageCloneStatusResult ] = true;
									}
								}else{ // not yet matched
									var statusFilledMatchStatusResult = expectedInputList[usageIndexList[a]].outputStatus.statusFilledMatch.toLowerCase();
									selectionStatusTypes[ statusFilledMatchStatusResult ] = true;
									if( expectedInputList[usageIndexList[a]].matchRequirement != undefined && expectedInputList[usageIndexList[a]].matchRequirement == "Vital" ){
										countVitalMatches++;
									}
								}
							break;
						}
					}
					
					// collect unfilled exp. inputs
					var unmatchedList = [];
					for( var a = 0 ; a < expectedInputs.length ; a++ ){
						//console.log( "unmatchedList push = " + a );
						unmatchedList.push(a);
					}
					// works better cycling backwards
					//for( var a = 0 ; a < unmatchedList.length ; a++ ){
					for( var a = unmatchedList.length ; a >= 0 ; a-- ){
						if( usageIndexList.indexOf( unmatchedList[a] ) != -1 ){
							//unmatchedList.splice( unmatchedList.indexOf( unmatchedList[a] ) );
							unmatchedList.splice( a , 1 );
						}	
					}
					// now have a reduced unmatched list so we can look for no-match results
					for( var a = 0 ; a < unmatchedList.length ; a++ ){
						var unmatchedExpInputIndex = unmatchedList[a];
						if( expectedInputList[unmatchedExpInputIndex].outputStatus.statusNoMatch != undefined &&
							expectedInputList[unmatchedExpInputIndex].outputStatus.statusNoMatch != "" ){
							var statusNoMatchStatusResult = expectedInputList[unmatchedExpInputIndex].outputStatus.statusNoMatch.toLowerCase();
							selectionStatusTypes[ statusNoMatchStatusResult ] = true;
						}
					}
					
					console.log( "wifl - selectionStatusTypes at end of filter proc = " + JSON.stringify( selectionStatusTypes , null , 4 ) );
				}else{
					console.log( "is nullified" );
				}
				
				switch( scoringMethod ){
					case "Sum Selections" :
						scoreResult = scoreListProcessor( prepWriteInFieldListScoreList );
					break;
					case "Special Handler" :
						
					break;
				}
				
			break;
		}
		
	}
	
	function unCorrectTargeter(){ // priority list of status types for use when the UN-Correct handler is not supplied
		if( trueStatus.indexOf( "Partial" ) != -1 ){ return "Partial"; } /* overrides incorrect */
		if( trueStatus.indexOf( "Incorrect" ) != -1 ){ return "Incorrect"; } /* overrides neutral */
		if( trueStatus.indexOf( "Neutral" ) != -1 ){ return "Neutral"; } /* overrides correct */
		if( trueStatus.indexOf( "Correct" ) != -1 ){ return "Correct"; }
	}
}
// ! F.Step.Assessment.Handle item selection ---
function pageAssessmentSelectionMade( context ){ 
	
	var useEvent = context.passedObj; // the element selected to make this call
	
	var actionType = context.actionType; // (not supplied OR Basic for Basic) | Primary | Secondary
	if( actionType == undefined || actionType == "" || actionType == null ){
		actionType = "Basic"; // default, normal select action
	}
	
	// if is a secondary-action type of choice (matching, ranking), ensure proper handling
	// should set a "dropped" class, clear other dropped classes and droplists (setting/reverting selections as necessary)
	// if selecting secondary target (option in droplist), should set data attribute to Selected, and style choice block and contents as such
	// only after all selections are made should "check" become available
	
	pageAssessmentNewSelectionState = "unchecked";
	
	$("#CET-Activity-Content-Assessment").removeClass("stepAssessmentResultsReviewable");
	$("#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer").hide();
	
	switch( currentBasePage_Assessment_Variant ){
		case "Basic":
			//engageSelection();
			switch(currentBasePage_Assessment_Type){
				case "Single Answer - Multiple Choice":
					toggleChoiceIndication({ 'setStatus'  : "off" , 'targetObject' : $('.choiceList_Item') }); // reset siblings
					//$('.choiceList_Item').removeClass('choiceSelected');
					//passedObj.addClass('choiceSelected');
					toggleChoiceIndication({ 'setStatus'  : "on" }); // set new selected
					var checkMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on"); // should only return single "on"
				break;
				case "Multiple Answer - Multiple Choice":
				case "Advanced Multiple Answer - Multiple Choice":
					if( pageAssessmentSelectionArray[0][useEvent.index()] == 'off' ){
						toggleChoiceIndication({ 'setStatus'  : "on" });
					}else{
						toggleChoiceIndication({ 'setStatus'  : "off" });
					}
					var checkMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on");
				break;
				case "Write In - Field List":
					
				break;
				case "Matching":
					switch( actionType ){
						case "Primary" : // the drop list is opened
							$( '[data-choiceListItemStatus="Unselected"]' ).find( '.selectOptionNotice' ).html( langPack.ui.stepBase.stepAssessment.selectOption );
							if( $( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"]' ).length > 0 ){
								var grabSelectedOptionText = $( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"] .choiceOptionSelected' ).html();
								$( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"]' ).find( '.selectOptionNotice' ).html( grabSelectedOptionText );
							}
							$('.choiceList_Item').removeClass( 'dropped' );
							useEvent.find( '.selectOptionNotice' ).html( langPack.ui.stepBase.stepAssessment.selecting );
							useEvent.addClass( 'dropped' );
							var openOptions = $( '#CET-Activity-Content-Assessment .choiceOptionListContainer' ).length;
							if( openOptions > 0 ){
								$( '.choiceOptionListContainer' ).slideUp( 250, function() {
									$( '.choiceOptionListContainer' ).remove(); // remove last
									prepMatchingOptionsDropper();
								});
							}else{
								prepMatchingOptionsDropper();
							}
							function prepMatchingOptionsDropper(){
								$( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
								if( useEvent.attr( 'data-choiceListItemStatus' ) == "Selected" ){
									useEvent.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColor' );
									useEvent.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColorBoxShadow_ChoiceRadio' );
								}
								useEvent.find( '.choiceOptionSet' ).append( setupChoiceOptions() );
								//useEvent.find( '.choiceOptionSet' ).find('.choiceOptionListContainer').removeClass('hidden');
								useEvent.find( '.choiceOptionListContainer' ).slideDown( 350 , function() {
									useEvent.find('.choiceOptionListContainer').removeClass('hidden');
									/*switch( focusControl.updateFocusAfterAction ){
										case "StepAssessmentChoiceOption-Selected" :
											console.log( "matching selected" );
											useEvent.find( '.choiceOptionListContainer .choiceOptionSelected' ).focus();
											focusControl.updateFocusAfterAction = "";
											updateFocus();
										break;
										case "StepAssessmentChoiceOption-First" :
											console.log( "matching first" );
											useEvent.find( '.choiceOptionListContainer .choiceOptionFirst' ).focus();
											focusControl.updateFocusAfterAction = "";
											updateFocus();
										break;
									}*/
								});
							}
						break;
						case "Secondary" : // item from drop list is selected
							var parentChoiceBlockIndex = useEvent.closest( '.choiceList_Item' ).index();
							// need to get the oid of the option, to ensure correct targeting even if shuffled
							var optionVizStackIndex = Number( useEvent.index() ); // index of the option in the visual droplist stack
							var optionOID = String( currentBasePage_Assessment_OutputList[parentChoiceBlockIndex].choiceOptions[optionVizStackIndex].oid );
							toggleChoiceIndication({ 'setStatus'  : optionOID });
							var checkMCOSelectionIndex = pageAssessmentSelectionArray[0].indexOf( optionOID ); // should return numeric index
						break;
					}
				break;
				case "Ranking":
					switch( actionType ){
						case "Primary" : // the drop list is opened
							$( '[data-choiceListItemStatus="Unselected"]' ).find( '.selectOptionNotice' ).html( langPack.ui.stepBase.stepAssessment.selectOption );
							if( $( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"]' ).length > 0 ){
								var grabSelectedOptionText = $( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"] .choiceOptionSelected' ).html();
								$( '.choiceList_Item.dropped[data-choiceListItemStatus="Selected"]' ).find( '.selectOptionNotice' ).html( grabSelectedOptionText );
							}
							$('.choiceList_Item').removeClass( 'dropped' );
							useEvent.find( '.selectOptionNotice' ).html( langPack.ui.stepBase.stepAssessment.selecting );
							useEvent.addClass( 'dropped' );
							var openOptions = $( '#CET-Activity-Content-Assessment .choiceOptionListContainer' ).length;
							if( openOptions > 0 ){
								$( '.choiceOptionListContainer' ).slideUp( 250, function() {
									$( '.choiceOptionListContainer' ).remove(); // remove last
									prepRankingOptionsDropper();
								});
							}else{
								prepRankingOptionsDropper();
							}
							function prepRankingOptionsDropper(){
								$( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
								if( useEvent.attr( 'data-choiceListItemStatus' ) == "Selected" ){
									useEvent.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColor' );
									useEvent.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColorBoxShadow_ChoiceRadio' );
								}
								useEvent.append( setupChoiceOptions() );
								useEvent.find( '.choiceOptionListContainer' ).slideDown( 350 , function() {
									useEvent.find('.choiceOptionListContainer').removeClass('hidden');
									/*switch( focusControl.updateFocusAfterAction ){
										case "StepAssessmentChoiceOption-Selected" :
											console.log( "ranking selected" );
											useEvent.find( '.choiceOptionListContainer .choiceOptionSelected' ).focus();
											focusControl.updateFocusAfterAction = "";
											updateFocus();
										break;
										case "StepAssessmentChoiceOption-First" :
											console.log( "ranking first" );
											useEvent.find( '.choiceOptionListContainer .choiceOptionFirst' ).focus();
											focusControl.updateFocusAfterAction = "";
											updateFocus();
										break;
									}*/
									//useEvent.closest( '.choiceList_Item' ).find( '.choiceOptionListContainer' ).remove(); // remove last
								});
							}
						break;
						case "Secondary" : // item from drop list is selected
							var parentChoiceBlockIndex = useEvent.closest( '.choiceList_Item' ).index();
							// for ranking, need to get the cid of the droplist selection
							// unshuffled choice (cid) stack IS always the correct stacking order for ranking
							/*
							{ // if shuffling, need to clone this stack to maintain correct order?  shuffling should always initially shuffle at page setup and apply same shuffle pattern to all droplists (do array cloning and setup?), not at each droplist drop action.
								"cid" : "1", // the elements here should only represent the selections in all drop lists.  
								"text" : "Option A",
								"rankPlaced" : "1" // preserves the stack index of rank pointed at by the learner (not the cid of the "slot"), must match this element's parent cid to be correct (this line is correct).  not present unless set by learner, or prefilling.   if no rankPlaced present, is default drop-list "Select" notice.
							},	
							*/
							var optionVizStackIndex = Number( useEvent.index() ); // index of the option in the visual droplist stack
							var optionCID; // is set during toggling function // = String( currentBasePage_Assessment_OutputList[parentChoiceBlockIndex].choiceID );
							//console.log( "optionCID 1 = " + optionCID );
							//console.log( "parentChoiceBlockIndex 1 = " + parentChoiceBlockIndex );
							toggleChoiceIndication({ 'setStatus'  : optionVizStackIndex });
							var checkMCOSelectionIndex = pageAssessmentSelectionArray[0].indexOf( optionCID ); // should return numeric index
						break;
					}
				break;
			}
		break;
		case "Media":
			//useEvent = passedObj.closest('.mediaGridBoxOuter'); // retarget to the box outer
			switch(currentBasePage_Assessment_Type){
				case "Single Answer - Multiple Choice": // radio circle
					toggleChoiceIndication({ 'setStatus'  : "off" , 'targetObject' : $('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter') }); // reset siblings
					//$('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter').removeClass('choiceSelected');
					//passedObj.closest('.mediaGridBoxOuter').addClass('choiceSelected'); 
					toggleChoiceIndication({ 'setStatus'  : "on" }); // set new selected
					var checkMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on"); // should only return single "on"
				break;
				case "Multiple Answer - Multiple Choice": // checkbox square
				case "Advanced Multiple Answer - Multiple Choice":
					if( pageAssessmentSelectionArray[0][useEvent.index()] == 'off' ){
						toggleChoiceIndication({ 'setStatus'  : "on" });
					}else{
						toggleChoiceIndication({ 'setStatus'  : "off" });
					}
					var checkMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on"); // may return multiple "on"s
				break;
				case "Matching":
					$('.choiceList_Item').removeClass( 'dropped' );
					useEvent.addClass( 'dropped' );
				break;
				case "Ranking":
					$('.choiceList_Item').removeClass( 'dropped' );
					useEvent.addClass( 'dropped' );
				break;
			}
		break;
	}
	
	//var checkMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on"); // may return multiple "on"s
	
	var choiceSelectionGate = 				false;
	if( checkMCSelectionIndex != undefined && checkMCSelectionIndex != -1 ){ // at least one top-level choice selection has been made
		choiceSelectionGate = 				true;
	}
	var choiceOptionSelectionGate = 	false;
	if( checkMCOSelectionIndex != undefined && checkMCOSelectionIndex != -1 ){ // at least one choice option selection has been made
		choiceOptionSelectionGate = 		true;
	}
	
	var enableFeedback = false;
	
	/*if( currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
		
	}*/
	
	if( actionType == "InputFieldChange" ){
		pageAssessmentSelectionResult = filterSpecialHandlingOutputStatus({ 
			'action' : 				"choiceSelectionUpdate" , 
			'handlingType' : 		"WriteInFieldList" ,
			'scanChoiceList' : 		pageAssessmentSelectionArray[0] ,
			'handlingData' : 		currentBasePage_Assessment_SpecialHandlingData
		});
	}else{
		if( choiceSelectionGate ){
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice":
					//var checkSAMCSelectionIndex = pageAssessmentSelectionArray[0].indexOf("on");
					pageAssessmentSelectionResult = currentBasePage_Assessment_OutputList[checkMCSelectionIndex];
					// if feedbacktext entry is not present, feedback is not enabled - blank but present fb data will still show - fb sub obj must be empty to be disabled
					/*
					if( currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputFeedback_Text != undefined ){ 
						enableFeedback = true;
					}
					*/
					// look for feedback text.  if feedback present but text is "", popup still provides status (and we look for media later too)
					var choiceSelectionGateSAMCData = currentBasePage_Assessment_OutputList;
					var choiceSelectionGateSAMCDataLen = choiceSelectionGateSAMCData.length;
					for( var a = 0 ; a < choiceSelectionGateSAMCDataLen ; a++ ){
						if( choiceSelectionGateSAMCData[a].outputFeedback_Text != undefined ){
							enableFeedback = true;
							break;
						}
					}
					if( enableFeedback ){
						continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
					}else{
						//console.log('outputBehavior = ' + currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior);
						if( currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior == 'Step Forward'){
							continueButtonUpdate("Right", "CONTINUE", "StepForward");
						}else if( currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior == 'Redirect'){
							continueButtonUpdate("Right", "CONTINUE", "Redirect");
						}else if( currentBasePage_Assessment_OutputList[checkMCSelectionIndex].outputBehavior == 'Retry'){
							continueButtonUpdate("Down", "RETRY", "Disabled");
						}
					}
				break;
				case "Multiple Answer - Multiple Choice": 
					pageAssessmentSelectionResult = filterSpecialHandlingOutputStatus({  // returns js obj
						'action' : 				"choiceSelectionUpdate" , 
						'handlingType' : 		"MAMC" ,
						'scanChoiceList' : 		pageAssessmentSelectionArray[0] ,
						'handlingData' : 		currentBasePage_Assessment_SpecialHandlingData //currentBasePage_Assessment_SpecialHandlingData.data // step json
					});
					//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
					var choiceSelectionGateMAMCData = currentBasePage_Assessment_SpecialHandlingData.data;
					var choiceSelectionGateMAMCDataLen = choiceSelectionGateMAMCData.length;
					for( var a = 0 ; a < choiceSelectionGateMAMCDataLen ; a++ ){
						if( choiceSelectionGateMAMCData[a].feedback != undefined &&
						choiceSelectionGateMAMCData[a].feedback != null &&
						choiceSelectionGateMAMCData[a].feedback != "" ){
							enableFeedback = true;
							break;
						}
					}
					if( enableFeedback ){
						continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
					}else{
						//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
						if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
							continueButtonUpdate("Right", "CONTINUE", "StepForward");
						}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
							continueButtonUpdate("Right", "CONTINUE", "Redirect");
						}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
							continueButtonUpdate("Down", "RETRY", "Disabled");
						}
					}
				break;
				case "Advanced Multiple Answer - Multiple Choice": 
					
					var tooFewFilled = false;
					var tooManyFilled = false;
					var forceDisabledContinueButton = false;
					var filledFieldsRulesPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules.filledFields;
					var filledCount = 0;
					for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
						if( pageAssessmentSelectionArray[0][a] == "on" || 
							pageAssessmentSelectionArray[0][a] == "On" ){
							filledCount++;
						}
					}
					if( filledCount == 0 ){
						tooFewFilled = true;
						forceDisabledContinueButton = true;
					}
					if( filledCount < Number( filledFieldsRulesPath.minFilled ) ){
						tooFewFilled = true;
						if( filledFieldsRulesPath.minFilledEnforcementStatus == "Forced" ){
							// disable CHECK answers button 
							forceDisabledContinueButton = true;
						}else{
							
						}
					}
					if( filledCount > Number( filledFieldsRulesPath.maxFilled ) ){
						tooManyFilled = true;
						if( filledFieldsRulesPath.maxFilledEnforcementStatus == "Forced" ){
							// disable CHECK answers button 
							forceDisabledContinueButton = true;
						}else{
							
						}
					}
					
					pageAssessmentSelectionResult = filterSpecialHandlingOutputStatus({  // returns js obj
						'action' : 				"choiceSelectionUpdate" , 
						'handlingType' : 		"AMAMC" ,
						'scanChoiceList' : 		pageAssessmentSelectionArray[0] ,
						'handlingData' : 		currentBasePage_Assessment_SpecialHandlingData //currentBasePage_Assessment_SpecialHandlingData.data // step json
					});
					//continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
					var choiceSelectionGateAMAMCData = currentBasePage_Assessment_SpecialHandlingData.data;
					var choiceSelectionGateAMAMCDataLen = choiceSelectionGateAMAMCData.length;
					if( filledCount > 0 ){
						for( var a = 0 ; a < choiceSelectionGateAMAMCDataLen ; a++ ){
							if( choiceSelectionGateAMAMCData[a].feedback != undefined &&
							choiceSelectionGateAMAMCData[a].feedback != null &&
							choiceSelectionGateAMAMCData[a].feedback != "" ){
								enableFeedback = true;
								break;
							}
						}
					}
					if( enableFeedback ){
						if( forceDisabledContinueButton ){
							continueButtonUpdate("Right", "CONTINUE", "Disabled");
						}else{
							continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
						}
					}else{
						if( forceDisabledContinueButton ){
							continueButtonUpdate("Right", "CONTINUE", "Disabled");
						}else{
							//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
							if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
								continueButtonUpdate("Right", "CONTINUE", "StepForward");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
								continueButtonUpdate("Right", "CONTINUE", "Redirect");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
								continueButtonUpdate("Down", "RETRY", "Disabled");
							}
						}
					}
				break;
			}
		}
		if( choiceOptionSelectionGate ){
			switch( currentBasePage_Assessment_Type ){
				case "Matching":
					pageAssessmentSelectionResult = filterSpecialHandlingOutputStatus({  // returns js obj
						'action' : 				"choiceSelectionUpdate" , 
						'handlingType' : 		"Matching" ,
						'scanChoiceList' : 		pageAssessmentSelectionArray[0] ,
						'handlingData' : 		currentBasePage_Assessment_SpecialHandlingData //currentBasePage_Assessment_SpecialHandlingData.data // step json
					});
					//console.log( "matching pageAssessmentSelectionResult = " + pageAssessmentSelectionResult );
					var choiceSelectionGateMatchingData = 		currentBasePage_Assessment_SpecialHandlingData.data;
					var choiceSelectionGateMatchingDataLen = 	choiceSelectionGateMatchingData.length;
					for( var a = 0 ; a < choiceSelectionGateMatchingDataLen ; a++ ){
						if( choiceSelectionGateMatchingData[a].feedback != undefined &&
							choiceSelectionGateMatchingData[a].feedback != null &&
							choiceSelectionGateMatchingData[a].feedback != "" ){
							enableFeedback = true;
							break;
						}
					}
					
					$( '.choiceOptionListItem' ).removeClass( 'choiceOptionSelected' ); 
					useEvent.removeClass( "skinSecondaryColorBG" );
					useEvent.addClass( "choiceOptionSelected" );
					//useEvent.find( '.selectOptionNotice' ).text( "SELECTING..." );
					//pageAssessmentSelectionArray[0][ useEvent.closest( '.choiceList_Item' ).index() ] = String( useEvent.index() );
					if( pageAssessmentSelectionArray[0].indexOf( "off" ) == -1 ){
						if( enableFeedback ){
							continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
						}else{
							//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
							if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
								continueButtonUpdate("Right", "CONTINUE", "StepForward");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
								continueButtonUpdate("Right", "CONTINUE", "Redirect");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
								continueButtonUpdate("Down", "RETRY", "Disabled");
							}
						}
					}else{
						//console.log("beep");
						continueButtonUpdate("Up", "CHECK", "Disabled");
					}
				break;
				case "Ranking":
					pageAssessmentSelectionResult = filterSpecialHandlingOutputStatus({  // returns js obj
						'action' : 				"choiceSelectionUpdate" , 
						'handlingType' : 		"Ranking" ,
						'scanChoiceList' : 		pageAssessmentSelectionArray[0] ,
						'handlingData' : 		currentBasePage_Assessment_SpecialHandlingData //currentBasePage_Assessment_SpecialHandlingData.data // step json
					});
					
					var choiceSelectionGateRankingData = 		currentBasePage_Assessment_SpecialHandlingData.data;
					var choiceSelectionGateRankingDataLen = 	choiceSelectionGateRankingData.length;
					for( var a = 0 ; a < choiceSelectionGateRankingDataLen ; a++ ){
						if( choiceSelectionGateRankingData[a].feedback != undefined &&
							choiceSelectionGateRankingData[a].feedback != null &&
							choiceSelectionGateRankingData[a].feedback != "" ){
							enableFeedback = true;
							break;
						}
					}
					
					$( '.choiceOptionListItem' ).removeClass( 'choiceOptionSelected' ); 
					useEvent.removeClass( "skinSecondaryColorBG" );
					useEvent.addClass( "choiceOptionSelected" );
					if( pageAssessmentSelectionArray[0].indexOf( "off" ) == -1 ){
						//console.log("eep");
						if( enableFeedback ){
							continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
						}else{
							//console.log( 'outputBehavior = ' + pageAssessmentSelectionResult.outputBehavior );
							if( pageAssessmentSelectionResult.outputBehavior == 'Step Forward'){
								continueButtonUpdate("Right", "CONTINUE", "StepForward");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Redirect'){
								continueButtonUpdate("Right", "CONTINUE", "Redirect");
							}else if( pageAssessmentSelectionResult.outputBehavior == 'Retry'){
								continueButtonUpdate("Down", "RETRY", "Disabled");
							}
						}
					}else{
						//console.log("beep");
						continueButtonUpdate("Up", "CHECK", "Disabled");
					}
				break;
			}
			
		}
		if( !choiceSelectionGate && !choiceOptionSelectionGate ){ // no selections are made, disallow checking results
			if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" || 
				currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
				pageAssessmentSelectionResult = {};
				continueButtonUpdate("Up", "CHECK", "Disabled");
			}
		}
	}
	
	
	
	if( focusControl.updateFocusAfterAction == "StepAssessmentChoiceOption-SelectionMade" ){
		if( $('.CET-Activity-Content-Assessment-PageChoiceSet').find( '.choiceOptionSelected' ).length > 0 ){
			//console.log( "option selected" );
			useEvent.find( '.choiceOptionListContainer .choiceOptionSelected' ).focus();
			focusControl.updateFocusAfterAction = "";
			updateFocus({ 'action' : "Update" });
		}else{
			//console.log( "option first" );
			useEvent.find( '.choiceOptionListContainer .choiceOptionFirst' ).focus();
			focusControl.updateFocusAfterAction = "";
			updateFocus({ 'action' : "Update" });
		}
	}
	
	/*
	if( useEvent.find( '.choiceOptionSelected' ).length > 0 ){
		//console.log("## MEEP ##");
		//$( this ).find( '.choiceOptionSelected' ).focus();
		focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-Selected";
	}else{
		//console.log("## ZEEP ##");
		//console.log( "OPTION CNT = " + $( this ).find( '.choiceOption' ).length );
		//$( this ).find( '.choiceOptionFirst' ).focus();
		focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-First";
	}
	
	StepAssessmentChoiceOption-SelectionMade
	*/
	/*
	switch( focusControl.updateFocusAfterAction ){
		case "StepAssessmentChoiceOption-Selected" :
			console.log( "option selected" );
			useEvent.find( '.choiceOptionListContainer .choiceOptionSelected' ).focus();
			focusControl.updateFocusAfterAction = "";
			updateFocus();
		break;
		case "StepAssessmentChoiceOption-First" :
			console.log( "option first" );
			useEvent.find( '.choiceOptionListContainer .choiceOptionFirst' ).focus();
			focusControl.updateFocusAfterAction = "";
			updateFocus();
		break;
	}
	*/
	// should reflect shuffled choice options
	function setupChoiceOptions(){ // inner function
		var optionStack = "";
		var choiceBlockIndex = useEvent.index();
		var choiceLabel = "";
		var optionsDataPath = "";
		var targetIDType = "";
		var choiceLabelType = "";
		var choiceOptionListUDG = "";
		var setAssessType = "";
		switch(currentBasePage_Assessment_Type){
			case "Matching": // receive oid of selected option
				choiceOptionListUDG = "StepAssessmentMatchingSubChoices";
				optionsDataPath = currentBasePage_Assessment_OutputList[choiceBlockIndex].choiceOptions;
				choiceLabelType = "text";
				targetIDType = "oid";
				setAssessType = "Matching";
			break;
			case "Ranking": // receive oid of selected option
				choiceOptionListUDG = "StepAssessmentRankingSubChoices";
				optionsDataPath = currentBasePage_Assessment_OutputList;
				choiceLabelType = "outputDisplayText";
				targetIDType = "choiceID";
				setAssessType = "Ranking";
			break;
		}
		optionStack += 		'<div class="choiceOptionListContainer hidden">';
		optionStack += 			'<ul class="choiceOptionList UDArrowGroup" data-UDArrowGroup="' + choiceOptionListUDG + '">';
		for( var a = 0 ; a < optionsDataPath.length ; a++ ){
			var choiceOptionExtremePoz = "";
			var choiceOptionSelected = "";
			if( pageAssessmentSelectionArray[0][choiceBlockIndex] == optionsDataPath[a][targetIDType] ){
				choiceOptionSelected = " choiceOptionSelected";
			}
			choiceLabel = optionsDataPath[a][choiceLabelType];
			if( a == 0 ){
				choiceOptionExtremePoz = " choiceOptionFirst";
			}
			if( a == optionsDataPath.length-1 ){
				choiceOptionExtremePoz = " choiceOptionLast";
			}
			//var fillSlotNum = .closest( '.choiceList_Item' ).index();
			
			switch(currentBasePage_Assessment_Type){
				
				/*
				"stepAssessmentMatchSlot1" : 		"Matching Slot ", //"Matching Slot [var1] : [var2] : Use space or return to open the list of items to rank",
				"stepAssessmentMatchSlot2" : 		" : Use space or return to open the list of possible matching options.",
				"stepAssessmentMatchSlotOption1" : 	"Matching Slot [var1] : Option [var2] of [var3] : ", // "Matching Slot [var1] : Option [var2] of [var3] : Use space or return to place this option in matching slot [var1]",
				"stepAssessmentMatchSlotOption2" : 	" : Use space or return to place this option in matching slot [var1] ",
				*/
				
				case "Matching": // receive oid of selected option
					var matchFill1 = placeLocalizedContent({
						'srcData' : 		langPack.screenreader.stepBase.stepAssessmentMatchSlotOption1 ,
						'placementMode' : 	"Return" , 
						'varSet' : 			[
							choiceBlockIndex+1 ,
							a+1 , 
							optionsDataPath.length // choiceBlockIndex+1
						]
					});
					optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceMatchingOptionListItemAccess">' + matchFill1 + '</span>' + choiceLabel + '<span class="accessViz choiceMatchingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentMatchSlotOption2 + (choiceBlockIndex+1) + '</span></li>';
					//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceMatchingOptionListItemAccess">' + setAssessType + ' Slot ' + (choiceBlockIndex+1) + ' : Option ' + (a+1) + ' of ' + optionsDataPath.length + ' : </span>' + choiceLabel + '<span class="accessViz choiceMatchingOptionListItemAccessSpaceReturn"> : Use space or return to place this option in matching slot ' + (choiceBlockIndex+1) + '</span></li>'; 
				break;
				case "Ranking": // receive oid of selected option
					//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + setAssessType + ' Slot ' + (choiceBlockIndex+1) + ' : Option ' + (a+1) + ' of ' + optionsDataPath.length + ' : </span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn"> : Use space or return to place this option in ranking slot ' + (choiceBlockIndex+1) + '</span></li>'; 
					//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 + '</span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 + (choiceBlockIndex+1) + '</span></li>';
					var rankFill1 = placeLocalizedContent({
						'srcData' : 		langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 ,
						'placementMode' : 	"Return" , 
						'varSet' : 			[
							choiceBlockIndex+1 ,
							a+1 , 
							optionsDataPath.length // choiceBlockIndex+1
						]
					});
					optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + rankFill1 + '</span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption2 + (choiceBlockIndex+1) + '</span></li>';
					
					
					
				break;
			}
			
		}
		
/*

langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected2
	
"stepAssessmentSAMCTextUnselected1" : "Choice Label : ",
"stepAssessmentSAMCTextUnselected2" : " : Use space or return to select this option",
"stepAssessmentSAMCTextSelected1" : "Choice Label : ",
"stepAssessmentSAMCTextSelected2" : " : This is the selected option.",
"stepAssessmentMAMCTextUnselected1" : "Choice Label : ",
"stepAssessmentMAMCTextUnselected2" : " : This option is not selected.  Use space or return to select this option.",
"stepAssessmentMAMCTextSelected1" : "Choice Label : ",
"stepAssessmentMAMCTextSelected2" : " : This option is selected.  Use space or return to de-select this option.",
"stepAssessmentRankSlot1" : 		"Ranking Slot ", //"Ranking Slot [var1] : [var2] : Use space or return to open the list of items to rank",
"stepAssessmentRankSlot2" : 		" : Use space or return to open the list of items to rank",
"stepAssessmentRankSlotOption1" : 	"Ranking Slot [var1] : Option [var2] of [var3] : ", // "Ranking Slot [var1] : Option [var2] of [var3] : Use space or return to place this option in ranking slot [var4]",
"stepAssessmentRankSlotOption2" : 	" : Use space or return to place this option in ranking slot [var1]"	
*/
		
		optionStack += 			'</ul>';
		optionStack += 		'</div>';
		return optionStack;
	}
	
	function toggleChoiceIndication( context ){ // inner function
		//console.log("sneep");
		var setStatus = 			context.setStatus;
		var targetObject = 	context.targetObject;
		if( targetObject == undefined ){
			targetObject = useEvent;
		}
		if( $.isNumeric( Number(setStatus) ) ){
			switch(currentBasePage_Assessment_Type){
				case "Matching": // receive oid of selected option
					//console.log( "parentChoiceBlockIndex = " + parentChoiceBlockIndex );
					//console.log( "optionOID = " + optionOID );
					pageAssessmentSelectionArray[0][parentChoiceBlockIndex] = String(optionOID);
					useEvent.closest( '.choiceList_Item' ).find( '.selectOptionNotice' ).html( currentBasePage_Assessment_OutputList[parentChoiceBlockIndex].choiceOptions[optionVizStackIndex].text );
					useEvent.closest( '.choiceList_Item' ).attr( 'data-choiceListItemStatus' , "Selected" );
					useEvent.closest( '.choiceList_Item' ).addClass( 'skinPrimaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).find( '.selectOptionNotice' ).addClass( 'skinSecondaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).find( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).removeClass( 'dropped' );
					useEvent.closest( '.choiceList_Item' ).find( '.choiceOptionListContainer' ).slideUp( 250 , function() {
						useEvent.closest( '.choiceList_Item' ).find( '.choiceOptionListContainer' ).remove(); // remove last
					});
				break;
				case "Ranking":
					// setStatus = var optionVizStackIndex = Number( useEvent.index() ); // index of the option in the visual droplist stack
					optionCID = String( currentBasePage_Assessment_OutputList[setStatus].choiceID );
					//console.log( "setStatus = " + setStatus );
					//console.log( "optionCID = " + optionCID );
					//console.log( "parentChoiceBlockIndex = " + parentChoiceBlockIndex );
					
					// check if id is already used in the usage array 
					if( pageAssessmentSelectionArray[0].indexOf( optionCID ) != -1 ){
						// if already exists, grab the index where it is alrady used
						var grabExistingIndex = pageAssessmentSelectionArray[0].indexOf( optionCID );
						// set that index to "off"?
						pageAssessmentSelectionArray[0][grabExistingIndex] = "off";
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').find('.selectOptionNotice').html( langPack.ui.stepBase.stepAssessment.selectOption );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').attr( 'data-choiceListItemStatus' , 'Unselected' );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').removeClass( 'skinPrimaryColorBG' );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').find('.CET-Choice-Radio').removeClass( 'skinSecondaryColor' );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').find('.CET-Choice-Radio').removeClass( 'skinSecondaryColorBG' );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').find('.CET-Choice-Radio').removeClass( 'skinSecondaryColorBoxShadow_ChoiceRadio' );
						$('.choiceList_Item:nth-child(' + (grabExistingIndex+1) + ')').find('.selectOptionNotice').removeClass( 'skinSecondaryColorBG' );
						//console.log( "gei = " + grabExistingIndex );
					}
					
					//if( pageAssessmentSelectionArray[0][parentChoiceBlockIndex] != "off"){
						//var grabExistingOptionCID = pageAssessmentSelectionArray[0][parentChoiceBlockIndex];
					//}
					
					pageAssessmentSelectionArray[0][parentChoiceBlockIndex] = optionCID;
					useEvent.closest( '.choiceList_Item' ).find( '.selectOptionNotice' ).html( currentBasePage_Assessment_OutputList[setStatus].outputDisplayText );
					useEvent.closest( '.choiceList_Item' ).attr( 'data-choiceListItemStatus' , "Selected" );
					useEvent.closest( '.choiceList_Item' ).addClass( 'skinPrimaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).find( '.selectOptionNotice' ).addClass( 'skinSecondaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).find( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
					useEvent.closest( '.choiceList_Item' ).removeClass( 'dropped' );
					useEvent.closest( '.choiceList_Item' ).find( '.choiceOptionListContainer' ).slideUp( 250 , function() {
						useEvent.closest( '.choiceList_Item' ).find( '.choiceOptionListContainer' ).remove(); // remove last
					});
					
					// swap storage/visuals of elements if setting a rank that already exists in another slot
					
				break;
			}
		}else{
			switch( setStatus ){ // set status to given
				case "off" :
					pageAssessmentSelectionArray[0][useEvent.index()] = "off";
					targetObject.css('color', '#54524C');
					targetObject.removeClass('choiceSelected');
					//useEvent.find('.CET-Choice-Radio').css('color', 'rgba(255,255,255,0)'); // make inner dot transparent
					switch( currentBasePage_Assessment_Type ){
						case "Single Answer - Multiple Choice":
							for( var i = 1; i <= targetObject.length ; i++ ){
								pageAssessmentSelectionArray[0][i-1] = "off";
							}
						break;
					}
					if( currentBasePage_Assessment_Variant == "Media" ){ // reset siblings
						targetObject.find('.mediaGridCaptionBoxInner').css('background', '#e3e1da');
						targetObject.find('.mediaGridCaptionBoxInner').css('color', '#54524C');
						targetObject.find('.mediaGridBoxInner').css('box-shadow', '0 0 0 3px #e3e1da');
						targetObject.find('.CET-Choice-Radio .radioInner').css('background', 'transparent');
						//targetObject.find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px #54524C');
					}else{
						targetObject.css('background', '#e3e1da');
					}
					switch(currentBasePage_Assessment_Type){
						case "Single Answer - Multiple Choice":
						case "Multiple Answer - Multiple Choice":
						case "Advanced Multiple Answer - Multiple Choice":
							targetObject.find('.CET-Choice-Radio .radioInner').css('background', 'transparent');
							targetObject.attr( 'data-selectionStatus' , "Unselected" );
						break;
						case "Matching": // receives 
							//targetObject.find('.CET-Choice-Radio .radioInner').css('background', 'transparent');
						break;
					}
					switch(currentBasePage_Assessment_Type){
						case "Advanced Multiple Answer - Multiple Choice":
							//targetObject.attr( 'data-selectionStatus' , "Unselected" );
						break;
					}
					targetObject.find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px #54524C');
				break;
				case "on" : // no targetObject provided?
					pageAssessmentSelectionArray[0][targetObject.index()] = "on";
					//switch(currentBasePage_Assessment_Type){
						//case "Single Answer - Multiple Choice":
							targetObject.find('.CET-Choice-Radio .radioInner').css('background', skinSecondaryColor);
						//break;
						//case "Multiple Answer - Multiple Choice":
							// targetObject.find('.CET-Choice-Radio .radioInner').css('background', skinSecondaryColor);
						//break;
					//}
					targetObject.addClass('choiceSelected');
					if( currentBasePage_Assessment_Variant == "Media" ){
						targetObject.find('.mediaGridBoxInner').css('box-shadow', '0 0 0 3px ' + skinPrimaryColor);
						targetObject.find('.mediaGridCaptionBoxInner').css('background', skinPrimaryColor);
						targetObject.find('.mediaGridCaptionBoxInner').css('color', 'white');
						targetObject.find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px ' + skinSecondaryColor + ', 0px 0px 5px 2px ' + skinPrimaryColor + ', 0px 0px 6px 3px white');
					}else{
						useEvent.css('background', skinPrimaryColor);
					}
					// engage selected item
					//useEvent.css('background', skinPrimaryColor);
					useEvent.css('color', 'white');
					switch(currentBasePage_Assessment_Type){
						case "Single Answer - Multiple Choice":
							$('.choiceList_Item').attr( 'data-selectionStatus' , "Unselected" );
						break;
					}
					switch(currentBasePage_Assessment_Type){
						case "Single Answer - Multiple Choice":
						case "Multiple Answer - Multiple Choice":
						case "Advanced Multiple Answer - Multiple Choice":
							targetObject.attr( 'data-selectionStatus' , "Selected" );
						break;
					}
					useEvent.find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px ' + skinSecondaryColor + ', 0px 0px 5px 2px ' + skinPrimaryColor + ', 0px 0px 6px 3px white');
				break;
			}
		}
		//return pageAssessmentSelectionArray[0].indexOf("on"); // may return multiple "on"s
	}
	
}
// ! F.Step.Assessment.Input reaction ---
function stepAssessmentInputReaction( context ){
	//console.log("execute reaction");
	var passedEvent = context.passedEvent;	
	var inputFieldListData = [];
	var inputFieldIsBlank = false;
	var filledCount = 0;
	var tooFewFilled = false;
	var tooManyFilled = false;
	var forceDisabledContinueButton = false;
	//var rulesPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules;
	var filledFieldsRulesPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules.filledFields;
	pageAssessmentSelectionArray[0] = [];
	$( '.choiceList_Item[data-choiceMechanism="InputFieldBasic"]' ).each(function(){
		var inputFieldListSlotData = {};
		inputFieldIsBlank = false;
		inputFieldListSlotData.inputVal = 	$(this).find( 'input' ).val();
		var tidied_FieldInput = 			inputGrinder( inputFieldListSlotData.inputVal, 'singularSpaces' );
		tidied_FieldInput = 				inputGrinder( tidied_FieldInput, 'singularSpaces' ); // need this redundancy?
		tidied_FieldInput = 				inputGrinder( tidied_FieldInput, 'curlyBracesRemoved' );
		tidied_FieldInput = 				inputGrinder( tidied_FieldInput, 'squareBracesRemoved' );
		inputFieldListSlotData.inputVal = 	tidied_FieldInput;
		if( inputFieldListSlotData.inputVal == " " ){
			inputFieldListSlotData.inputVal = "";
		}
		$(this).find( 'input' ).val( inputFieldListSlotData.inputVal );
		if( inputFieldListSlotData.inputVal == "" ){
			inputFieldIsBlank = true;
		}else{
			filledCount++;
		}
		if( inputFieldIsBlank ){
			$(this).find( '.choiceWriteInFieldListBlankInput').removeClass( "hidden" );
		}else{
			$(this).find( '.choiceWriteInFieldListBlankInput').addClass( "hidden" );
		}
		inputFieldListData.push( inputFieldListSlotData );
		pageAssessmentSelectionArray[0].push( inputFieldListSlotData.inputVal );
	});
	if( filledCount == 0 ){
		tooFewFilled = true;
		forceDisabledContinueButton = true;
	}
	if( filledCount < Number( filledFieldsRulesPath.minFilled ) ){
		tooFewFilled = true;
		if( filledFieldsRulesPath.minFilledEnforcementStatus == "Forced" ){
			// disable CHECK answers button 
			forceDisabledContinueButton = true;
		}else{
			
		}
		//console.log( "too few filled" );
		//return;
	}
	if( filledCount > Number( filledFieldsRulesPath.maxFilled ) ){
		tooManyFilled = true;
		if( filledFieldsRulesPath.maxFilledEnforcementStatus == "Forced" ){
			// disable CHECK answers button 
			forceDisabledContinueButton = true;
		}else{
			
		}
		//console.log( "too many filled" );
		//return;
	}
	if( forceDisabledContinueButton ){
		continueButtonUpdate("Right", "CONTINUE", "Disabled");
	}else{
		continueButtonUpdate("Up", "CHECK", "FeedbackCheck");
	}
	
	pageAssessmentSelectionMade({ 
		'passedObj' : 	passedEvent.target , 
		'actionType' : 	"InputFieldChange" 
	}); 
	
	//console.log( "within bounds!" );
	//console.log( inputFieldListData );
}

// ! =============================================================
// ! F.Launcher.Restart path ---
function navRestartLauncher(event){
	//showFooter = false;
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	lightBoxDialog_Level4_LaunchedFrom = 		"RestartActivityConfirmation";
	revertLightboxes('restart');
	//loadNewActivityPage("draggybox1");
	//waitCoverController({ 'coverAction' : "Launch" });
	//loadNewActivityPage({ 'loadDataFile' : 1 });
	
	// reset the clipboard history for the path being restarted
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
    var courseModule_Group = 				parseInt(splitCourseModuleGroupedActive[0]);
    var courseModule_Module = 				parseInt(splitCourseModuleGroupedActive[1]);
    var courseModule_Step = 				parseInt(splitCourseModuleGroupedActive[2]);
	//var viewStatusPath = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus;
	//if( viewStatusPath != undefined ){
		//for( var a = 0 ; a < viewStatusPath.length ; a++ ){ // loop through items in the view status array, by category grouping
			//viewStatusPath[a] = ["x"]; // set all categories to single-element array of "x"
			//viewStatusPath[0] = ["x"]; // set all categories to single-element array of "x"
			/*
			if( clipboardGridStackArray.length > 0 ){
				clipboardGridStackArray[courseModule_Group - 1] = [];
			}else{
				clipboardGridStackArray = [];
			}
			*/
		//}
	//}else{
		
	//}
	courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus = [["x"]];
	clipboardGridStackArray = [];
	
	waitCoverController({ 
		'coverAction' : 	"Launch" , 
		'loadStep' : 		1
	});
	//level4LightboxLauncher(event);
}

// ! F.Core.Check current path type ---
function checkActivePathType( context ){
	//var rawPath = 
	//var group =
	//var path = 
	//var step =  
	//masterJSONStorage.pathParamsSet[0][0].meta.pathType
}

// ! F.Launcher.Dashboard ---
function dashboardLauncher( context ){ 
	//console.log("db launch call pre 1");
	/*
	if( context.event != null && context.event != undefined && context.event != '' ){
		var event = context.event;
	}
	*/
	var launchSource = context.launchSource; // MenuButton, Scorm_Init, Internal_Init
	//console.log( "launchSource = " + launchSource );
	if(UIButtons_Supressed){
		//console.log("db launch call ui buttons supressed");
		return;
	}
	//console.log("db launch call clear supressed");
	debounceUIButtons();
	//console.log("db launch call pre 2");
	//if( devPageJump != 'disabled' ){
	//console.log( "previewPageJump = " + previewPageJump );
	if( previewPageJump != 'disabled' && previewPageJump != "done"){
		//console.log( "b" );
		//console.log("dpj != disabled");
		//devPageJump = 'disabled';
		
		//var previewPageJumpSplit = 			previewPageJump.split("_");
		//var previewPageJumpGroup = 			parseInt(previewPageJumpSplit[0]);
		//var previewPageJumpActivity = 		parseInt(previewPageJumpSplit[1]);
		//var previewPageJumpPageTarg = 	parseInt(previewPageJumpSplit[2]);
		
		currentCourseModule = 					previewPageJumpActivity - 1; //devPageJumpActivity - 1;
		dashboardSideNavItemActive = 		previewPageJumpActivity + 1; //devPageJumpActivity + 1;
		
		//var devPageJumpGroup = 		parseInt(devPageJumpSplit[0]);
		//var devPageJumpActivity = 		parseInt(devPageJumpSplit[1]);
		//var devPageJumpPageTarg = 	parseInt(devPageJumpSplit[2]);
		
		
		//CETActivityID = 							courseModuleArray[currentCourseModule].activityID;
		courseModuleGroupedActive = previewPageJump; // devPageJump;
		//console.log( "courseModuleGroupedActive = " + courseModuleGroupedActive );
		var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
		//console.log( "splitCourseModuleGroupedActive = " + splitCourseModuleGroupedActive.join("%") );
	    var courseModule_Group = 		parseInt(splitCourseModuleGroupedActive[0]);
		//console.log( "courseModule_Group = " + courseModule_Group );
	    var courseModule_Module = 	parseInt(splitCourseModuleGroupedActive[1]);
	    //console.log( "courseModule_Module = " + courseModule_Module );
	    var courseModule_Step = 		parseInt(splitCourseModuleGroupedActive[2]);
	    //console.log( "courseModule_Step = " + courseModule_Step );
    	CETActivityID = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].moduleID;
    	
    	//loadNewActivityPage('draggybox' + devPageJumpPageTarg);
    	//loadNewActivityPage('draggybox' + previewPageJumpPageTarg);
		previewPageJump = 'done'; //devPageJump = 'disabled';
		//loadNewActivityPage({ 'loadDataFile' : devPageJumpPageTarg });
		//waitCoverController({ 'coverAction' : "Launch" });
		//loadNewActivityPage({ 'loadDataFile' : courseModule_Step , 'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType });
		waitCoverController({ 
			'coverAction' : 	"Launch" , 
			'loadStep' : 		courseModule_Step ,
			'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType
		});
	}else{
		//console.log("dpj = disabled");
		mediaGridStacksEnabled = true;
		/*
		//if(currentDashboardSelectedArea == "courseModule"){
		if( launchSource == "MenuButton" ){
			console.log('mb launcher');
			if( !courseAssessment_Present ){
				console.log('activitiesCompleteCount = ' + activitiesCompleteCount );
				console.log('sideNavLearningModuleTotalCount = ' + sideNavLearningModuleTotalCount );
				if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // all activities / modules completed
				//if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
					courseStatusObject.courseAssessmentScore = 100;
					if( !courseSurvey_Present ){
						setCourseProgressLMS('passed');
					}else{
						setCourseProgressLMS('completed');
					}
					prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
				    if( toggleSessionTimeAccrue ){
						setSessionTime();
					}
					setScore(); // also sets suspend data
					toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
				}
			}else{
				setSuspendData();
			}
		}
		*/
		//console.log("db launch call");
		//waitCoverController({ 'coverAction' : "Hide" });
		level3LightboxLauncher("dashboard");
		/*waitCoverController({ 
			'coverAction' : 	"Launch" , 
			'loadPanel' : 		"Dashboard"
		});*/
	}
	//waitCoverController({ 'coverAction' : "Hide" });
}
// ! =============================================================
// ! F.Megazoom.Image size grabbing for dynamic sizing ---
function imageGrabWH(fileName){
	
	//function imageLoader(){
		
		//var imageSrc = 			fileName + '?q=' + Math.random();
		var imageSrc = 			fileName;
		var img = 					new Image();
		var loaded = 				false;
		var wait;
		imageZoomWidthHeightArray = [];
		
		img.addEventListener('load', function (){
			loaded = true;
		}, true);
	
		wait = setInterval(function(){
		   // loaded ? clearInterval(wait) : //console.log(img.width + 'x' + img.height + '<br>' + img.naturalWidth + 'x' + img.naturalHeight);
		   //loaded ? clearInterval(wait) : completed()
		   completedCheck()
		}, 0);
	
		document.body.appendChild(img);
	
		img.setAttribute('src', imageSrc);

		function completedCheck(){
			if(loaded){
				//console.log();
				clearInterval(wait);
				imageZoomWidthHeightArray.push(img.naturalWidth);
				imageZoomWidthHeightArray.push(img.naturalHeight);
				document.body.removeChild(img);
			}
		}
	
	//}
	
	//return imageLoader();

	/*
	var img = 					new Image();
	img.src = 					fileName;
	img.style.position = 	"absolute";
	img.style.left = 			-9999;             // Image width must not exceed 9999 pixels
	img.style.visibility = 	"hidden";    // Maybe you can remove this
	document.body.appendChild(img);
	var imgWidth = 			img.width;
	var imgHeight = 		img.height;
	//alert("image height = "  + imgHeight + ", image width = " + imgWidth); 
	//console.log(imgWidth + " --- " + imgHeight);
	document.body.removeChild(img);
	*/
}
// ! F.Megazoom.Delay Relay ---
function rebuildMegazoomDelayRelay(){
	//UIButtons_Supressed = true;
	//console.log("rbmzdlrly");
	if(!rebuildMegazoomDone){
		rebuildMegazoomDone = true;
	}else{
		return;
	}
	clearTimeout(imageZoomRebuildDelayTimer);
	imageZoomRebuildDelayTimer = setTimeout(function(){
		if(lightBoxDialog_Level4_Engaged){
			//lightBoxDialog_Level4_closeMethod = closeMethod;
			//$('#lightBoxDialog-Level4').dialog('close');
			//$('#lightBoxDialog-Level4').empty();
			//level4LightboxContentPlacer(enlargementItemPage_Nav_CurrentPage, null);
			if(lightBoxViewerTool == "image-zoom-basic"){
			  newEnlargementItemPageAction(true); // rebuild the zoomer to fit properly, difficult to resize directly
			  //$('#lightBoxDialog-Level4').empty();
			  //level4LightboxContentPlacer(enlargementItemPage_Nav_CurrentPage, null);
			}
		}
	},700);
}
// ! F.Megazoom.Build and embed ---
function megazoomEmbed( context ){
	
	var usage = 				context.usage; // mediaViewer | basePageContent | basePageAssessment
	var largeMediaFile = 	context.largeImage;
	var navMediaFile = 		context.navImage;
	var zoomNavPoz = 				context.zoomNavPoz;
	var parentContainerID;
	var playListAndSkinID;
	
	var useWidth = $('#lightBoxDialog-Level4').width();
	
	//console.log( "masterJSONStorage.lightboxLevel4WBeforeFS = " + masterJSONStorage.lightboxLevel4WBeforeFS );
	
	if( masterJSONStorage.lightboxLevel4WBeforeFS != undefined ){
		useWidth = masterJSONStorage.lightboxLevel4WBeforeFS;
		//delete masterJSONStorage.lightboxLevel4WBeforeFS;
	}
	console.log( "mgze context = " + JSON.stringify( context , null , 4 ) );
	//console.log('mgze');
	//console.log(largeMediaFile + ' --- ' + navMediaFile);
	if(megazoomPrimed){
		var originalFileExtension = simpleFileExtensionExtract(largeMediaFile);
		var enlargementMediaFilePath;
		//var enlargementMediaFilePath = '../img/contentImages/large/' + largeMediaFile;
		if(mediaGridStacksEnabled){ // if launching from clipboard -- NEED TO HANDLE RESOURCES TOO
	    	//enlargementMediaFilePath = '../../content/' + CETActivityID + '/clipboard/' + largeMediaFile;
	    	//enlargementMediaFilePath = '../../content/' + CETActivityID + '/media/' + largeMediaFile;
	    	//enlargementMediaFilePath = CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + largeMediaFile;
	    	enlargementMediaFilePath = mediaPathConstructor({ mediaFileName : largeMediaFile });
    	}else{
	    	//enlargementMediaFilePath = '../../content/' + CETActivityID + '/media/' + largeMediaFile;
	    	//enlargementMediaFilePath = CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + largeMediaFile;
	    	enlargementMediaFilePath = mediaPathConstructor({ mediaFileName : largeMediaFile });
    	}
		//var navigatorMediaFilePath = 		'../img/contentImages/thumb/' + ( largeMediaFile.substr(0, (largeMediaFile.lastIndexOf('.') - 2) ) + '_n.' + originalFileExtension);
		// large file should end with "_f" before extension, which allows this to remove the "_f" and add "_n" for navigator small file
		//var navigatorMediaFilePath = 		'../../content/' + CETActivityID + '/media/' + ( largeMediaFile.substr(0, (largeMediaFile.lastIndexOf('.') - 2) ) + '_n.' + originalFileExtension);
		//mediaPathConstructor({ mediaFileName : largeMediaFile.substr(0, (largeMediaFile.lastIndexOf('.') - 2) ) + '_n.' + originalFileExtension })
		//var navigatorMediaFilePath = 		mediaPathConstructor({ mediaFileName : largeMediaFile.substr(0, (largeMediaFile.lastIndexOf('.') - 2) ) + '_n.' + originalFileExtension });
		
		//mediaGridDataArray[launchedGridStackGroup][useLaunchItem + 1][3];
		//mediaGridDataArray = clipboardGridStackArray;
		
		//mediaPathConstructor({ mediaFileName : navMediaFile });
		var navigatorMediaFilePath = 		mediaPathConstructor({ mediaFileName : navMediaFile });
		//console.log(navigatorMediaFilePath);
		
		//var navigatorMediaFilePath = 		CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + ( largeMediaFile.substr(0, (largeMediaFile.lastIndexOf('.') - 2) ) + '_n.' + originalFileExtension);
		//var enlargementMediaWH = imageGrabWH(enlargementMediaFilePath);
		var img = 					new Image();
		var loaded = 				false;
		var wait;
		var showNavigatorToggle = 'yes';
		var winW = window.innerWidth; //$(window).width();
		var winH = window.innerHeight; //$(window).height();
		if( winH < winW && winW < 640 ){
			showNavigatorToggle = 'no';
		}
		if( winH > winW && winH < 640 ){
			showNavigatorToggle = 'no';
		}
		imageZoomWidthHeightArray = [];
		img.addEventListener('load', function (){
			loaded = true;
		}, true);
		wait = setInterval(function(){
		   // loaded ? clearInterval(wait) : //console.log(img.width + 'x' + img.height + '<br>' + img.naturalWidth + 'x' + img.naturalHeight);
		   //loaded ? clearInterval(wait) : completed()
		   completedCheck()
		}, 0);
		document.body.appendChild(img);
		img.setAttribute('src', enlargementMediaFilePath);
		function completedCheck(){
			if(loaded){
				//console.log();
				clearInterval(wait);
				imageZoomWidthHeightArray.push(img.naturalWidth);
				imageZoomWidthHeightArray.push(img.naturalHeight);
				//console.log(imageZoomWidthHeightArray.join());
				var zoomerW;
				var zoomerH;
				switch( usage ){
					case "mediaViewer" : 
						zoomerW = 					$('#lightBoxDialog-Level4').width(); //useWidth;
						zoomerH = 					$('#lightBoxDialog-Level4').height();
						parentContainerID = 		"imageLoadBox-Zoom";
						playListAndSkinID = 		"imageViewer-Zoom";
						controllerOffsetY = 		10;
					break;
					case "basePageContent" : 
						$('#CET-Activity-Content-Main-MediaBlock').css({ "min-height" : "500px" });
						zoomerW = 					$('#CET-Activity-Content-Main-MediaBlock').width();
						zoomerH = 					$('#CET-Activity-Content-Main-MediaBlock').height();
						
						parentContainerID = 		"basePageHotSpotMapContainer";
						playListAndSkinID = 		"basePageContentHotSpotMap-Zoom";
						controllerOffsetY = 		0;
					break;
					case "basePageAssessment" : 
					
					break
				}
				
				console.log( "usage = " + usage );
				console.log( "useWidth = " + useWidth );
				console.log( "zoomerW = " + zoomerW );
				console.log( "zoomerH = " + zoomerH );
				
				megazoom =  new FWDMegazoom({
					//----main----//
					//parentId:								"myDiv",
					parentId:									parentContainerID,
					//playListAndSkinId:					"megazoomPlayList",
					//playListAndSkinId:					playListAndSkinID, // prev version
					markersAndInfoWindowId:			playListAndSkinID, // new version
					displayType:								"responsive",
					//skinPath:								"skin_minimal_dark/skin/",
					//skinPath:								"../css/3p/megazoom/skin_minimal_dark/skin/",
					skinPath:									megazoomSkinPath,
					//imagePath:								"skin_minimal_dark/imageToZoom.jpg",
					imagePath: 								enlargementMediaFilePath,
					preloaderText:							"Loading image...",
					useEntireScreen:						"yes",
					addKeyboardSupport:					"yes",
					addDoubleClickSupport:				"yes",
					disableMouseWheel:					"no", // new version
					autoScale:									"yes", // new version
					zoomerWidth:							zoomerW, //imageZoomWidthHeightArray[0], // 6000, // new version
					zoomerHeight:							zoomerH, //$('#imageLoadBox').outerHeight(true), //imageZoomWidthHeightArray[1], // 6000, // new version
					imageWidth:								imageZoomWidthHeightArray[0], // 3600,
					imageHeight:								imageZoomWidthHeightArray[1], // 2809,
					zoomFactor:								1.6,
					doubleClickZoomFactor:				1,
					//startZoomFactor:					"default",
					startZoomFactor:						0,
					panSpeed:									8,
					zoomSpeed:								.1,
					//backgroundColor:					"#FFFFFF",
					//backgroundColor:					'transparent',
					backgroundColor:						'#000000',
					preloaderFontColor:					"#585858",
					preloaderBackgroundColor:			"#FFFFFF",
					//----lightbox-----//
					lightBoxWidth:							800,
					lightBoxHeight:							550,
					lightBoxBackgroundOpacity:		.8,
					lightBoxBackgroundColor:			"#000000",
					//----controller----//
					// "info" label removed for basic megazoom, as no icons are available on the image
					//buttons:									"moveLeft, moveRight, moveDown, moveUp, scrollbar, hideOrShowMarkers, hideOrShowController, info, fullscreen",
					//buttons:									"moveLeft, moveRight, moveDown, moveUp, scrollbar, hideOrShowMarkers, hideOrShowController, fullscreen",
					buttons:									"scrollbar, fullscreen",//"moveLeft, moveRight, moveDown, moveUp, scrollbar, fullscreen",
					buttonsToolTips:						"Zoom level: , Full screen/Normal screen",//"Move left, Move right, Move down, Move up, Zoom level: , Full screen/Normal screen",
					controllerPosition:						"bottom",
					inversePanDirection:					"yes",
					startSpaceBetweenButtons:		10,
					spaceBetweenButtons:				10,
					startSpaceForScrollBarButtons:	20,
					startSpaceForScrollBar:				6,
					hideControllerDelay:					3,
					controllerMaxWidth:					934,
					controllerBackgroundOpacity:		1,
					controllerOffsetY:						controllerOffsetY, //10,//3,
					scrollBarOffsetX:						0,
					scrollBarHandlerToolTipOffsetY:	4,
					zoomInAndOutToolTipOffsetY:	4, // -4
					buttonsToolTipOffsetY:				4, // 0
					hideControllerOffsetY:					14, // 2
					buttonToolTipFontColor:				"#a4a1a1",
					//----navigator----//
					//showNavigator:						"yes",
					showNavigator:							showNavigatorToggle,
					showNavigatorOnMobile:				"yes", // new version -- needed?  handled manually elsewhere?
					//navigatorImagePath:				"skin_minimal_dark/navigatorImage.jpg",
					navigatorImagePath: 					navigatorMediaFilePath,
					navigatorPosition:						zoomNavPoz , //"topright",
					navigatorOffsetX:						6,
					navigatorOffsetY:						6,
					navigatorHandlerColor:				"#FF0000",
					navigatorBorderColor:					"#AAAAAA",
					//----info window----//
					infoWindowBackgroundOpacity:	.6,
					infoWindowBackgroundColor:		"#FFFFFF",
					infoWindowScrollBarColor:			"#a4a1a1",
					//----markers-----//
					showMarkersInfo:						allowHotSpotMarkersInfoPanel, 
					//markerToolTipOffsetX:				0, // available? docs have typo with Y twice -- revisit if needed...
					markerToolTipOffsetY:				0,
					//----context menu----//
					showScriptDeveloper:					"no",
					contextMenuLabels:					"Move left, Move right, Move down, Move up, Zoom in/Zoom out, Hide markers/Show markers, Hide controller/Show controller, Info, Full screen/Normal screen",
					contextMenuBackgroundColor:	"#393939",
					contextMenuBorderColor:			"#6c6c6c",
					contextMenuSpacerColor:			"#6c6c6c",
					contextMenuItemNormalColor:		"#a4a1a1",
					contextMenuItemSelectedColor:	"#FFFFFF",
					contextMenuItemDisabledColor:	"#545252"
				});
				document.body.removeChild(img);
				//$('#imageLoadBox > div > div > img').addClass("zoomerMainImage");
				if( currentBasePage_Meta_nodeContentType != "HotSpots" ){ 
					maximizerDelayRelay({ 'origin' : "megaZoomEmbed" });
				}
			}
		}
		//console.log(enlargementMediaFilePath);
		//console.log(navigatorMediaFilePath);
		//$('#imageLoadBox > div').addClass('megazoomInnerContainer');
	}
}
// ! =============================================================
// ! F.Megazoom.ResponseCallback--
function megazoomResponseCallback( context ){
	console.log("mgzRC");
	var event = context.event;
	var responseType = context.responseType;
	switch( responseType ){
		case "test" : 
			console.log( "mgzRC test" );
		break;
		case "hotSpotsPlaced" : 
			console.log("hotSpotsPlaced");
			var HSCountup = 0;
			//$("#basePageHotSpotMapContainer").find("div").first().find("div").first().find("div").each(function(){
			// very dependent on specific megazoom dom setup, careful of changes to this!
			$( "#basePageHotSpotMapContainer > div:first-child > div:first-child > div" ).each(function(){
				//console.log( "HSCountup = " + HSCountup ) ;
				if( HSCountup > 0 ){ // bypass the first div in stack, which is used as a cursor overlay(?)
					$(this).addClass("HSNode");
					$(this).attr("data-hsNodeID" , HSCountup);
				}
				HSCountup++;
			});
		break;
	}
}

// ! F.Core.SideNav.Trigger Helper ---
function sideNavTrigger(targetSideNav, targetElement){
	// improve this for better dynamic targeting, too rigid now
	switch (targetSideNav){
		case 'about':
			switch (targetElement){
				case 'credits':
					//aboutSideNavItemActive = 3;
					aboutSideNavItemActive = 1;
					break;
			}
			break;
	}
	
}
// ! F.Core.UI.Nav.Rotate item ---
function rotateNavItem(direction){
	//var rotVal;
	if(direction ==  "out"){
		//rotVal = -50;
		navSubMenuLaunched = true;
		$("#navItem-menu .navItemInnerContainer").addClass('rotatedOpen');
		$("#navItem-menu").addClass('open');
	}else{
		rotVal = 0;
		navSubMenuLaunched = false;
		$("#navItem-menu .navItemInnerContainer").removeClass('rotatedOpen');
		$(document).off("click", ".CET-NavItem-IconArrow");
		$(document).off("click", "#navItem-menu");
		if($('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length > 0) {
	        $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').show();
        }
        $("#navItem-menu").removeClass('open');
	}
	/*
	$("#navItem-menu .navItemInnerContainer").css('-webkit-transform', 'rotateX(' + rotVal + 'deg)');
	$("#navItem-menu .navItemInnerContainer").css('-moz-transform', 'rotateX(' + rotVal + 'deg)');
	$("#navItem-menu .navItemInnerContainer").css('-o-transform', 'rotateX(' + rotVal + 'deg)');
	$("#navItem-menu .navItemInnerContainer").css('-ms-transform', 'rotateX(' + rotVal + 'deg)');
	$("#navItem-menu .navItemInnerContainer").css('transform', 'rotateX(' + rotVal + 'deg)');
	
	if(direction ==  "in"){ // add number back after animation if it should be back
		if($('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length > 0) {
	        $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').show();
        }
	}
	*/
}
// ! F.Core.Lightboxes.Revert ---
function revertLightboxes(closeMethod){
	if(lightBoxDialog_Level1_Engaged){
		lightBoxDialog_Level1_closeMethod = closeMethod;
		$('#lightBoxDialog-Level1').dialog('close');
	}
	if(lightBoxDialog_Level2_Engaged){
		lightBoxDialog_Level2_closeMethod = closeMethod;
		$('#lightBoxDialog-Level2').dialog('close');
	}
	if(lightBoxDialog_Level3_Engaged){
		lightBoxDialog_Level3_closeMethod = closeMethod;
		$('#lightBoxDialog-Level3').dialog('close');
	}
	if(lightBoxDialog_Level4_Engaged){
		lightBoxDialog_Level4_closeMethod = closeMethod;
		$('#lightBoxDialog-Level4').dialog('close');
	}
}
