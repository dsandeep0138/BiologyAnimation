
//var orig_allowInteraction = $.ui.dialog.prototype._allowInteraction;

/*
$.ui.dialog.prototype._allowInteraction = function(event) {
  if ($(event.target).closest('.cke_dialog').length) {
    return true;
  }
  return orig_allowInteraction.apply(this, arguments);
};
*/

/*
$.ui.dialog.prototype._allowInteraction = function(event) {
  return true;
};
*/

// ! Override.JQUI.Register elements outside of dialogs for accessibility access
$.widget("ui.dialog", $.ui.dialog, {
    _allowInteraction: function(event) {
	    //console.log("ALLOWWWWW");
	    
        //return !!$(event.target).closest(".navItem").length || this._super(event);
        //return !!$(event.target).is(".navItem") || this._super(event);
        
        //return !!$(event.target).closest("#navItemSubMenu").length || this._super(event);
        //return !!$(event.target).is("#navItemSubMenu") || this._super(event);
        
        //return !!$(event.target).closest(".menuNavItem").length || this._super(event);
        //return !!$(event.target).is(".menuNavItem") || this._super(event);
        
		//#ariaLiveCluster
        if( $(event.target).is(".navItem") ){
	        return true;
        }else if( $(event.target).is(".menuNavItem") ){
	        return true;
        }else if( $(event.target).is("#ariaLivePolite") ){
	        return true;
        }else if( $(event.target).is("#ariaLiveAssertive") ){
	        return true;
        }else{
	        return this._super(event);
        }
        
    }
});

/* ! =[ DEV - PARAMS ]============================= */
/* =========================================== */
/* ! =[ JS - SHIMS ]============================= */

/* bug shim for ios7 safari landscape issue reporting incorrect height values, paired w/ css handling for added class status toward body and content area */

// detect safari browser
/*
if( navigator.userAgent.indexOf('Safari') != -1 && 
 navigator.userAgent.indexOf('Chrome') == -1 && 
 navigator.userAgent.indexOf('Android') == -1 ){
 	alert('saf');
	 $('html').addClass('safari');
}

// detect ios device
if(navigator.userAgent.match(/iPad;.*CPU.*OS 7_\d/i)) {
    $('html').addClass('ipad ios7');
}
if(navigator.userAgent.match(/iPhone;.*CPU.*OS 7_\d/i)) {
    $('html').addClass('iphone ios7');
}
if(navigator.userAgent.match(/iPod;.*CPU.*OS 7_\d/i)) {
    $('html').addClass('ipod ios7');
}

*/

//console.log('error check 1');

// ! Bowser sniffer 1
if(bowser.version != undefined){ // if bowser detect plugin works, use it for setting some params
	var browserVersionSplit = 	bowser.version.split('.');
	if( bowser.ios ){ // just detects ios, in preparation for mobile safari check, not yet isolating the browser 
		var osVersionSplit = 	bowser.osversion.split('.');
		//if( bowser.iphone || bowser.ipad || bowser.ipod ){ // this shows if safari or chrome, so not best choice
		if( bowser.name == "iPhone"){ // detect if is mobile safari
			 $('html').addClass('iphone');
		}
		if( bowser.name == "iPod"){ // detect if is mobile safari
			 $('html').addClass('ipod');
		}
		if( bowser.name == "iPad"){ // detect if is mobile safari
			 $('html').addClass('ipad');
		}
		if( bowser.name == "iPhone" || bowser.name == "iPod" || bowser.name == "iPad" ){ // detect if is mobile safari
			$('html').addClass('mobilesafari');
			if( osVersionSplit[0] == 6 ){
				if( osVersionSplit[1] >= 1 ){
					//browserBlocked = false;
				}
			}else if( osVersionSplit[0] == 7 ){
				$('html').addClass('ios7');
				if( osVersionSplit[1] >= 1 ){
					//browserBlocked = false;
				}
			}
		}
	}
}else{
	// bowser plugin not working -- fallback?
}

// ! =============================================================
// ! JS VARS
// ! =============================================================
//var CETCourseContentPath;
var CETUpwardLadderPath = 					'../../../'; // '../../';
//var CETActivityDirectoryPath = 			CETUpwardLadderPath + "content/activityLib/";
var PoolContentMetaPath = 					CETUpwardLadderPath + "content/authorPools/" + CETAP + "/meta/";
var CETCourseLibPath = 						CETUpwardLadderPath + "content/authorPools/" + CETAP + "/courseLib/";
var CETCourseContentPath = 					CETCourseLibPath; // for later use
var CETActivityLibPath = 					CETUpwardLadderPath + "content/authorPools/" + CETAP + "/activityLib/";
var CETActivityContentPath = 				CETActivityLibPath;

if( externalResourceData.resourceLoc != undefined && externalResourceData.resourceLoc != "" && externalResourceData.resourceLoc != null ){
	//CETActivityContentPath = 				'../../content/authorPools/' + CETAP + '/accounts/' + CETAuthorUserID + '/paths/';
	var prepCETActivityContentPath = 		'//' + externalResourceData.resourceLoc + '/stepstone/workArea/' + externalResourceData.resourceAvatar + '/';	
	CETCourseLibPath = 						prepCETActivityContentPath + '/courseLib/';
	CETCourseContentPath = 					CETCourseLibPath; // for later use
	CETActivityLibPath = 					prepCETActivityContentPath + '/activityLib/';
	CETActivityContentPath = 				CETActivityLibPath;
}

var CETDirectPath;
var CETActivityID;
var isAuthoringMode = 						false;
var authoringMode; // "PathBuilder" , "CoursePackager"					
var authoringMode_PreviewerLaunched = false;
var masterJSONStorage = 					{};
masterJSONStorage.courseProgressLoadStorage = {};
masterJSONStorage.currentStepAssessmentResult = {};
var useInitialDbox = 							1;

var skinPrimaryColor; // UI "bright" color
var skinSecondaryColor; // UI "dark" color

var skinNeutralTextColor; // disabled text/icon color

var skinTextContentPrimaryColor_Base; // base main text color
var skinTextContentPrimaryColor_BaseOverride; // base main text color
var skinTextContentPrimaryColor_SubSeqBase; // launched subsequence main text color
var skinTextContentPrimaryColor_SubSeqBaseOverride; // launched subsequence main text color

var skinLogo_MediaType; // used?
var skinLogo_MediaFile; // used?

//var mediaGridLargePath = 					'../img/contentImages/large/';
//var mediaGridThumbPath = 				'../img/contentImages/thumb/';
var mediaDefaultsPath = 					CETUpwardLadderPath + 'common/img/mediaDefaults/';
var themeDefaultsPath = 					CETUpwardLadderPath + 'common/img/themeDefaults/';
var megazoomSkinPath = 						CETUpwardLadderPath + "common/css/3p/megazoom/skin_minimal_dark/skin/";
var showHSCoords = 							"no";
var currentBasePage_Content_HotSpotArray = [];
var currentBasePage_Assessment_HotSpotArray = [];

// main content // ----------------------------
var pageTheme;
var pageTextBGPlate = 						"none"; // "none" "lightHaze" "darkHaze"
var pageMediaContainerWidth;
var pageBGImage;
// enlarger content // ----------------------------
var lightBoxViewerTool	=					"none";
//var CETCourseOnlyToggle = 				false;
// subsequence page content // ----------------------------
var subSequencePageType;
var subSequencePageTheme;
var subSequencePageTextStyle;
var subSequencePageTextBGPlate;
var subSequencePageMediaStyle;
var subSequencePageMediaContainerWidth;
var subSequencePageBGImage;
var subSequencePageAccentImage;
var useSubSequencePageType;
// assessment stuff // ----------------------------
var assessmentButtonType;
var assessmentInstruction;
var showAssessmentInstruction;
var clipboardGridStackArray =	 			[];
var allowHotSpotMarkersInfoPanel = 	"no"; // toggling yes shows overlay on zoom image with coordinates for placing hotspots
var currentCourseModule = 				null;
var currentDashboardSelectedArea = 	'courseOverview';

var courseAssessment_Present = 		false;
var courseSurvey_Present = 				false;
var courseCertificate_Present = 			false;

var courseModuleGroupedActive = 		null;

var continueButtonForceStatus = 		null;

var waitCoverControllerData = {};

masterJSONStorage.fullScreenData = {
	'latestFSCondition' : "Off"
};

//CETUpwardLadderPath += 					'../'; // add another upward motion ( becomes ../../../ )
//CETCourseContentPath = 					CETUpwardLadderPath + 'content/';

//if( CETCourseID != 'scormCourse' ){ // default for scorm bundle
	
//}
CETCourseContentPath += 					CETCourseID + "/";
//if( CETCourseID != '' ){
	
var parentComponentCaller;
//if( isAuthoringMode ){ // bad access failure point
if( persistentMode != "SCORM" ){ // bad access failure point -- check scorm
	parentComponentCaller = window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'parentComponentCaller' });
}

//if( CETCourseID != 'scormCourse' ){
if( persistentMode != "SCORM" ){
	// for accessing final builds directly via query string
	//var splitCourseID = 							CETCourseID.split
	//var courseIDSplitSeparatorList = 			['-', '_'];
	//var courseIDSplitSeparatorTokens = 	CETCourseID.split(new RegExp(courseIDSplitSeparatorList.join('|'), 'g'));
	//CETUpwardLadderPath += 					'../'; // add another upward motion ( becomes ../../../ )
	//CETCourseContentPath = 				CETUpwardLadderPath + 'content/courseLib/' + CETCourseID + '/v' + CETBuildVersion;
	//CETCourseContentPath = 					CETUpwardLadderPath + 'content/courseLib/' + CETCourseID + '/' + CETBuildVersion;
	//CETCourseContentPath += 					CETCourseID + '/' + CETBuildVersion;
	//CETCourseContentPath += 					CETCourseID;
	//if( courseIDSplitSeparatorTokens[1] == "AUTH" ){
	//if( CETCourseID == "__StepStone_AuthoringPreview" || CETCourseID == "__StepStone_AuthoringPreviewScored" ){
	if( parentComponentCaller == "PathBuilder" ){
		authoringMode = 							"PathBuilder";
		courseModuleGroupedActive = 		'1_1';
		currentDashboardSelectedArea = 	'courseModule'; //'courseActivity';
		//CETActivityDirectoryPath = 'tools/authoringtool/v3_0/atool/accounts/' + CETAuthorUserID + '/cases/' + CETAuthoringActivityID;
		//CETActivityDirectoryPath = 'tools/authoringtool/v3_0/atool/accounts/' + CETAuthorUserID + '/cases';
		//CETActivityDirectoryPath = 'tools/authoringtool' + CETAuthoringActivitySuperUserID + '/v3_0/atool/accounts/' + CETAuthorUserID + '/paths';
		//CETActivityDirectoryPath = 			'tools/authoringtool' + CETAuthoringToolPool + '/' + CETBuildVersion + '/atool/accounts/' + CETAuthorUserID + '/paths/';
		//CETActivityContentPath = 				CETUpwardLadderPath + 'tools/' + CETAuthoringToolPool + '/' + CETBuildVersion + '/atool/accounts/' + CETAuthorUserID + '/paths/';
		CETActivityContentPath = 				'../../content/authorPools/' + CETAP + '/accounts/' + CETAuthorUserID + '/paths/';
	}else if( parentComponentCaller == "CoursePackager" ){
		authoringMode = 							"CoursePackager";
	}
	
	if( previewPageJump != "disabled" ){ /* jump directly to step */
		currentDashboardSelectedArea = "courseModule";
	}
	
	
	//CETActivityContentPath += 				CETActivityDirectoryPath;
}else{
	// for accessing packaged scorm or other "off-site" hosted versions
	//CETUpwardLadderPath += 					'../'; // add another upward motion ( becomes ../../../ )
	//CETCourseContentPath = 					CETUpwardLadderPath + 'content/Meta';
	//CETCourseContentPath += 					'Meta';
	//CETActivityContentPath += 				'content';
}

if( CETAP != 'scormPool' ){ // default for scorm bundle
	if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		isAuthoringMode = true;
	}
}else{
	if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		isAuthoringMode = true;
	}
}

var useHTTP = 'http';
/* // needed?
if( window.top.location.protocol == "https" || window.top.location.protocol == "https:" ){
	useHTTP = 'https';
}
*/

//var checkIfiDevice = 								isiDevice();

var courseParamsActivityPreReqIDArray = [];
var courseStatusObjectIDStatusLookup = {};

var activeDataSource;
var courseModuleArray = 								[];
var megazoomPrimed = 									false;
var pageAssessmentNewSelectionState = 		"unchecked";
// stores summed offset for vertical content sizing
//var verticalRemoval_MarginsAndPadding;
// topmost lightbox - image, pdf, video launcher, help and about loader -- covers content, bottom nav and page title bar
var lightBoxDialog_Level4_Engaged = 				false;
// tertiary lightbox - clipboard, resources, notepad viewer -- covers content, page title. allows lower nav
var lightBoxDialog_Level3_Engaged = 				false;
var lightBoxDialog_Level3_EngagedContentType = "none";
// secondary lightbox - subpage sequence container
var lightBoxDialog_Level2_Engaged = 				false;
// lowest-level lightbox - feedback, hints response -- covers content, allows page title and lower nav
var lightBoxDialog_Level1_Engaged = 				false;
var lightBoxDialog_Level1_closeMethod = 		'internal';
var lightBoxDialog_Level2_closeMethod = 		'internal';
var lightBoxDialog_Level3_closeMethod = 		'internal';
var lightBoxDialog_Level4_closeMethod = 		'internal';
var pageAssessmentSelectionArray = 				[];
/*
// samc/mamc: // elements match visual selected status of all items in grid/stack, off by default
// represents visual stack/grid order, does NOT directly represent cid order when shuffled
[
	"off", // choice 1 - not selected
	"on", // choice 1 - selected
	"off" // choice 1 - not selected
];
// matching: // elements are off if not drop-selected, otherwise store the oid of the drop-selection 
// array order represents visual choice-block stack, does NOT directly represent cid order when shuffled. 
// numeric array elements DO represent the oid of the selected item (as they may not be drawn to dom)
[
	"off", // choice 1 - not drop selected
	"3", // choice 2 - inner option oid 3 selected
	"7" // choice 3 - inner option oid 7 selected
];
// ranking: // elements are off if not drop-selected, otherwise store the cid of the drop-selection for the visual stack item
[
	"off", // choice 1 - not drop selected
	"3", // choice 2 - inner option cid 3 selected
	"1" // choice 3 - inner option cid 1 selected
];
*/
var navSubMenuFirstLaunched = 						false;
var navSubMenuLaunched = 							false;
var showFooter = 											true;
var mediaGridStacksEnabled = 						false;
var html5VideoData = {};

html5VideoData.vimeoHTTP = 'https';
html5VideoData.vmPlayerAPI = 						null;
html5VideoData.vmPlayerAPIPlayStatus = 				"Unplayed";
html5VideoData.vmPlayerMuteStatus = 				"UnMuted";
html5VideoData.vmPlayerCaptionSelected = 			"x";
html5VideoData.youtubeHTTP = 					'https';

html5VideoData.html5mp4VPlayerAPI = 				null;
html5VideoData.html5mp4VPlayerAPIPlayStatus = 		"Unplayed";
html5VideoData.html5mp4VPlayerMuteStatus = 			"UnMuted";
html5VideoData.html5mp4VPlayerCaptionSelected = 	"x";
html5VideoData.html5mp4VPlayerMuteLock = 			false;
html5VideoData.html5mp4VPlayerAssistiveVolChange = 	false;
//var allVideos;
//var videoFluidBox;
var currentBasePage_Content_TextBoxContainerLeftPadding;
var currentBasePage_Content_TextBoxContainerRightPadding;
var currentBasePage_Content_MediaBoxHeight;
var currentBasePage_Content_ReducedTextHeight;
/*
var currentTextBoxContainerLeftPadding;
var currentTextBoxContainerRightPadding;
var currentMediaBoxHeight;
var reducedTextHeight;
*/
var enlargementItemPage_Nav_CurrentPage = 	1;
var enlargementItemPage_Nav_TotalPages;
var enlargementItemPage_Nav_MidNumRange = 	3;
var enlargementItemPage_Nav_MidSideSplit = 		Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page

var subSeqNavMidNumRange = 						3;
var subSeqNavMidSideSplit = 							Math.floor(subSeqNavMidNumRange / 2); // num of items before or after current subseq page
var activeLightBoxCount = 								0;
var lightBoxStackArray = 								[];
var imageZoomWidthHeightArray = 					[];
var helpSideNavItemActive = 							1;
var aboutSideNavItemActive = 						1;
var dashboardSideNavItemActive = 					1;

//var currentCETActivity_AuthorDataObject = {};
var currentCETActivity_AuthorDataArray = 		[];
var nodeMetaOptionList;
var currentBasePage_Meta_nodeContentType;
var currentBasePage_Meta_nodeContentVariant;
var currentBasePage_Meta_nodeContentTheme;
var currentBasePage_Meta_pageTypeIndicatorIcon;
var currentBasePage_Content_PageTitle;
var currentBasePage_Content_PageText;
var currentBasePage_Content_PageMediaList;
var currentBasePage_Content_PageMedia_BgBase;
var currentBasePage_Content_PageMedia_BgAccent;
var currentBasePage_Content_PageMedia_Main;
var currentBasePage_Content_PageMedia_Deco;
var currentBasePage_Content_PageMedia_MainGrid;
var currentBasePage_Content_PageMediaStyle;
var currentBasePage_Content_PageClipboardList;
//var currentBasePage_Content_PageBGImage;
var currentBasePage_Content_PageDeco1Image;
var currentBasePage_Content_PageBGSolidColor;
var currentBasePage_Content_PageBGSolidOpacity;
var currentBasePage_Content_TextStyle;

var currentBasePage_Content_SubSequenceStackObject = 	{};
var currentBasePage_Content_SubSequenceTotal;
var currentBasePage_Content_SubSequenceCurrentSequence;
var currentBasePage_Content_SubSequenceCurrentPage;
var currentBasePage_Content_SubSequenceCurrentPageTotal;

var currentSubSequencePage_Content_DataObject = 			{};

var currentBasePage_Assessment_Present;
var currentBasePage_Assessment_Type;
var currentBasePage_Assessment_Variant;
var currentBasePage_Assessment_Requirement
var currentBasePage_Assessment_SingleAttempt;
var currentBasePage_Assessment_InstructionText;
var currentBasePage_Assessment_HintText;
var currentBasePage_Assessment_OutputCount;
var currentBasePage_Assessment_OutputShuffle;
//var currentBasePage_Assessment_ChoiceOptionShuffle;
var currentBasePage_Assessment_OutputList;
var currentBasePage_Assessment_SpecialHandlingData;
var currentBasePage_Assessment_FeedbackWasChecked = false;

var nodeAssessment_SpecialHandling_OutputCount;
var nodeAssessment_SpecialHandling_OutputStatusMatchList = 	[];
var nodeAssessment_SpecialHandling_VitalCorrectMatchList = 				[];
var nodeAssessment_SpecialHandling_OutputDataList = 				[];
var nodeAssessment_SpecialHandling_PartialAllowed = 					false;
var nodeAssessment_SpecialHandling_NeutralAllowed = 				false;

var nodeAssessment_Patterns_VitalCorrectMatchList = 					[];

var pageAssessmentSelectionResult = 							null;
var currentBasePage_SingleMediaImageObject;
var currentBasePage_Deco1MediaImageObject;
var currentAboutPage_SingleMediaImageObject;
var currentFeedbackPage_SingleMediaImageObject;
var currentCETActivity_Clipboard_NewPageQuarantine = 	[];
var currentCETActivity_Clipboard_TotalAccumulation =	[]; 
var UIButtons_Supressed = 				false;
var enlargedMediaFileCaptionParse = 				"";
var lightBoxDialog_Level2_LaunchedFromElement = null;
var lightBoxDialog_Level4_LaunchedFrom = 	'';
var lightBoxDialog_Level4_LaunchedFromElement = null;
//var launchedMediaItem = 		null;
var launchedMediaItemTracker = {
	'BaseSingle' : 		null , 
	'FeedbackSingle' : 	null , 
	'BaseGrid' : 		null , 
	'FeedbackGrid' : 	null , 
	'SubSeqSingle' : 	null , 
	'SubSeqGrid' : 		null , 
	'ClipboardGrid' : 	null
};
//var launchedMediaItem_BaseGrid = 		null;
//var launchedMediaItem_SubSeqGrid = 		null;
//var launchedMediaItem_ClipboardGrid = 	null;
var launchedGridStackGroup = 			"none";

var postResizeTimer;
var maximizerDelayTimer;
var imageZoomRebuildDelayTimer;
var inputFieldReactionTimer;

var delayDropListSubItemReact;
var countAuthors = 							0;
var aboutSideNavArray = 					[];
var aboutSideNavMaxItems;
var aboutSideNavTotalItems = 			0;
var organization = 								'CET'; // default?
var useMasteryScore;
var courseOverviewHeader = 				'';
var courseOverviewText = 					'';
var exitMenuItem = 							'';
var courseCompletionButton = 			'';
//var courseCompletionContentTail = 	'';

//var courseAssessmentStatus = 'locked';
//var courseSurveyStatus = 'locked';
//var courseCertificateStatus = 'locked';
//var courseModuleGroupStack = 			[];
var activitiesCompleteCount = 				0;
var activitiesCompleteCountArray = 		[];
var courseStatusObject = {
	courseModuleGroupStack: 					[],//courseModuleGroupStack,
	//courseModulesScore: 							0,
	//courseAssessmentScore: 					-1,
	//courseReportedScore: 						0,
	//courseSurveyStatus: 							0,
	courseModulesCompletionDate: 			'x'//,
	//courseAssessmentCompletionDate: 	'x'
};

//var webFontAssignmentObject = {};
//loadWebFontAssignments();
//var fullSizeCertificate = false;
var ios7HeightShimVal = 						20;
var ios7HeightShimToggle = 					false;
var isMobileBrowser = 							false;
//var isipad = 								false;
//var isios7 = 								false;
var sideNavArray = [];
var certificateThumbPreparedImage;
var sideNavDropListStatus = 					"Closed";
var sideNavDropListClosedH = 				0;
var sideNavStackTotalCount = 				0;
var sideNavLearningModuleTotalCount = 	0;
var newOrientationChange = 					false;
var rebuildMegazoomDone = 					false;

var ignore = [
  //8, // backspace
  //9, // tab
  //13, // enter
  //33, // page up 
  //34, // page down
  //35, // end
  //36, // home
  //37, // left arrow
  //38, // up
  //39, // right
  //40//, // down
  //46 // delete
];
var maxCommentBoxInputLength = 		255;
var quizType;
var courseAssessmentDataArray;
var currentCourseAssessmentPage;
var currentCourseAssessmentBlockIncrement;
var courseSurveyDataArray;
var currentCourseSurveyPage;
var currentCourseSurveyBlockIncrement;
var totalCourseAssessmentScore;
var totalCourseAssessmentCorrect;
var currentCourseAssessmentPageCorrectTally;
//var dateStamp_UTC;
//var dateStamp_Verbose;
var dateStamp_CourseModules_UTC;
var dateStamp_CourseModules_Verbose;
var dateStamp_CourseAssessment_UTC;
var dateStamp_CourseAssessment_Verbose;
var monthArray = 									new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
var weekdayArray = 								new Array("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday");
var learnerName = 									"Student Name Here";
var startTime;
var completionDate;
var currentCourseModuleUserPassage = 'None';
var extraDropListOffset = 						0;//7;
var courseTitle;
var courseLicensingStack;
var fixingMobileScroll = 							false;
var courseClipBoardCatalog = 					[];
//var courseClipboardStorageArrayStack = [];
var viewPortIsNarrow = 							false;
var surveyRequirementTotal = 				0;
var persistentData = {};
persistentData.recordScore_LMS = 				false;
//persistentData.score_PassingThreshold = 	0;
//persistentData.scoreType = 						'perc'; // default, percentage
//persistentData.SimulationMode;
var confirmationBoxType = 					null;

var initAcessibleWelcome = false;

var linkNotifications = {
	"externalContentADADisclaimerDefault" : langPack.screenreader.global.externalContentADADisclaimerDefault
};

var focusControl = {};
focusControl.firstItemFocused = 			false;
focusControl.lastItemFocused = 			false;
//focusControl.debounceTabLocked = 	false;
focusControl.heldKeys = {
	'27' : 	false, // esc
	'13' :	false, // return
	'32' :	false, // space
	'38' : 	false, // arrow - up
	'40' : 	false, // arrow - down
	'9' : 	false // tab
};
focusControl.focusGrouping = 			"";
focusControl.lastFocusedElement = 	null;
focusControl.windowBlurred = 			false;
focusControl.focusEstablished = 	false;
focusControl.updateFocusAfterAction = "";
focusControl.inputFieldFocused = false;
focusControl.hotKeysCaptured = 		[]; //{}; 
focusControl.activeModifiers = {
	'control' : 	0,
	'cmd' : 		0
};
//focusControl.hotKeyDebounceLocked = false;

//console.log('error check 2');
// ! =============================================================
// ! JS INIT
// ! =============================================================
// ! DOC.Ready --- 
//console.log("authoringMode bf = " + authoringMode);
$(document).ready(function(){
	//$('#CET-Activity-Container').hide();
	//console.log('error check 3');
	
	//if( authoringMode == "None" ){
	if( !isAuthoringMode ){
		//$('body').addClass("focusVisibleEnabled");
	}else{
		
	}
	
	isMobileBrowser = $.browser.mobile; // script detection, true/false is mobile or not
	
	//skinNeutralTextColor = $('#cssPropSideCar').css('color');
	//skinNeutralTextColor = $('#cssPropSideCar').css('color');
	
	//$('#cssPropSideCar').remove();
	
	//console.log("authoringMode af = " + authoringMode);
	
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_infoonly)[0].data);
	//$('#navItem-help .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_help)[0].data);
	//$('#navItem-about .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_about)[0].data);
	//$('#navItem-restart .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_restart)[0].data);
	$('#navItem-back .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_left)[0].data);
	$('#navItem-menu .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_menu)[0].data);
	$('#navItem-continue .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow1_right)[0].data);
	$('#menuNavItem-help .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_help)[0].data);
	$('#menuNavItem-about .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_about)[0].data);
	$('#menuNavItem-restart .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_restart)[0].data);
	$('#menuNavItem-resources .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_resources)[0].data);
	//$('#menuNavItem-notepad .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_notepad)[0].data);
	$('#menuNavItem-clipboard .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_clipboard)[0].data);
	$('#menuNavItem-dashboard .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_dashboard)[0].data);
	$('#menuNavItem-exit .CET-NavItem-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.nav_exit)[0].data);
	$('#menuNavItem-bottomArrow .CET-NavItem-IconArrow').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.ui_uparrow)[0].data);
	
	$('#CET-Activity-Container').show();
	if( isAuthoringMode && authoringMode == "PathBuilder" ){
		initBasePage();
	}
	if( previewPageJump != 'disabled' ){
		initBasePage();
	}
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="StepTitle"]' ) ,
		'srcData' : 		langPack.screenreader.stepBase.stepTitle
	});
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenu"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.menu
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuNoCBItems
	});
	
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="GlobalNav"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavContinue"]' ) ,
		'srcData' : 		langPack.ui.globalNav.continueButton.continue
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavContinueSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavBack"]' ) ,
		'srcData' : 		langPack.ui.globalNav.backButton.back
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavBackSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});
	/*/
	
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuItem"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuItem"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuItem
	});
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuExitModule"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.exitModule
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuExitModuleSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.exitModule
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuExitModuleSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuHelp"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.help
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuHelpSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.help
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuHelpSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.help
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuAbout"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.about
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuAboutSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.about
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuAboutSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuRestart"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.restart
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuRestartSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.restart
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuRestartSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuClipboard"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.clipboard
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.clipboardNoCBItems
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuDashboard"]' ) ,
		'srcData' : 		langPack.ui.globalNav.menuButton.dashboard
	});
	placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuDashboardSpaceReturn"]' ) ,
		'srcData' : 		langPack.screenreader.bottomNav.menuButton.dashboard
	});
	/*placeLocalizedContent({
		'targetItem' : 		$( '[data-uiText="NavMenuDashboardSpaceReturn"]' ) ,
		'srcData' : 		langPack.ui.globalNav.
	});*/
	
	
	loadCourseMetaParams();
	//loadCourseParams();
	//loadContentPath();
	if( !isAuthoringMode && previewPageJump == 'disabled' ){
		$("#menuNavItem-about").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
		$("#menuNavItem-restart").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
		$("#menuNavItem-clipboard").addClass('disabledmenuNavItem').attr( 'tabindex' , "-1" );
	}else{
		//$("#menuNavItem-exit").hide();
		$("#menuNavItem-exit").remove();
	}
	//continueButtonUpdate("Right", "CONTINUE", "OverviewContinue");
	
	//$('#menuNavItem-resources').addClass('sneakyHider').find('*').addClass('sneakyHider'); // hiding for now as not in use at this point
	//$('#menuNavItem-resources').hide();
	//$('#CET-Activity-Container').show();
	//$('#navItemSubMenu').fadeIn();
	//$('	#CET-Activity-Content-Title-PageTypeIndicator').show();
	//$('	#CET-Activity-Content-Title-PageTypeIndicator').css('display', 'none');
	//$('	#CET-Activity-Content-Title-PageTypeIndicator').hide();
	
	//dashboardLauncher(null);
	
	//loadNewActivityPage("draggybox" + useInitialDbox);
	
	if(debugga1Status != 'disabled'){
		debugger1Setup();
	}
	
	//if( CETCourseOnlyToggle ){
	    //$('#menuNavItem-exit').hide();
	    //$('#menuNavItem-exit').remove();
    //}
	//console.log('done with done');
	//console.log('error check 4');
});

// ! WND.Load --- 
$(window).on('load', function(){
	//console.log('error check 5');
	webFontForceRedraw('.CET-Activity-Content-Title-PageTypeIndicator-Icon');
	webFontForceRedraw('.CET-NavItem-Icon');
	
	// check orientation on page load
	checkMobileOrientation();
	//console.log('error check 6');
});
// ! WND.Resize --- 
$(window).resize(function() {
	clearTimeout(postResizeTimer);
	maximizeCETActivityContentHeight();
	postResizeTimer = setTimeout(function(){
		//maximizeCETActivityContentHeight();
		rebuildMegazoomDone = false;
		maximizerDelayRelay();
	},100);
});
// ! WND.Scroll handler 
//fix for iphone problem of vertical upward drag creating blank space from hyperextension in landscape ---
$( window ).scroll(function() {
	if( !fixingMobileScroll && $('html').hasClass('landscape') ){
		if( $('html').hasClass('iphone') || $('html').hasClass('ipod') ){
			fixingMobileScroll = true;
			postResizeTimer = setTimeout(function(){
				window.scrollTo(0);
				fixingMobileScroll = false;
			}, 10);
		}
	}
	maximizeCETActivityContentHeight();
});
// ! WND.Orientation change
//$(window).bind('orientationchange', function() {
$(window).on('orientationchange', function(){
	newOrientationChange = true;
	checkMobileOrientation();
});

// ! INI.Megazoom.Post process after init --- 
FWDUtils.onReady(function(){
	megazoomPrimed = true;
});

// ! =============================================================
// ! FULL SCREEN ACTIONS
// ! =============================================================
/* ! --[ B - dashboard sidenav buttons ]--- */
//$(document).off("click", ".dashboardSideNavStack li");
$(document).on("webkitfullscreenchange", function(event){
	fullScreenChangeHandler({});
});
$(document).on("mozfullscreenchange", function(event){
	fullScreenChangeHandler({});
});
$(document).on("MSFullscreenChange", function(event){
	fullScreenChangeHandler({});
});
$(document).on("fullscreenchange", function(event){
	fullScreenChangeHandler({});
});

function fullScreenChangeHandler(context){
	var isFullScreen = false;
    if( document.webkitIsFullScreen === true ){
        isFullScreen = true;
    }else if( document.webkitCurrentFullScreenElement != null && document.webkitCurrentFullScreenElement != undefined && document.webkitCurrentFullScreenElement != "" ){ /* safari */
        isFullScreen = true;
    }else if( document.mozFullScreen === true ){
        isFullScreen = true;
    }else if( document.msFullscreenElement != null && document.msFullscreenElement === true ){
        isFullScreen = true;
    }else if( document.fullscreenElement === true ){
        isFullScreen = true;
    }
    if( isFullScreen ){
	    masterJSONStorage.fullScreenData.latestFSCondition = "On";
	}else{
		if( masterJSONStorage.fullScreenData.latestFSCondition == "On" ){
		    //console.log( "turning off from latest on state" );
		    if( lightBoxViewerTool == "image-zoom-basic" ){
				//console.log( "is image zoom basic" );
    		}
		}
		masterJSONStorage.fullScreenData.latestFSCondition = "Off";
	}
	/*
    console.log( "!!!!!! - document.webkitIsFullScreen = " + document.webkitIsFullScreen );
    console.log( "!!!!!! - document.mozFullScreen = " + document.mozFullScreen );
    console.log( "!!!!!! - document.msFullscreenElement = " + document.msFullscreenElement );
    console.log( "!!!!!! - document.webkitCurrentFullScreenElement = " + document.webkitCurrentFullScreenElement );
    console.log( "!!!!!! - document.fullscreenElement = " + document.fullscreenElement );
    console.log( "###### - isFullScreen = " + isFullScreen );
    */
    
    
}  

// ! =============================================================
// ! BUTTONS
// ! =============================================================
/* ! --[ B - dashboard sidenav buttons ]--- */
$(document).off("click", ".dashboardSideNavStack li");
$(document).on("click", ".dashboardSideNavStack li", function(event){
	var useTarget;
    if( $(event.target).hasClass('sidenavItemInnerText') || $(event.target).hasClass('sidenavElementIcon') || $(event.target).hasClass('moduleLabel') ){
	  // dashboardSideNavItemActive = $(event.target).closest('li').index() + 1;
	  useTarget = $(event.target).closest('li');
	   //currentDashboardSelectedArea = $(event.target).closest('li').
	   //alert(dashboardSideNavItemActive);
    }else{
	    useTarget = $(event.target);
	   //dashboardSideNavItemActive = $(event.target).index() + 1;
    }
    
    dashboardSideNavItemActive = useTarget.index() + 1;
    
    //if( $(event.target).closest('li').attr('data-timer') ){
    if( useTarget.hasClass('courseModuleChoice') ){
		//courseModuleGroupedActive = $('.sideNavDropList .menuSelectDropButton').attr('data-courseModuleGrouping');
		courseModuleGroupedActive = useTarget.attr('data-courseModuleGrouping');
		$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseModule" );
	}else{
		if( lightBoxDialog_Level3_Engaged && lightBoxDialog_Level3_EngagedContentType == "dashboard" ){
			courseModuleGroupedActive = null;
			$('body').attr( 'data-activePathType' , "None" );
			$('body').attr( 'data-lightBoxPanel3ActiveSection' , "CourseOverview" );
		}
	}
    
    currentDashboardSelectedArea = sideNavArray[dashboardSideNavItemActive - 1].navSlotType;
    //checkActiveDashboardArea(event);
    if(sideNavDropListStatus == "Dropped"){
    	//$('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
    	$('.sideNavDropList .menuSelectedLabel').show();
		$('.sideNavDropList .menuSelectDropButton').show();
		$('.sideNavDropList .dropListContainer').css('height', sideNavDropListClosedH + 'px');
		$('.sideNavDropList').find('.qActivityChoice').css('opacity', 0);
		sideNavDropListStatus = "Closed";
    }
    sideNavReset({ 'sideNavStack' : "dashboard" , 'newNum' : dashboardSideNavItemActive });
    
});
/* ! --[ B - dashboard in-content launch button ]--- */
$(document).off("click", ".dashboardSectionLauncher");
$(document).on("click", ".dashboardSectionLauncher", function(event){
	if( currentDashboardSelectedArea == 'courseAssessment' ){
		revertLightboxes('continue');
		quizLoader("RACE Assessment");
	}else if( currentDashboardSelectedArea == 'courseSurvey' ){
	 	revertLightboxes('continue');
		quizLoader("RACE Survey");
	}
});
/* ! --[ B - dashboard procedural step launch button ]--- */
$(document).off("click", ".stepMapItem:not(.disabled)");
$(document).on("click", ".stepMapItem:not(.disabled)", function(event){
	if(UIButtons_Supressed){
		return;
	}
	/*
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 				Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 				Number(splitCourseModuleGroupedActive[1]);
	var moduleProgressStatus = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus;
	*/
	var grabTargetStepID = $(this).attr( 'data-stepLaunch' );
	waitCoverController({ 
		'coverAction' : "Launch" ,
		'revertPanels' : true
	});
	continueButtonDisabler({});
	debounceUIButtons();
	currentCourseModule = dashboardSideNavItemActive - 1;
	//revertLightboxes('continue');
	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
	var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	//var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex];
	//var lastUserPathStepNum;
	//if( lastUserPathEntry != 'x' ){
		//var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex].split(':');
		//lastUserPathStepNum = lastUserPathStepArray[0];
	//}else{
		//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.pop();
		//lastUserPathStepNum = '1';
	//}
	/*
	lightBoxDialog_Level3_Engaged = false; // redundant?
	$('body').attr( 'data-lightBoxPanel3' , "None" );
	$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
	*/
	compareActivityClipboardList({ 
		'lastUserPathStepNum' : grabTargetStepID , 
		'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType 
	});
	$("#menuNavItem-about").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
	$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
	$("#menuNavItem-clipboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
	//if(ClickReact == "ReviewActivity"){
		//loadNewActivityPage({ 'loadDataFile' : lastUserPathStepNum });
		//loadNewActivityPage({ 'loadDataFile' : grabTargetStepID , 'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType }); // is the path type already set from the clipboard comparison above?
	//}
});

/* ! --[ B - global nav - menu subm-list launcher ]--- */
$(document).off("click", "#navItem-menu .navItemInnerContainer");
$(document).on("click", "#navItem-menu .navItemInnerContainer", function(event){ 
	//*
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	//console.log("gloo");
	//*/
	//alert( $(this).attr('class') + " --- " + $(event).attr('class') + " --- " + $(event.target).attr('class') );
	if(!navSubMenuFirstLaunched){
		// if this is not inside the "first launched" logic, causes page to display strange when clicked... why?  
		// need to update position on open and window resize!
		/*
		$('#navItemSubMenu').position({
			"my": 	"center bottom",
			"at":		"center top-15",
			"of":		$('#navItem-tools')
		});
		*/
		//$('.notifyNumBox-summed').hide();
		//$('.notifyNumBox-summed').css('opacity', '0');
		//$('#menuNavItem-clipboard').append('<div class="notifyNumBox-cb">2</div>');
		
		//$('.notifyNumBox-cb').show();
		$('.menuNavItem:last').css('box-shadow',  'none');
		$('.menuNavItem:first').css('border-radius',  '4px 4px 0 0');
		$('.menuNavItem:last').css('border-radius',  '0 0 4px 4px');
		//$('#menuNavItem-resources').css('border-radius',  '4px 4px 0 0');
		//$('#menuNavItem-clipboard').css('border-radius',  '0 0 4px 4px');
		navSubMenuFirstLaunched = true;
	}
	$('.notifyNumBox-summed').hide();
	if(navSubMenuLaunched){
		rotateNavItem("in");
		$('#navItemSubMenu').hide();
		maximizeCETActivityContentHeight();
		$('#menuNavItem-bottomArrow').removeClass( "shown" );
	}else{
		//*
		rotateNavItem("out");
		if( lightBoxDialog_Level3_EngagedContentType == "none"  ){
			$("#menuNavItem-help").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
	        $("#menuNavItem-about").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
			$("#menuNavItem-restart").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
			$("#menuNavItem-clipboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
			$("#menuNavItem-dashboard").removeClass('disabledmenuNavItem').attr( 'tabindex' , "0" );
			updateSubNavStyles();  
		}
		$('#navItemSubMenu').fadeIn();
		//$('#navItemSubMenu').show();
		var boxW = $(this).closest('.navItem').width();
		var arrowW = $('.CET-NavItem-IconArrow').width();
		//$('#menuNavItem-bottomArrow').css('left',  ( (boxW / 2) + (arrowW / 2) + 3) + 'px'); // why so complicated?  figure out how to calculate better
		//$('#menuNavItem-bottomArrow').css('left',  ( (boxW / 2) + (arrowW / 2) + 3) + 'px'); // why so complicated?  figure out how to calculate better
		////$('#menuNavItem-bottomArrow').css( 'left',  ( (boxW / 2) + (arrowW / 2) ) + 'px' ); // why so complicated?  figure out how to calculate better
		maximizeCETActivityContentHeight();
		//if($('.menuNavItem:first .CET-NavItem-Icon').css('display') == 'none'){
			//var firstBoxH = $('.menuNavItem:first .CET-NavItem-Text').outerHeight(true);
			//$('.menuNavItem').css('height', firstBoxH + 'px');
			//$('#navItemSubMenu').position({ // need this again? this should be streamlined
				//"my": 	"bottom",
				//"at":		"top-15",
				//"of":		$('#navItem-tools')
			//});
			/*
			$('#menuNavItem-bottomArrow').position({
				"my": 	"center bottom",
				"at":	"center top+11",
				"of":	$('#navItem-menu')
			});
			*/
		//}
		$('#menuNavItem-bottomArrow').addClass( "shown" );
		$(document).off("click", "#navItem-menu");
		$(document).on("click", "#navItem-menu", function(event){
			if(navSubMenuLaunched){
				rotateNavItem("in");
				$('#navItemSubMenu').hide();
			}
		});
		$(document).off("click", ".CET-NavItem-IconArrow");
		$(document).on("click", ".CET-NavItem-IconArrow", function(event){
			if(navSubMenuLaunched){
				rotateNavItem("in");
				$('#navItemSubMenu').hide();
			}
		});
		//*/
	}
	
	// ! Accessibility - nav menu launch ]--- 
	//$(document).off("keyup click", '[data-courseFooterButton="Menu"]');
	//$(document).on("keyup click", '[data-courseFooterButton="Menu"]', function(event){
		/*
		if( focusControl.launchNewContext != undefined && focusControl.launchNewContext != "" && focusControl.launchNewContext == "NavMenu" ){
		//if( checkExecutionCmnd(event) ){
			//switch( event.type ){
				//case "keyup" :
					//if( focusInit ){
						//console.log("yip");
						//updateSubNavStyles();
						console.log("focused class a = " + $( document.activeElement ).attr("class") ); 
						//console.log("menu pop display = " + $('#navItemSubMenu').css("display") ); 
						$( '.focused' ).removeClass( 'focused' );
						//$( '#menuNavItem-dashboard' ).focus();
						//$( '#menuNavItem-dashboard' ).addClass( 'focused' );
						console.log("menuNavItemLast class = " + $( ".menuNavItemLast").attr("class") ); 
						console.log("menuNavItemLast id = " + $( ".menuNavItemLast").attr("id") ); 
						console.log("menuNavItemLast is focusable = " + $( ".menuNavItemLast").is(':focusable') );
						//$( '.menuNavItemLast' ).focus();
						//$( '#menuNavItem-help' ).focus();
						//setTimeout(function(){
						   // $( '#menuNavItem-help' ).focus();
						//});
						//$( '.menuNavItemLast' ).addClass( 'focused' );
						$(document.activeElement).addClass( 'focused' );
						console.log("focused class b = " + $( document.activeElement ).attr("class") ); 
						focusControl.focusGrouping = 	"NavMenu";
						focusControl.firstItemFocused = 	false;
						focusControl.lastItemFocused = 	true;
					//}
					//controlsMenuLauncher(true);
				//break;
				//case "click" :
					//controlsMenuLauncher(false);
				//break;
			//}
		}
		focusControl.launchNewContext = 		"";
		*/
	//});
	//event.preventDefault();
	//focusControl.updateFocalItemCurrent = "navMenu";
	
	var checkUnviewedNum = "";
	var checkUnviewedNumNum = 0;
	if( $('#menuNavItem-clipboard .notifyNumBox-cb').length ){
		checkUnviewedNum = $('.notifyNumBox-cb').text();
		checkUnviewedNumNum = parseInt(checkUnviewedNum);
	}
	if( checkUnviewedNumNum > 0 ){
		if( checkUnviewedNumNum > 1 ){
			$('.accessMenuPopClipboardUnviewedNotice').text( " : There are " + $('.notifyNumBox-cb').text() + " unviewed clipboard items." );
		}else{
			$('.accessMenuPopClipboardUnviewedNotice').text( " : There is " + $('.notifyNumBox-cb').text() + " unviewed clipboard item." );
		}
	}else{
		$('.accessMenuPopClipboardUnviewedNotice').text( $('.notifyNumBox-cb').empty() );
	}
	
	
	maximizeCETActivityContentHeight(); // second call needed?  seems to help position "take", otherwise only correct after first resize
});

/* ! --[ B - global nav - back ]--- */
$(document).off( "click" , '#navItem-back' );
$(document).on( "click" , '#navItem-back' , function(event){
	var grabLBP3 = $('body').attr( 'data-lightBoxPanel3' );
	var makeDisabled = false;
	switch( grabLBP3 ){
		case "Help" : 
		case "Clipboard" : 
		case "About" : 
			makeDisabled = true;
		break;
	}
	if( UIButtons_Supressed || makeDisabled ){
		return;
	}
	debounceUIButtons();
	navMenuCloser();
	switch( $(this).attr( 'data-navItemAction' ) ){
		case "StepBackward" :
			// get step id of previous step in ideal path
			var currentPathStepIDSet = 			courseModuleGroupedActive;
			var currentPathStepIDSetSplit = 		currentPathStepIDSet.split("_");
			var currentPathGroup = 					parseInt(currentPathStepIDSetSplit[0]) - 1;
			var currentPathActivity = 				parseInt(currentPathStepIDSetSplit[1]) - 1;
			var currentPathStep = 					parseInt(currentPathStepIDSetSplit[2]);//parseInt(currentPathStepIDSetSplit[2]) - 1;
			var currentPathStructure = 			masterJSONStorage.pathStructureSet[currentPathGroup][currentPathActivity];
			var linearPathList = 						currentPathStructure.idealPath;
			//var pathStepList = 						currentPathStructure.nodeMapUnits;	
			var prevStepID;						
			pullPrevStep:
			for( var a = 0 ; a < linearPathList.length ; a++ ){
				var linearPathStepID = parseInt( linearPathList[a] );
				
				if( linearPathStepID == currentPathStep ){
					prevStepID = linearPathList[a-1];
					break pullPrevStep;
				}
				
				//console.log( "pass a = " + a );
				/*
				var addStyles = "";
				var addDataAttributes = "";
				nodeSeek:
				for( var b = 0 ; b < pathStepList.length ; b++ ){
					//console.log( "pass b = " + b );
					var checkStepID = parseInt( pathStepList[b].nodeID );
					if( checkStepID == linearPathStepID ){
						prevStepID = parseInt( linearPathList[a-1] );
						
						break pullPrevStep;
						*/
						/*
						for( var c = 0 ; c < pathStepList.length ; c++ ){
							var checkStepID2 = parseInt( pathStepList[c].nodeID );
							if( checkStepID2 == prevStepID ){
								
								break pullPrevStep;
							}
						}
						*/
					//}
					//var stepIteration = pathStepList[  ]
				//}
				//return pathMapBuild;
			}	
			revertLightboxes('continue'); 
			//if(currentBasePage_Assessment_Present){
				//updateStepChainRecord({ 'afterAction' : "LoadStep" , 'targetStep' : pageAssessmentSelectionResult.targetNode });
			//}else{
				//loadNewActivityPage({ 'loadDataFile' : currentBasePage_Assessment_OutputList[0].targetNode });
				//waitCoverController({ 'coverAction' : "Launch" });
				//loadNewActivityPage({ 'loadDataFile' : prevStepID });
				waitCoverController({ 
					'coverAction' : 	"Launch" , 
					'loadStep' : 		prevStepID
				});
			//}
			continueButtonDisabler({});
			$( '#focusDumper' ).focus();
			setTimeout(function(){
				$( '#CET-Activity-Content-Title-Text' ).focus();
				updateFocus({ 'action' : "Update" });
			}, 100);
		break;
		case "Dashboard" :
			//debounceUIButtons();
			revertLightboxes('continue');
			level3LightboxLauncher("dashboard");
			continueButtonDisabler({});
		break;
	}
	navMenuCloser(); // redundant?
	//$('#CET-Activity-Content-Main').scrollTop = 0;
});

/* ! --[ B - global nav - help ]--- */
$(document).off("click", "#navItem-help");
$(document).on("click", "#navItem-help", function(event){
	navHelpLauncher(event);
});
/* ! --[ B - global nav - restart ]--- */
$(document).off("click", "#navItem-restart");
$(document).on("click", "#navItem-restart", function(event){
	//navRestartLauncher(event);
	level4LightboxLauncher({ 'event' : event });
});
/* ! --[ B - global nav - about ]--- */
$(document).off("click", "#navItem-about");
$(document).on("click", "#navItem-about", function(event){
	navAboutLauncher(event);
});
/* ! --[ B - global nav - Step Assessment Anchor ]--- */
$(document).off("click", '#CET-Activity-Content-Title-PageTypeIndicator[data-buttonAction="StepAssessmentAnchor"]');
$(document).on("click", '#CET-Activity-Content-Title-PageTypeIndicator[data-buttonAction="StepAssessmentAnchor"]', function(event){
	var headerAndTitleH = $('#CET-Activity-Header').outerHeight(true) +$('#CET-Activity-Content-Title-Bar').outerHeight(true);
	headerAndTitleH += 10; // little extra space bump
	$('#CET-Activity-Content').animate(
	{ scrollTop: $("#CET-Activity-Content-Assessment").offset().top - headerAndTitleH } , 
	1000 ,
	"easeInOutQuart"
	);
});
/*
$(document).off("click", '#CET-Activity-Content-Title-Bar');
$(document).on("click", '#CET-Activity-Content-Title-Bar', function(event){
	
});
*/
/* ! --[ B - global subnav - tools submenu general action ]--- */
$(document).off("click", "#navItemSubMenu .menuNavItem");
$(document).on("click", "#navItemSubMenu .menuNavItem", function(event){
	rotateNavItem("in");
	$('#navItemSubMenu').hide();
});
/* ! --[ B - global subnav - help ]--- */
$(document).off("click", "#menuNavItem-help");
$(document).on("click", "#menuNavItem-help", function(event){
	navHelpLauncher(event);
});
/* ! --[ B - global subnav - about ]--- */
$(document).off("click", "#menuNavItem-about");
$(document).on("click", "#menuNavItem-about", function(event){
	navAboutLauncher(event);
});
/* ! --[ B - global subnav - resources ]--- 
$(document).off("click", "#menuNavItem-resources");
$(document).on("click", "#menuNavItem-resources", function(event){
	resourcesLauncher(event);
});*/
/* ! --[ B - global subnav - notepad ]--- 
$(document).off("click", "#menuNavItem-notepad");
$(document).on("click", "#menuNavItem-notepad", function(event){
	notepadLauncher(event);
});*/
/* ! --[ B - global subnav - clipboard ]--- */
$(document).off("click", "#menuNavItem-clipboard");
$(document).on("click", "#menuNavItem-clipboard", function(event){
	clipboardLauncher(event);
});
/* ! --[ B - global subnav - dashboard ]--- */
$(document).off("click", "#menuNavItem-dashboard");
$(document).on("click", "#menuNavItem-dashboard", function(event){
	//dashboardLauncher(event);
	//console.log("db launcher button event");
	dashboardLauncher({ 'launchSource' : 'MenuButton' });
});
/* ! --[ B - global subnav - restart ]--- */
$(document).off("click", "#menuNavItem-restart");
$(document).on("click", "#menuNavItem-restart", function(event){
	//navRestartLauncher(event);
	level4LightboxLauncher({ 'event' : event });
});
/* ! --[ B - global subnav - exit ]--- */
$(document).off("click", "#menuNavItem-exit");
$(document).on("click", "#menuNavItem-exit", function(event){
	//exitCETCourse();
	level4LightboxLauncher({ 'event' : event });
});

/* ! --[ B - help sidenav buttons ]--- */
$(document).off("click", ".helpSideNavStack li");
$(document).on("click", ".helpSideNavStack li", function(event){
    if( $(event.target).hasClass('sidenavItemInnerText') ){
	   helpSideNavItemActive = $(event.target).closest('li').index() + 1;
    }else{
	    helpSideNavItemActive = $(event.target).index() + 1;
    }
    sideNavReset({ 'sideNavStack' : "help" , 'newNum' : helpSideNavItemActive });
});
/* ! --[ B - about sidenav buttons ]--- */
$(document).off("click", ".aboutSideNavStack li");
$(document).on("click", ".aboutSideNavStack li", function(event){
    if( $(event.target).hasClass('sidenavItemInnerText') ){
	   aboutSideNavItemActive = $(event.target).closest('li').index() + 1;
    }else{
	    aboutSideNavItemActive = $(event.target).index() + 1;
    }
    sideNavReset({ 'sideNavStack' : "about" , 'newNum' : aboutSideNavItemActive });
});

/* ! --[ B - subsequence nav numbox ]--- */
$(document).off("click", ".subSequenceNav-NumBox");
$(document).on("click", ".subSequenceNav-NumBox", function(event){
    //currentBasePage_Content_SubSequenceCurrentPage = Number($(event.target).text());
    //newSubSequencePageAction({ 'action' , "Default" });
});
/* ! --[ B - subsequence nav prev ]--- */
$(document).off("click", ".subSequenceNav-PrevBut");
$(document).on("click", ".subSequenceNav-PrevBut", function(event){
    if(currentBasePage_Content_SubSequenceCurrentPage > 1){
        currentBasePage_Content_SubSequenceCurrentPage--;
        newSubSequencePageAction({ 'action' : "Previous" });
    }
});
/* ! --[ B - subsequence nav next ]--- */
$(document).off("click", ".subSequenceNav-NextBut");
$(document).on("click", ".subSequenceNav-NextBut", function(event){
	if(currentBasePage_Content_SubSequenceCurrentPage < currentBasePage_Content_SubSequenceCurrentPageTotal){
        currentBasePage_Content_SubSequenceCurrentPage++;
        newSubSequencePageAction({ 'action' : "Next" });   
    }
});

/* ! --[ B - step assessment - hint button ]--- */
$(document).off("click", "#CET-Activity-Content-Assessment-HintButtonContainer");
$(document).on("click", "#CET-Activity-Content-Assessment-HintButtonContainer", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	level1LightboxLauncher("Hint");
});
/* ! --[ B - step assessment - review feedback button ]--- */
$(document).off("click", "#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer");
$(document).on("click", "#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	level1LightboxLauncher("FeedbackCheck");
});

/*

$(document).off("mouseover", ".choiceList_Item");
$(document).on("mouseover", ".choiceList_Item", function(event){
	//$(this).addClass("skinColor_Secondary_HighlightDropShadow");
	$(this).addClass("assessmentButtonBG_HoverDark");
});	

$(document).off("mouseleave", ".choiceList_Item");
$(document).on("mouseleave", ".choiceList_Item", function(event){
	//$(this).removeClass("skinColor_Secondary_HighlightDropShadow");
	$(this).removeClass("assessmentButtonBG_HoverDark");
});	
/*/
/* ! --[ B - step assessment - choice click - text]--- */
$(document).off("click", ".choiceList_Item:not(.dropped)");
$(document).on("click", ".choiceList_Item:not(.dropped)", function(event){
	/*
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	*/
	
	//if( !$(event.target).attr('id') == 'CET-Activity-Content-Assessment-PageChoiceSet' ){
	   //selectedQActivityChoiceIndex = $(event.target).index();
    //}else{
	   //selectedQActivityChoiceIndex = $(event.target).closest('.qActivityChoice').index();
    //}
    var passedObj = $(this);
	if( passedObj.hasClass('choiceList_Item') ){
	   //selectedQActivityChoiceIndex = $(event.target).index();
    }else{
	   //selectedQActivityChoiceIndex = $(event.target).closest('.qActivityChoice').index();
	   passedObj = $(this).closest('.choiceList_Item');
    }
	//var passedObj = $(event.target).closest('.choiceList_Item');
	//$('.choiceList_Item').removeClass('choiceSelected');
	//passedObj.addClass('choiceSelected');
	//passedObj.removeClass('choiceSelected');
	var checkAssessmentType = $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' );
	if( checkAssessmentType == "Matching" || checkAssessmentType == "Ranking" ){
		pageAssessmentSelectionMade({ 'passedObj' : passedObj , 'actionType' : "Primary" }); 
	}else{
		pageAssessmentSelectionMade({ 'passedObj' : passedObj });
		//$('#ariaLiveAssertive').text( "Choice Selected : " + pageAssessmentSelectionResult.outputDisplayText );
		
		if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
			
			placeLocalizedContent({
				'targetItem' : 		$( '#ariaLiveAssertive' ) ,
				'srcData' : 		langPack.screenreader.ariaLiveNotice.choiceSelectedSAMC ,
				'varSet' : 			[passedObj.find('.choiceDisplayText').text()]
			});
			
			//$('#ariaLiveAssertive').html( "Choice Selected : " + passedObj.find('.choiceDisplayText').text() );
			$('.choiceList_Item .accessStepAssessmentChoiceSelected').remove();
			passedObj.prepend( '<span class="accessViz accessStepAssessmentChoiceSelected">' + langPack.screenreader.stepBase.stepAssessmentChoiceSelected + '</span>' );
			$( '.choiceList_Item .accessSAMCChoiceInstruction' ).html( langPack.screenreader.stepBase.stepAssessmentSAMCTextUnselected2 );
			$(this).find( '.accessSAMCChoiceInstruction' ).html( langPack.screenreader.stepBase.stepAssessmentSAMCTextSelected2 );
		}
		if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" || 
			currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
			//console.log("DWERP");
			if( passedObj.hasClass( "choiceSelected" ) ){
				
				placeLocalizedContent({
					'targetItem' : 		$( '#ariaLiveAssertive' ) ,
					'srcData' : 		langPack.screenreader.ariaLiveNotice.choiceSelectedMAMC ,
					'varSet' : 			[passedObj.find('.choiceDisplayText').text()]
				});
				
				//$('#ariaLiveAssertive').html( "Choice Selected : " + passedObj.find('.choiceDisplayText').text() );
				//console.log("MERP");
				//passedObj.find( '.accessStepAssessmentChoiceSelected' ).remove();
				passedObj.prepend( '<span class="accessViz accessStepAssessmentChoiceSelected">' + langPack.screenreader.stepBase.stepAssessmentChoiceSelected + '</span>' );
				$(this).find( '.accessMAMCChoiceInstruction' ).html( langPack.screenreader.stepBase.stepAssessmentMAMCTextSelected2 );
			}else{
				
				placeLocalizedContent({
					'targetItem' : 		$( '#ariaLiveAssertive' ) ,
					'srcData' : 		langPack.screenreader.ariaLiveNotice.choiceUnselectedMAMC ,
					'varSet' : 			[passedObj.find('.choiceDisplayText').text()]
				});
				
				//$('#ariaLiveAssertive').html( "Choice De-Selected : " + passedObj.find('.choiceDisplayText').text() );
				//console.log("GERP");
				passedObj.find( '.accessStepAssessmentChoiceSelected' ).remove();
				//passedObj.prepend( '<span class="accessViz accessStepAssessmentChoiceSelected">Selected </span>' );
				$(this).find( '.accessMAMCChoiceInstruction' ).html( langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected2 );
			}
		}
	}
});

/*
	
langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected2

langPack.screenreader.ariaLiveNotice.choiceSelectedSAMC

"screenreader" : { 
		"ariaLiveNotice" : { 
			"dashboardInit" : 					"Welcome to Stepstone.  You are currently on the StepStone Dashboard.  To navigate with your keyboard, use the Tab key to cycle screen elements.  Use Shift-Tab keys to cycle in reverse order.  You will be notified of elements that require space or return to activate, or up or down arrow keys to cycle sub-elements.  You may also exit contextual panels using the escape key.",
			"dashboardReturn" : 				"You are currently on the StepStone Dashboard.",
			"choiceSelectedSAMC" : 				"Choice Selected : [var1]",
			"choiceSelectedMAMC" : 				"Choice Selected : [var1]",
			"choiceUnselectedMAMC" : 			"Choice De-Selected : [var1]",

"stepAssessmentChoiceSelected" : 	"Selected ",
"stepAssessmentSAMCTextUnselected1" : "Choice Label : ",
"stepAssessmentSAMCTextUnselected2" : " : Use space or return to select this option",
"stepAssessmentSAMCTextSelected1" : "Choice Label : ",
"stepAssessmentSAMCTextSelected2" : " : This is the selected option.",
"stepAssessmentMAMCTextUnselected1" : "Choice Label : ",
"stepAssessmentMAMCTextUnselected2" : " : This option is not selected.  Use space or return to select this option.",
"stepAssessmentMAMCTextSelected1" : "Choice Label : ",
"stepAssessmentMAMCTextSelected2" : " : This option is selected.  Use space or return to de-select this option.",
"stepAssessmentRankSlot1" : 		"Ranking Slot ", //"Ranking Slot [var1] : [var2] : Use space or return to open the list of items to rank",
"stepAssessmentRankSlot2" : 		" : Use space or return to open the list of items to rank",
"stepAssessmentRankSlotOption1" : 	"Ranking Slot [var1] : Option [var2] of [var3] : ", // "Ranking Slot [var1] : Option [var2] of [var3] : Use space or return to place this option in ranking slot [var4]",
"stepAssessmentRankSlotOption2" : 	" : Use space or return to place this option in ranking slot [var1]"	
*/


// ! --[ B - step assessment - choice option hover enter ]--- 
$(document).off("mouseenter", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem");
$(document).on("mouseenter", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem", function(event){
	var passedObj = $(this);
	if( passedObj.hasClass('choiceOptionListItem') ){
    }else{
	   passedObj = $(this).closest('.choiceOptionListItem');
    }
	//passedObj.addClass('assessmentGridButton_Hover');
	//var checkAssessmentType = $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' );
	/*
	if( checkAssessmentType == "Matching" || checkAssessmentType == "Ranking" ){
		pageAssessmentSelectionMade({ 'passedObj' : passedObj , 'actionType' : "Secondary" }); 
	}else{
		pageAssessmentSelectionMade({ 'passedObj' : passedObj }); 
	}
	*/
	//passedObj.css( 'backgroundColor' , skinPrimaryColor );
	$( '.choiceOptionListItem' ).removeClass( 'skinSecondaryColorBG' );
	passedObj.addClass( 'skinSecondaryColorBG' );
});	
// ! --[ B - step assessment - choice option hover leave ]--- 
$(document).off("mouseleave", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem");
$(document).on("mouseleave", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem", function(event){
	var passedObj = $(this);
	if( passedObj.hasClass('choiceOptionListItem') ){
    }else{
	   passedObj = $(this).closest('.choiceOptionListItem');
    }
	//passedObj.addClass('assessmentGridButton_Hover');
	//var checkAssessmentType = $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' );
	/*
	if( checkAssessmentType == "Matching" || checkAssessmentType == "Ranking" ){
		pageAssessmentSelectionMade({ 'passedObj' : passedObj , 'actionType' : "Secondary" }); 
	}else{
		pageAssessmentSelectionMade({ 'passedObj' : passedObj }); 
	}
	*/
	//passedObj.css( 'backgroundColor' , skinPrimaryColor );
	//$( '.choiceOptionListItem' ).removeClass( 'skinSecondaryColorBG' );
	passedObj.removeClass( 'skinSecondaryColorBG' );
});	
// ! --[ B - step assessment - choice option click ]--- 
$(document).off("click", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem"); 
$(document).on("click", "#CET-Activity-Content-Assessment-Main .choiceOptionListItem", function(event){
	event.stopPropagation();
	var passedObj = $(this);
	if( passedObj.hasClass( 'choiceOptionListItem' ) ){
    }else{
	   passedObj = $(this).closest('.choiceOptionListItem');
    }
	//var checkAssessmentType = $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' );
	//if( checkAssessmentType == "Matching" || checkAssessmentType == "Ranking" ){
		pageAssessmentSelectionMade({ 'passedObj' : passedObj , 'actionType' : "Secondary" }); 
	//}else{
		//pageAssessmentSelectionMade({ 'passedObj' : passedObj }); 
	//}
	//passedObj.css( 'backgroundColor' , skinPrimaryColor );
	//$( '.choiceOptionListItem' ).removeClass( 'choiceOptionSelected' ); 
	//passedObj.removeClass( "skinSecondaryColorBG" );
	//passedObj.addClass( "choiceOptionSelected" );
});	

//! ------------------------------------------------------------------------------
/* ! --[ K - step assessment - input field focus ]--- */
$(document).off( "focus" , '.choiceList_Item[data-choiceMechanism="InputFieldBasic"] input' );
$(document).on( "focus" , '.choiceList_Item[data-choiceMechanism="InputFieldBasic"] input', function(event){
	$( '.focalOverride' ).removeClass( "focalOverride" );
	focusControl.inputFieldFocused = true;
	$( event.target ).closest( '.choiceList_Item' ).addClass( "activeInput" );
	$( event.target ).closest( '.choiceList_Item' ).addClass( 'skinPrimaryColorBG' );
});
/* ! --[ K - step assessment - input field blur ]--- */
$(document).off( "blur" , '.choiceList_Item[data-choiceMechanism="InputFieldBasic"] input' );
$(document).on( "blur" , '.choiceList_Item[data-choiceMechanism="InputFieldBasic"] input', function(event){
	focusControl.inputFieldFocused = false;
	$( event.target ).closest( '.choiceList_Item' ).removeClass( "activeInput" );
	$( event.target ).closest( '.choiceList_Item' ).removeClass( 'skinPrimaryColorBG' );
});
/* ! --[ K - step assessment - input field change ]--- */
$(document).on('propertychange change keyup input paste', '.choiceList_Item[data-choiceMechanism="InputFieldBasic"] input', function(event){
	clearTimeout( inputFieldReactionTimer );
	inputFieldReactionTimer = setTimeout(function(){
		stepAssessmentInputReaction({ 'passedEvent' : event });
	},350);
});

// ! --[ B - step assessment - choice hover enter - matching not dropped ]--- 
$(document).off( "mouseenter", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Matching"] .choiceList_Item:not(.dropped)' );
$(document).on("mouseenter", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Matching"] .choiceList_Item:not(.dropped)' , function(event){
	var passedObj = $(this);
	passedObj.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColorBG' );
});	
// ! --[ B - step assessment - choice hover leave - matching not dropped ]--- 
$(document).off( "mouseleave", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Matching"] .choiceList_Item:not(.dropped)' );
$(document).on("mouseleave", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Matching"] .choiceList_Item:not(.dropped)' , function(event){
	var passedObj = $(this);
	passedObj.find( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
});	

// ! --[ B - step assessment - choice hover enter - ranking not dropped ]--- 
$(document).off( "mouseenter", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Ranking"] .choiceList_Item:not(.dropped)' );
$(document).on("mouseenter", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Ranking"] .choiceList_Item:not(.dropped)' , function(event){
	var passedObj = $(this);
	passedObj.find( '.CET-Choice-Radio' ).addClass( 'skinSecondaryColorBG' );
});	
// ! --[ B - step assessment - choice hover leave - ranking not dropped ]--- 
$(document).off( "mouseleave", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Ranking"] .choiceList_Item:not(.dropped)' );
$(document).on("mouseleave", '#CET-Activity-Content-Assessment[data-pageAssessmentType="Ranking"] .choiceList_Item:not(.dropped)' , function(event){
	var passedObj = $(this);
	passedObj.find( '.CET-Choice-Radio' ).removeClass( 'skinSecondaryColorBG' );
});	

//*
// ! --[ B - step assessment - choice hover enter - grid]--- 
$(document).off("mouseenter", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox:not(.choiceSelected)");
$(document).on("mouseenter", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox:not(.choiceSelected)", function(event){
	//$(this).find('.mediaGridCaptionBoxInner').addClass("skinColor_Secondary_HighlightDropShadow_GridBoxBottom");
	//$(this).closest('.mediaGridBoxOuter').find('.mediaGridBoxInner').addClass("skinColor_Secondary_HighlightDropShadow_GridBoxTop");
	//$(this).find('.mediaGridCaptionBoxInner').addClass("assessmentButtonBG_HoverDark");
	//$(this).closest('.mediaGridBoxOuter').find('.mediaGridBoxInner').addClass("assessmentButtonBG_HoverDark");
	var passedObj = $(this);
	passedObj.closest('.mediaGridBoxOuter').addClass('assessmentGridButton_Hover');
	
});	
// ! --[ B - step assessment - choice hover leave - grid]--- 
$(document).off("mouseleave", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox:not(.choiceSelected)");
$(document).on("mouseleave", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox:not(.choiceSelected)", function(event){
	//$(this).find('.mediaGridCaptionBoxInner').removeClass("skinColor_Secondary_HighlightDropShadow_GridBoxBottom");
	//$(this).closest('.mediaGridBoxOuter').find('.mediaGridBoxInner').removeClass("skinColor_Secondary_HighlightDropShadow_GridBoxTop");
	//$(this).find('.mediaGridCaptionBoxInner').removeClass("assessmentButtonBG_HoverDark");
	//$(this).closest('.mediaGridBoxOuter').find('.mediaGridBoxInner').removeClass("assessmentButtonBG_HoverDark");
	var passedObj = $(this);
	passedObj.closest('.mediaGridBoxOuter').removeClass('assessmentGridButton_Hover');
});	
//*/
/* ! --[ B - step assessment choice click - grid]--- */
$(document).off("click", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox");
$(document).on("click", "#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox", function(event){
	var passedObj = $(this);
	//$('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter').removeClass('choiceSelected');
	//passedObj.closest('.mediaGridBoxOuter').addClass('choiceSelected'); 
	var checkAssessmentType = $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' );
	if( checkAssessmentType == "Matching" || checkAssessmentType == "Ranking" ){
		pageAssessmentSelectionMade({ 'passedObj' : passedObj.closest('.mediaGridBoxOuter') , 'actionType' : "Primary" }); 
	}else{
		pageAssessmentSelectionMade({ 'passedObj' : passedObj.closest('.mediaGridBoxOuter') }); 
	}
});

/* ! UNUSED?--[ B - Hotspot Map - hotspot marker click ]--- */
//$(document).off("click", ".hotSpotMarker");
//$(document).on("click", '.hotSpotMarker', function(event){
$(document).off("click", ".HSNode");
$(document).on("click", '.HSNode', function(event){
	// UNUSED?
	/*
	console.log("oooo");
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	//alert("hs trig" );
	var markerID = 			$(this).attr("data-hsNodeID");
	//alert("hs trig = " + markerID );
	var markerType = 				currentBasePage_Content_HotSpotArray[ markerID-1 ].markerType;
	var markerVariant = 			currentBasePage_Content_HotSpotArray[ markerID-1 ].markerVariant;
	if( markerType == "MediaViewer" ){
		switch( markerVariant ){
			case "Basic" : // hotspot still image launcher
				
			break;
			case "Document" : // hotspot document (currently pdf) launcher
			
			break;
			case "Vimeo" : // hotspot vimeo launcher
			
			break;
			case "Youtube" : // hotspot yto launcher
			
			break;
			case "HTML5Video" : // hotspot html5 video launcher
			
			break;
		}
		level4LightboxLauncher({ 'event' : event , 'eventType' : "hsMarker" , 'markerID' : markerID });
	}
	if( markerType == "SubSequence" ){
		level2LightboxLauncher({ 'event' : event , 'eventType' : "hsMarker" , 'markerID' : markerID });
	}
	*/
	/*
	//var grabID = $(this).attr('id');
	//var grabID = $(this).attr('id');
	//var splitID = grabID.split('_');
	//var idNum = Number( splitID[1] );
	//var grabMarkerType = currentBasePage_Content_HotSpotArray[idNum - 1].markerType;
	$('.markerHiliteImage').css( 'opacity' , 0 );
	$(this).find('.markerHiliteImage').css( 'opacity' , 1 );
	//var alertBuilder = "";
	if( $(this).hasClass( "markerType_MediaViewer" ) ){
	//if( $(event.target).hasClass( "markerType_MediaViewer" ) ){
		
		//console.log( "mv : " );
		//console.log( JSON.stringify( event , null , 4 ) );
		//console.log( "mvt : " );
		//console.log( JSON.stringify( event.target , null , 4 ) );
		
		//console.log( event );
		
		var passEvt;
		if( !$(event.target).hasClass( 'hotSpotMarker' ) ){
			passEvt = $(event.target).closest( '.hotSpotMarker' );
			//console.log("izza");
		}else{
			passEvt = event;
			//console.log("izzb");
		}
		
		level4LightboxLauncher(passEvt);
		
		//alertBuilder += currentBasePage_Content_HotSpotArray[idNum - 1].launchResponse;
		//alertBuilder += "\n\n";
		//alertBuilder += "This will launch a standard media viewer popup.  Map will be obscured by popup, but selected hotspot element will remain highlighted.";
	}
	//if( grabMarkerType == "SubSequence" ){
	//if( $(event.target).hasClass( "markerType_SubSequence" ) ){
	if( $(this).hasClass( "markerType_SubSequence" ) ){
		//currentBasePage_Content_SubSequenceCurrentSequence = idNum; //(launchedMediaItem + 1);
		//console.log( 'idNum + 1 = ' + (idNum + 1) );
		level2LightboxLauncher({ 'event' : event });
		
		//alertBuilder += currentBasePage_Content_HotSpotArray[idNum - 1].launchResponse;
		//alertBuilder += "\n\n";
		//alertBuilder += "This will launch a standard subsequence popup.  Map will be obscured by popup, but selected hotspot element will remain highlighted.";
	}
	//alert(alertBuilder);
	*/
	
});

/* ! --[ B - dashboard - prereq list slot ]--- */
$(document).off("click", ".lockNoticeBlock_PreReqListSlot");
$(document).on("click", ".lockNoticeBlock_PreReqListSlot", function(event){
	var grabLabel = $(this).find(".lockNoticePreReqText").text();
	if( viewPortIsNarrow ){
		for( var i = 0 ; i < $('.sideNavDropList .qActivityChoice').length ; i++ ){
			if( $('.sideNavDropList .qActivityChoice:nth-child(' + (i+2) + ') .sidenavItemInnerText .moduleLabel' ).text() == grabLabel ){
				$('.sideNavDropList .qActivityChoice:nth-child(' + (i+2) + ')').trigger("click");
				break;
			}
		}
	}else{
		for( var i = 0 ; i < $('.dashboardSideNavStack li').length ; i++ ){
			if( $('.dashboardSideNavStack li:nth-child(' + (i+1) + ') .sidenavItemInnerText .moduleLabel' ).text() == grabLabel ){
				$('.dashboardSideNavStack li:nth-child(' + (i+1) + ')').trigger("click");
				break;
			}
		}
	}
	
});
/*
// now match display names
	    		cycleCoursePreReqList:
	    		for(var i1 = 0 ; i1 < preReqQuickList.length ; i1++){
		    		//console.log( "i1 = " + i1 );
		    		cycleCourseModuleGroups2:
		    		for(var i2 = 0 ; i2 < courseModuleArray.length ; i2++){
			    		//console.log( "i2 = " + i2 );
			    		cycleCourseModules2:
			    		for(var i3 = 0 ; i3 < courseModuleArray[i2].modules.length ; i3++){
				    		//console.log( "i3 = " + i3 );
				    		//console.log( "courseModuleArray[i2].modules[i3].moduleID = " + courseModuleArray[i2].modules[i3].moduleID );
				    		//console.log( "preReqQuickList[i1] = " + preReqQuickList[i1] );
				    		if( courseModuleArray[i2].modules[i3].moduleID == preReqQuickList[i1] ){
					    		//console.log( "got in" );
					    		var grabActivityLabel = courseModuleArray[i2].modules[i3].activityLabel;
					    		$('.lockNoticeBlock_PreReqList').append('<li class="lockNoticeBlock_PreReqListSlot"><div class="statusIcon StepStone-Icon-Font" data-StepStoneIcon="preReqStatusIcon"></div><div class="lockNoticePreReqText">' + grabActivityLabel + '</div></li>');
					    		cycleSideNavArray:
					    		for( var i4 = 0 ; i4 < sideNavArray.length ; i4++ ){ // starting at 1, skipping course overview
						    		//console.log("i4 = " + i4 );
						    		if( sideNavArray[i4].navSlotStatus == "" || sideNavArray[i4].navSlotStatus == null || sideNavArray[i4].navSlotStatus == undefined ){
							    		continue cycleSideNavArray;
						    		}
						    		//console.log("sideNavArray[i4].navSlotLabel = " + sideNavArray[i4].navSlotLabel );
						    		//console.log("grabActivityLabel = " + grabActivityLabel );
						    		if( sideNavArray[i4].navSlotLabel == grabActivityLabel ){
							    		var grabNavSlotStatus = sideNavArray[i4].navSlotStatus;
							    		//console.log("grabNavSlotStatus = " + grabNavSlotStatus )
							    		var pathToLastPreReqStatusIcon = $('.activeDashboardContentArea').find('.lockNoticeBlock_PreReqListSlot').last().find('.statusIcon');
							    		switch( grabNavSlotStatus ){
								    		case "Unattempted" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityunattempted)[0].data);
								    		break;
								    		case "Incomplete" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activityincomplete)[0].data);
								    		break;
								    		case "Completed" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitycompleted)[0].data);
								    		break;
								    		case "Locked" : 
								    			pathToLastPreReqStatusIcon.attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.sidenav_activitylocked)[0].data);
								    		break;
							    		}
							    		break cycleSideNavArray;
						    		}
					    		}
					    		break cycleCourseModuleGroups2;
					    	}
				    	}
			    	}
		    	}
	    	break;
    	}
*/

/* ! --[ B - confirmation box - negative ]--- */
$(document).off("click", ".confirmationNegative");
$(document).on("click", ".confirmationNegative", function(event){
	$("#lightBoxDialog-Level4").dialog('close');
	$('.lightBoxDialog_Level4_TopNav').hide();
});
/* ! --[ B - confirmation box - positive]--- */
$(document).off("click", ".confirmationPositive");
$(document).on("click", ".confirmationPositive", function(event){
	//exitCETCourse();
	if( confirmationBoxType == 'activityRestart' ){
		lightBoxDialog_Level3_Engaged = false; // redundant?
		$('body').attr( 'data-lightBoxPanel3' , "None" );
		$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
		navRestartLauncher(event);
	}else if( confirmationBoxType == 'courseExit' ){
		if( !persistentData.dataModel == "Internal" ){
			$('.confirmationNegative').hide();
			$('.confirmationPositive').hide();
			$('.lightBoxDialog_Level4_TopNav_Close').hide();
		}
		exitCETCourse();
	}
});

/* ! --[ B - Level 1 Lightbox - close ]--- */
$(document).off("click", ".lightBoxDialog_Level1_TopNav_Close");
$(document).on("click", ".lightBoxDialog_Level1_TopNav_Close", function(event){
	lightBoxDialog_Level1_closeMethod = 'internal';
	$("#lightBoxDialog-Level1").dialog('close');
	$('.lightBoxDialog_Level1_TopNav').hide();
	if( $( '#navItem-continue .navButtonLabel' ).text().toLowerCase() == "retry" ){
		continueButtonDisabler({});
	}
});
/* ! --[ B - Level 2 Lightbox - close ]--- */
$(document).off("click", ".lightBoxDialog_Level2_TopNav_Close");
$(document).on("click", ".lightBoxDialog_Level2_TopNav_Close", function(event){
	lightBoxDialog_Level2_closeMethod = 'internal';
	$("#lightBoxDialog-Level2").dialog('close');
	$('.lightBoxDialog_Level2_TopNav').hide();
	//lightBoxDialog_Level2_EngagedContentType = "none";
});
/* ! --[ B - Level 3 Lightbox - close ]--- */
$(document).off("click", ".lightBoxDialog_Level3_TopNav_Close");
$(document).on("click", ".lightBoxDialog_Level3_TopNav_Close", function(event){
	if( $('body').attr( 'data-lightBoxPanel3' ) =="DashboardHelp" ){
		//revertLightboxes('continue');
		//level3LightboxLauncher("dashboard");
		$( '#navItem-continue' ).trigger( "click" ); // clicks the continue button, currently set to return to dash
	}else{
		lightBoxDialog_Level3_closeMethod = 'internal';
		lightBoxDialog_Level3_Engaged = false; // redundant?
		$('body').attr( 'data-lightBoxPanel3' , "None" );
		$('body').attr( 'data-lightBoxPanel3ActiveSection' , "" );
		$("#lightBoxDialog-Level3").dialog('close');
		$('.lightBoxDialog_Level3_TopNav').hide();
		//lightBoxDialog_Level3_EngagedContentType = "none";
	}
});
/* ! --[ B - Level 4 Lightbox - close ]--- */
$(document).off("click", ".lightBoxDialog_Level4_TopNav_Close");
$(document).on("click", ".lightBoxDialog_Level4_TopNav_Close", function(event){
	lightBoxDialog_Level4_closeMethod = 'internal';
	$("#lightBoxDialog-Level4").dialog('close');
	$('.lightBoxDialog_Level4_TopNav').hide();
	//console.log( "CHECK CLASSES 1 = " + $(lightBoxDialog_Level4_LaunchedFromElement).attr("class") );
	if( $(lightBoxDialog_Level4_LaunchedFromElement).hasClass("helpMediaLaunchable") ){
		$(lightBoxDialog_Level4_LaunchedFromElement).closest('.helpSectionContentRow').focus();
	}
	//lightBoxDialog_Level4_LaunchedFromElement.focus();
	lightBoxDialog_Level4_LaunchedFromElement = null;
});
/* ! --[ B - Level 4 Lightbox - caption toggle ]--- */
$(document).off("click", ".lightBoxDialog_Level4_TopNav_CaptionToggle");
$(document).on("click", ".lightBoxDialog_Level4_TopNav_CaptionToggle", function(event){
	//lightBoxDialog_Level4_closeMethod = 'internal';
	//$("#lightBoxDialog-Level4").dialog('close');
	//$('.lightBoxDialog_Level4_TopNav').hide();
	
	//if(enlargedMediaFileCaptionParse.length > 0){
		$(".lightBoxDialog_Level4_TopNav_CaptionToggleContainer").hide();
		$('.lightBoxDialog_Level4_CaptionBox').html(enlargedMediaFileCaptionParse);
		$('.lightBoxDialog_Level4_CaptionBox').show();
	//}
});
/* ! --[ B - Level 4 Lightbox - close caption box ]--- */
$(document).off("click", ".lightBoxDialog_Level4_CaptionBox");
$(document).on("click", ".lightBoxDialog_Level4_CaptionBox", function(event){
	//lightBoxDialog_Level4_closeMethod = 'internal';
	//$("#lightBoxDialog-Level4").dialog('close');
	//$('.lightBoxDialog_Level4_TopNav').hide();
	$(".lightBoxDialog_Level4_TopNav_CaptionToggleContainer").show();
	$(this).hide();
});

/* ! --[ B - enlargement lightbox nav numbox ]--- */
$(document).off("click", ".enlargementItemPageNav-NumBox");
$(document).on("click", ".enlargementItemPageNav-NumBox", function(event){
    enlargementItemPage_Nav_CurrentPage = Number( $(event.target).text() );
    //newSubSequencePageAction();
    newEnlargementItemPageAction(true);
});
/* ! --[ B - enlargement lightbox nav prev ]--- */
$(document).off("click", ".enlargementItemPageNav-PrevBut");
$(document).on("click", ".enlargementItemPageNav-PrevBut", function(event){
    if(enlargementItemPage_Nav_CurrentPage > 1){
        enlargementItemPage_Nav_CurrentPage--;
        //newSubSequencePageAction();   
        newEnlargementItemPageAction(true);
    }
});
/* ! --[ B - enlargement lightbox nav next ]--- */
$(document).off("click", ".enlargementItemPageNav-NextBut");
$(document).on("click", ".enlargementItemPageNav-NextBut", function(event){
	if(enlargementItemPage_Nav_CurrentPage < enlargementItemPage_Nav_TotalPages){
        enlargementItemPage_Nav_CurrentPage++;
        //newSubSequencePageAction();   
        newEnlargementItemPageAction(true);
    }
});
/* ! --[ B - enlargement lightbox label prev ]--- */
$(document).off("click", ".enlargementItemPageNav-ButtonLabelPrev");
$(document).on("click", ".enlargementItemPageNav-ButtonLabelPrev", function(event){
    if(enlargementItemPage_Nav_CurrentPage > 1){
        enlargementItemPage_Nav_CurrentPage--;
        //newSubSequencePageAction();   
        newEnlargementItemPageAction(true);
    }
});
/* ! --[ B - enlargement lightbox label next ]--- */
$(document).off("click", ".enlargementItemPageNav-ButtonLabelNext");
$(document).on("click", ".enlargementItemPageNav-ButtonLabelNext", function(event){
	if(enlargementItemPage_Nav_CurrentPage < enlargementItemPage_Nav_TotalPages){
        enlargementItemPage_Nav_CurrentPage++;
        //newSubSequencePageAction();   
        newEnlargementItemPageAction(true);
    }
});

/* ! --[ B - content singular media box - launch click ]--- */
$(document).off("click", ".CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable");
$(document).on("click", ".CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	var launchingSubSequence = false;
	for( var i = 0 ; i < currentBasePage_Content_PageMediaList.length ; i++ ){ 
		if( currentBasePage_Content_PageMediaList[i].mediaRole == "Main1" && currentBasePage_Content_PageMediaList[i].mediaType == "SubSequence" ){
			launchingSubSequence = true;
		}
	}
	if( launchingSubSequence ){
		level2LightboxLauncher({ 'event' : event });
	}else{
		level4LightboxLauncher({ 'event' : event });
	}
});
/* ! --[ B - base content media grid box - launch click ]--- */
$(document).off("click", ".CET-Activity-Content-Main-MediaBlock .mediaGridBoxInner.launchable");
$(document).on("click", ".CET-Activity-Content-Main-MediaBlock .mediaGridBoxInner.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	//var launchedMediaItem = $(event.target).closest('.mediaGridBoxOuter').index();
	//launchedMediaItem = $(event.target).closest('.mediaGridBoxOuter').index();
	launchedMediaItemTracker.BaseGrid = $(event.target).closest('.mediaGridBoxOuter').index();
	//launchedMediaItem_BaseGrid = 		launchedMediaItem;
	var launchingSubSequence = false;
	if( currentBasePage_Content_PageMedia_MainGrid[launchedMediaItemTracker.BaseGrid].mediaType == "SubSequence" ){
		launchingSubSequence = true;
	}
	if( launchingSubSequence ){
		currentBasePage_Content_SubSequenceCurrentSequence = (launchedMediaItemTracker.BaseGrid + 1);
		lightBoxDialog_Level2_LaunchedFromElement = event.target;
		level2LightboxLauncher({ 'event' : event });
	}else{
		level4LightboxLauncher({ 'event' : event });
	}
});
/* ! --[ B - content singular media box - launch click ]--- */
$(document).off("click", ".CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable");
$(document).on("click", ".CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	level4LightboxLauncher({ 'event' : event });
});
/* ! --[ B - subesequence content media grid box - launch click ]--- */
$(document).off("click", ".CET-SubSequence-Content-Main-MediaBlock .mediaGridBoxInner.launchable");
$(document).on("click", ".CET-SubSequence-Content-Main-MediaBlock .mediaGridBoxInner.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	//launchedMediaItem = 					$(event.target).closest('.mediaGridBoxOuter').index();
	launchedMediaItemTracker.SubSeqGrid = 		$(event.target).closest('.mediaGridBoxOuter').index();//launchedMediaItem;
	level4LightboxLauncher({ 'event' : event });
});

/* ! --[ B - clipboard content media grid box - launch click ]--- */
$(document).off("click", ".lightBoxDialog_Level3_Content .mediaGridBoxInner.launchable");
$(document).on("click", ".lightBoxDialog_Level3_Content .mediaGridBoxInner.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	launchedMediaItemTracker.ClipboardGrid = $(event.target).closest('.mediaGridBoxOuter').index();
	level4LightboxLauncher({ 'event' : event });
});
/* ! --[ B - assessment media grid box - launch click ]--- */
$(document).off("click", "#CET-Activity-Content-Assessment .mediaGridBoxInner.launchable");
$(document).on("click", "#CET-Activity-Content-Assessment .mediaGridBoxInner.launchable", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	//launchedMediaItemTracker.ClipboardGrid = $(event.target).closest('.mediaGridBoxOuter').index();
	level4LightboxLauncher({ 'event' : event });
});

/* ! --[ B - help media - video launcher ]--- */
$(document).off("click", ".helpSectionContentThumbnail.helpMediaLaunchable:not(.disabled)");
$(document).on("click", ".helpSectionContentThumbnail.helpMediaLaunchable:not(.disabled)", function(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	level4LightboxLauncher({ 
		'event' : 			event , 
		'eventType' : 	"helpVideoLauncher" 
	});
});
/* ! --[ B - help reference block - toggling ]--- */
$(document).off("click" , '[data-helpReferenceAction="Toggle"] .helpSectionReferenceLabel:not(.disabled)');
$(document).on("click" , '[data-helpReferenceAction="Toggle"] .helpSectionReferenceLabel:not(.disabled)', function(event){
	var grabViewStatus = $(this).closest( '.helpSectionReference' ).attr( "data-viewStatus" );
	switch( grabViewStatus ){
		case "Closed" : 
			maximizeCETActivityContentHeight();
			$(this).closest( '.helpSectionReference' ).attr( "data-viewStatus" , "Open" );
			maximizerDelayRelay();
		break;
		case "Open" : 
			$(this).closest( '.helpSectionReference' ).attr( "data-viewStatus" , "Closed" );
		break;
	}
});

/* ! --[ B - feedback Content Switch ]--- */
$(document).off("click", "#CET-SwitchFeedbackContentButtonContainer");
$(document).on("click", "#CET-SwitchFeedbackContentButtonContainer", function(event){
	var triggerType = $(this).attr( "data-triggerFeedback" );
	switch( triggerType ){
		case "Correct" :
		
		break;
		case "Actual" :
		
		break;
	}
	/*
	for( var a = 0 ; a < masterJSONStorage.currentStep.Assessment.outputs.length ; a++ ){
		if( masterJSONStorage.currentStep.Assessment.outputs[a].outputStatus == "Correct" ){
			var correctFeedbackText =  masterJSONStorage.currentStep.Assessment.outputs[a].feedback.text;
			var correctFeedbackMedia = masterJSONStorage.currentStep.Assessment.outputs[a].feedback.media;
		}
	}	
	*/
});

/* ! --[ B - droplist top item click ]--- */
$(document).off("click", ".menuSelectedLabel");
$(document).on("click", ".menuSelectedLabel", function(event){
    toggleDropMenu(event);
});
/* ! --[ B - droplist drop button select ]--- */
$(document).off("click", ".menuSelectDropButton");
$(document).on("click", ".menuSelectDropButton", function(event){
    toggleDropMenu(event);
});

/* ! --[ B - droplist choice selection ]--- */
$(document).off("click", ".qActivityChoice");
$(document).on("click", ".qActivityChoice", function(event){
	if( quizType == 'RACE Assessment' ){
		var activeContentBlock = 						$(event.target).closest('.qBlock').attr('id');
		var activeContentBlockIndex = 				$(event.target).closest('.qBlock').index();
		var selectedQActivityChoiceIndex;
		
		if( $(event.target).hasClass('qActivityChoice') ){
		   selectedQActivityChoiceIndex = $(event.target).index();
	    }else{
		   selectedQActivityChoiceIndex = $(event.target).closest('.qActivityChoice').index();
	    }
	    //if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "basic"){
	    if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "Basic"){
		    selectedQActivityChoiceIndex += 1;
	    }else{
		    $('#' + activeContentBlock + ' .menuSelectedLabel').html(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex ][selectedQActivityChoiceIndex].label);
	    }
	    //$('#' + activeContentBlock + ' .menuSelectedLabel').css('background', 'green');
	    revertCourseQuizQBlock(event);
	    
	    //$(this).css('background', 'rgba(0,0,0,0.2)');
	    
	    $(this).css('background', skinPrimaryColor);
		$(this).css('color', 'white');
		
	    //$(this).find('.CET-Choice-Radio').css('color', skinSecondaryColor);
		$(this).find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px ' + skinSecondaryColor + ', 0px 0px 5px 2px ' + skinPrimaryColor + ', 0px 0px 6px 3px white');
	   // $(this).find('.CET-Choice-Radio').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.form_rb1)[0].data); 
	   $(this).find('.CET-Choice-Radio .radioInner').css('background', skinSecondaryColor);
	    
	    courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][selectedQActivityChoiceIndex].selected = true;
	    courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].blockSelectionMade = 		true;
	    checkCourseQuizPageCompletion();
	    //if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "dropList"){
		if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "DropList"){
		   toggleDropMenu(event);
	    }
    }else if( quizType == 'RACE Survey' ){
    	var activeContentBlock = 						$(event.target).closest('.qBlock').attr('id');
		var activeContentBlockIndex = 				$(event.target).closest('.qBlock').index();
	    var selectedQActivityChoiceIndex;
	    
	    if( $(event.target).hasClass('qActivityChoice') ){
		   selectedQActivityChoiceIndex = $(event.target).index();
	    }else{
		   selectedQActivityChoiceIndex = $(event.target).closest('.qActivityChoice').index();
	    }
	    
	    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "basic"){
		if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "Basic"){    
		    selectedQActivityChoiceIndex += 1;
	    }else{
		    $('#' + activeContentBlock + ' .menuSelectedLabel').html(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][selectedQActivityChoiceIndex].label);
	    }
	    //$('#' + activeContentBlock + ' .menuSelectedLabel').css('background', 'green');
	    revertCourseQuizQBlock(event);
	    //$(this).css('background', 'rgba(0,0,0,0.2)');
	    
	    $(this).css('background', skinPrimaryColor);
		$(this).css('color', 'white');
		
	    //$(this).find('.CET-Choice-Radio').css('color', skinSecondaryColor);
		$(this).find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px ' + skinSecondaryColor + ', 0px 0px 5px 2px ' + skinPrimaryColor + ', 0px 0px 6px 3px white');
	   // $(this).find('.CET-Choice-Radio').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.form_rb1)[0].data); 
	   $(this).find('.CET-Choice-Radio .radioInner').css('background', skinSecondaryColor);
	    
	    courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][selectedQActivityChoiceIndex].selected = true;
	    courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].blockSelectionMade = 		true;
	    checkCourseQuizPageCompletion();
	    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "dropList"){
		if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "DropList"){
		    toggleDropMenu(event);
	    }
    }else if( quizType == 'Sidenav' ){
    	var currentSideNavActiveElement;
    	if( $(event.target).hasClass('sidenavItemInnerText') || $(event.target).hasClass('sidenavElementIcon') ){
		   currentSideNavActiveElement = $(event.target).closest('.qActivityChoice');
		   //currentDashboardSelectedArea = $(event.target).closest('li').
		   //alert(dashboardSideNavItemActive);
	    }else{
		   currentSideNavActiveElement = $(event.target);
	    }
	    var currentSideNavActiveElementIndex = currentSideNavActiveElement.index();
	    
	    //dashboardSideNavItemActive = currentSideNavActiveElementIndex + 1;
	    if( currentSideNavActiveElement.hasClass('courseModuleChoice') ){
		   //courseModuleGroupedActive = $('.sideNavDropList .menuSelectDropButton').attr('data-courseModuleGrouping');
		   courseModuleGroupedActive = currentSideNavActiveElement.attr('data-courseModuleGrouping');
		}else{
		    if( lightBoxDialog_Level3_Engaged && lightBoxDialog_Level3_EngagedContentType == "dashboard" ){
				courseModuleGroupedActive = null;
			}
		}
		
	    if(lightBoxDialog_Level3_EngagedContentType == "dashboard"){
		    //dashboardSideNavItemActive = currentSideNavActiveElement;
		    //console.log( "currentSideNavActiveElementIndex  = " + currentSideNavActiveElementIndex );
		    dashboardSideNavItemActive = currentSideNavActiveElementIndex + 1;
		    //console.log( "dashboardSideNavItemActive  = " + dashboardSideNavItemActive );
		    currentDashboardSelectedArea = sideNavArray[currentSideNavActiveElementIndex - 1].navSlotType; // subtract 1 for zero index
	    }else if(lightBoxDialog_Level3_EngagedContentType == "about"){
		    aboutSideNavItemActive = currentSideNavActiveElement;
	    }else if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "dashboardHelp"){
		    helpSideNavItemActive = currentSideNavActiveElement;
	    }
	    sideNavReset({ 'sideNavStack' : lightBoxDialog_Level3_EngagedContentType , 'newNum' : currentSideNavActiveElementIndex });
    	//var selectedSidenavChoiceIndex = 		$(event.target).index();
    	if( sideNavDropListStatus == "Dropped" ){
	    	clearTimeout(delayDropListSubItemReact);
			delayDropListSubItemReact = setTimeout(function(){
				toggleDropMenu(event); 
			},300);
    	}
    }
});

/* ! --[ B - video assistive controls launcher ]--- */
$(document).off("click", ".videoAssistiveControlLauncher");
$(document).on("click", ".videoAssistiveControlLauncher", function(event){
    $('#videoAssistiveControls').removeClass( "videoAssistiveControlsOff" );
});

/* ! --[ B - video assistive controls ]--- */
$(document).off("click", ".videoAssistiveControl:not(.disabled)");
$(document).on("click", ".videoAssistiveControl:not(.disabled)", function(event){
    var targetControl = 				$(this);
    var targetControlID = 				targetControl.attr( "data-videoAssistiveControl" );
    var playerType = "";
    
    switch( lightBoxViewerTool ){
	    case "video-vimeo-basic" : 
	    	playerType = "Vimeo";
	    break;
	    case "video-youtube-basic" : 
	    	playerType = "YouTube";
	    break;
	    case "video-html-basic" : 
	    	playerType = "HTML5-MP4";
	    break;
    }
    
    
    //console.log( targetControl );
    // deferring to another function handler to keep in synch with vimeo ui controls
    switch( targetControlID ){
	    case "Play-Pause" :
	    	var targetControlState = 	targetControl.attr( "data-videoAssistiveControlState" ); // "Play"
	    	switch( targetControlState ){
			    case "Play" :
					videoControlReact({ 'playerType' : playerType , 'action' : "Play"  });
			    break;
			    case "Pause" :
					videoControlReact({ 'playerType' : playerType , 'action' : "Pause"  });
			    break;
			}
	    break;
		case "Restart" : // custom button only, not in vimeo player
			videoControlReact({ 'playerType' : playerType , 'action' : "Restart"  });
	    break;
	    case "VolumeDown" : // custom button only, not in vimeo player
	    	videoControlReact({ 'playerType' : playerType , 'action' : "VolumeDown"  });
	    break;
	    case "VolumeUp" : // custom button only, not in vimeo player
	    	videoControlReact({ 'playerType' : playerType , 'action' : "VolumeUp"  });
	    break;
	    case "Mute-Unmute" : // custom button only, not in vimeo player
	    	var targetControlState = targetControl.attr( "data-videoAssistiveControlState" ); // "Mute"
	    	switch( targetControlState ){
			    case "Mute" :
			    	videoControlReact({ 'playerType' : playerType , 'action' : "Mute"  });
			    break;
			    case "UnMute" :
			   		videoControlReact({ 'playerType' : playerType , 'action' : "UnMute"  });
			    break;
			}
	    break;
	    case "CaptionSelectLaunch" : // customized handling of vimeo data
	    	videoControlReact({ 'playerType' : playerType , 'action' : "CaptionSelectLaunch"  });
	    break;
	    case "FullScreen" : // html5/js method of fullscreen api
	    	videoControlReact({ 'playerType' : playerType , 'action' : "FullScreen"  });
	    break;
    }
});

/* ! --[ B - video assistive controls - pop list item ]--- */
$(document).off("click", ".popListItem");
$(document).on("click", ".popListItem", function(event){
	var playerType = "";
	switch( lightBoxViewerTool ){
	    case "video-vimeo-basic" : 
	    	playerType = "Vimeo";
	    break;
	    case "video-youtube-basic" : 
	    	playerType = "YouTube";
	    break;
	    case "video-html-basic" : 
	    	playerType = "HTML5-MP4";
	    break;
    }
	videoControlReact({ 'playerType' : playerType , 'action' : "CaptionSelect" , 'languageSelection' : $(this).attr('data-popListLangShort') });
});

/* ! --[ K - Accessibility - document keydown ]--- */
$(document).on( "keydown" , function(event){
	var code = ( event.keyCode ? event.keyCode : event.which );
	//if( focusControl.hotKeyDebounceLocked == true ){
	/*
	if( code == 9 ){ // tab
		if( focusControl.debounceTabLocked ){ // stop browser rapid tabbing behavior, each tab must be press and release
			event.preventDefault();
			return false;
		}
		console.log( "focalitem code down = " + code + " --- debounced" );
		console.log( "index 1 =  " + $( this ).index() );
		console.log( "id 1 =  " +  $( this ).attr( 'id' ) );
		console.log( "---------------------------" );
		if( focusControl.firstItemFocused && event.shiftKey ){ // stop default browser reverse tabbing behavior
			event.preventDefault();
			//focusControl.firstItemFocused = false;
			//focusControl.lastItemFocused = true;
			return false;
		}
		if( focusControl.lastItemFocused && !event.shiftKey ){ // stop default browser reverse tabbing behavior
			event.preventDefault();
			//focusControl.firstItemFocused = true;
			//focusControl.lastItemFocused = false;
			return false;
		}
		//focusControl.firstItemFocused = false;
		//focusControl.lastItemFocused = false;
		focusControl.debounceTabLocked = true;
	}
	*/
	
	/*
	if( focusControl.hotKeysCaptured.indexOf(code) != -1 ){
		event.preventDefault();
		return false;
	}
	//console.log( "document code down = " + code + " --- debounced" );
	if( focusControl.hotKeysCaptured.indexOf(code) == -1 ){
		if( code != 9 ){
			focusControl.hotKeysCaptured.push( code );
		}
		switch( code ){
			case 17 : // control, should be cross-platform
				focusControl.activeModifiers.control = 1;
			break;
			case 224 : // mac apple/cmd, left or right -- test in browsers (no need in IE)
				focusControl.activeModifiers.cmd = 1;
			break;
		}
	}
	*/
	
	//focusControl.hotKeyDebounceLocked = true;
});
/* ! --[ K - Accessibility - document keyup ]--- */
$(document).on( "keyup" , function(event){
	// fires after focalitem keyup
	var code = ( event.keyCode ? event.keyCode : event.which );
	
	var preventDefault = 		true;
	var blockCheck = 			false;
	
	//console.log( "document code up = " + code );
	
	//if( code == 9 ){ // tab
		//switch( focusControl.focusGroupingOverrider ){
			//case "BottomNav" :
				
			//break;
			//default:
				/*
				if( $('.focused').length == 0 ){
					if( lightBoxDialog_Level3_Engaged ){
						switch( lightBoxDialog_Level3_EngagedContentType ){
							case "dashboard" :								
								$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								$( '.lightBoxDialog_Level3_TopNav_LabelText' ).addClass( 'focused' );
							break;
						}
					}
				}
				*/
			//break;
		//}
	//}
	
	//if( focusControl.hotKeyDebounceLocked ){
		//event.preventDefault();
		//return false;
	//}
	/*
	var modifiers = {
		'control' : 	0,
		'cmd' : 		0,
		'f5' : 			0
	};
	*/
	// check for modifiers
	//*
	switch( code ){
		case 17 : // control, should be cross-platform
			focusControl.activeModifiers.control = 1;
		break;
		case 224 : // mac apple/cmd, left or right -- test in browsers (no need in IE)
			focusControl.activeModifiers.cmd = 1;
		break;
		case 116 : // f5 - refresh -- fs are 112-123, all browsers -- this triggers refresh immediately, may not need to capture/process
			focusControl.activeModifiers.f5 = 1;
			console.log( "f5" );
		break;
	}
	//*/
	
	//*
	switch( code ){
		//case 27 : // escape
			
		//break;
		case 37 : // arrow - left
			// BACK?
			if( !$('#navItem-back').is(":hidden") ){
				$('#navItem-back').trigger( "click" );
			}
		break;
		//case 38 : // arrow - up
			// cycle items up
		//break;
		case 39 : // arrow - right
			// CONTINUE BUTTON
			$('#navItem-continue').trigger( "click" );
		break;
		//case 40 : // arrow - down
			// cycle items down
		//break;
		case 65 : // a
			// ABOUT
			if( $('body').attr( 'data-lightBoxPanel3' ) != "Dashboard" && 
			$('body').attr( 'data-lightBoxPanel3' ) != "About" && 
			!lightBoxDialog_Level4_Engaged ){
				$('#menuNavItem-about').trigger( "click" );
			}
		break;
		//case 66 : // b
			// BACK?
		//break;
		case 67 : // c
			// CLIPBOARD
			console.log( "modifiers.control = " + focusControl.activeModifiers.control);
			console.log( "modifiers.cmd = " + focusControl.activeModifiers.cmd);
			if( focusControl.activeModifiers.control == 1 || focusControl.activeModifiers.cmd == 1 ){
				console.log( "copy" );
			}else{
				if( $('body').attr( 'data-lightBoxPanel3' ) != "Clipboard" && 
				$('body').attr( 'data-lightBoxPanel3' ) != "Dashboard" && 
				!lightBoxDialog_Level4_Engaged ){
					$('#menuNavItem-clipboard').trigger( "click" );
				}
			}
		break;
		case 68 : // d
			// DASHBOARD
			if( $('body').attr( 'data-lightBoxPanel3' ) != "Dashboard" && 
			!lightBoxDialog_Level4_Engaged ){
				$('#menuNavItem-dashboard').trigger( "click" );
			}
		break;
		case 72 : // h
			// HELP
			if( !lightBoxDialog_Level4_Engaged &&
			$('body').attr( 'data-lightBoxPanel3' ) != "Help" ){
				$('#menuNavItem-help').trigger( "click" );
			}
		break;
		case 77 : // m
			// MENU
			if( !lightBoxDialog_Level4_Engaged ){
				focusControl.launchNewContext = 		"NavMenu";
				$( "#navItem-menu .navItemInnerContainer" ).trigger( "click" );
				$( '.menuNavItemLast' ).focus();
				updateFocus({ 'action' : "Update" });
			}
		break;
		
		// n
		// sidenav
		// .lightBoxDialog_Level3_Content_SideNavContainer -- focus, then space? or jump to topmost nav menu item?
		
		case 81 : // q
			// STEP ASSESSMENT
			$( '#CET-Activity-Content-Assessment' ).focus();
			updateFocus({ 'action' : "Update" });
		break;
		case 82 : // r
			// RESTART
			if( focusControl.activeModifiers.control == 1 || focusControl.activeModifiers.cmd == 1 ){
				console.log( "refresh" );
			}else{
				if( !lightBoxDialog_Level4_Engaged &&
				$('body').attr( 'data-lightBoxPanel3' ) != "Dashboard" ){
					$('#menuNavItem-restart').trigger( "click" );
				}
			}
		break;
		
		case 87 : // w
			// toggle ADA element highlighting
			$('body').toggleClass("focusVisibleEnabled"); // initial tab shows the highlight.
		break;
		// t
		// top title?
		// title of foremost section? (feeback, etc)
		
		
		
		// q
		// assessment / instructions?
		
		// too difficult to handle the various modalities with these numeric keys? 
		// need alternate handling for lightboxes, etc.
		/*
		case 49 : // num 1
		case 97 : // numpad 1
			// COURSE/PATH TOP TITLE BAR
		break;
		case 50 : // num 2
		case 98 : // numpad 2
			// STEP TYPE ICON (ignore if not main page?)
		break;
		case 51 : // num 3
		case 99 : // numpad 3
			// STEP TITLE
		break;
		case 52 : // num 4
		case 100 : // numpad 4
			// STEP INFO
		break;
		case 53 : // num 5
		case 101 : // numpad 5
			// STEP INFO MEDIA
		break;
		case 54 : // num 6
		case 102 : // numpad 6
			// STEP ASSESSMENT (if present)
		break;
		case 55 : // num 7
		case 103 : // numpad 7
			// FIRST ITEM BOTTOM BUTTONS
		break;
		/*/
		case 116 : // f5 - refresh -- fs are 112-123, all browsers -- this triggers refresh immediately, may not need to capture/process
			//modifiers.f5 = 1;
			console.log( "f5" );
		break;
	}
	
	// check for modifiers
	switch( code ){
		case 17 : // control, should be cross-platform
			focusControl.activeModifiers.control = 0;
		break;
		case 224 : // mac apple/cmd, left or right -- test in browsers (no need in IE)
			focusControl.activeModifiers.cmd = 0;
		break;
	}
	
	//focusControl.hotKeyDebounceLocked = false;
	if( focusControl.hotKeysCaptured.indexOf(code) != -1 ){
		focusControl.hotKeysCaptured.splice( focusControl.hotKeysCaptured.indexOf(code) , 1 );
	}
	
	if( preventDefault && blockCheck ){
		//console.log("keyup prevent default");
		event.preventDefault();
	}
	
	//*/
});

//! Window blur actions
$(window).on('blur', function (event) {
	//focusControl.lastFocusedElement = $(document.activeElement);
	focusControl.windowBlurred = true;
	//if( focusControl.lastFocusedElement != null ){
		//console.log( "blur window last focused classlist = " + focusControl.lastFocusedElement.attr("class") );
		//console.log( "blur window last focused id = " + focusControl.lastFocusedElement.attr("id") );
	//}
});
//! Window focus actions
$(window).on('focus', function (event){
	//refocus();
	//console.log( "focus window" );
});
$(window).on('focusin', function (event){
	//refocus();
	//console.log( "focusin window" );
});

//! Window message actions
// parent 
$(window).on( "message onmessage" , function(e) {
	var data = e.originalEvent.data;
	if( ( typeof data === "object" ) && ( data !== null ) ){
		//console.log("original data is obj");
		$.each( data , function( key, value ){
			//$( '.parentReceiver' ).append( "<div>"+value+"</div>" );
		});
	}else{
		//console.log("original data is NOT obj");
		var testParseJSON = JSON.parse( JSON.stringify(data) ); // force stringify, then re-parse json, and then test to ensure is json obj
	    if( ( typeof testParseJSON === "object" ) && ( testParseJSON !== null ) ){
		    //console.log("is json format obj");
			$.each( data , function( key, value ){
				//$( '.parentReceiver' ).append( "<div>"+value+"</div>" );
			});
		}else{
			//console.log("is NOT json format obj");
			//$( '.parentReceiver' ).text( data );
			if( data == "exitMiniApp" ){ // first character is the first letter
				//$('.actionObject').css( "backgroundColor" , "red" );
				//var grabIncrementValue = parseInt( $('.actionObject .incrementer').text() );
				//$('.actionObject .incrementer').text( grabIncrementValue += 1 );
				//updateFocus({ 'action' : "Purge" });
				//initFocusControl();
				// apply focus to element that should be initial focal point
				//$('.TabNavItemFirst').focus();
				//updateFocus({ 'action' : "Update" });
				$( '.SandboxOccupied' ).focus();
				updateFocus({ 'action' : "Update" });
			}
		}
	}
});
//! Window message actions
// child 
/*
$(window).on( "message onmessage" , function(e) {
    //$( '.childReceiver' ).empty();
    var data = 		e.originalEvent.data;
    var origin = 	e.originalEvent.origin;
    //console.log( "data = " + data );
    //console.log( "origin = " + origin );
    if( ( typeof data === "object" ) && ( data !== null ) ){
	    //console.log("original data is obj");
		$.each( data , function( key, value ){
			//$( '.childReceiver' ).append( "<div>"+value+"</div>" );
		});
	}else{
		//console.log("original data is NOT obj");
		//if( data == "doAction1" ){ // first character is the first letter
			//$('.actionObject').css( "backgroundColor" , "red" );
			//var grabIncrementValue = parseInt( $('.actionObject .incrementer').text() );
			//$('.actionObject .incrementer').text( grabIncrementValue += 1 );
		//}
		if( data.slice(0,1) == '"' ||  data.slice(0,1) == "'" ){ // 1st char is single/double quote, is not obj/array
			//$( '.childReceiver' ).text( data );
		}else if( data.slice(0,1) == "{" ||  data.slice(0,1) == "[" ) { // 1st char is square/curly bracked, is obj/array
			var testParseJSON = JSON.parse( data );
		    if( ( typeof testParseJSON === "object" ) && ( testParseJSON !== null ) ){
			    //console.log("is json format obj");
				$.each( testParseJSON , function( key, value ){
					//$( '.childReceiver' ).append( "<div>"+value+"</div>" );
				});
			}else{
				//console.log("is NOT json format obj");
				//$( '.childReceiver' ).text( data );
			}
		}
	}
});
*/

//! ------------------------------------------------------------------------------
/* ! --[ K - Acessibility - navitem menu focus ]--- */
$(document).off( "focus" , "#navItem-menu" );
$(document).on( "focus" , "#navItem-menu", function(event){
	//console.log("menu focus");
});
//! ------------------------------------------------------------------------------ 
/* ! --[ F - Acessibility - dev console logging for keyboard response ]--- */
function accessibilityKeyboardHandlingLogging( logText ){
	var accessibilityKeyboardHandlingLoggingSwitch = false; // dev toggle
	if( accessibilityKeyboardHandlingLoggingSwitch ){
		console.log( logText );
	}
}

/* ! --[ K - Accessibility - stepAssessmentInputFieldListItem KEYDOWN ]--- */
$(document).on("keydown", ".stepAssessmentInputFieldListItem", function(event){ 
	//console.log("??? stepAssessmentInputFieldListItem keydown");
	var code = ( event.keyCode ? event.keyCode : event.which );
	var codeToString = String(code);
	//if( focusControl.debounceTabLocked ){ // stop browser rapid tabbing behavior, each tab must be press and release
	//if( focusControl.inputFieldFocused ){
		//event.preventDefault();
		//return false;
		//return;
	//}
	switch( code ){
		case 27 : // escapeCaptured
			//console.log("override escape kd");
			event.preventDefault();
			//$( '.focalOverride' ).removeClass( "focalOverride" );
			//$( this ).closest( '.choiceList_Item' ).focus();
			//updateFocus({ 'action' : "Update" });
		break;
		case 9 : // tab
			//console.log("override tab kd");
			event.preventDefault();
			//$( '.focalOverride' ).removeClass( "focalOverride" );
			//$( '#navItem-continue' ).focus();
			//updateFocus({ 'action' : "Update" });
		break;
	}
});
/* ! --[ K - Accessibility - stepAssessmentInputFieldListItem KEYUP ]--- */
$(document).on("keyup", ".stepAssessmentInputFieldListItem", function(event){ 
	//console.log("??? stepAssessmentInputFieldListItem keyup");
	var code = ( event.keyCode ? event.keyCode : event.which );
	var codeToString = String(code);
	//if( focusControl.debounceTabLocked ){ // stop browser rapid tabbing behavior, each tab must be press and release
	//if( focusControl.inputFieldFocused ){
		//event.preventDefault();
		//return false;
		//return;
	//}
	switch( code ){
		case 27 : // escapeCaptured
			//console.log("override escape ku");
			event.preventDefault();
			$( '.focalOverride' ).removeClass( "focalOverride" );
			
			//console.log("MEEEEF");
			//$('.focalOverride').removeClass( "focalOverride" );
			var grabInputVal = $(this).val();
			var grabInputIndex = $( this ).closest( '.choiceList_Item' ).index();
			//console.log("%%% grabInputVal = " + grabInputVal);
			//console.log("%%% grabInputIndex = " + grabInputIndex);
			var tidied_GrabInputVal = 			inputGrinder( grabInputVal, 'singularSpaces' );
			tidied_GrabInputVal = 				inputGrinder( tidied_GrabInputVal, 'singularSpaces' ); // need this redundancy?
			tidied_GrabInputVal = 				inputGrinder( tidied_GrabInputVal, 'curlyBracesRemoved' );
			tidied_GrabInputVal = 				inputGrinder( tidied_GrabInputVal, 'squareBracesRemoved' );
			if( tidied_GrabInputVal == " " ){
				tidied_GrabInputVal = "";
			}
			$( this ).closest( '.choiceList_Item' ).focus(); 
			var part1 = placeLocalizedContent({
				'srcData' : 		langPack.screenreader.stepBase.stepAssessmentWriteInFieldListSlot1 ,
				'placementMode' : 	"Return",
				'varSet' : 			[
					grabInputIndex + 1 ,
					masterJSONStorage.currentStep.Assessment.inputFieldSetup.fieldCount
				]
			});
			var part2 = "blank";
			if( tidied_GrabInputVal != "" ){
				part2 = tidied_GrabInputVal;
			}
			var part3 = langPack.screenreader.stepBase.stepAssessmentWriteInFieldListSlot2;
			$( this ).closest( '.choiceList_Item' ).focus();
			updateFocus({ 'action' : "Update" });
			
			//setTimeout(function(){
				//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
				//updateFocus({ 'action' : "Update" });
				$('#ariaLiveAssertive').text( part1 + part2 + part3 );
			//}, 800);
		break;
		case 9 : // tab
			//console.log("override tab ku");
			event.preventDefault();
			$( '.focalOverride' ).removeClass( "focalOverride" );
			$( '#navItem-continue' ).focus();
			updateFocus({ 'action' : "Update" });
		break;
	}
});

/* ! --[ K - Accessibility - uidialog KEYUP (image zoom override temp) ]--- */
$(document).on("keydown", ".ui-dialog.focused", function(event){ 
	//console.log("??? stepAssessmentInputFieldListItem keyup");
	var code = ( event.keyCode ? event.keyCode : event.which );
	switch( code ){
		case 27 : // escapeCaptured
			event.preventDefault();
		break;
	}
});
/* ! --[ K - Accessibility - uidialog KEYUP (image zoom override temp) ]--- */
$(document).on("keyup", ".ui-dialog.focused", function(event){ 
	//console.log("??? stepAssessmentInputFieldListItem keyup");
	var code = ( event.keyCode ? event.keyCode : event.which );
	//var codeToString = String(code);
	//if( focusControl.debounceTabLocked ){ // stop browser rapid tabbing behavior, each tab must be press and release
	//if( focusControl.inputFieldFocused ){
		//event.preventDefault();
		//return false;
		//return;
	//}
	switch( code ){
		case 27 : // escapeCaptured
			//console.log("override escape ku");
			event.preventDefault();
			$( '.lightBoxDialog_Level4_TopNav_Close').trigger( "click" );
			updateFocus({ 'action' : "Update" });
		break;
	}
});

/* ! --[ K - Accessibility - focal item KEYDOWN ]--- */
$(document).on("keydown", ".focalItem", function(event){ 
	//console.log("focal item keydown");
	var code = ( event.keyCode ? event.keyCode : event.which );
	var codeToString = String(code);
	//if( focusControl.debounceTabLocked ){ // stop browser rapid tabbing behavior, each tab must be press and release
	if( focusControl.inputFieldFocused ){
		//event.preventDefault();
		//return false;
		return;
	}
	if( focusControl.heldKeys[codeToString] ){
		//console.log("focal item keydown blocked");
		event.preventDefault();
		return false;
	}
	/*if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
		console.log("NORMAL TAB PRESS SHOULD BE OVERRIDDEN");
		event.preventDefault();
		return false;
	}*/
	accessibilityKeyboardHandlingLogging( "===[ start kd handler ]======================================" );
	accessibilityKeyboardHandlingLogging( "focal item keydown (unblocked) -- code = " + code );
	//console.log( "kd focal control heldkeys:" );
	//console.log( JSON.stringify( focusControl.heldKeys , null , 4 ) );
	var preventDefault = true;
	var blockCheck = false;
	var captured = false;
	var reverseCaptured = false;
	
	/*if( $( document.activeElement ).hasClass( "menuNavItem" ) || 
	$( document.activeElement ).hasClass( "sidenavItem" ) || 
	$( document.activeElement ).hasClass( "stepMapItem" ) {
		
	}*/
	
	if( focusControl.lastFocusedElement != null ){
		//console.log( "focus window target last focused classlist = " + focusControl.lastFocusedElement.attr("class") );
		//console.log( "focus window target last focused id = " + focusControl.lastFocusedElement.attr("id") );
	}
	
	//console.log("focused class kd before refocus = " + $( document.activeElement ).attr("class") );
	//console.log("focused id kd before refocus = " + $( document.activeElement ).attr("id") );
	//console.log("focused class kd before refocus = " + $( document.activeElement ).attr("class") );
	//console.log("focused id kd before refocus = " + $( document.activeElement ).attr("id") );
	
	//var focusEstablished = false;
	
	//if( $(document.activeElement).length == 0 || focusControl.windowBlurred ){
	//if( $(document.activeElement).length == 0 || focusControl.windowBlurred ){
	if( $(document.activeElement).length == 0 || focusControl.windowBlurred ){
	//if( $( '.focalItem.focused').length == 0 || focusControl.windowBlurred ){
		if( focusControl.lastFocusedElement != null ){
			//refocus();
			accessibilityKeyboardHandlingLogging("should re-focus");
		}else{
			accessibilityKeyboardHandlingLogging("need to force focus");
		}
		focusControl.windowBlurred = 			false;
	}else{
		if( $(document.activeElement).hasClass("focused") ){
			//console.log("document activeElement has focused style");
			focusControl.focusEstablished = true;
		}else{
			//console.log("document activeElement does not have focused style");
			focusControl.focusEstablished = false;
		}
	}
	
	//console.log("focused class kd after refocus = " + $( document.activeElement ).attr("class") );
	//console.log("focused id kd after refocus = " + $( document.activeElement ).attr("id") );
	
	//console.log("lightBoxDialog_Level3_Engaged = " + lightBoxDialog_Level3_Engaged);
	//lightBoxDialog_Level3_TopNav_Close
	
	switch( code ){
		//! -[ KD - escape ]-
		case 27 : // escape
			//blockCheck = true;
			
			var escapeCaptured = false;
			
			//if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
			if( $( document.activeElement ).hasClass( "arrowNavUD" ) && !captured ){
				//switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
				//console.log("doopy");
				switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
					case "MenuNav" : //! -- MenuNav
						//console.log("moopy");
						blockCheck = true;
						//if( $( '#navItem-menu').hasClass("open") ){
							//$( '#navItem-menu').trigger( "click" );
						//}
						//$( '#navItem-menu').focus();
						//actionUnblocked = true;
						focusControl.updateFocalItemCurrent = "navMenu";
						escapeCaptured = true;
						captured = true;
					break;
					case "VideoCaptionSelect" : //! -- VideoCaptionSelect
						blockCheck = true;
						focusControl.updateFocalItemCurrent = "videoCaptionSelect";
						escapeCaptured = true;
						captured = true;
					break;
					/*case "StepAssessmentWriteInFieldList" : // 
						focusControl.updateFocalItemCurrent = "stepAssessmentWriteInFieldList";
						escapeCaptured = true;
						captured = true;
					break;*/
					//case "DashboardNav" :
						// should only need this in narrow droplist config, return to it
						//focusControl.updateFocalItemCurrent = "dashboardNav";
					//break;
					//case "DashboardStepList" :
						// should not need this
						//focusControl.updateFocalItemCurrent = "dashboardStepList";
					//break;
				}
				//captured = true;
			}
			
			//if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
			/*
			if( $( document.activeElement ).hasClass( "stepAssessmentInputFieldListItem" ) && !captured ){
				//switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
				//console.log("DOOPY");
				switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
					case "StepAssessmentWriteInFieldList" : // 
						blockCheck = true;
						focusControl.updateFocalItemCurrent = "stepAssessmentWriteInFieldList";
						escapeCaptured = true;
						captured = true;
					break;
				}
			}
			*/
			
			var lightboxLevelClosing = "";
			
			//! -- lightBoxLevel4
			//if( lightBoxDialog_Level4_Engaged && !captured ){ // video, image, pdf enlargement panel
			if( lightBoxDialog_Level4_Engaged && !escapeCaptured ){ // video, image, pdf enlargement panel
				//console.log("kd escape from lblvl4");
				blockCheck = true;
				lightboxLevelClosing = "4";
				focusControl.updateFocalItemCurrent = "lightBoxLevel4";
				captured = true;
				escapeCaptured = true;
		    }
		    
		    //! -- lightBoxLevel3
		    //if( lightBoxDialog_Level3_Engaged && !captured ){ // dashboard, help, about, clipboard
			if( lightBoxDialog_Level3_Engaged && !escapeCaptured ){ // dashboard, help, about, clipboard
			    blockCheck = true;
			    //console.log("glee");
			    if( lightboxLevelClosing == "" ){
				    //console.log("fwee");
				    lightboxLevelClosing = "3";
				    if( $('body').attr( 'data-lightBoxPanel3' ) == "Help" || 
				    $('body').attr( 'data-lightBoxPanel3' ) == "DashboardHelp" || 
				    $('body').attr( 'data-lightBoxPanel3' ) == "About" || 
				    $('body').attr( 'data-lightBoxPanel3' ) == "Clipboard" ){
					    //console.log("blee");
				    	focusControl.updateFocalItemCurrent = "lightBoxLevel3";
				    	captured = true;
				    	escapeCaptured = true;
				    	/*if( $('body').attr( 'data-lightBoxPanel3' ) == "Help" ){
				    	if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "UsingStepstone" ){
					    	
					    }
					    if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "SystemRequirements" ){
					    	
					    }*/
				    }
			    }
			    //captured = true;
			}
			
			//! -- lightBoxLevel2
			if( lightBoxDialog_Level2_Engaged && !escapeCaptured ){ // dashboard, help, about, clipboard
			    blockCheck = true;
			    //console.log("glee");
			    if( lightboxLevelClosing == "" ){
				    //console.log("fwee");
				    lightboxLevelClosing = "2";
				    focusControl.updateFocalItemCurrent = "lightBoxLevel2";
				    captured = true;
				    escapeCaptured = true;
			    }
			    //captured = true;
			}
			
			//! -- lightBoxLevel1
			if( lightBoxDialog_Level1_Engaged && !escapeCaptured ){ // dashboard, help, about, clipboard
			    blockCheck = true;
			    //console.log("glee");
			    if( lightboxLevelClosing == "" ){
				    //console.log("fwee");
				    lightboxLevelClosing = "1";
				    focusControl.updateFocalItemCurrent = "lightBoxLevel1";
				    captured = true;
				    escapeCaptured = true;
			    }
			    //captured = true;
			}
			
			
		break; // end escape handling
		//! --------------------
		//! -[ KD - return/space ]-
		case 13 : // return
		case 32 : // space
			//console.log( "space/return active element class = " + $( document.activeElement ).attr("class") );
			//event.preventDefault();
			//focusControl.updateFocalItemCurrent = "navBack";
			//! -- lightBoxLevel3 SideNavContainer
			
			//! -- SandboxOccupied
			if( $( document.activeElement ).hasClass( "SandboxOccupied" ) && !captured ){	
				//blockCheck = true;
				//if( event.shiftKey ){
			    	
				//}else{
					
				//}
				focusControl.updateFocalItemCurrent = "sandboxOccupied";
				captured = true;
			}
			
			//! -- CET-Activity-Content-Title-PageTypeIndicator
			if( $(document.activeElement).hasClass( "CET-Activity-Content-Title-PageTypeIndicator" ) && !captured ){	
				focusControl.updateFocalItemCurrent = "pageTypeIndicator";
				captured = true;
			}
			
			//if( $( document.activeElement ).hasClass( "mainPageTextHyperlink" ) && !captured ){
			if( $( document.activeElement ).hasClass( "textHyperlink" ) && !captured ){	
				//blockCheck = true;
				//if( event.shiftKey ){
			    	
				//}else{
					
				//}
				//focusControl.updateFocalItemCurrent = "mainPageTextHyperlink";
				focusControl.updateFocalItemCurrent = "textHyperlink";
				captured = true;
			}
			
			
			if( $(document.activeElement).hasClass( "lightBoxDialog_Level3_Content_SideNavContainer" ) && !captured ){
				/*
				blockCheck = true;
				if( event.shiftKey ){
			    	preventDefault = false;
				}else{
					preventDefault = false;
				}
				*/
				focusControl.updateFocalItemCurrent = "lightboxLvl3SideNav";
				//focusControl.forceFocus = "navContinue";
				captured = true;
			}
			//if( $(document.activeElement).hasClass( "sidenavItem" ) && !captured ){
				/*
				blockCheck = true;
				if( event.shiftKey ){
			    	preventDefault = false;
				}else{
					preventDefault = false;
				}
				*/
				//focusControl.updateFocalItemCurrent = "sideNav";
				//focusControl.forceFocus = "navContinue";
				//captured = true;
			//}
			//if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
			if( $( document.activeElement ).hasClass( "arrowNavUD" ) && !captured ){		
				//switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
				//console.log("PARENT UDA = " + $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) );
				switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){	
					case "MenuNav" : //! -- MenuNav
						blockCheck = true;
						//if( $( '#navItem-menu').hasClass("open") ){
							//$( '#navItem-menu').trigger( "click" );
						//}
						//$( '#navItem-menu').focus();
						//actionUnblocked = true;
						focusControl.updateFocalItemCurrent = "navMenu";
					break;
					//case "DashboardNav" :
					case "SideNav" : //! -- SideNav
						// should only need this in narrow droplist config
						//focusControl.updateFocalItemCurrent = "dashboardNav";
						focusControl.updateFocalItemCurrent = "sideNav";
					break;
					case "DashboardStepList" : //! -- DashboardStepList
						// should not need this
						focusControl.updateFocalItemCurrent = "dashboardStepList";
					break;
					case "PathDashboardUnlockList" : //! -- PathDashboardUnlockList
						// should not need this?
						//console.log("GEEEEEE");
						//blockCheck = true;
						focusControl.updateFocalItemCurrent = "pathDashboardUnlockList";
					break;
					case "Help-CoreUI" : //! -- Help-CoreUI
					case "Help-Activities" : //! -- Help-Activities
					case "Help-Media" : //! -- Help-Media
					case "Help-Assessments" : //! -- Help-Assessments
						//console.log( "{{{ DOOP }}}" );
						if( $( document.activeElement ).hasClass( "helpSectionContentRowLaunchable" ) ){	
							//if( $( document.activeElement ).hasClass( "launchable" ) ){
							//console.log( "{{{ NOOP }}}" );
							if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){
								//console.log( "{{{ BOOP }}}" );
								focusControl.updateFocalItemCurrent = "usingPlayerTopicLaunchable";
								//console.log( "focusControl.updateFocalItemCurrent = " + focusControl.updateFocalItemCurrent )
							}
						}
					break;
					case "VideoAssistiveControls" :  //! -- VideoAssistiveControls
						//if( $( document.activeElement ).ffffffff( "videoAssistiveControl" ) && !captured ){	
							//if( $( document.activeElement ).hasClass( "launchable" ) ){
							//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
							//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
								//console.log("videoAssistiveControl clicka KD");
								focusControl.updateFocalItemCurrent = "videoAssistiveControl";
							//}
							//captured = true;
						//}
					break;
					case "VideoCaptionSelect" : //! -- VideoCaptionSelect
						//if( $( document.activeElement ).hasClass( "videoAssistiveControl" ) && !captured ){	
							//if( $( document.activeElement ).hasClass( "launchable" ) ){
							//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
							//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
								//console.log("videoAssistiveControl clicka KD");
								focusControl.updateFocalItemCurrent = "videoCaptionSelect";
							//}
							//captured = true;
						//}
					break;
					case "MediaGrid-Main" :  //! -- MediaGrid-Main
						//if( $( document.activeElement ).hasClass( "videoAssistiveControl" ) && !captured ){	
							//if( $( document.activeElement ).hasClass( "launchable" ) ){
							//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
							//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
								//console.log("videoAssistiveControl clicka KD");
								focusControl.updateFocalItemCurrent = "mediaGridBox-Main";
							//}
							//captured = true;
						//}
					break;
					case "MediaGrid-SubSeqMain" :  //! -- MediaGrid-SubSeqMain
						//if( $( document.activeElement ).hasClass( "videoAssistiveControl" ) && !captured ){	
							//if( $( document.activeElement ).hasClass( "launchable" ) ){
							//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
							//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
								//console.log("videoAssistiveControl clicka KD");
								focusControl.updateFocalItemCurrent = "mediaGridBox-SubSeqMain";
							//}
							//captured = true;
						//}
					break;
					case "MediaGrid-Clipboard" :  //! -- MediaGrid-Clipboard
						focusControl.updateFocalItemCurrent = "mediaGridBox-Clipboard";
					break;
					case "StepAssessmentChoices" : // text and matching and ranking choices //! -- StepAssessmentChoices
						focusControl.updateFocalItemCurrent = "stepAssessmentChoices";
					break;
					case "MediaGrid-Assessment" : // media choices //! -- MediaGrid-Assessment
						focusControl.updateFocalItemCurrent = "stepAssessmentChoices-Media";
					break;
					case "StepAssessmentRankingSubChoices" : //! -- StepAssessmentRankingSubChoices
						focusControl.updateFocalItemCurrent = "stepAssessmentRankingSubChoices";
					break;
					case "StepAssessmentMatchingSubChoices" : //! -- StepAssessmentMatchingSubChoices
						focusControl.updateFocalItemCurrent = "stepAssessmentMatchingSubChoices";
					break;
					case "StepAssessmentWriteInFieldList" : // 
						focusControl.updateFocalItemCurrent = "stepAssessmentWriteInFieldList";
					break;
				}
				captured = true;
			}
			//if( $( document.activeElement ).hasClass( "navItem" ) ){
			if( $( document.activeElement ).hasClass( "navItem" ) && !captured ){	
				//switch( $(document.activeElement).attr('id') ){
				switch( $( document.activeElement ).attr('id') ){	
					case "navItem-continue" : //! -- navItem-continue
						//blockCheck = true;
						//if( event.shiftKey ){
					    	
						//}else{
							//preventDefault = false;
						//}
						//focusControl.forceFocus = "navMenu";
						//event.preventDefault();
						focusControl.updateFocalItemCurrent = "navContinue";
					break;
					case "navItem-back" : //! -- navItem-back
						//event.preventDefault();
						focusControl.updateFocalItemCurrent = "navBack";
					break;
					case "navItem-menu" : //! -- navItem-menu
						//event.preventDefault();
						focusControl.updateFocalItemCurrent = "navMenu";
					break;
				}
				captured = true;
			}
			
			//if( $( document.activeElement ).hasClass( "mediaLauncher-image" ) ){
			if( $( document.activeElement ).hasClass( "mediaLauncher-image" ) && !captured ){ //! -- mediaLauncher-image	
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				if( $( document.activeElement ).hasClass( "launchable" ) ){	
					
					if( $( document.activeElement ).parent().hasClass( "CET-SubSequence-Content-Main-MediaBlock" ) ){	
						focusControl.updateFocalItemCurrent = "mainSubSeqPageMedia-Single";
					}else{
						focusControl.updateFocalItemCurrent = "mainPageMedia-Single";
					}
				}
				captured = true;
			}
			// for base page, subseq page(?) media grid
			if( $( document.activeElement ).hasClass( "mediaGridContainer" ) && !captured ){ //! -- mediaGridContainer
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//if( $( document.activeElement ).hasClass( "launchable" ) ){	
					focusControl.updateFocalItemCurrent = "mediaGridContainer";
				//}
				captured = true;
			}
			// for clipboard grid sets
			if( $( document.activeElement ).hasClass( "clipboardGridGroupContainer" ) && !captured ){ //! -- clipboardGridGroupContainer
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//if( $( document.activeElement ).hasClass( "launchable" ) ){	
					focusControl.updateFocalItemCurrent = "clipboardGridGroupContainer";
				//}
				captured = true;
			}
			// for clipboard grid boxes
			/*
			if( $( document.activeElement ).hasClass( "mediaGridBoxOuter" ) && 
			$( document.activeElement ).closest( '.mediaGridContainer' ).attr( 'data-UDArrowGroup' ) == "MediaGrid-Clipboard" && 
			!captured ){ //! -- clipboardGridBoxContainer
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//if( $( document.activeElement ).hasClass( "launchable" ) ){	
					focusControl.updateFocalItemCurrent = "clipboardGridBox";
				//}
				captured = true;
			}
			*/
			if( $( document.activeElement ).hasClass( "CET-Activity-Content-Assessment" ) && !captured ){ //! -- CET-Activity-Content-Assessment
				focusControl.updateFocalItemCurrent = "stepAssessment";
				captured = true;
			}
			if( $( document.activeElement ).hasClass( "stepAssessmentReviewFeedbackButtonContainer" ) && !captured ){ //! -- stepAssessmentReviewFeedbackButtonContainer
				focusControl.updateFocalItemCurrent = "stepAssessmentReviewFeedback";
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "helpSubSection" ) && !captured ){ //! -- helpSubSection
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
				if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
					focusControl.updateFocalItemCurrent = "usingPlayerSubSection";
				}
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "lockNoticeBlock" ) && !captured ){ //! -- lockNoticeBlock_LockTextContainer
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
				//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
					focusControl.updateFocalItemCurrent = "dashboardPathUnlockBlock";
				//}
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "dashboardSectionStepMap" ) && !captured ){ //! -- dashboardSectionStepMap
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
				//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
					focusControl.updateFocalItemCurrent = "dashboardStepMap";
				//}
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "videoAssistiveControlLauncher" ) && !captured ){ //! -- videoAssistiveControlLauncher
				//if( $( document.activeElement ).hasClass( "launchable" ) ){
				//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
				//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
					focusControl.updateFocalItemCurrent = "videoAssistiveControlLauncher";
				//}
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "documentDownloaderInner" ) && !captured ){ //! -- documentDownloaderInner
				console.log( "DOCUMENTDOWNLOADER KD" );
				focusControl.updateFocalItemCurrent = "documentDownloader";
				captured = true;
			}
			
			if( $( document.activeElement ).hasClass( "subSequenceNav-PrevBut" ) && !captured ){ //! -- subSequenceNav-PrevBut	
				focusControl.updateFocalItemCurrent = "subSequenceNav-PrevBut";
				captured = true;
			}
			if( $( document.activeElement ).hasClass( "subSequenceNav-NextBut" ) && !captured ){ //! -- subSequenceNav-NextBut	
				focusControl.updateFocalItemCurrent = "subSequenceNav-NextBut";
				captured = true;
			}
			
			//captured = true;
		break; // end space/return
		//! --------------------
		//! -[ KD - arrow up/down ]-
		case 38 : // arrow - up
		case 40 : // arrow - down
			/*if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
				if( $( '.focalOverride' ).hasClass( "arrowNavUD" ) && !captured ){	
					switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
						case "StepAssessmentWriteInFieldList" : //! -- StepAssessmentWriteInFieldList
							focusControl.updateFocalItemCurrent = "stepAssessmentWriteInFieldList";
						break;
					}
					captured = true;
				}
				//$( '.focalOverride' ).removeClass( "focalOverride" );
			}else{*/
				if( $( document.activeElement ).hasClass( "arrowNavUD" ) && !captured ){	
					switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
						case "MenuNav" : //! -- MenuNav
							focusControl.updateFocalItemCurrent = "navMenu";
						break;
						//case "DashboardNav" :
						case "SideNav" : //! -- SideNav
							focusControl.updateFocalItemCurrent = "sideNav";
						break;
						case "PathDashboardUnlockList" : //! -- PathDashboardUnlockList
							focusControl.updateFocalItemCurrent = "pathDashboardUnlockList";
						break;
						case "DashboardStepList" : // dashboard table of contents on procedurals //! -- DashboardStepList
							focusControl.updateFocalItemCurrent = "dashboardStepList";
						break;
						case "Help-CoreUI" : //! -- Help-CoreUI
						case "Help-Activities" : //! -- Help-Activities
						case "Help-Media" : //! -- Help-Media
						case "Help-Assessments" : //! -- Help-Assessments
							focusControl.updateFocalItemCurrent = "helpGroup";
						break;
						case "VideoAssistiveControls" : //! -- VideoAssistiveControls
							focusControl.updateFocalItemCurrent = "videoAssistiveControls";
						break;
						case "VideoCaptionSelect" : //! -- VideoCaptionSelect
							focusControl.updateFocalItemCurrent = "videoCaptionSelect";
						break;
						case "MediaGrid-Main" : //! -- MediaGrid-Main
							focusControl.updateFocalItemCurrent = "mediaGrid-Main";
						break;
						case "MediaGrid-SubSeqMain" : //! -- MediaGrid-Main
							focusControl.updateFocalItemCurrent = "mediaGrid-SubSeqMain";
						break;
						case "MediaGrid-Clipboard" : //! -- MediaGrid-Clipboard
							focusControl.updateFocalItemCurrent = "mediaGrid-Clipboard";
						break;
						case "StepAssessmentChoices" : // text choices, primary droppers for basic ranking and matching //! -- StepAssessmentChoices
							focusControl.updateFocalItemCurrent = "stepAssessmentChoices";
						break;
						case "MediaGrid-Assessment" : // media choices //! -- MediaGrid-Assessment
							focusControl.updateFocalItemCurrent = "stepAssessmentChoices-Media";
						break;
						case "StepAssessmentRankingSubChoices" : //! -- StepAssessmentRankingSubChoices
							focusControl.updateFocalItemCurrent = "stepAssessmentRankingSubChoices";
						break;
						case "StepAssessmentMatchingSubChoices" : //! -- StepAssessmentMatchingSubChoices
							focusControl.updateFocalItemCurrent = "stepAssessmentMatchingSubChoices";
						break;
						case "StepAssessmentWriteInFieldList" : //! -- StepAssessmentWriteInFieldList
							focusControl.updateFocalItemCurrent = "stepAssessmentWriteInFieldList";
						break;
					}
					captured = true;
				}
			//}
		break; // end arrow up/down
		//! --------------------
		//! -[ KD - tab ]-
		case 9 : // tab
			if( event.shiftKey ){
		    	//console.log("++++++++++");
		    	//console.log("SHIFT HELD ON FOCALITEM KEYDOWN");
		    	//console.log("++++++++++");
			}
			//console.log( "keydown focus length = " + $(document.activeElement).length );
			//console.log( "keydown focused length = " + $('.focused').length );
			var noLightBoxEngaged = true;
			/*
			if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
				console.log("NORMAL TAB PRESS SHOULD BE OVERRIDDEN");
				event.preventDefault();
				return false;
			}
			*/
			
			//console.log( "tab kd active element class = " + $( document.activeElement ).attr("class") );
			//console.log( "tab kd this class = " + $( this ).attr("class") );
			
			//if( $(document.activeElement).length == 0 ){
			if( !focusControl.focusEstablished ){ // no visible focus established
				//! [ No Existing Focus ]
				accessibilityKeyboardHandlingLogging("NO FOCUS kd");
				blockCheck = true;
				if( lightBoxDialog_Level4_Engaged && !captured ){
					//$( '.lightBoxDialog_Level4_TopNav_LabelText' ).focus();
					focusControl.updateFocalItemCurrent = "lightboxLvl4Header";
					noLightBoxEngaged = false;
					captured = true;
				}
				if( lightBoxDialog_Level3_Engaged && !captured ){
					//switch( lightBoxDialog_Level3_EngagedContentType ){
						//case "dashboard" :	
						//console.log("GWAAAA");							
							//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
							//focusControl.firstItemFocused = true;
						//break;
					//}
					focusControl.updateFocalItemCurrent = "lightboxLvl3Header";
					noLightBoxEngaged = false;
					captured = true;
				}
				if( lightBoxDialog_Level2_Engaged && !captured ){
					//$( '.lightBoxDialog_Level2_TopNav_LabelText' ).focus();
					focusControl.updateFocalItemCurrent = "lightboxLvl2Header";
					noLightBoxEngaged = false;
					captured = true;
				}
				if( lightBoxDialog_Level1_Engaged && !captured ){
					//$( '.lightBoxDialog_Level1_TopNav_LabelText' ).focus();
					focusControl.updateFocalItemCurrent = "lightboxLvl1Header";
					noLightBoxEngaged = false;
					captured = true;
				}
				if( noLightBoxEngaged && !captured ){
					//$( '#CET-Activity-Content-Title-Text' ).focus();
					focusControl.updateFocalItemCurrent = "mainContentHeader";
					captured = true;
				}
			}else{ // visible focus is established
				//! [ Existing Focus ]
				//! -- lightBoxDialog_Level4_TopNav_LabelText
				if( $(document.activeElement).hasClass( "lightBoxDialog_Level4_TopNav_LabelText" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "lightboxLvl4Header";
					captured = true;
				}
				//! -- videoAssistiveControlLauncher
				if( $( document.activeElement ).hasClass( "videoAssistiveControlLauncher" ) && !captured ){	
					blockCheck = true;
					// we want no reaction from tabbing, for now
					//if( $( document.activeElement ).hasClass( "launchable" ) ){
					//console.log( "{{{ DATASECTION }}} = " + $( this ).closest( 'li' ).attr('data-dataSection') )
					//if( $( this ).closest( 'li' ).attr('data-dataSection') == "UsingPlayer" ){	
						focusControl.updateFocalItemCurrent = "videoAssistiveControlLauncher";
					//}
					captured = true;
				}
				//! -- videoAssistiveControl
				if( $( document.activeElement ).hasClass( "videoAssistiveControl" ) && !captured ){	
					blockCheck = true;
					// we want no reaction from tabbing, for now
					focusControl.updateFocalItemCurrent = "videoAssistiveControl";
					captured = true;
				}
				
				//! -- documentDownloaderInner
				if( $( document.activeElement ).hasClass( "documentDownloaderInner" ) && !captured ){	
					blockCheck = true;
					// we want no reaction from tabbing, for now
					focusControl.updateFocalItemCurrent = "documentDownloader";
					captured = true;
				}
				
				//! -- lightBoxDialog_Level3_TopNav_LabelText
				if( $(document.activeElement).hasClass( "lightBoxDialog_Level3_TopNav_LabelText" ) && !captured ){
					//console.log("FWWEEEEE");		
					blockCheck = true;
					if( focusControl.focusEstablished ){
						if( event.shiftKey ){
				    	
						}else{
							//preventDefault = false;
						}
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "lightboxLvl3Header";
					//focusControl.forceFocus = "lightboxLvl3SideNav"; // this isnt really forced, it is natural tab from header to sidenav
					captured = true;
				}
				//! -- clipboardGridGroupContainer
				if( $(document.activeElement).hasClass( "clipboardGridGroupContainer" ) && !captured ){
					blockCheck = true;
					if( focusControl.focusEstablished ){
						if( event.shiftKey ){
				    	
						}else{
							
						}
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "clipboardGridGroupContainer";
					captured = true;
				}
				//! -- lightBoxDialog_Level3_Content_SideNavContainer
				if( $(document.activeElement).hasClass( "lightBoxDialog_Level3_Content_SideNavContainer" ) && !captured ){
					/*
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						preventDefault = false;
					}
					*/
					focusControl.updateFocalItemCurrent = "lightboxLvl3SideNav";
					//focusControl.forceFocus = "navContinue";
					captured = true;
				}
				//! -- sidenavItem
				if( $(document.activeElement).hasClass( "sidenavItem" ) && !captured ){
					/*
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						preventDefault = false;
					}
					*/
					focusControl.updateFocalItemCurrent = "sidenavItem";
					//focusControl.forceFocus = "navContinue";
					captured = true;
				}
				
				//! -- lightBoxDialog_Level2_TopNav_LabelText
				if( $(document.activeElement).hasClass( "lightBoxDialog_Level2_TopNav_LabelText" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "lightboxLvl2Header";
					captured = true;
				}
				//! -- CET-SubSequence-Content-Main-TextBlock-Container
				if( $(document.activeElement).hasClass( "CET-SubSequence-Content-Main-TextBlock-Container" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "subSeqMainPageText";
					captured = true;
				}
				//! -- subSequenceNavNums
				// media launcher on subseqs shared with base page mediaLauncher-image handler
				if( $(document.activeElement).hasClass( "subSequenceNavNums" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "subSequenceNavNums";
					captured = true;
				}
				//! -- subSequenceNav-NextBut
				if( $(document.activeElement).hasClass( "subSequenceNav-NextBut" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "subSequenceNav-NextBut";
					captured = true;
				}
				//! -- subSequenceNav-PrevBut
				if( $(document.activeElement).hasClass( "subSequenceNav-PrevBut" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "subSequenceNav-PrevBut";
					captured = true;
				}
				
				//! -- lightBoxDialog_Level1_TopNav_LabelText
				if( $(document.activeElement).hasClass( "lightBoxDialog_Level1_TopNav_LabelText" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "lightboxLvl1Header";
					captured = true;
				}
				
				//! -- CET-Activity-Content-Title-Text
				if( $(document.activeElement).hasClass( "CET-Activity-Content-Title-Text" ) && !captured ){	
					focusControl.updateFocalItemCurrent = "mainContentHeader";
					preventDefault = false;
					captured = true;
				}
				//! -- CET-Activity-Content-Title-PageTypeIndicator
				if( $(document.activeElement).hasClass( "CET-Activity-Content-Title-PageTypeIndicator" ) && !captured ){	
					focusControl.updateFocalItemCurrent = "pageTypeIndicator";
					preventDefault = false;
					captured = true;
				}
				//! -- CET-Activity-Content-Main-TextBlock-Container
				if( $(document.activeElement).hasClass( "CET-Activity-Content-Main-TextBlock-Container" ) && !captured ){	
					focusControl.updateFocalItemCurrent = "mainPageText";
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						
					}
					captured = true;
				}
				//! -- textHyperlink
				//if( $(document.activeElement).hasClass( "mainPageTextHyperlink" ) && !captured ){	
					//focusControl.updateFocalItemCurrent = "mainPageTextHyperlink";
				if( $(document.activeElement).hasClass( "textHyperlink" ) && !captured ){	
					blockCheck = true;
					event.stopPropagation();
					focusControl.updateFocalItemCurrent = "textHyperlink";
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						
					}
					captured = true;
				}
				
				//! -- mediaLauncher-image
				// used for media launcher on base page, subseq page
				if( $(document.activeElement).hasClass( "mediaLauncher-image" ) && !captured ){	
					//focusControl.updateFocalItemCurrent = "mainPageMedia-Single";
					focusControl.updateFocalItemCurrent = "mediaLauncher-image";
					preventDefault = false;
					captured = true;
				}
				//! -- mediaGridContainer
				if( $( document.activeElement ).hasClass( "mediaGridContainer" ) && !captured ){	
					//if( $( document.activeElement ).hasClass( "launchable" ) ){
					//if( $( document.activeElement ).hasClass( "launchable" ) ){	
						focusControl.updateFocalItemCurrent = "mediaGridContainer";
					//}
					captured = true;
				}
				//! -- mediaGridBoxOuter
				if( $(document.activeElement).hasClass( "mediaGridBoxOuter" ) && !captured ){
					accessibilityKeyboardHandlingLogging("mediaGridBox class = " + $(this).attr('class') );
					blockCheck = true;
					if( event.shiftKey ){
						//console.log("is reverse tab - kd");
				    	//preventDefault = false;
				    	focusControl.updateFocalItemCurrent = "mediaGridBox";
					}else{
						
						// resolves issue with last clipboard element in last grouping not tabbing forward to the nav (cycles back to top, not wanted)
						if( $(this).closest('.gridGroupContainer').hasClass('clipboardGridGroupContainerLast') &&
							$(this).hasClass('mediaGridItemLast') ){
							focusControl.updateFocalItemCurrent = "mediaGridBoxOverride";
						}else{
							focusControl.updateFocalItemCurrent = "mediaGridBox";
						}
						
					}
					
					captured = true;
				}
				
				//! -- SandboxOccupied
				if( $( document.activeElement ).hasClass( "SandboxOccupied" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "sandboxOccupied";
					captured = true;
				}
				//! -- mainSandboxGuts
				if( $( document.activeElement ).hasClass( "mainSandboxGuts" ) && !captured ){	
					//blockCheck = true;
					//if( event.shiftKey ){
				    	preventDefault = false;
					//}else{
						//preventDefault = false;
					//}
					focusControl.updateFocalItemCurrent = "mainSandboxGuts";
					captured = true;
				}
				
				//! -- CET-Activity-Content-Assessment
				if( $( document.activeElement ).hasClass( "CET-Activity-Content-Assessment" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "stepAssessment";
					captured = true;
				}
				//! -- choiceList_Item
				if( $( document.activeElement ).hasClass( "choiceList_Item" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "stepAssessmentChoice";
					captured = true;
				}
				//! -- choiceOptionListItem
				if( $( document.activeElement ).hasClass( "choiceOptionListItem" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "stepAssessmentChoiceSubList";
					captured = true;
				}
				
				//! -- stepAssessmentReviewFeedbackButtonContainer
				if( $( document.activeElement ).hasClass( "stepAssessmentReviewFeedbackButtonContainer" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "stepAssessmentReviewFeedbackButton";
					captured = true;
				}
				
				/*
				.feedbackIndicatorLabel
				//.CET-feedbackContent">
				.CET-feedbackDetails
				//.feedbackDetailsLabel
				//.feedbackDetailsContent
				.feedbackText
				.feedbackMediaBlock
				*/
				//! -- feedbackLabel
				if( $( document.activeElement ).hasClass( "feedbackLabel" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "feedbackLabel";
					captured = true;
				}
				//! -- CET-feedbackDetails
				if( $( document.activeElement ).hasClass( "CET-feedbackDetails" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
						//reverseCaptured = false;
						if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" ){
				    		//reverseCaptured = true;
				    	}else{
					    	preventDefault = false;
				    	}
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "feedbackDetails";
					captured = true;
				}
				//! -- feedbackText
				if( $( document.activeElement ).hasClass( "feedbackText" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
					    reverseCaptured = false;
						if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
							reverseCaptured = true;
							preventDefault = false;
						}
						if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !reverseCaptured ){
				    		reverseCaptured = true;
				    	}else{
					    	//preventDefault = false;
				    	}
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "feedbackText";
					captured = true;
				}
				//! -- feedbackMediaBlock
				if( $( document.activeElement ).hasClass( "feedbackMediaBlock" ) && !captured ){	
					blockCheck = true;
					if( event.shiftKey ){
						reverseCaptured = false;
						if( $('.feedbackText' ).text().length > 0 && !reverseCaptured ){
							reverseCaptured = true;
							preventDefault = false;
						}
						if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
							reverseCaptured = true;
						}
						if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !reverseCaptured ){
					    	reverseCaptured = true;
					    }
				    	//preventDefault = false;
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "feedbackMediaBlock";
					captured = true;
				}
				
				//! -- lightboxLvl3SectionHeader
				//if( $(document.activeElement).hasClass( "dashboardSectionHeader" ) ){
				if( $(document.activeElement).hasClass( "lightboxLvl3SectionHeader" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						preventDefault = false;
					}
					//focusControl.updateFocalItemCurrent = "dashboardSectionHeader";
					focusControl.updateFocalItemCurrent = "lightBoxLvl3SectionHeader";
					captured = true;
				}
				
				//! -- helpSubSection
				if( $(document.activeElement).hasClass( "helpSubSection" ) && !captured ){
					blockCheck = true;
					/*
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						if( $('[data-helpSubSection="Assessments"]').hasClass("focused") ){
						//if( $(this).attr('data-helpSubSection') == "Assessments" && $(this).hasClass("focused") ){
							
						}else{
							//console.log("loogy");
							//preventDefault = false;
						}
					}
					*/
					//focusControl.updateFocalItemCurrent = "dashboardSectionHeader";
					//console.log( "kd hss = " + $(this).attr( 'data-helpSubSection') );
					if( event.shiftKey ){
						switch( $(this).attr('data-helpSubSection') ){
							case "CoreInterface" :
								preventDefault = false;
							break;
							case "KeyboardShortcuts" :
								preventDefault = false;
							break;
							case "MinimumOperatingRequirements" :
								preventDefault = false;
							break;
							default :
							
							break;
						}
					}else{
						switch( $(this).attr('data-helpSubSection') ){
							case "Assessments" :
								preventDefault = false;
							break;
							case "KeyboardShortcuts" :
								preventDefault = false;
							break;
							case "MinimumOperatingRequirements" :
								preventDefault = false;
							break;
							default :
							
							break;
						}
					}
					focusControl.updateFocalItemCurrent = "helpSubSection";
					captured = true;
				}
				
				//! -- authorBlock
				if( $(document.activeElement).hasClass( "authorBlock" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						if( $(this).is(':last-child') ){
							
						}else{
							//preventDefault = false;
						}
					}
					focusControl.updateFocalItemCurrent = "authorBlock";
					captured = true;
				}
				//! -- creditSection
				if( $(document.activeElement).hasClass( "creditSection" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						if( $(this).is(':last-child') ){
							
						}else{
							//preventDefault = false;
						}
					}
					focusControl.updateFocalItemCurrent = "creditSection";
					captured = true;
				}
				
				//! -- dashboardSectionStatusLabel
				if( $(document.activeElement).hasClass( "dashboardSectionStatusLabel" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "dashboardSectionStatusLabel";
					captured = true;
				}
				//! -- dashboardSectionScoreStatusLabel
				if( $(document.activeElement).hasClass( "dashboardSectionScoreStatusLabel" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "dashboardSectionScoreStatusLabel";
					captured = true;
				}
				//! -- lockNoticeBlock_LockTextContainer
				if( $(document.activeElement).hasClass( "lockNoticeBlock" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "dashboardLockNoticeBox";
					captured = true;
				}
				//! -- lockNoticeBlock_PreReqListSlot
				if( $(document.activeElement).hasClass( "lockNoticeBlock_PreReqListSlot" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						//preventDefault = false;
					}
					focusControl.updateFocalItemCurrent = "dashboardLockNoticeBox_PreReqListSlot";
					captured = true;
				}
				//! -- dashboardSectionText
				if( $(document.activeElement).hasClass( "dashboardSectionText" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "dashboardSectionText";
					captured = true;
				}
				//! -- dashboardSectionStepMap
				if( $(document.activeElement).hasClass( "dashboardSectionStepMap" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	//preventDefault = false;
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "dashboardSectionStepMap";
					captured = true;
				}
				//! -- stepMapItem
				if( $(document.activeElement).hasClass( "stepMapItem" ) && !captured ){
					blockCheck = true;
					if( event.shiftKey ){
				    	
					}else{
						
					}
					focusControl.updateFocalItemCurrent = "stepMapItem";
					captured = true;
				}
				
				if( $(document.activeElement).hasClass( "navItem" ) && !captured ){
					//console.log("focused navItem");
					switch( $(document.activeElement).attr('id') ){
						case "navItem-continue" ://! -- navItem-continue
							blockCheck = true;
							//console.log("KD NIC");
							if( event.shiftKey ){
								var lightboxTopLevelCaptured = "";
								//if( lightBoxDialog_Level4_Engaged && lightboxTopLevelCaptured == "" ){ // video, image, pdf enlargement panel
							    	//lightboxTopLevelCaptured = 4;
							    //}
								if( lightBoxDialog_Level3_Engaged && lightboxTopLevelCaptured == "" ){ // dashboard, help, about, clipboard
									lightboxTopLevelCaptured = 3;
									if( $('body').attr( 'data-lightBoxPanel3' ) == "Help" || $('body').attr( 'data-lightBoxPanel3' ) == "DashboardHelp" ){
										switch( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "UsingStepstone" :
												
											break;
											case "KeyboardShortcuts" :
												
											break;
											case "SystemRequirements" :
												
											break;
										}
								    }else if( $('body').attr( 'data-lightBoxPanel3' ) == "About" ){									
									    if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "AboutTheAuthors" ){
									    	
									    }
									    if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "Acknowledgements" ){
									    	
									    }
								    }
								    preventDefault = false;
								}
								if( lightBoxDialog_Level2_Engaged && lightboxTopLevelCaptured == "" ){ // subsequence panel
							    	lightboxTopLevelCaptured = 2;
							    	preventDefault = false;
							    }
								if( lightBoxDialog_Level1_Engaged && lightboxTopLevelCaptured == "" ){ // step assessment feedback
									lightboxTopLevelCaptured = 1;
									preventDefault = false;
								}
								if( !lightBoxDialog_Level4_Engaged &&
							    !lightBoxDialog_Level3_Engaged &&
							    !lightBoxDialog_Level2_Engaged &&
							    !lightBoxDialog_Level1_Engaged ){
									
								}
							}else{
								preventDefault = false;
							}
							focusControl.updateFocalItemCurrent = "navContinue";
							//focusControl.forceFocus = "navMenu";
						break;
						case "navItem-back" ://! -- navItem-back
							focusControl.updateFocalItemCurrent = "navBack";
						break;
						case "navItem-menu" ://! -- navItem-menu
							blockCheck = true;
							if( event.shiftKey ){
						    	reverseCaptured = false;
								if( !$('.feedbackMediaBlock' ).is(":hidden") && !reverseCaptured ){
									//console.log("SCOOF");
									reverseCaptured = true;
									$('.feedbackMediaBlock' ).focus();
									//preventDefault = false;
								}
								if( $('.feedbackText' ).text().length > 0 && !reverseCaptured ){
									//console.log("SNOOF");
									reverseCaptured = true;
									$('.feedbackText' ).focus();
								}
								if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
									reverseCaptured = true;
									$('.CET-feedbackDetails').focus();
								}
								if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !reverseCaptured ){
									reverseCaptured = true;
									$( '#navItem-menu' ).focus();
					    		}
							}else{
								
							}
							focusControl.updateFocalItemCurrent = "navMenu";
							//focusControl.forceFocus = "lightboxLvl3Header";
						break;
					}
					captured = true;
				}
				//! -- menuNavItem
				if( $(document.activeElement).hasClass( "menuNavItem" ) && !captured ){
					//console.log("focused menuNavItem");
					/*
					switch( $(document.activeElement).attr('id') ){
						case "menuNavItem-exit" :
							//focusControl.updateFocalItemCurrent = "subNav-MenuExit";
							//focusControl.forceFocus = "navMenu";
						//break;
						case "menuNavItem-help" :
							//focusControl.updateFocalItemCurrent = "subNav-MenuHelp";
							//focusControl.forceFocus = "navMenu";
							
							// should be same tab behavior as navmenu, but should also close the menu when tabbing away
							
							//focusControl.updateFocalItemCurrent = "navMenu";
							
						break;
					}
					*/
					//if(  ){
						
					//}
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
				    	//console.log("woo");
					}else{
						//console.log("boo");
					}
					focusControl.updateFocalItemCurrent = "navMenu";
					captured = true;
				}
				
				//! -- helpSectionContentRow
				if( $(document.activeElement).hasClass( "helpSectionContentRow" ) && !captured ){
					//console.log("focused menuNavItem");
					/*
					switch( $(document.activeElement).attr('id') ){
						case "menuNavItem-exit" :
							//focusControl.updateFocalItemCurrent = "subNav-MenuExit";
							//focusControl.forceFocus = "navMenu";
						//break;
						case "menuNavItem-help" :
							//focusControl.updateFocalItemCurrent = "subNav-MenuHelp";
							//focusControl.forceFocus = "navMenu";
							
							// should be same tab behavior as navmenu, but should also close the menu when tabbing away
							
							//focusControl.updateFocalItemCurrent = "navMenu";
							
						break;
					}
					*/
					//if(  ){
						
					//}
					blockCheck = true;
					//preventDefault = false;
					if( event.shiftKey ){
				    	if( $(this).closest('.helpSubSection').attr('data-helpSubSection') == "CoreInterface" ){
					    	//preventDefault = false;
				    	}else{
					    	//$(this).prev().focus();
				    	}
				    	focusControl.updateFocalItemCurrent = "helpSubSectionContentRow";
					}else{
						if( $(this).closest('.helpSubSection').attr( 'data-helpSubSection') == "Assessments" ){
							//if( $(this).hasClass("focused") ){
								//$( '#navItem-continue' ).focus();
							//}
							// resolves issue with last help sub item in last grouping not tabbing forward to the nav (cycles back to top, not wanted)
							if( $(this).hasClass('helpGroupItemLast') ){
								focusControl.updateFocalItemCurrent = "helpSubSectionContentRowOverride";
							}else{
								focusControl.updateFocalItemCurrent = "helpSubSectionContentRow";
							}
						}else{
							//$(this).next().focus();
							focusControl.updateFocalItemCurrent = "helpSubSectionContentRow";
						}
					}
					/*
					if( event.shiftKey ){
				    	preventDefault = false;
				    	//console.log("woo");
					}else{
						//console.log("boo");
					}
					*/
					//
					captured = true;
				}
				
				/*
				if( $(document.activeElement).hasClass( "CET-Activity-Content-Main-TextBlock-Container" ) ){
					blockCheck = true;
					if( event.shiftKey ){
				    	preventDefault = false;
					}else{
						if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") ){
							preventDefault = false;
						}
						if( currentBasePage_Assessment_Present ){
							preventDefault = false;
						}
					}
					focusControl.updateFocalItemCurrent = "mainContentText";
				}
				*/
				
				//console.log( "focused class = " + $(document.activeElement).attr('class') );
				
				//*/
				/*
				switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
					case "Dashboard" :
						switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
							case "CourseOverview" :
								focusControl.firstLightboxElement = $( '.courseOverviewContent .dashboardSectionHeader' );
								focusControl.lastLightboxElement = $( '.courseOverviewContent .dashboardSectionText' );
							break;
							case "CourseModule" :
								if( $( 'body' ).attr( "data-activePathType" ) =="Procedural" ){
									focusControl.firstLightboxElement = $( 'activeDashboardContentArea:nth-child(' + (dashboardSideNavItemActive - 1) + ' ) .courseActivityContent .dashboardSectionHeader' );
									focusControl.lastLightboxElement = $( 'activeDashboardContentArea:nth-child(' + (dashboardSideNavItemActive - 1) + ' ) .courseActivityContent .dashboardSectionStepMap' );
								}else{
									focusControl.firstLightboxElement = $( 'activeDashboardContentArea:nth-child(' + (dashboardSideNavItemActive - 1) + ' ) .courseActivityContent .dashboardSectionHeader' );
									focusControl.lastLightboxElement = $( 'activeDashboardContentArea:nth-child(' + (dashboardSideNavItemActive - 1) + ' ) .courseActivityContent .dashboardSectionText' );
								}
							break;
						}
					break;
					case "Clipboard" :
						focusControl.firstLightboxElement = $( '.gridGroupContainer' ).first().find( '.gridGroupLabel' );
						focusControl.lastLightboxElement = $( '.gridGroupContainer' ).last();
					break;
					case "About" :
						switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
							case "AboutTheAuthors" :
								focusControl.firstLightboxElement = $( '.authorInfoSectionHeader' );
								focusControl.lastLightboxElement = $( '.authorBlock' ).last();
							break;
							case "Acknowledgements" :
								focusControl.firstLightboxElement = $( '.creditSectionHeader' );
								focusControl.lastLightboxElement = $( '.creditSection' ).last();
							break;
						}
					break;
					case "Help" :
					case "DashboardHelp" :
						switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
							case "SystemRequirements" :
								focusControl.firstLightboxElement = $( '[data-sectionHeader="SysReqs"]' );
								focusControl.lastLightboxElement = $( '.helpContentStack > li' ).first();
							break;
							case "UsingStepstone" :
								//focusControl.firstLightboxElement = $( '[data-sectionHeader="SysReqs"]' );
								//focusControl.lastLightboxElement = $( '.helpContentStack > li' ).first();
							break;
						}
					break;
				}
				/*/
				//console.log( "keydown focusControl.updateFocalItemCurrent = " + focusControl.updateFocalItemCurrent );
				
				//console.log( "focalitem key down = " + code + " --- debounced" );
				//console.log( "focalitem code down = " + code + " --- debounced" );
				//console.log( "index 1 =  " + $( this ).index() );
				//console.log( "id KU =  " +  $( this ).attr( 'id' ) );
				//console.log( "class KU =  " +  $( this ).attr( 'id' ) );
				//console.log( "---------------------------" );
				/*
				if( focusControl.focusGroupingOverrider != undefined && focusControl.focusGroupingOverrider != "" ){
					
					//event.preventDefault();
					//return false;
					
					if( focusControl.firstItemFocused && event.shiftKey ){ // stop default browser reverse tabbing behavior
						event.preventDefault();
						//console.log("block 1");
						//focusControl.firstItemFocused = false;
						//focusControl.lastItemFocused = true;
						return false;
					}
					if( focusControl.lastItemFocused && !event.shiftKey ){ // stop default browser reverse tabbing behavior
						event.preventDefault();
						//console.log("block 2");
						//focusControl.firstItemFocused = true;
						//focusControl.lastItemFocused = false;
						return false;
					}
				}
				*/
				//focusControl.firstItemFocused = false;
				//focusControl.lastItemFocused = false;
				
				//captured = true;
			}
		break; // end tab handling	
	} // end code switch
	
	if( preventDefault && blockCheck ){
		event.preventDefault();
		accessibilityKeyboardHandlingLogging( "should prevent default kd!" );
	}
	
	if( focusControl.inputFieldFocused ){
		captured = false;
	}
	
	if( captured ){
		//focusControl.debounceTabLocked = true;
		focusControl.heldKeys[codeToString] = true;
	}
	
	accessibilityKeyboardHandlingLogging( "id KD end func =  " +  $( this ).attr( 'id' ) );
	accessibilityKeyboardHandlingLogging( "class KD end func =  " +  $( this ).attr( 'class' ) );
	//console.log( "end keydown focused id = " + $(document.activeElement).attr('id') );
	//console.log( "end keydown focused class = " + $(document.activeElement).attr('class') );
	
	//console.log( "-------------" );
	//console.log( "-------------" );
	//*/
	accessibilityKeyboardHandlingLogging( "===[ end kd handler ]======================================" );
});
//! ------------------------------------------------------------------------------
/* ! --[ K - Accessibility - focal item KEYUP ]--- */
$(document).on("keyup", ".focalItem", function(event){
	if( focusControl.inputFieldFocused ){
		//event.preventDefault();
		return false;
	}
	
	/*if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
		console.log("NORMAL TAB RELEASE SHOULD BE OVERRIDDEN");
		event.preventDefault();
		return false;
	}*/
	
	var focalOverride = "";
	accessibilityKeyboardHandlingLogging( "===[ start ku handler ]======================================" );
	if( event.shiftKey ){
    	//console.log("**********");
    	//console.log("SHIFT HELD ON FOCALITEM KEYUP");
    	//console.log("**********");
	}
	//console.log( "focus count = " + $(document.activeElement).length );
	//console.log( "start keyup focused class = " + $(document.activeElement).attr('class') );
	//console.log( "---" );
	//console.log( "focusControl.forceFocus = " + focusControl.forceFocus );
	var code = 					( event.keyCode ? event.keyCode : event.which );
	var codeToString = String(code);
	accessibilityKeyboardHandlingLogging("focal item keyup  -- code = " + code );
	//console.log( "keyup code = " + code );
	accessibilityKeyboardHandlingLogging( "keyup focusControl.updateFocalItemCurrent = " + focusControl.updateFocalItemCurrent );
	//console.log( "---" );
	var preventDefault = 		true;
	var blockCheck = 			false;
	var actionUnblocked = 	false;
	var tabbing = 				false;
	var forcedFocus = false;
	var lightboxTopLevelCaptured = "";
	var reverseCaptured = false;
	//if( focusControl.forceFocus != undefined && focusControl.forceFocus != "" ){
	//console.log("focused class ku = " + $( document.activeElement ).attr("class") );
	var purged = false;
	
	accessibilityKeyboardHandlingLogging("id KU = " + $(this).attr('id') );
	accessibilityKeyboardHandlingLogging("class KU = " + $(this).attr('class') );
	
	if( focusControl.updateFocalItemCurrent != undefined && focusControl.updateFocalItemCurrent != "" ){
		switch( code ){
			//! -[ KU - escape ]-
			case 27 : // escape
			
				var escapeCaptured = false;
			
				switch( focusControl.updateFocalItemCurrent ){
					case "navMenu": //! -- navMenu
					//case "dashboardNav":
					//case "dashboardStepList":
					case "videoCaptionSelect" : //! -- videoCaptionSelect
						//blockCheck = true;
						//console.log("roof");
						if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
							//console.log("boof");
							switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
								case "MenuNav" :
									//console.log("boofy");
									blockCheck = true;
									if( $( '#navItem-menu').hasClass("open") ){
										$( '#navItem-menu').trigger( "click" );
									}
									$( '#navItem-menu').focus();
									escapeCaptured = true;
									//actionUnblocked = true;
								break;
								case "VideoCaptionSelect" :
									blockCheck = true;
									//$( this ).trigger( "click" );
									if( $('#videoAssistiveControlsPopList').hasClass("popListOpen") ){
										//console.log("TRIGGA POPLIST SELECTED");
										$('#videoAssistiveControlsPopList .popListItem.selected').trigger( "click" );
										$('[data-videoAssistiveControl="CaptionSelectLaunch"]').focus();
										escapeCaptured = true;
									}
								break;
								//case "DashboardNav" :
									// should only need this in narrow droplist config
								//break;
								//case "DashboardStepList" :
									// should not need this
								//break;
							}
						}
						/*
						if( $( document.activeElement ).hasClass( "navItem" ) ){
							switch( $(document.activeElement).attr('id') ){
								case "navItem-continue" :
									$( this ).trigger( "click" );
								break;
								case "navItem-back" :
														
								break;
								case "navItem-menu" :
									
								break;
							}
						}
						*/
					break;
					case "lightBoxLevel4": //! -- lightBoxLevel4
						if( !escapeCaptured ){
							blockCheck = true;
							$( '.lightBoxDialog_Level4_TopNav_Close').trigger( "click" );
							//$( lightBoxDialog_Level4_LaunchedFromElement ).focus();
							//lightBoxDialog_Level4_LaunchedFromElement.focus();
							//lightBoxDialog_Level4_LaunchedFromElement = null;
							escapeCaptured = true;
						}
					break;
					case "lightBoxLevel3": //! -- lightBoxLevel3
						if( !escapeCaptured ){
							blockCheck = true;
							//console.log("foom");
							$( '.lightBoxDialog_Level3_TopNav_Close').trigger( "click" );
							$( '#navItem-menu').focus();
							escapeCaptured = true;
						}
					break;
					case "lightBoxLevel2": //! -- lightBoxLevel2
						if( !escapeCaptured ){
							blockCheck = true;
							//console.log("foom");
							$( '#navItem-continue').trigger( "click" );
							//$( '#navItem-menu').focus();
							escapeCaptured = true;
						}
					break;
					case "lightBoxLevel1": //! -- lightBoxLevel1
						if( !escapeCaptured ){
							blockCheck = true;
							//console.log("foom");
							
							if( $('.lightBoxDialog_Level1_TopNav_CloseContainer').is(":hidden")  ){
								//$( '#navItem-continue').trigger( "click" );
							}else{
								$('.lightBoxDialog_Level1_TopNav_Close').trigger( "click" );
							}
							
							//$( '#navItem-continue').trigger( "click" );
							//$( '#navItem-menu').focus();
							escapeCaptured = true;
						}
					break;
					case "stepAssessmentWriteInFieldList" : //! -- stepAssessmentWriteInFieldList
						//console.log("EEEEF");
						if( !escapeCaptured ){
							blockCheck = true;
							
							escapeCaptured = true;
						}
						/*
						$( this ).find( '.stepAssessmentInputFieldListItem' ).focus(); 
						//$( this ).find( '.stepAssessmentInputFieldListItem' ).addClass( "focused" ); 
						
						//$( this ).find( '[data-choiceInputFieldStyle="FieldList"]' ).addClass( "focused" ); 
						
						$('.focalOverride').removeClass( "focalOverride" );
						$( this ).addClass( "activeInput" ).addClass( "skinPrimaryColorBG" ).addClass( "focalOverride" );
						//$( this ).addClass( "activeInput" ).addClass( "skinPrimaryColorBG" );
						//$( this ).find( '[data-choiceInputFieldStyle="FieldList"]' ).addClass( "focalOverride" );  
						focalOverride = "StepAssessmentWriteInFieldListInput";
						
						//$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
						*/
					break;
				}
				captured = true;
				actionUnblocked = true;
			break; // end escape handling
			//! --------------------
			//! -[ KU - return/space ]-
			case 13 : // return
			case 32 : // space
				//event.preventDefault();
				//focusControl.updateFocalItemCurrent = "navBack";
				switch( focusControl.updateFocalItemCurrent ){
					case "lightboxLvl3SideNav": //! -- lightboxLvl3SideNav
						$( '.sidenavItem-Selected' ).focus();
						/*
						switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
							case "Dashboard" :
								switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
									case "CourseOverview" :
										
									break;
									case "CourseModule" :
										
									break;
								}
								$( '.dashboardSectionHeader' ).focus();
							break;
							//case "Clipboard" :
								//$( '.helpSectionHeader' ).focus();
							//break;
							case "About" :
								switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
									case "AboutTheAuthors" :
										
									break;
									case "Acknowledgements" :
										
									break;
								}
								$( '.authorInfoSectionHeader' ).focus();
							break;
							case "Help" :
							case "DashboardHelp" :
								switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
									case "UsingStepstone" :
										
									break;
									case "SystemRequirements" :
										
									break;
								}
								$( '.helpSectionHeader' ).focus();
							break;
						}
						*/
					break;
					//case "dashboardNav":
					case "navMenu": //! -- navMenu
					case "sideNav": //! -- sideNav
					case "dashboardStepList": //! -- dashboardStepList
					case "pathDashboardUnlockList" : //! -- pathDashboardUnlockList
						if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
							//console.log("boof");
							switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
								case "MenuNav" :
									$( this ).trigger( "click" );
								break;
								//case "DashboardNav" :
								case "SideNav" :
									$( this ).trigger( "click" );
									//$( '.dashboardSectionHeader' ).focus();
									
									switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
										case "Dashboard" :
											switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
												case "CourseOverview" :
													
												break;
												case "CourseModule" :
													
												break;
											}
											$('.activeDashboardContentArea .lightboxLvl3SectionHeader' ).focus();
										break;
										//case "Clipboard" :
											//$( '.helpSectionHeader' ).focus();
										//break;
										case "About" :
											switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
												case "AboutTheAuthors" :
													$('[data-dataSection="AboutAuthors"] .aboutSectionHeader' ).focus();
												break;
												case "Acknowledgements" :
													$('[data-dataSection="Acknowledgements"] .aboutSectionHeader' ).focus();
												break;
											}
										break;
										case "Help" :
										case "DashboardHelp" :
											switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
												case "UsingStepstone" :
													$('[data-dataSection="UsingPlayer"] .helpSectionHeader' ).focus();
												break;
												case "KeyboardShortcuts" :
													$('[data-dataSection="KeyboardShortcuts"] .helpSectionHeader' ).focus();
												break;
												case "SystemRequirements" :
													$('[data-dataSection="SysReqs"] .helpSectionHeader' ).focus();
												break;
											}
											//$( '.helpSectionHeader' ).focus();
										break;
									}
									
								break;
								case "DashboardStepList" :
									$( this ).trigger( "click" );
								break;
								case "PathDashboardUnlockList" :
									$( this ).trigger( "click" );
									//console.log("GAAAAAAAH");
									//$('.activeDashboardContentArea .firstPathDashboardLockItem' ).focus();
								break;
								
							}
						}
					// UNBROKEN CASE -- currently have navMenu using both ifs
					case "navContinue": //! -- navContinue
					case "navBack": //! -- navBack
						if( $( document.activeElement ).hasClass( "navItem" ) ){
							//event.preventDefault();
							//$( '.focused' ).removeClass( 'focused' );
							//console.log("focused class c1 = " + $( document.activeElement ).attr("class") ); 
							//$( '#menuNavItem-help' ).focus();
							//$( '.menuNavItemLast' ).focus();
							//$( '#navItem-continue' ).focus();
							//console.log("focused class c2 = " + $( document.activeElement ).attr("class") ); 
							//$(document.activeElement).addClass( 'focused' );
							//actionUnblocked = true;
						//}
						//if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
							switch( $(document.activeElement).attr('id') ){
								case "navItem-continue" :
									//$( this ).trigger( "click" );
									$( "#navItem-continue" ).trigger( "click" );
								break;
								case "navItem-back" :
									//$( this ).trigger( "click" );
									$( "#navItem-back" ).trigger( "click" );
								break;
								case "navItem-menu" :
									focusControl.launchNewContext = 		"NavMenu";
									$( "#navItem-menu .navItemInnerContainer" ).trigger( "click" );
									$( '.menuNavItemLast' ).focus();
								break;
							}
						}
					break;
					
					case "pageTypeIndicator": //! -- pageTypeIndicator
						$( '#CET-Activity-Content-Assessment' ).focus();
					break;
					
					case "textHyperlink" : //! -- textHyperlink
						var grabHyperLinkLocation = $( this ).attr("href");
						accessibilityKeyboardHandlingLogging("grabHyperLinkLocation = " + grabHyperLinkLocation);
						var hyperLinkReaction = window.open( grabHyperLinkLocation , '_blank' );
						if( hyperLinkReaction ){
						    //Browser has allowed it to be opened
						    //win.focus();
						} else {
						    //Browser has blocked it
						    alert('Your browser has blocked the url "' + grabHyperLinkLocation + '" from opening in a new window/tab.');
						}
						//$( this ).trigger( "click" );
					break;
					
					case "mainPageMedia-Single" : //! -- mainPageMedia-Single
						//console.log("MPM-S");
						$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
					break;
					case "mainSubSeqPageMedia-Single" : //! -- mainPageMedia-Single
						//console.log("MPM-S");
						$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
					break;
					case "mediaGridContainer" : //! -- mediaGridContainer
						//console.log("MPM-S");
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaGridBoxOuter' ).first().focus();
						var thisMediaGridType = $(this).closest('.mediaGridContainer').attr('data-UDArrowGroup');
						switch( thisMediaGridType ){
					    	case "MediaGrid-Main" :
					    		$( '#CET-Activity-Content-Main-MediaBlock .mediaGridBoxOuter' ).first().focus();
					    	break;
					    	case "MediaGrid-SubSeqMain" :
					    		$( '.CET-SubSequence-Content-Main-MediaBlock .mediaGridBoxOuter' ).first().focus();
					    		//$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
					    	break;
					    	case "MediaGrid-Assessment" :
					    		//$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
					    	break;
					    	case "MediaGrid-Clipboard" :
					    		// previous group, or self group if single group
					    	break;
				    	}
						
					break;
					case "mediaGridBox-Main" : //! -- mediaGridBox-Main
						//console.log("MPM-S");
						$( this ).find('.mediaGridBoxInner.launchable' ).trigger( "click" );
					break;
					case "mediaGridBox-SubSeqMain" : //! -- mediaGridBox-Main
						//console.log("MPM-S");
						$( this ).find('.mediaGridBoxInner.launchable' ).trigger( "click" );
					break;
					case "mediaGridBox-Clipboard" : //! -- mediaGridBox-Clipboard
						//console.log("MPM-S");
						$( this ).find('.mediaGridBoxInner.launchable' ).trigger( "click" );
					break;
					
					case "clipboardGridGroupContainer" : //! -- clipboardGridGroupContainer
						$(this).find( '.mediaGridBoxOuter' ).first().focus();
					break;
					/*
					case "clipboardGridBox" : //! -- mediaGridBox-Main
						$( this ).find('.mediaGridBoxInner.launchable' ).trigger( "click" );
					break;
					*/
					
					case "sandboxOccupied": //! -- sandboxOccupied
						updateFocus({ 'action' : "Purge" }); // remove focus from main player, retarget to sandbox innards
						purged = true;
						//$( '.focused' ).blur();
						//$( '#mainSandboxGuts' ).focus();
						//var iframe = $( '#mainSandboxGuts' );
						setTimeout( setFocusSandbox , 100 );
						//$( '#mainSandboxGuts' )[0].contentWindow.focus();
						/*
						function setFocusThickboxIframe() {
						    var iframe = $("#TB_iframeContent")[0];
						    iframe.contentWindow.focus();
						}
						
						$(document).ready(function(){
						   $("#id_cmd_open").click(function(){
						         //run thickbox code here to open lightbox,
						         //like tb_show("google this!", "http://www.google.com");
						      setTimeout(setFocusThickboxIframe, 100);
						      return false;
						   });
						});
						*/
						
						var messageData = 'focusInit';
						$( '#mainSandboxGuts' )[0].contentWindow.postMessage( messageData , '*' ); 
					break;
					
					case "stepAssessment" : //! -- stepAssessment
						//console.log("MPM-S");
						//$( '.choiceList_Item' ).first().focus();
						//if( $('#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer').is(":hidden") ){
							switch( $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant') ){
								case "Basic":
									$( '.choiceList_Item' ).first().focus();
								break;
								case "Media":
									$('#CET-Activity-Content-Assessment .mediaGridContainer').find( '.mediaGridBoxOuter' ).first().focus();
								break;	
							}
						//}else{
							//$('#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer').focus();
						//}
						
					break;
					case "stepAssessmentReviewFeedback" : //! -- stepAssessmentReviewFeedback
						//console.log("MPM-S");
						//$( '.choiceList_Item' ).first().focus();
						/*
						switch( $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant') ){
							case "Basic":
								$( '.choiceList_Item' ).first().focus();
							break;
							case "Media":
								$('#CET-Activity-Content-Assessment .mediaGridContainer').find( '.mediaGridBoxOuter' ).first().focus();
							break;	
						}*/
						$('.stepAssessmentReviewFeedbackButtonContainer').trigger( "click" );
					break;
					
					
					case "usingPlayerSubSection" : //! -- usingPlayerSubSection
						//console.log("usingPlayerSubSection");
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
						$( this ).find('.helpSectionContentRow').first().focus();
					break;
					case "usingPlayerTopicLaunchable" : //! -- usingPlayerTopicLaunchable
						//console.log("usingPlayerTopicLaunchable 2");
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
						$( this ).find('.helpSectionContentThumbnail.helpMediaLaunchable').trigger("click");
					break;
					//case "usingPlayerTopicLaunchable" :
						//console.log("usingPlayerTopicLaunchable 2");
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
						//$( this ).find('.helpSectionContentThumbnail.helpMediaLaunchable').trigger("click");
					//break;
					
					case "dashboardPathUnlockBlock" : //! -- dashboardPathUnlockBlock
						//console.log("stepmapitemactive len = " + $( this ).find('.stepMapItemActive').length );
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
						//$( this ).find('.helpSectionContentThumbnail.helpMediaLaunchable').trigger("click");
						//if( $( this ).find('.stepMapItemActive').length > 0 ){
							//console.log("eep");
							//$('.activeDashboardContentArea .stepMapItemActive').focus();
						//}else{
							//console.log("meep");
							//$('.activeDashboardContentArea .stepMapItem').first().focus();
						//}
						$('.activeDashboardContentArea .firstPathDashboardLockItem' ).focus();
					break;
					
					case "dashboardStepMap" : //! -- dashboardStepMap
						//console.log("stepmapitemactive len = " + $( this ).find('.stepMapItemActive').length );
						//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image.launchable' ).trigger( "click" );
						//$( this ).find('.helpSectionContentThumbnail.helpMediaLaunchable').trigger("click");
						if( $( this ).find('.stepMapItemActive').length > 0 ){
							//console.log("eep");
							$('.activeDashboardContentArea .stepMapItemActive').focus();
						}else{
							//console.log("meep");
							$('.activeDashboardContentArea .stepMapItem').first().focus();
						}
					break;
					
					case "videoAssistiveControlLauncher" : //! -- videoAssistiveControlLauncher
						$( this ).trigger( "click" );
						$(".videoAssistiveControlFirst").focus();
					break;
					case "videoAssistiveControl" : //! -- videoAssistiveControl
						//console.log("videoAssistiveControl clicka KU");
						$( this ).trigger( "click" );
						if( $( this ).attr("data-videoAssistiveControl") == "CaptionSelectLaunch" ){
							$('#videoAssistiveControlsPopList .popListItem.selected').focus();
						}
					break;
					case "videoCaptionSelect" : //! -- videoCaptionSelect
						$( this ).trigger( "click" );
						$('[data-videoAssistiveControl="CaptionSelectLaunch"]').focus();
					break;
					
					case "documentDownloader" : //! -- documentDownloader
						accessibilityKeyboardHandlingLogging( "DOCUMENTDOWNLOADER KU" );
						//$( this ).find( '.downloadPDF' )[0].trigger( "click" );
						
						$( this ).find( '.downloadPDF' )[0].click();
						
						//$('a[href$=".pdf"]').attr('download', '').attr('target', '_blank'); 
						
						
						//$( this ).find( '.downloadPDF' ).hide();
						//$( '.downloadPDF' ).trigger( "click" );
					break;
					
					case "stepAssessmentChoices" : //! -- stepAssessmentChoices
						//$( this ).trigger( "click" );
						//if( $( this ).find( '.choiceOptionSelected' ).length > 0 ){
							//console.log("## MEEP ##");
							//$( this ).find( '.choiceOptionSelected' ).focus();
							//focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-Selected";
							focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-SelectionMade";
						//}else{
							//console.log("## ZEEP ##");
							//console.log( "OPTION CNT = " + $( this ).find( '.choiceOption' ).length );
							//$( this ).find( '.choiceOptionFirst' ).focus();
							//focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-First";
						//}
						$( this ).trigger( "click" );
						//$(".videoAssistiveControlFirst").focus();
					break;
					case "stepAssessmentChoices-Media" : //! -- stepAssessmentChoices-Media
						//$( this ).trigger( "click" );
						//if( $( this ).find( '.choiceOptionSelected' ).length > 0 ){
							//console.log("## MEEP ##");
							//$( this ).find( '.choiceOptionSelected' ).focus();
							//focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-Selected";
							//focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-SelectionMade";
						//}else{
							//console.log("## ZEEP ##");
							//console.log( "OPTION CNT = " + $( this ).find( '.choiceOption' ).length );
							//$( this ).find( '.choiceOptionFirst' ).focus();
							//focusControl.updateFocusAfterAction = "StepAssessmentChoiceOption-First";
						//}
						//$( this ).trigger( "click" );
						$( this ).find('.mediaGridCaptionBox').trigger( "click" );
						//$(".videoAssistiveControlFirst").focus();
					break;
					case "stepAssessmentRankingSubChoices" : //! -- stepAssessmentRankingSubChoices
						$( this ).trigger( "click" );
						$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
					break;
					case "stepAssessmentMatchingSubChoices" : //! -- stepAssessmentMatchingSubChoices
						$( this ).trigger( "click" );
						$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
					break;
					case "stepAssessmentWriteInFieldList" : //! -- stepAssessmentWriteInFieldList
						$( this ).find( '.stepAssessmentInputFieldListItem' ).focus(); 
						//$( this ).find( '.stepAssessmentInputFieldListItem' ).addClass( "focused" ); 
						
						//$( this ).find( '[data-choiceInputFieldStyle="FieldList"]' ).addClass( "focused" ); 
						
						$('.focalOverride').removeClass( "focalOverride" );
						$( this ).addClass( "activeInput" ).addClass( "skinPrimaryColorBG" ).addClass( "focalOverride" );
						//$( this ).addClass( "activeInput" ).addClass( "skinPrimaryColorBG" );
						//$( this ).find( '[data-choiceInputFieldStyle="FieldList"]' ).addClass( "focalOverride" );  
						focalOverride = "StepAssessmentWriteInFieldListInput";
						
						//$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
					break;
					
					case "subSequenceNav-PrevBut" : //! -- subSequenceNav-PrevBut
						$( this ).trigger( "click" );
						//$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
					break;
					case "subSequenceNav-NextBut" : //! -- subSequenceNav-NextBut
						$( this ).trigger( "click" );
						//$( this ).closest( '.choiceList_Item' ).focus();
						//$(".videoAssistiveControlFirst").focus();
					break;
					
				}
				actionUnblocked = true;
				captured = true;
			break; // end return/space handling
			//! --------------------
			//! -[ KU - arrow up/down ]-
			case 38 : // arrow - up
			case 40 : // arrow - down
				switch( focusControl.updateFocalItemCurrent ){
					
					case "navMenu":
					//case "dashboardNav":
					case "sideNav":
					case "pathDashboardUnlockList":
					case "dashboardStepList":
					case "helpGroup" :
					case "videoAssistiveControls" :
					case "videoCaptionSelect" :
					case "mediaGrid-Main" : 
					case "mediaGrid-SubSeqMain" : 
					case "mediaGrid-Clipboard" : 
					case "stepAssessmentChoices" : 
					case "stepAssessmentChoices-Media" : 
					case "stepAssessmentRankingSubChoices" : 
					case "stepAssessmentMatchingSubChoices" : 
					case "stepAssessmentWriteInFieldList" : 
						/*if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
							if( $( '.focalOverride' ).hasClass( "arrowNavUD" ) && !captured ){	
								switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
									case "StepAssessmentWriteInFieldList" : //! -- StepAssessmentWriteInFieldList
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('choiceGroupFirst') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('choiceGroupLast') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
								}
								captured = true;
							}
							$( '.focalOverride' ).removeClass( "focalOverride" );
						}else{*/
							if( $( document.activeElement ).hasClass( "arrowNavUD" ) ){	
								//console.log("boof");
								switch( $( document.activeElement ).closest( '.UDArrowGroup' ).attr( 'data-UDArrowGroup' ) ){
									case "MenuNav" : //! -- MenuNav
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('menuNavItemFirst') ){
												    $(".menuNavItemLast").focus();
												}else{
													//$(this).prev().focus();
													$(this).prevAll().not( ":hidden" ).first().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('menuNavItemLast') ){
												    $(".menuNavItemFirst").focus();
												}else{
													//$(this).next().focus();
													$(this).nextAll().not( ":hidden" ).first().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									//case "DashboardNav" :
									case "SideNav" : //! -- SideNav
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												//if( $(this).hasClass('dashboardNavItemFirst') ){
												if( $(this).hasClass('sideNavItemFirst') ){
												    //$(".dashboardNavItemLast").focus();
												    $(".sideNavItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												//if( $(this).hasClass('dashboardNavItemLast') ){
												if( $(this).hasClass('sideNavItemLast') ){
												    //$(".dashboardNavItemFirst").focus();
												    $(".sideNavItemFirst").focus();
												    //console.log("WRAP");
												}else{
													$(this).next().focus();
													//preventDefault = false;
													//console.log("NEXT");
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "PathDashboardUnlockList" : //! -- PathDashboardUnlockList
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('firstPathDashboardLockItem') ){
												    $(".activeDashboardContentArea .lastPathDashboardLockItem").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('lastPathDashboardLockItem') ){
												    $(".activeDashboardContentArea .firstPathDashboardLockItem").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "DashboardStepList" : //! -- DashboardStepList
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('dashboardStepListItemFirst') ){
												    $(".activeDashboardContentArea .dashboardStepListItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('dashboardStepListItemLast') ){
												    $(".activeDashboardContentArea .dashboardStepListItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "Help-CoreUI" : //! -- Help-CoreUI
									case "Help-Activities" : //! -- Help-Activities
									case "Help-Media" : //! -- Help-Media
									case "Help-Assessments" : //! -- Help-Assessments
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('helpGroupItemFirst') ){
												    $(this).closest('.helpSubSection').find(".helpGroupItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('helpGroupItemLast') ){
												    $(this).closest('.helpSubSection').find(".helpGroupItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "VideoAssistiveControls" : //! -- VideoAssistiveControls
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('videoAssistiveControlFirst') ){
												    $(this).closest('.videoAssistiveControlStrip').find(".videoAssistiveControlLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('videoAssistiveControlLast') ){
												    $(this).closest('.videoAssistiveControlStrip').find(".videoAssistiveControlFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "VideoCaptionSelect" : //! -- VideoCaptionSelect
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('videoCaptionSelectFirst') ){
												    $(this).closest('.popList').find(".videoCaptionSelectLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('videoCaptionSelectLast') ){
												    $(this).closest('.popList').find(".videoCaptionSelectFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "MediaGrid-Main" : //! -- MediaGrid-Main
										//console.log("woopy");
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemFirst') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemLast') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "MediaGrid-SubSeqMain" : //! -- MediaGrid-SubSeqMain
										//console.log("woopy");
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemFirst') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemLast') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "MediaGrid-Clipboard" : //! -- MediaGrid-Clipboard
										//console.log("woopy");
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemFirst') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemLast') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "StepAssessmentChoices" : //! -- StepAssessmentChoices
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('choiceGroupFirst') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('choiceGroupLast') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "MediaGrid-Assessment" : //! -- MediaGrid-Assessment
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemFirst') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('mediaGridItemLast') ){
												    $(this).closest('.mediaGridContainer').find(".mediaGridItemFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "StepAssessmentRankingSubChoices" : //! -- StepAssessmentRankingSubChoices
									case "StepAssessmentMatchingSubChoices" : //! -- StepAssessmentMatchingSubChoices
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('choiceOptionFirst') ){
												    $(this).closest('.choiceOptionList').find(".choiceOptionLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('choiceOptionLast') ){
												    $(this).closest('.choiceOptionList').find(".choiceOptionFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												//actionUnblocked = true;
											break;
										}
									break;
									case "StepAssessmentWriteInFieldList" : //! -- StepAssessmentWriteInFieldList
										switch( code ){
											case 38 : // arrow - up
												blockCheck = true;
												if( $(this).hasClass('choiceGroupFirst') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupLast").focus();
												}else{
													$(this).prev().focus();
													//preventDefault = false;
												}
												focalOverride = "";
												//actionUnblocked = true;
											break;
											case 40 : // arrow - down
												blockCheck = true;
												if( $(this).hasClass('choiceGroupLast') ){
												    $(this).closest('.CET-Activity-Content-Assessment-PageChoiceSet').find(".choiceGroupFirst").focus();
												}else{
													$(this).next().focus();
													//preventDefault = false;
												}
												focalOverride = "";
												$( '.focalOverride' ).removeClass( "focalOverride" );
												//actionUnblocked = true;
											break;
										}
									break;
								}
							}
						//}
					break;
				}
				actionUnblocked = true;
				captured = true;
			break; // end up/down arrow handling
			//! --------------------
			//! -[ KU - tab ]-
			case 9 : // tab
				//switch( focusControl.forceFocus ){
				//tabbing = true;
				/*
				if( $(document.activeElement).length == 0 ){
					if( lightBoxDialog_Level3_Engaged ){	
						$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						//actionUnblocked = true;
					}
				}
				*/
				//console.log( "tab ku active element class = " + $( document.activeElement ).attr("class") );
				//console.log( "tab ku this class = " + $( this ).attr("class") );
				
				//if( focalOverride != "" ){
				/*
				if( $( '.focalOverride' ) != undefined && $( '.focalOverride' ).length > 0 ){
					console.log("NORMAL TAB RELEASE SHOULD BE OVERRIDDEN");
					event.preventDefault();
					return false;
				}
				*/
				console.log("focusControl.focusEstablished = " + focusControl.focusEstablished);
				$('body').addClass("focusVisibleEnabled"); // initial tab shows the highlight.
				
				var noLightBoxEngaged = true;
				if( !focusControl.focusEstablished ){
					//! [ No Existing Focus ]
					accessibilityKeyboardHandlingLogging("NO FOCUS ku");
					blockCheck = true;
					
					var lightboxTopLevelCaptured = "";
					
					if( lightBoxDialog_Level4_Engaged && lightboxTopLevelCaptured == "" ){
						$( '.lightBoxDialog_Level4_TopNav_LabelText' ).focus();
						noLightBoxEngaged = false;
						lightboxTopLevelCaptured = 4;
					}
					if( lightBoxDialog_Level3_Engaged && lightboxTopLevelCaptured == "" ){
						//console.log("SKEEPY");
						$( '.focusDumper' ).focus();
						setTimeout(function(){
							$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
							if( $('body').attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
								$('#ariaLiveAssertive').text( langPack.screenreader.dashboard.title );
							}
						}, 100);
						noLightBoxEngaged = false;
						lightboxTopLevelCaptured = 3;
					}
					if( lightBoxDialog_Level2_Engaged && lightboxTopLevelCaptured == "" ){
						$( '.lightBoxDialog_Level2_TopNav_LabelText' ).focus();
						noLightBoxEngaged = false;
						lightboxTopLevelCaptured = 2;
					}
					if( lightBoxDialog_Level1_Engaged && lightboxTopLevelCaptured == "" ){
						$( '.lightBoxDialog_Level1_TopNav_LabelText' ).focus();
						noLightBoxEngaged = false;
						lightboxTopLevelCaptured = 1;
					}
					if( noLightBoxEngaged ){
						$( '#CET-Activity-Content-Title-Text' ).focus();
					}
					focusControl.focusEstablished = true;
					captured = true;
					actionUnblocked = true;
				}else{
					//! [ Existing Focus ]
					switch( focusControl.updateFocalItemCurrent ){
						/*
						if( $( '#navItem-back' ).css( 'display' ) == "none" ){
							//console.log("werg");
							$( '#navItem-continue' ).focus();
							$( '#navItem-continue' ).addClass( 'focused' );
						}else{
							//console.log("perg");
							$( '#navItem-back' ).focus();
							$( '#navItem-back' ).addClass( 'focused' );
						}
						*/
						case "lightboxLvl4Header": //! -- lightboxLvl4Header
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								preventDefault = false;
							}
						break;
						case "videoAssistiveControlLauncher": //! -- videoAssistiveControlLauncher
							blockCheck = true;
							// we want no reaction from tabbing, for now
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
							}
						break;
						case "videoAssistiveControl": //! -- videoAssistiveControl
							blockCheck = true;
							// we want no reaction from tabbing, for now
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
							}
						break;
						
						case "documentDownloader": //! -- documentDownloader
							blockCheck = true;
							// we want no reaction from tabbing, for now
							if( event.shiftKey ){
						    	
							}else{
								
							}
						break;
						
						case "lightboxLvl3Header": //! -- lightboxLvl3Header
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false; 
								accessibilityKeyboardHandlingLogging("NOOF");
								switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
									case "Dashboard" :
									case "About" :
									case "Help" :
									case "DashboardHelp" :
										//console.log("FLOOF");
										$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
									break;
									case "Clipboard" :
										accessibilityKeyboardHandlingLogging("SLOOF");
										//$( '.clipboardGridGroupStackContainer' ).find( '.mediaGridBoxOuter' ).first().focus();
										if( $('.clipboardGridGroupStackContainer').find('.gridGroupContainer').length > 0 ){
											accessibilityKeyboardHandlingLogging("PEEZ");
										    $('.clipboardGridGroupContainerFirst').focus();
									    }else{
										    accessibilityKeyboardHandlingLogging("KEEZ");
										    $( '#navItem-continue' ).focus();
									    }
									break;
								}
								
							}
							//actionUnblocked = true;
						break;
						
						case "clipboardGridGroupContainer": //! -- clipboardGridGroupContainer
							blockCheck = true;
							if( event.shiftKey ){
								accessibilityKeyboardHandlingLogging("WEEPY");
						    	if( $(this).hasClass('clipboardGridGroupContainerFirst') ){
								   $( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								}else{
									$(this).prev().focus();
									
								}
							}else{
								accessibilityKeyboardHandlingLogging("SNEEPY");
								if( $(this).hasClass('clipboardGridGroupContainerLast') ){
								   $( '#navItem-continue' ).focus();
								}else{
									$(this).next().focus();
								}
							}
						break;
						
						case "lightboxLvl2Header": //! -- lightboxLvl2Header
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								preventDefault = false;
							}
						break;
						case "subSeqMainPageText": //! -- subSequenceNavNums
							blockCheck = true;
							if( event.shiftKey ){
						    	preventDefault = false;
							}else{
								if( $('.CET-SubSequence-Content-Main-TextBlock-Container a').length > 0 ){
									//console.log("LINKS EXIST");
									//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
									$('[data-uniqueClass="SubSequencePageTextHyperlink"].textHyperlinkFirst').focus();
								}else{
									//console.log( "currentBasePage_Content_PageMediaStyle = " + currentBasePage_Content_PageMediaStyle );
									//console.log("NO LINKS EXIST");
									var forwardFocused = false;
									switch( currentSubSequencePage_Content_DataObject.content.pageMediaStyle ){
										case "singleMedia-ImageDisplay" :
										case "singleMedia-ImageLauncher" :
										case "singleMedia-VimeoLauncher" :
										case "singleMedia-YoutubeLauncher" :
										case "singleMedia-HTML5VideoLauncher" : 
										case "singleMedia-PDFLauncher" : 
										//case "singleMedia-SubSequenceLauncher" :
											if( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) == "0" && !forwardFocused ){
												forwardFocused = true;
												$( '.mediaLauncher-image').focus();
											}
											//if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
												//forwardFocused = true;
												//$( '.SandboxOccupied' ).focus();
											//}
											//if( currentBasePage_Assessment_Present && !forwardFocused ){
												//forwardFocused = true;
												//$( '#CET-Activity-Content-Assessment' ).focus();
											//}
											if( !forwardFocused ){
												//$( '#navItem-continue' ).focus();
												$( '.subSequenceNavNums' ).focus();
											}
										break;
										case "mediaGrid" :
											$( '.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer' ).focus();
											//console.log("should focus on media grid container");
											//$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter' ).
										break;
										case undefined : // no media on base page (except bg)
											//if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
												//forwardFocused = true;
												//$( '.SandboxOccupied' ).focus();
											//}
											//if( currentBasePage_Assessment_Present && !forwardFocused ){
												//forwardFocused = true;
												//$( '#CET-Activity-Content-Assessment' ).focus();
											//}
											if( !forwardFocused ){
												//$( '#navItem-continue' ).focus();
												$( '.subSequenceNavNums' ).focus();
											}
										break;
									}
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter mediaGridBoxInner.launchable
									//.mediaLauncher-image
									//preventDefault = false;
								}
								
							}
						break;
						case "subSequenceNavNums": //! -- subSequenceNavNums
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	if( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) != "0" ){
							    	var subSeqNavNumReverseTraverse = false;
							    	if( $( '.CET-SubSequence-Content-Main-TextBlock-Container .CET-SubSequence-Content-Main-TextBlock' ).length > 0 && !subSeqNavNumReverseTraverse ){
								    	subSeqNavNumReverseTraverse = true;
							    		$( '.CET-SubSequence-Content-Main-TextBlock-Container' ).focus();
							    	}
							    	if( $( '.lightBoxDialog_Level2_TopNav_LabelBox .lightBoxDialog_Level2_TopNav_LabelText' ).length > 0 && !subSeqNavNumReverseTraverse){
							    		subSeqNavNumReverseTraverse = true;
							    		$( '.lightBoxDialog_Level2_TopNav_LabelBox .lightBoxDialog_Level2_TopNav_LabelText' ).focus();
							    	}
						    	}else{
							    	$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image' ).focus();
						    	}
						    	/*
							    if( $( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image' ).is(":hidden") || 
								$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) == "0" ){							    	
									$( '.CET-SubSequence-Content-Main-TextBlock-Container' ).focus();
						    	}else{
							    	$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image' ).focus();
						    	}
						    	*/
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								$( '.subSequenceNav-NextBut' ).focus();
							}
						break;
						case "subSequenceNav-NextBut": //! -- subSequenceNav-NextBut
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	$( '.subSequenceNavNums' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								$( '.subSequenceNav-PrevBut' ).focus();
							}
						break;
						case "subSequenceNav-PrevBut": //! -- subSequenceNav-PrevBut
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	$( '.subSequenceNav-NextBut' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								$( '#navItem-continue' ).focus();
							}
						break;
						
						case "lightboxLvl1Header": //! -- lightboxLvl1Header
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								preventDefault = false;
							}
						break;
						
						case "mainContentHeader": //! -- mainContentHeader
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	$( '#navItem-menu' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								preventDefault = false;
							}
						break;
						case "pageTypeIndicator": //! -- pageTypeIndicator
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	preventDefault = false;
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								preventDefault = false;
							}
						break;
						case "mainPageText": //! -- mainPageText
							blockCheck = true;
							//$('.textHyperlink .accessVizLinkNotification').empty();
							$('.textHyperlink .accessVizLinkNotification').attr( 'aria-hidden' , "true" );
							if( event.shiftKey ){
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	preventDefault = false;
							}else{
								if( $('.CET-Activity-Content-Main-TextBlock-Container a').length > 0 ){
									//console.log("LINKS EXIST");
									//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
									var firstLink = $('[data-uniqueClass="MainPageTextHyperlink"].textHyperlinkFirst');
									var checkLinkNotification = firstLink.attr( 'data-linkNotification' );
									if( checkLinkNotification != undefined && checkLinkNotification != null && checkLinkNotification != "" ){
										switch( checkLinkNotification ){
											case "externalContentADADisclaimer-Default" :
												//firstLink.find( '.accessVizLinkNotification' ).text( linkNotifications.externalContentADADisclaimerDefault );
												firstLink.find( '.accessVizLinkNotification' ).attr( 'aria-hidden' , "false" );
											break;
										}
									}
									//setTimeout(function(){
										//$( '.focusDumper' ).focus();
									//}, 1000);
									//setTimeout(function(){
										firstLink.focus();
									//}, 3000);
								}else{
									//console.log( "currentBasePage_Content_PageMediaStyle = " + currentBasePage_Content_PageMediaStyle );
									//console.log("NO LINKS EXIST");
									var forwardFocused = false;
									switch( currentBasePage_Content_PageMediaStyle ){
										case "singleMedia-ImageDisplay" :
										case "singleMedia-ImageLauncher" :
										case "singleMedia-VimeoLauncher" :
										case "singleMedia-YoutubeLauncher" :
										case "singleMedia-HTML5VideoLauncher" : 
										case "singleMedia-PDFLauncher" : 
										case "singleMedia-SubSequenceLauncher" :
											if( $('#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) == "0" && !forwardFocused ){
												forwardFocused = true;
												$( '.mediaLauncher-image').focus();
											}
											if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
												forwardFocused = true;
												$( '.SandboxOccupied' ).focus();
											}
											if( currentBasePage_Assessment_Present && !forwardFocused ){
												forwardFocused = true;
												$( '#CET-Activity-Content-Assessment' ).focus();
											}
											if( !forwardFocused ){
												$( '#navItem-continue' ).focus();
											}
										break;
										case "mediaGrid" :
											$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer' ).focus();
											//console.log("should focus on media grid container");
											//$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter' ).
										break;
										case undefined : // no media on base page (except bg)
											if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
												forwardFocused = true;
												$( '.SandboxOccupied' ).focus();
											}
											if( currentBasePage_Assessment_Present && !forwardFocused ){
												forwardFocused = true;
												$( '#CET-Activity-Content-Assessment' ).focus();
											}
											if( !forwardFocused ){
												$( '#navItem-continue' ).focus();
											}
										break;
									}
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter mediaGridBoxInner.launchable
									//.mediaLauncher-image
									//preventDefault = false;
								}
							}
						break;
						//case "mainPageTextHyperlink" : 
						case "textHyperlink" : //! -- textHyperlink
							blockCheck = true;
							//console.log("NYYWAAAAAA");
							//console.log( "THIS CLASS = " + $(this).attr("class") );
							//console.log( "THIS data-u = " + $(this).attr("data-uniqueClass") );
							
							// issue with using "this" selector, for some reason has already tabbed away and defaulted to the lb header...
							// doesn't seem to affect the main page... something about the lightbox?
							// for now using the stored last focused element to target the desired text element
							// leaving "this" in the main page selectors for now...
							
							//$('.textHyperlink .accessVizLinkNotification').empty();
							$('.textHyperlink .accessVizLinkNotification').attr( 'aria-hidden' , "true" );
							//focusControl.lastFocusedElement.find('.accessVizToggle').text( ": testing disclaimer 2" );
							
							//switch( $(this).attr( "data-uniqueClass" ) ){
							switch( focusControl.lastFocusedElement.attr( "data-uniqueClass" ) ){
								case "MainPageTextHyperlink" : 
									if( event.shiftKey ){
								    	if( $(this).hasClass('textHyperlinkFirst') ){
									    	$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
									    }else{
										    //$(this).prev(".mainPageTextHyperlink").focus();
										    //$(this).prevAll(".mainPageTextHyperlink").first().focus();
										    var prevLink = $(this).prevAll(' [data-uniqueClass="MainPageTextHyperlink"]' ).first();
										    var checkLinkNotification = prevLink.attr( 'data-linkNotification' );
											if( checkLinkNotification != undefined && checkLinkNotification != null && checkLinkNotification != "" ){
												switch( checkLinkNotification ){
													case "externalContentADADisclaimer-Default" :
														//prevLink.find( '.accessVizLinkNotification' ).text( linkNotifications.externalContentADADisclaimerDefault );
														prevLink.find( '.accessVizLinkNotification' ).attr( 'aria-hidden' , "false" );
													break;
												}
											}
											//$(this).prevAll(' [data-uniqueClass="MainPageTextHyperlink"]' ).first().find('.accessVizLinkNotification').text( ": testing disclaimer 2" );
										    prevLink.focus();
									    }
									}else{
										if( $(this).hasClass('textHyperlinkLast') ){
											//console.log("GWAAAAAA");
											var forwardFocused = false;
											switch( currentBasePage_Content_PageMediaStyle ){
												case "singleMedia-ImageDisplay" :
												case "singleMedia-ImageLauncher" :
												case "singleMedia-VimeoLauncher" :
												case "singleMedia-YoutubeLauncher" :
												case "singleMedia-HTML5VideoLauncher" : 
												case "singleMedia-PDFLauncher" : 
												case "singleMedia-SubSequenceLauncher" :
													//console.log("GWEEEEEEE"); 
													if( $('#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) == "0" && !forwardFocused ){
														forwardFocused = true;
														$( '.mediaLauncher-image').focus();
													}
													if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
														forwardFocused = true;
														$( '.SandboxOccupied' ).focus();
													}
													if( currentBasePage_Assessment_Present && !forwardFocused ){
														forwardFocused = true;
														$( '#CET-Activity-Content-Assessment' ).focus();
													}
													if( !forwardFocused ){
														$( '#navItem-continue' ).focus();
													}
												break;
												case "mediaGrid" :
													$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer' ).focus();
													//console.log("should focus on media grid container");
													//$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter' ).
												break;
												case undefined : // no media on base page (except bg)
													if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") && !forwardFocused ){
														forwardFocused = true;
														$( '.SandboxOccupied' ).focus();
													}
													if( currentBasePage_Assessment_Present && !forwardFocused ){
														forwardFocused = true;
														$( '#CET-Activity-Content-Assessment' ).focus();
													}
													if( !forwardFocused ){
														$( '#navItem-continue' ).focus();
													}

												break;
											}
										}else{
											//$(this).next(".mainPageTextHyperlink").focus();
											var nextLink = $(this).nextAll(' [data-uniqueClass="MainPageTextHyperlink"]' ).first();
											var checkLinkNotification = nextLink.attr( 'data-linkNotification' );
											if( checkLinkNotification != undefined && checkLinkNotification != null && checkLinkNotification != "" ){
												switch( checkLinkNotification ){
													case "externalContentADADisclaimer-Default" :
														//nextLink.find( '.accessVizLinkNotification' ).text( linkNotifications.externalContentADADisclaimerDefault );
														nextLink.find( '.accessVizLinkNotification' ).attr( 'aria-hidden' , "false" );
													break;
												}
											}
											//$(this).nextAll(' [data-uniqueClass="MainPageTextHyperlink"]' ).first().find('.accessVizToggle').text( ": testing disclaimer 2" );
											nextLink.focus();
										}
									}
								break;
								case "CourseOverviewTextHyperlink" : 
									//console.log( "focusControl.lastFocusedElement = " + focusControl.lastFocusedElement.attr("class") );
									if( event.shiftKey ){
								    	//if( $(this).hasClass('textHyperlinkFirst') ){
									    if( focusControl.lastFocusedElement.hasClass('textHyperlinkFirst') ){
									    	//$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
									    	focusControl.lastFocusedElement.closest('.dashboardSectionText').focus();
									    }else{
										    //$(this).prev(".mainPageTextHyperlink").focus();
										    focusControl.lastFocusedElement.prevAll(' [data-uniqueClass="CourseOverviewTextHyperlink"]' ).first().focus();
									    }
									}else{
										if( focusControl.lastFocusedElement.hasClass('textHyperlinkLast') ){
										//if( $(this).hasClass('textHyperlinkLast') ){
											//console.log("GUUUUUUUWWWW");
											$( '#navItem-continue' ).focus();
										}else{
											//$(this).next(".mainPageTextHyperlink").focus();
											//console.log("SWWWWWWWWWWWW");
											focusControl.lastFocusedElement.nextAll(' [data-uniqueClass="CourseOverviewTextHyperlink"]' ).first().focus();
										}
									}
								break;
								case "ModuleOverviewTextHyperlink" : 
									if( event.shiftKey ){
								    	if( focusControl.lastFocusedElement.hasClass('textHyperlinkFirst') ){
									    	focusControl.lastFocusedElement.closest('.dashboardSectionText').focus();
									    }else{
										    var focusedIndex = $('.activeDashboardContentArea .textHyperlink').index( $('.focused') );
										    //$('.linkHL').removeClass("linkHL");
										  	//$(".groupStack .link").eq(focusedIndex - 1).addClass("linkHL");
										    $('.activeDashboardContentArea .textHyperlink').eq(focusedIndex - 1).focus();
									    }
									}else{
										if( focusControl.lastFocusedElement.hasClass('textHyperlinkLast') ){
											if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
												$('.activeDashboardContentArea .dashboardSectionStepMap' ).focus();
											}else{
												$( '#navItem-continue' ).focus();
											}
										}else{
											//$(this).next(".mainPageTextHyperlink").focus();
											//focusControl.lastFocusedElement.nextAll(' [data-uniqueClass="ModuleOverviewTextHyperlink"]' ).first().focus();
											var focusedIndex = $('.activeDashboardContentArea .textHyperlink').index( $('.focused') );
										    //$('.linkHL').removeClass("linkHL");
										  	//$(".groupStack .link").eq(focusedIndex - 1).addClass("linkHL");
										    $('.activeDashboardContentArea .textHyperlink').eq(focusedIndex + 1).focus();
										}
									}
								break;
								
								case "AboutAuthorBlockTextHyperlink" : 
									if( event.shiftKey ){
								    	if( focusControl.lastFocusedElement.hasClass('textHyperlinkFirst') ){
									    	focusControl.lastFocusedElement.closest('.authorBlock').focus();
									    }else{
										    var focusedIndex = $('.authorInfo .textHyperlink').index( $('.focused') );
										    $('.authorInfo .textHyperlink').eq(focusedIndex - 1).focus();
									    }
									}else{
										if( focusControl.lastFocusedElement.hasClass('textHyperlinkLast') ){
											if( focusControl.lastFocusedElement.closest( '.authorBlock' ).index() == ( $( '.authorInfo .authorBlock' ).length - 1) ){
												$( '#navItem-continue' ).focus();
											}else{
												focusControl.lastFocusedElement.closest( '.authorBlock' ).next().focus();
											}
										}else{
											var focusedIndex = $('.authorInfo .textHyperlink').index( $('.focused') );
										    $('.authorInfo .textHyperlink').eq(focusedIndex + 1).focus();
										}
									}
								break;
								
								case "AboutAttributionBlockTextHyperlink" : 
									if( event.shiftKey ){
								    	if( focusControl.lastFocusedElement.hasClass('textHyperlinkFirst') ){
									    	focusControl.lastFocusedElement.closest('.creditSection').focus();
									    }else{
										    var focusedIndex = $('.creditStack .textHyperlink').index( $('.focused') );
										    $('.creditStack .textHyperlink').eq(focusedIndex - 1).focus();
									    }
									}else{
										if( focusControl.lastFocusedElement.hasClass('textHyperlinkLast') ){
											if( focusControl.lastFocusedElement.closest( '.creditSection' ).index() == ( $( '.authorInfo .authorBlock' ).length - 1) ){
												$( '#navItem-continue' ).focus();
											}else{
												focusControl.lastFocusedElement.closest( '.creditSection' ).next().focus();
											}
										}else{
											var focusedIndex = $('.creditStack .textHyperlink').index( $('.focused') );
										    $('.creditStack .textHyperlink').eq(focusedIndex + 1).focus();
										}
									}
								break;
								
								case "FeedbackTextMainHyperlink" : 
									if( event.shiftKey ){
								    	if( focusControl.lastFocusedElement.hasClass('textHyperlinkFirst') ){
									    	focusControl.lastFocusedElement.closest('.feedbackText').focus();
									    }else{
										    var focusedIndex = $('.feedbackText .textHyperlink').index( $('.focused') );
										    $('.feedbackText .textHyperlink').eq(focusedIndex - 1).focus();
									    }
									}else{
										if( focusControl.lastFocusedElement.hasClass('textHyperlinkLast') ){
											if( !$('.feedbackMediaBlock' ).is(":hidden") ){
												$('.feedbackMediaBlock' ).focus();
											}else{
												$( '#navItem-continue' ).focus();
											}
										}else{
											var focusedIndex = $('.feedbackText .textHyperlink').index( $('.focused') );
										    $('.feedbackText .textHyperlink').eq(focusedIndex + 1).focus();
										}
									}
								break;
							}
						break;
						
						//case "mainPageMedia-Single":
						case "mediaLauncher-image": //! -- mediaLauncher-image
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	preventDefault = false;
							}else{
								//if( lightBoxDialog_Level4_Engaged ){
									
								//}
								var topLevelLB = 0;
								if( lightBoxDialog_Level1_Engaged ){
									topLevelLB = 1;
								}
								if( lightBoxDialog_Level2_Engaged ){
									topLevelLB = 2;
								}
								if( lightBoxDialog_Level3_Engaged ){
									topLevelLB = 3;
								}
								switch( topLevelLB ){
									case 0 :
										preventDefault = false;
									break;
									case 1 :
										
									break;
									case 2 :
										$('.subSequenceNavNums').focus();
									break;
									case 3 :
										
									break;
								}
							}
						break;
						case "mediaGridContainer": //! -- mediaGridContainer
							blockCheck = true;
							if( event.shiftKey ){
								accessibilityKeyboardHandlingLogging("SKOOPY");
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
							}else{
								accessibilityKeyboardHandlingLogging("DOOPY");
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								$( '#navItem-continue' ).focus();
							}
						break;
						case "mediaGridBox": //! -- mediaGridBox
							blockCheck = true;
							console.log("is media grid box");
							accessibilityKeyboardHandlingLogging("mediaGridBox class = " + $(this).attr('class') );
							if( event.shiftKey ){
								//console.log("is reverse tab");
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	accessibilityKeyboardHandlingLogging("WUP");
						    	switch( $(this).closest('.mediaGridContainer').attr('data-UDArrowGroup') ){
							    	case "MediaGrid-Main" :
							    		//console.log("should focus on main textblock");
							    		$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
							    	break;
							    	case "MediaGrid-SubSeqMain" :
							    		$( '.CET-SubSequence-Content-Main-TextBlock-Container' ).focus();
							    	break;
							    	case "MediaGrid-Assessment" :
							    		$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
							    	break;
							    	case "MediaGrid-Clipboard" :
							    		// previous group, or self group if single group
							    		// if parent cb set is first in stack, jump to top label.  otherwise, jump to prev set
							    		if( $(this).closest('.gridGroupContainer').hasClass("clipboardGridGroupContainerFirst") ){
								    		accessibilityKeyboardHandlingLogging("SOOP1");
								    		$('.lightBoxDialog_Level3_TopNav_LabelText').focus();
							    		}else{
								    		accessibilityKeyboardHandlingLogging("SOOP2");
								    		$(this).closest('.gridGroupContainer').prev().focus();
							    		}
							    	break;
						    	}
						    	
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								//$( '#navItem-continue' ).focus();
								accessibilityKeyboardHandlingLogging("BUP");
								accessibilityKeyboardHandlingLogging("UDArrowGroup = " + $(this).closest('.mediaGridContainer').attr('data-UDArrowGroup') );
								accessibilityKeyboardHandlingLogging("mediaGridContainer class =  " + $(this).closest('.mediaGridContainer').attr('class') );
								switch( $(this).closest('.mediaGridContainer').attr('data-UDArrowGroup') ){
							    	case "MediaGrid-Main" :
							    		$( '#navItem-continue' ).focus();
							    	break;
							    	case "MediaGrid-SubSeqMain" :
							    		$( '#navItem-continue' ).focus();
							    	break;
							    	case "MediaGrid-Assessment" :
							    		$( '#navItem-continue' ).focus();
							    	break;
							    	case "MediaGrid-Clipboard" :
							    		accessibilityKeyboardHandlingLogging("NUP");
							    		// next group, or self group if single group
							    		// if parent cb set is last in stack, jump to nav.  otherwise, jump to next set
							    		if( $(this).closest('.gridGroupContainer').hasClass("clipboardGridGroupContainerLast") ){
								    		accessibilityKeyboardHandlingLogging("SOOP3");
								    		$( '#navItem-continue' ).focus();
							    		}else{
								    		accessibilityKeyboardHandlingLogging("SOOP4");
								    		$(this).closest('.gridGroupContainer').next().focus();
							    		}
							    	break;
						    	}
							}
						break;
						case "mediaGridBoxOverride": //! -- mediaGridBoxOverride
							blockCheck = true;
							$( '#navItem-continue' ).focus();
						break;
						
						case "sandboxOccupied": //! -- sandboxOccupied
							blockCheck = true;
							if( event.shiftKey ){
								//preventDefault = false;
								
								forcedFocus = false;
						    	
						    	// if no mini app, go to step media if exists
						    	//if( !$('.CET-Activity-Content-Main-MediaBlock').is(":hidden") && !forcedFocus ){
							    if( $('.CET-Activity-Content-Main-MediaBlock').html().length && !forcedFocus ){
								  forcedFocus = true;
								  accessibilityKeyboardHandlingLogging("BEEEEEEEEEEP");
								  $('.mediaLauncher-image').focus();
								}
						    	
						    	// if no media go to step main text, if exists
						    	//if( !$('.CET-Activity-Content-Main-TextBlock-Container').is(":hidden") && !forcedFocus ){
							    if( $('.CET-Activity-Content-Main-TextBlock-Container').html().length && !forcedFocus ){
								  forcedFocus = true;
								  accessibilityKeyboardHandlingLogging("MEEEEEEEEEEP");
								  $('.CET-Activity-Content-Main-TextBlock-Container').focus();
								}
						    	
						    	// if no main text, go to step type
						    	if( !forcedFocus ){
							    	preventDefault = false;
						    	}
								
							}else{
								//preventDefault = false;
								if( currentBasePage_Assessment_Present ){
									$( '#CET-Activity-Content-Assessment' ).focus();
								}else{
									$( '#navItem-continue' ).focus();
								}
								
							}
						break;
						case "mainSandboxGuts": //! -- mainSandboxGuts
							//blockCheck = true;
							preventDefault = false;
						break;
						
						case "stepAssessment": //! -- stepAssessment
							blockCheck = true;
							if( event.shiftKey ){
								preventDefault = false;
						    	//$( '#navItem-continue' ).focus();
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	//preventDefault = false;
						    	//$( '.CET-Activity-Content-Main-TextBlock-Container' ).focus();
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								
								forcedFocus = false;
								if( !$('.stepAssessmentReviewFeedbackButtonContainer' ).is(":hidden") && !forcedFocus ){
									//reverseCaptured = true;
									//preventDefault = false;	
									//$( '#navItem-continue' ).focus(); 
									$( '.stepAssessmentReviewFeedbackButtonContainer' ).focus();
									accessibilityKeyboardHandlingLogging("EEF");
								}else{
									$( '#navItem-continue' ).focus(); 
									accessibilityKeyboardHandlingLogging("OOF");
								}
								
								//$( '#navItem-continue' ).focus(); 
							}
						break;
						case "stepAssessmentChoice": //! -- stepAssessmentChoice
						case "stepAssessmentChoiceSubList": //! -- stepAssessmentChoiceSubList
							blockCheck = true;
							if( event.shiftKey ){
								
								forcedFocus = false;
						    	
						    	// if no assessment, go to mini app if one exists
						    	// revisit this
						    	if( !$('#CET-Activity-Content-MainSandbox').hasClass( "SandboxOccupied" ) && !forcedFocus ){
								  forcedFocus = true;
								  $('#CET-Activity-Content-MainSandbox').focus();
								}
						    	
						    	// if no mini app, go to step media if exists
						    	//if( !$('.CET-Activity-Content-Main-MediaBlock').is(":hidden") && !forcedFocus ){
							    if( $('.CET-Activity-Content-Main-MediaBlock').html().length && !forcedFocus ){	
								  forcedFocus = true;
								  $('.mediaLauncher-image').focus();
								}
						    	
						    	// if no media go to step main text, if exists
						    	//if( !$('.CET-Activity-Content-Main-TextBlock-Container').is(":hidden") && !forcedFocus ){
							    if( $('.CET-Activity-Content-Main-TextBlock-Container').html().length && !forcedFocus ){
								  forcedFocus = true;
								  $('.CET-Activity-Content-Main-TextBlock-Container').focus();
								}
						    	
						    	// if no main text, go to step type
						    	if( !forcedFocus ){
							    	preventDefault = false;
						    	}
								
								if( focusControl.updateFocalItemCurrent == "stepAssessmentChoiceSubList" ){
									
								}
								
							}else{
								//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
								//preventDefault = false;
								forcedFocus = false;
								if( !$('.stepAssessmentReviewFeedbackButtonContainer' ).is(":hidden") && !forcedFocus ){
									reverseCaptured = true;
									//preventDefault = false;	
									//$( '#navItem-continue' ).focus(); 
									$( '.feedbackLabel' ).focus();
								}else{
									$( '#navItem-continue' ).focus(); 
								}
								if( focusControl.updateFocalItemCurrent == "stepAssessmentChoiceSubList" ){
									
								}
							}
						break;
						
						case "stepAssessmentReviewFeedbackButton": //! -- stepAssessmentReviewFeedbackButton
							blockCheck = true;
							if( event.shiftKey ){
						    	$( '.CET-Activity-Content-Assessment' ).focus();
							}else{
								$( '#navItem-continue' ).focus();
							}
						break;
						
						case "feedbackLabel" : //! -- feedbackLabel
							blockCheck = true;
							if( event.shiftKey ){
						    	// go to menu button
						    	$( '#navItem-menu' ).focus();
							}else{
								
								// check on availability of subsequent elements
								// fbDetails
								// fbText
								// fbMedia
								// go to continue button if above are not available
								
								forcedFocus = false;
								//var fbTabTargetSet = false;
								if( !$('.CET-feedbackDetails' ).is(":hidden") && !forcedFocus ){
									forcedFocus = true;
									$('.CET-feedbackDetails').focus();
								}
								if( $('.feedbackText' ).text().length > 0 && !forcedFocus ){
									forcedFocus = true;
									$('.feedbackText' ).focus();
								}
								if( !$('.feedbackMediaBlock' ).is(":hidden") && !forcedFocus ){
									forcedFocus = true;
									$('.feedbackMediaBlock' ).focus();
								}
								if( !forcedFocus ){
									forcedFocus = true;
									$( '#navItem-continue' ).focus();
								}
								/*
								if( !$('.CET-Activity-Content-Main-MediaBlock').is(":hidden") && !forcedFocus ){
								  forcedFocus = true;
								  $('.mediaLauncher-image').focus();
								}
								*/
								//preventDefault = false;
							}
						break;
						
						case "feedbackDetails" : //! -- feedbackDetails
							blockCheck = true;
							if( event.shiftKey ){
						    	if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" ){
									//reverseCaptured = true;
									$( '#navItem-menu' ).focus();
						    	}else{
							    	preventDefault = false;
						    	}
							}else{
								
								// check on availability of subsequent elements
								// fbText
								// fbMedia
								// go to continue button if above are not available
								
								forcedFocus = false;
								//var fbTabTargetSet = false;
								if( $('.feedbackText' ).text().length > 0 && !forcedFocus ){
									forcedFocus = true;
									$('.feedbackText' ).focus();
								}
								if( !$('.feedbackMediaBlock' ).is(":hidden") && !forcedFocus ){
									forcedFocus = true;
									$('.feedbackMediaBlock' ).focus();
								}
								if( !forcedFocus ){
									forcedFocus = true;
									$( '#navItem-continue' ).focus();
								}
								
								//preventDefault = false;	
							}
						break;
						case "feedbackText" : //! -- feedbackText
							blockCheck = true;
							if( event.shiftKey ){
						    	reverseCaptured = false;
								if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
									reverseCaptured = true;
									preventDefault = false;	
								}
								if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" ){
									if( !reverseCaptured ){
										reverseCaptured = true;
										$( '#navItem-menu' ).focus();
									}
								}else{
									//preventDefault = false;
									$( '.feedbackLabel' ).focus();
								}
							}else{
								
								// check on availability of subsequent elements
								// fbMedia
								// go to continue button if above are not available
								
								forcedFocus = false;
								//var fbTabTargetSet = false;
								
								if( $('.CET-feedbackContent .feedbackText a').length > 0 ){
									//console.log("LINKS EXIST");
									//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
									$('[data-uniqueClass="FeedbackTextMainHyperlink"].textHyperlinkFirst').focus();
								}else{
									if( !$('.feedbackMediaBlock' ).is(":hidden") && !forcedFocus ){
										forcedFocus = true;
										$('.feedbackMediaBlock' ).focus();
									}
									if( !forcedFocus ){
										forcedFocus = true;
										$( '#navItem-continue' ).focus();
									}
								}
							}
						break;
						case "feedbackMediaBlock" : //! -- feedbackMediaBlock
							blockCheck = true;
							if( event.shiftKey ){
						    	reverseCaptured = false;
								if( $('.feedbackText' ).text().length > 0 && !reverseCaptured ){
									reverseCaptured = true;
									preventDefault = false;	
								}
								if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
									reverseCaptured = true;
									$('.CET-feedbackDetails').focus();
								}
								if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !reverseCaptured ){
									reverseCaptured = true;
									$( '#navItem-menu' ).focus();
					    		}
							}else{
								// go to continue button
								$( '#navItem-continue' ).focus();
							}
						break;
						
						case "lightboxLvl3SideNav": //! -- lightboxLvl3SideNav
							//*
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//console.log("aaa");
						    	preventDefault = false;
							}else{
								//console.log("bbb");
								//$( '#navItem-continue' ).focus();
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								//preventDefault = false;
								
								switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
									case "Dashboard" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "CourseOverview" :
												
											break;
											case "CourseModule" :
												
											break;
										}
										$('.activeDashboardContentArea .dashboardSectionHeader' ).focus();
									break;
									//case "Clipboard" :
										//$( '.helpSectionHeader' ).focus();
									//break;
									case "About" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "AboutTheAuthors" :
												$( '.authorInfoSectionHeader' ).focus();
											break;
											case "Acknowledgements" :
												$( '.creditSectionHeader' ).focus();
											break;
										}
									break;
									case "Help" :
									case "DashboardHelp" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "UsingStepstone" :
												
											break;
											case "SystemRequirements" :
												
											break;
										}
										$( '.helpSectionHeader' ).focus();
									break;
								}
							}
							//*/
						break;
						case "sidenavItem": //! -- sidenavItem
							//*
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//console.log("aaa");
						    	//preventDefault = false;
						    	$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
							}else{
								//console.log("bbb");
								//$( '#navItem-continue' ).focus();
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								//preventDefault = false;
								
								switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
									case "Dashboard" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "CourseOverview" :
												
											break;
											case "CourseModule" :
												
											break;
										}
										$('.activeDashboardContentArea .dashboardSectionHeader' ).focus();
									break;
									//case "Clipboard" :
										//$( '.helpSectionHeader' ).focus();
									//break;
									case "About" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "AboutTheAuthors" :
												$( '.authorInfoSectionHeader' ).focus();
											break;
											case "Acknowledgements" :
												$( '.creditSectionHeader' ).focus();
											break;
										}
									break;
									case "Help" :
									case "DashboardHelp" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "UsingStepstone" :
												
											break;
											case "SystemRequirements" :
												
											break;
										}
										$( '.helpSectionHeader' ).focus();
									break;
								}
							}
							//*/
						break;
						
						//case "dashboardSectionHeader":
						case "lightBoxLvl3SectionHeader": //! -- lightBoxLvl3SectionHeader
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
						    	//preventDefault = false;
							}else{
								//console.log("bbb");
								/*
								if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
									$( '.dashboardSectionStepMap' ).focus();
								}else{
									$( '#navItem-continue' ).focus();
								}
								*/
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								/*
								switch( $( 'body' ).attr( 'data-lightBoxPanel3' ) ){
									case "Dashboard" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "CourseOverview" :
												
											break;
											case "CourseModule" :
												
											break;
										}
										$( '.dashboardSectionHeader' ).focus();
									break;
									//case "Clipboard" :
										//$( '.helpSectionHeader' ).focus();
									//break;
									case "About" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "AboutTheAuthors" :
												
											break;
											case "Acknowledgements" :
												
											break;
										}
										$( '.authorInfoSectionHeader' ).focus();
									break;
									case "Help" :
									case "DashboardHelp" :
										switch( $( 'body' ).attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "UsingStepstone" :
												
											break;
											case "SystemRequirements" :
												
											break;
										}
										$( '.helpSectionHeader' ).focus();
									break;
								}
								*/
								preventDefault = false;
							}
						break;
						case "helpSubSection": //! -- helpSubSection
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
						    	//preventDefault = false;
						    	//if( $(this).attr('data-helpSubSection') == "CoreInterface" ){
							    switch( $('.focused').attr('data-helpSubSection') ){
									case "CoreInterface" :
										preventDefault = false;
									break;
									case "KeyboardShortcuts" :
										preventDefault = false;
									break;
									case "MinimumOperatingRequirements" :
										preventDefault = false;
									break;
									default :
										var grabHelpSubSection = $(this).prev().attr( 'data-helpSubSection' );
										$(this).prev().focus();
										switch( grabHelpSubSection ){
											case "CoreInterface" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageCoreInterface
												});*/
											break;
											case "Activities" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageExercises
												});*/
											break;
											case "Media" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageMedia
												});*/
											break;
											case "Assessments" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageAssessments
												});*/
											break;
										}
									break;
								}
							}else{
								//console.log( "ku hss = " + $(this).attr( 'data-helpSubSection') );
								//if( $(this).attr( 'data-helpSubSection') == "Assessments" ){
								switch( $('.focused').attr('data-helpSubSection') ){
									case "Assessments" :
										$( '#navItem-continue' ).focus();
									break;
									case "KeyboardShortcuts" :
										$( '#navItem-continue' ).focus();
									break;
									case "MinimumOperatingRequirements" :
										$( '#navItem-continue' ).focus();
									break;
									default :
										var grabHelpSubSection = $(this).next().attr( 'data-helpSubSection' );
										$(this).next().focus();
										//<div class="helpSubSection focalItem UDArrowGroup" data-UDArrowGroup="Help-CoreUI" data-helpSubSection="CoreInterface" tabindex="0" aria-label="Usage Topic : Core Interface : Use space or return to access elements in this usage topic, then use up or down arrow keys to cycle elements within the topic and space or return to launch the selected element.">
										// performing aria-live assertive shift to force labeling instead of aria-label
										switch( grabHelpSubSection ){
											case "CoreInterface" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageCoreInterface
												});*/
											break;
											case "Activities" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageExercises
												});*/
											break;
											case "Media" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageMedia
												});*/
											break;
											case "Assessments" : 
												/*placeLocalizedContent({
													'targetItem' : 		$( '#ariaLiveAssertive' ) ,
													'srcData' : 		langPack.screenreader.help.usageAssessments
												});*/
											break;
										}
									break;
								}
								//if( $(this).attr('data-helpSubSection') == "Assessments" && $(this).hasClass("focused") ){
								//if( $('[data-helpSubSection="Assessments"]').hasClass("focused") ){
									//$( '#navItem-continue' ).focus();
									//console.log("woogy");
								//}else{
									//console.log("koogy");
									//preventDefault = false;
								//}
							}
						break;
						case "helpSubSectionContentRow": //! -- helpSubSectionContentRow
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
						    	//preventDefault = false;
						    	if( $(this).closest('.helpSubSection').attr('data-helpSubSection') == "CoreInterface" ){
							    	//preventDefault = false;
							    	$(this).closest('li').find('.helpSectionHeader').focus();
						    	}else{
							    	$(this).closest('.helpSubSection').prev().focus();
						    	}
							}else{
								if( $(this).closest('.helpSubSection').attr( 'data-helpSubSection') == "Assessments" ){
									//if( $(this).hasClass("focused") ){
										$( '#navItem-continue' ).focus();
									//}
								}else{
									$(this).closest('.helpSubSection').next().focus();
								}
								//if( $(this).attr('data-helpSubSection') == "Assessments" && $(this).hasClass("focused") ){
								//if( $('[data-helpSubSection="Assessments"]').hasClass("focused") ){
									//$( '#navItem-continue' ).focus();
									//console.log("woogy");
								//}else{
									//console.log("koogy");
									//preventDefault = false;
								//}
							}
						break;
						case "helpSubSectionContentRowOverride": //! -- helpSubSectionContentRowOverride
							blockCheck = true;
							$( '#navItem-continue' ).focus();
						break;
						case "authorBlock": //! -- authorBlock
							blockCheck = true;
							if( event.shiftKey ){
						    	preventDefault = false;
							}else{
								if( focusControl.lastFocusedElement.find( '.textHyperlink' ).length > 0 ){
									focusControl.lastFocusedElement.find( '.textHyperlinkFirst' ).focus();
								}else{
									if( focusControl.lastFocusedElement.index() == ( $( '.authorInfo .authorBlock' ).length - 1 ) ){
										$( '#navItem-continue' ).focus();
									}else{
										focusControl.lastFocusedElement.next().focus();
									}
								}
							}
						break;
						case "creditSection": //! -- creditSection
							blockCheck = true;
							if( event.shiftKey ){
							    preventDefault = false;
							}else{
								if( focusControl.lastFocusedElement.find( '.textHyperlink' ).length > 0 ){
									focusControl.lastFocusedElement.find( '.textHyperlinkFirst' ).focus();
								}else{
									if( focusControl.lastFocusedElement.index() == ( $( '.creditStack .creditSection' ).length - 1 ) ){
										$( '#navItem-continue' ).focus();
									}else{
										focusControl.lastFocusedElement.next().focus();
									}
								}
							}
						break;
						
						case "dashboardSectionStatusLabel": //! -- dashboardSectionStatusLabel
							//blockCheck = true;
							if( event.shiftKey ){
						    	preventDefault = false;
							}else{
								preventDefault = false;
							}
							//focusControl.updateFocalItemCurrent = "dashboardSectionStatusLabel";
						break;
						case "dashboardSectionScoreStatusLabel": //! -- dashboardSectionScoreStatusLabel
							//blockCheck = true;
							if( event.shiftKey ){
						    	preventDefault = false;
							}else{
								preventDefault = false;
							}
							//focusControl.updateFocalItemCurrent = "dashboardSectionScoreStatusLabel";
						break;
						
						
						case "dashboardLockNoticeBox": //! -- dashboardLockNoticeBox
							blockCheck = true;
							if( event.shiftKey ){
						    	//preventDefault = false;
						    	$('.activeDashboardContentArea .dashboardSectionScoreStatusLabel' ).focus();
							}else{
								//preventDefault = false;
								$('.activeDashboardContentArea .dashboardSectionText' ).focus();
							}
							//focusControl.updateFocalItemCurrent = "dashboardSectionScoreStatusLabel";
						break;
						case "dashboardSectionText": //! -- dashboardSectionText
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	//preventDefault = false;
						    	if( $('.activeDashboardContentArea .lockNoticeBlock' ).length > 0 && $('.activeDashboardContentArea .lockNoticeBlock' ) != undefined ){
							    	$('.activeDashboardContentArea .lockNoticeBlock' ).focus();
								}else{
									preventDefault = false;
									//$('.activeDashboardContentArea .dashboardSectionText' ).focus();
								}
							}else{
								switch( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) ){
									case "CourseOverview" :
										if( $('.courseOverviewContent a').length > 0 ){
											//console.log("LINKS EXIST");
											//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
											$('.textHyperlinkFirst[data-uniqueClass="CourseOverviewTextHyperlink"]').focus();
										}else{
											//$( '#navItem-continue' ).focus();
											if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
												$('.activeDashboardContentArea .dashboardSectionStepMap' ).focus();
											}else{
												$( '#navItem-continue' ).focus();
											}
										}
									break;
									case "CourseModule" :
										if( $('.activeDashboardContentArea .dashboardSectionText a').length > 0 ){
											//console.log("LINKS EXIST");
											//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
											$('.textHyperlinkFirst[data-uniqueClass="ModuleOverviewTextHyperlink"]').focus();
										}else{
											//$( '#navItem-continue' ).focus();
											if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
												$('.activeDashboardContentArea .dashboardSectionStepMap' ).focus();
											}else{
												$( '#navItem-continue' ).focus();
											}
										}
									break;
								}
								//console.log("bbb");
								
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								//preventDefault = false;
							}
							
							
							
							/*
							blockCheck = true;
							if( event.shiftKey ){
						    	//$( '#CET-Activity-Content-Title-Text' ).focus();
						    	preventDefault = false;
							}else{
								if( $('.CET-Activity-Content-Main-TextBlock-Container a').length > 0 ){
									//console.log("LINKS EXIST");
									//$('.CET-Activity-Content-Main-TextBlock-Container a').first().focus();
									$('.mainPageTextHyperlink.textHyperlinkFirst').focus();
								}else{
									//console.log( "currentBasePage_Content_PageMediaStyle = " + currentBasePage_Content_PageMediaStyle );
									//console.log("NO LINKS EXIST");
									switch( currentBasePage_Content_PageMediaStyle ){
										case "singleMedia-ImageDisplay" :
										case "singleMedia-ImageLauncher" :
										case "singleMedia-VimeoLauncher" :
										case "singleMedia-YoutubeLauncher" :
										case "singleMedia-HTML5VideoLauncher" : 
										case "singleMedia-PDFLauncher" : 
										case "singleMedia-SubSequenceLauncher" :
											//console.log("GWRRRRRRRRRR");
											$( '.mediaLauncher-image').focus();
										break;
										case "mediaGrid" :
											$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer' ).focus();
											//console.log("should focus on media grid container");
											//$( '#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter' ).
										break;
										case undefined : // no media on base page (except bg)
											if( $('#CET-Activity-Content-MainSandbox').hasClass("SandboxOccupied") ){
												$( '.SandboxOccupied' ).focus();
											}
										break;
									}
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter
									//#CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter mediaGridBoxInner.launchable
									//.mediaLauncher-image
									//preventDefault = false;
								}
							}	
							*/
							
							
						break;
						
						case "dashboardLockNoticeBox_PreReqListSlot": //! -- dashboardLockNoticeBox_PreReqListSlot
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	//preventDefault = false;
						    	//$('.activeDashboardContentArea .dashboardSectionText' ).focus();
						    	if( $('.activeDashboardContentArea .dashboardSectionScoreStatusLabel' ).length > 0 && $('.activeDashboardContentArea .dashboardSectionScoreStatusLabel' ) != undefined ){
							    	$('.activeDashboardContentArea .dashboardSectionScoreStatusLabel' ).focus();
								}else{
									preventDefault = false;
									//$('.activeDashboardContentArea .dashboardSectionText' ).focus();
								}
							}else{
								//console.log("bbb");
								//if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
									//$( '#navItem-continue' ).focus();
								//}else{
									//$( '#navItem-continue' ).focus();
								//}
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								//preventDefault = false;
								//preventDefault = false;
								$('.activeDashboardContentArea .dashboardSectionText' ).focus();
							}
						break;
						case "dashboardSectionStepMap": //! -- dashboardSectionStepMap
							if( event.shiftKey ){
						    	//$( '#navItem-menu' ).focus();
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//console.log("aaa");
						    	//$( '.dashboardSectionScoreStatusLabel' ).focus();
						    	//preventDefault = false;
						    	$('.activeDashboardContentArea .dashboardSectionText' ).focus();
							}else{
								//console.log("bbb");
								//if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
									$( '#navItem-continue' ).focus();
								//}else{
									//$( '#navItem-continue' ).focus();
								//}
								//preventDefault = false;
								//console.log("DONT PREVENT DEFAULT");
								//preventDefault = false;
							}
						break;
						case "stepMapItem": //! -- stepMapItem
							if( event.shiftKey ){
						    	//$('.activeDashboardContentArea .dashboardSectionText' ).focus();
						    	$('.activeDashboardContentArea .dashboardSectionText' ).focus();
							}else{
								//$( '#navItem-continue' ).focus();
								$( '#navItem-continue' ).focus();
							}
						break;
						case "navContinue": //! -- navContinue
							blockCheck = true;
							//console.log("KU NIC");
							if( event.shiftKey ){
						    	//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						    	//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
						    	if( lightBoxDialog_Level4_Engaged && lightboxTopLevelCaptured == "" ){ // video, image, pdf enlargement panel
							    	lightboxTopLevelCaptured = 4;
							    }
							    if( lightBoxDialog_Level3_Engaged && lightboxTopLevelCaptured == "" ){ // dashboard, help, about, clipboard
							    	if( $('body').attr( 'data-lightBoxPanel3' ) == "Help" || $('body').attr( 'data-lightBoxPanel3' ) == "DashboardHelp" ){
								    	//console.log("KU HELP");
								    	switch( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) ){
											case "UsingStepstone" :
												$( '.helpSubSection[data-helpSubSection="Assessments"]' ).focus();
											break;
											case "KeyboardShortcuts" :
												$( '.helpSubSection[data-helpSubSection="KeyboardShortcuts"]' ).focus();
											break;
											case "SystemRequirements" :
												$( '.helpSubSection[data-helpSubSection="MinimumOperatingRequirements"]' ).focus();
											break;
										}
								    }
								    if( $('body').attr( 'data-lightBoxPanel3' ) == "About" ){
								    	if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "AboutTheAuthors" ){
									    	$('.authorBlock').last().focus();
									    }
									    if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "Acknowledgements" ){
									    	$('.creditSection').last().focus();
									    }
								    }
								    if( $('body').attr( 'data-lightBoxPanel3' ) == "Clipboard" ){
									    accessibilityKeyboardHandlingLogging("SKUPPY");
									    if( $('.clipboardGridGroupStackContainer').find('.gridGroupContainer').length > 0 ){
										    $('.clipboardGridGroupContainerLast').focus();
									    }else{
										    $( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
									    }
								    }
							    	if( $('body').attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
								    	if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "CourseOverview" ){
									    	
									    }
								    	if( $('body').attr( 'data-lightBoxPanel3ActiveSection' ) == "CourseModule" ){
									    	
									    }
								    	
								    	if( $('body').attr( 'data-activePathType' ) == "Procedural" ){ // Dashboard - Step (Procedural)
											$('.activeDashboardContentArea .dashboardSectionStepMap' ).focus();
										}else{ // Dashboard - Step (Case Study, Course Overview)
											$('.activeDashboardContentArea .dashboardSectionText' ).focus();
										}
									}
									lightboxTopLevelCaptured = 3;
							    }
							    if( lightBoxDialog_Level2_Engaged && lightboxTopLevelCaptured == "" ){ // subsequence panel
							    	$( '.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer' ).focus();
							    	lightboxTopLevelCaptured = 2;
							    }
							    if( lightBoxDialog_Level1_Engaged && lightboxTopLevelCaptured == "" ){ // step assessment feedback
							    	lightboxTopLevelCaptured = 1;
							    	reverseCaptured = false;
									if( !$('.feedbackMediaBlock' ).is(":hidden") && !reverseCaptured ){
										//console.log("SCOOF");
										reverseCaptured = true;
										$('.feedbackMediaBlock' ).focus();
										//preventDefault = false;
									}
									if( $('.feedbackText' ).text().length > 0 && !reverseCaptured ){
										//console.log("SNOOF");
										reverseCaptured = true;
										$('.feedbackText' ).focus();
									}
									if( !$('.CET-feedbackDetails' ).is(":hidden") && !reverseCaptured ){
										reverseCaptured = true;
										$('.CET-feedbackDetails').focus();
									}
									if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !reverseCaptured ){
										reverseCaptured = true;
										$( '#navItem-menu' ).focus();
						    		}
							    }
							    if( !lightBoxDialog_Level4_Engaged &&
							    	!lightBoxDialog_Level3_Engaged &&
									!lightBoxDialog_Level2_Engaged &&
									!lightBoxDialog_Level1_Engaged ){
								    //console.log( "NOOOOOOOOOO LB" );
							    	//blockCheck = true;
							    	
							    	forcedFocus = false;
							    	
							    	// should go back to assessment if one exists
							    	if( !$('.CET-Activity-Content-Assessment').is(":hidden") && !forcedFocus ){
									  	//forcedFocus = true;
									  	//$('.CET-Activity-Content-Assessment').focus();
										if( !$('.stepAssessmentReviewFeedbackButtonContainer' ).is(":hidden") && !forcedFocus ){
											//reverseCaptured = true;
											//preventDefault = false;	
											//$( '#navItem-continue' ).focus(); 
											//console.log("WEEEEEEEEEEEEEE");
											forcedFocus = true;
											$( '.stepAssessmentReviewFeedbackButtonContainer' ).focus();
										}else{
											//console.log("WAAAAAAAAAAA");
											forcedFocus = true;
											$( '.CET-Activity-Content-Assessment' ).focus(); 
										}
									}
							    	
							    	// if no assessment, go to mini app if one exists
							    	// revisit this
							    	if( $('#CET-Activity-Content-MainSandbox').hasClass( "SandboxOccupied" ) && !forcedFocus ){
								    	//console.log("WOOOOOOOOOOOOOOOOO");
										forcedFocus = true;
										$('#CET-Activity-Content-MainSandbox').focus();
									}
							    	
							    	// if no mini app, go to step media if exists
							    	//if( !$('.CET-Activity-Content-Main-MediaBlock').is(":hidden") && !forcedFocus ){
								    if( $('.CET-Activity-Content-Main-MediaBlock').html().length && !forcedFocus ){	
									    if( $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer').html().length ){
										    if( $('#CET-Activity-Content-Main-MediaBlock .mediaGridContainer').attr( 'tabindex' ) == "0" ){
												forcedFocus = true;
												$('.mediaGridContainer').focus();
											}
									    }else{
										    if( $('#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( 'tabindex' ) == "0" ){
												forcedFocus = true;
												$('.mediaLauncher-image').focus();
											}
									    }
									}
							    	
							    	// if no media go to step main text, if exists
							    	//if( !$('.CET-Activity-Content-Main-TextBlock-Container').is(":hidden") && !forcedFocus ){
								    if( $('.CET-Activity-Content-Main-TextBlock-Container').html().length && !forcedFocus ){	
									  forcedFocus = true;
									  $('.CET-Activity-Content-Main-TextBlock-Container').focus();
									}
							    	
							    	// if no main text, go to step type
							    	if( !forcedFocus ){
								    	preventDefault = false;
							    	}
							    	
							    }
							}else{
								//$( '#navItem-continue' ).focus();
								if( $( '#navItem-back' ).css( 'display' ) == "none" ){
									$( '#navItem-menu' ).focus();
								}else{
									$( '#navItem-back' ).focus();
								}
							}
						break;
						case "navBack": //! -- navBack
							blockCheck = true;
							if( event.shiftKey ){
						    	$( '#navItem-continue' ).focus();
							}else{
								//$( '#navItem-back' ).focus();
								$( '#navItem-menu' ).focus();
							}
						break;
						case "navMenu": //! -- navMenu
						case "dashboardNav": //! -- dashboardNav
						case "dashboardStepList": //! -- dashboardStepList
							//console.log("focused navmenu = " + $( document.activeElement ).attr("class") ); 
							blockCheck = true;
							//console.log("NAV MENU PRE");
							//var tabbing = false;
							
							//if( tabbing ){
								if( event.shiftKey ){
									//console.log("NAV MENU SHIFT");
							    	//$( '#navItem-continue' ).focus();
							    	//$( '.lightBoxDialog_Level3_Content_SideNavContainer' ).focus();
							    	if( $( '#navItem-back' ).css( 'display' ) == "none" ){
										$( '#navItem-continue' ).focus();
									}else{
										$( '#navItem-back' ).focus();
									}
								}else{
									//console.log("NAV MENU NO SHIFT");
									//console.log("SHOULD WRAP TO TOP");
									//$( '#navItem-menu' ).focus();
									var noLightBoxEngaged = true;
									if( lightBoxDialog_Level4_Engaged ){
										$( '.lightBoxDialog_Level4_TopNav_LabelText' ).focus();
										noLightBoxEngaged = false;
									}
									if( lightBoxDialog_Level3_Engaged ){ 
										accessibilityKeyboardHandlingLogging("GWEEEE");		
										$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
										if( $('body').attr( 'data-lightBoxPanel3' ) == "Dashboard" ){
											$('#ariaLiveAssertive').text( langPack.screenreader.dashboard.title );
										}
										noLightBoxEngaged = false;
									}
									if( lightBoxDialog_Level2_Engaged ){
										$( '.lightBoxDialog_Level2_TopNav_LabelText' ).focus();
										noLightBoxEngaged = false;
									}
									if( lightBoxDialog_Level1_Engaged ){
										forcedFocus = false;
										//var fbTabTargetSet = false;
										if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" && !forcedFocus ){
									    	if( !$('.CET-feedbackDetails' ).is(":hidden") && !forcedFocus ){
												forcedFocus = true;
												$('.CET-feedbackDetails').focus();
											}
											if( $('.feedbackText' ).text().length > 0 && !forcedFocus ){
												forcedFocus = true;
												$('.feedbackText' ).focus();
											}
											if( !$('.feedbackMediaBlock' ).is(":hidden") && !forcedFocus ){
												forcedFocus = true;
												$('.feedbackMediaBlock' ).focus();
											}
											if( !forcedFocus ){
												forcedFocus = true;
												$( '#navItem-continue' ).focus();
											}
									    	forcedFocus = true;
									    }else{
										    $( '.feedbackLabel' ).focus();
									    }
										noLightBoxEngaged = false;
									}
									if( noLightBoxEngaged ){
										$( '#CET-Activity-Content-Title-Text' ).focus();
									}
								}
								navMenuCloser();
								//actionUnblocked = true;
							//}
						break;
						/*case "subNav-MenuExit":
						
						break;
						case "subNav-MenuHelp":
						
						break;*/
					
					} // end switch focusControl.updateFocalItemCurrent 
					captured = true;
					actionUnblocked = true;
				}
			break; // end tab handling
			
		} // end key code switch
		//focusControl.forceFocus = "";
		//console.log( "updateFocalItemCurrent = " + focusControl.updateFocalItemCurrent );
		focusControl.updateFocalItemCurrent = "";
		
	}else{
		blockCheck = true;
		//preventDefault = false;
		console.log( "no updateFocalItemCurrent" );
	}
	
	if( preventDefault && blockCheck ){
		//console.log("keyup prevent default");
		event.preventDefault();
	}
	
	//console.log( "start keyup focused class 2 = " + $(document.activeElement).attr('class') );
	
	//if( checkExecutionCmnd(event) ){ // ensure is space or return
		//event.preventDefault();
		//return false;
	//}
	//console.log("event id: " + $(event.target).attr('id') );
	//console.log("event class: " + $(event.target).attr('class') );
	//console.log("focusControl start : ");
	//console.log( JSON.stringify( focusControl , null , 4 ) );
	// can't prevent default in keyup?! need to handle default prevention in keydown?
	//var code = ( event.keyCode ? event.keyCode : event.which );
	//console.log( "focalitem code up = " + code );
	//if( code == 9 && focusControl.debounceTabLocked == true ){ // tab
	//if( code == 9 ){ // tab
		//console.log( "$(document.activeElement).length = " + $(document.activeElement).length );
		//console.log( "$('.focused').length = " + $('.focused').length );
		//if( $('.focused').length == 0 ){
		//if( $(document.activeElement).length == 0 ){
			//if( lightBoxDialog_Level3_Engaged ){
				//switch( lightBoxDialog_Level3_EngagedContentType ){
					//case "dashboard" :						
						//console.log("GWOOOOO");				
						//$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
						//focusControl.firstItemFocused = true;
					//break;
				//}
			//}
		//}
		/*if( $('.focused').length == 0 ){
			if( lightBoxDialog_Level3_Engaged ){
				//switch( lightBoxDialog_Level3_EngagedContentType ){
					//case "dashboard" :								
						$( '.lightBoxDialog_Level3_TopNav_LabelText' ).focus();
					//break;
				//}
			}
		}*/
		/*
		if( $(document.activeElement).hasClass( 'lightBoxDialog_Level3_Content_SideNavContainer' ) ){
			if( event.shiftKey ){
		    	
			}else{
				console.log( "block normal tab behavior if sidenavcontainer forwd tab" );
				event.preventDefault();
				//return false;
			}
		}
		*/
		//actionUnblocked = true;
	//}
	
	focusControl.heldKeys[codeToString] = false;
	
	if( actionUnblocked ){
		//console.log("unblocked");
		//focusControl.debounceTabLocked = 	false; 
		//focusControl.heldKeys[codeToString] = false;
		if( !purged ){
			updateFocus({ 'action' : "Update" });
		}
		
		accessibilityKeyboardHandlingLogging( "unblocked - end focused id = " + $(document.activeElement).attr('id') );
		accessibilityKeyboardHandlingLogging( "unblocked - end focused class = " + $(document.activeElement).attr('class') );
		//console.log( "end ku focal control heldkeys:" );
		//console.log( JSON.stringify( focusControl.heldKeys , null , 4 ) );
		
	}
	
	if( focalOverride != "" ){
		switch( focalOverride ){
			case "StepAssessmentWriteInFieldListInput" : 
				$( '.focused' ).removeClass( "focused" );
				$( '.focalOverride' ).addClass( "focused" );
				//$( '.focalOverride' ).removeClass( "focalOverride" );
			break;
		}
		//focalOverride = "";
	}
	
	accessibilityKeyboardHandlingLogging( "===[ end ku handler ]======================================" );
	accessibilityKeyboardHandlingLogging( "========================================================" );
	
});

// ! =============================================================
/* ! --[ Input - after typing or pasting into survey comment boxes ]--- */
$(document).on("keyup", '.courseSurveyTextArea', function(event){
   pruneTextAreaText(event);
});
/* ! --[ Input - pasting into survey comment boxes ]--- */
$(document).on("paste", '.courseSurveyTextArea', function(event) {
	setTimeout(function(){
		pruneTextAreaText(event);
	}, 100);
});
/* ! --[ Input - focus on survey comment boxes ]--- */
$(document).on("focus", '.courseSurveyTextArea', function(event) {
	$(event.target).css('background', '#dae8f9');
	$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').show();
});
/* ! --[ Input - blur away from survey comment boxes ]--- */
$(document).on("blur", '.courseSurveyTextArea', function(event) {
	$(event.target).css('background', '#f9f9f9');
	$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').hide();
});