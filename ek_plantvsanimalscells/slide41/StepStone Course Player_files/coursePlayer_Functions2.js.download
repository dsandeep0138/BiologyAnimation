// ! F.Core.Player.Size Adjust routine ---
function maximizeCETActivityContentHeight(context){  
	var postAction = "";
	if( context != undefined && context.postAction != undefined){
		postAction = context.postAction;
	}
	//console.log("resiza");
	// media query based test for threshold of "narrow" portait mode in viewport, to lock in sizing
	if( $('#viewPortNarrowThreshold').css('color') == "rgb(0, 0, 0)" ){
		viewPortIsNarrow = true;
	}else{
		viewPortIsNarrow = false;
	}
	var activityVMargins = 								grabCSSVerticalPaddingValues('#CET-Activity-Container', 'margin');
	var verticalRemoval_MarginsAndPadding = 	activityVMargins[0] + activityVMargins[1];
	var winHeight = 											window.innerHeight; //$(window).height();
	var winWidth = 											window.innerWidth; //$(window).width();
	var headerHeight = 									$('#CET-Activity-Header').height();
	var currentPageTitleBarHeight = 					$('#CET-Activity-Content-Title-Bar').height();
	var doubleHeaderHeight = 							headerHeight + currentPageTitleBarHeight;
	var activityContentW =								$('#CET-Activity-Content').width();
	var activityContentMainW =						$('#CET-Activity-Content-Main').width();
	var activityContentH =								$('#CET-Activity-Content').height();
	var footerHeight = 										$('#CET-Activity-Footer').height();
	var tBox;
	var tBoxW;
	var subTBoxW;
	var verticalRemoval = 
		headerHeight + 
		currentPageTitleBarHeight + 
		footerHeight + 
		verticalRemoval_MarginsAndPadding;
	if(ios7HeightShimToggle){
		verticalRemoval += 								ios7HeightShimVal; // fix for ios7 height bug in landscape mode, adds in missing pixel value
	}
	verticalRemoval += 									14; // little bit more -- why?
	var newSize = 											winHeight - verticalRemoval;
	$('#CET-Activity-Content').css('height', newSize + "px");
	var contentWidth;
	var mainContentWidth;
	var mainContentOuterWidth;
	var SubSequenceWidth;
	var SubSequenceContentWidth;
	var SubSequenceContentOuterWidth;
	var topLightBoxResized = 							false;
	//*
	$('#navItemSubMenu').position({
		"my": 	"center bottom",
		"at":		"center top-15",
		"of":		$('#navItem-menu')
	});
	//*/
	// ! - resizer section - lightbox 4
	//console.log("goo");
	if(lightBoxDialog_Level4_Engaged && !topLightBoxResized){ 
		//console.log("bloo");
		topLightBoxResized = true;
		var lightBoxDialog_Level4NewW = 			activityContentW + "px";
		var lvl4TopNavH = 									$(".lightBoxDialog_Level4_TopNav").outerHeight(true);
	    var lightBoxDialog_Level4NewH = 			( $('#CET-Activity-Content').height() + $('#CET-Activity-Content-Title-Bar').height() + footerHeight ) + "px"; // why extra px?
	    $('.ui-widget-overlay').css('max-width', lightBoxDialog_Level4NewW);
	    $('.ui-widget-overlay').css('max-height', lightBoxDialog_Level4NewH);
	    var lvl4BlankWedge = 5;
	    var lvl4OverlayPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",
		    "of": 		"#CET-Activity-Header"
		};
		$('.ui-widget-overlay').position(lvl4OverlayPozOptions);
		var lvl4TopNavPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",//+" + lvl4BlankWedge,
		    "of": 		"#CET-Activity-Header"
		};
		$('.lightBoxDialog_Level4_TopNav').position(lvl4TopNavPozOptions);
		var lvl4DialogPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",//+" + lvl4BlankWedge,
		    "of": 		".lightBoxDialog_Level4_TopNav"//"#CET-Activity-Header"
		};
		$('#lightBoxDialog-Level4').closest('.ui-dialog').position(lvl4DialogPozOptions);
	    $('#lightBoxDialog-Level4').closest('.ui-dialog').css('width', (activityContentW - (lvl4BlankWedge * 2)) + 'px');
	    var adjustActivityContentHVal = activityContentH;
	    $('#lightBoxDialog-Level4').closest('.ui-dialog').css('height', adjustActivityContentHVal + 'px');
	    $('#lightBoxDialog-Level4').css( 'height', (adjustActivityContentHVal + (lvl4BlankWedge * 2)) + 'px' );
	    if(lightBoxViewerTool == "image-zoom-basic"){
			$('#lightBoxDialog-Level4 #imageLoadBox-Zoom').css( 'height', '100%' ); // overridden by the megazoom stuff now?
	    }
	    //console.log("wee");
	    if( lightBoxViewerTool == "video-vimeo-basic" || lightBoxViewerTool == "video-youtube-basic" || lightBoxViewerTool == "video-html-basic" ){
		   // console.log("wah");
		    /*
			$('#videoLoadBox').css( 'height', ( $('#lightBoxDialog-Level4').height() ) + 'px' );
			var useVideoBoxWidth;
			var newVideoBoxWidth = 	videoFluidBox.width();
			useVideoBoxWidth = 			newVideoBoxWidth;
			allVideos.each(function(){
		    	var el = 							$(this);
				el
		        	.width(useVideoBoxWidth)
					//.height(useVideoBoxWidth * el.attr('data-aspectRatio'));
					.height( $('#videoLoadBox').height() );
			});
			*/
				//*
				
				// still need this with fitvids?
				var newVideoBoxWidth = 	html5VideoData.videoFluidBox.width();
				html5VideoData.allVideos.each(function(){
			    	var el = 							$(this);
					//el.width( useVideoBoxWidth );
					el.width( newVideoBoxWidth );
					//.height(useVideoBoxWidth * el.attr('data-aspectRatio'));
					//el.height( $('#videoLoadBox').height() );
				});
				//*/
				//$('.avPlayer').css( 'maxHeight' , $('#lightBoxDialog-Level4').height() + "px" );
				//$('.avPlayer').css( 'maxHeight' , ( $('#lightBoxDialog-Level4').outerHeight(true) - $('#videoLoadBox').css('top') ) + "px" );
				var videoOffset = $('#videoLoadBox').offset();
				var limitVideoH = $('#lightBoxDialog-Level4').outerHeight(true) - videoOffset.top;
				//console.log( "limitVideoH = " + limitVideoH );
				var grabAspect;
				var figureH;
				
				if( lightBoxViewerTool == "video-html-basic" ){
					grabAspect = $('.avPlayer').attr( 'data-aspectRatio' );
					figureH = $('#videoLoadBox').width() * grabAspect;
					$('.avPlayer').css( 'height' , figureH + "px" );
					$('.avPlayer').css( 'maxHeight' , limitVideoH + "px" );
				}
				if( lightBoxViewerTool == "video-vimeo-basic" ){
					//grabAspect = $('.avPlayer iframe').attr( 'data-aspectRatio' );
					//$('.avPlayer iframe').attr( 'data-aspectRatio' , "0.5625" );
					grabAspect = "0.5625";
					figureH = $('#videoLoadBox').width() * grabAspect;
					
					$('.avPlayer.vimeoVideoPlayer').css( 'height' , figureH + "px" );
					$('.avPlayer.vimeoVideoPlayer').css( 'maxHeight' , limitVideoH + "px" ); 
					
					//$('.avPlayer iframe').css( 'height' , figureH + "px" );
					//$('.avPlayer iframe').css( 'maxHeight' , limitVideoH + "px" ); 
					
					
					//$('.avPlayer iframe').closest('[data-vimeo-initialized="true"]').css( 'padding' , "0px" ); 
					
					//$('.avPlayer iframe').attr( 'tabindex' , '0' );
					 
					//$('.avPlayer iframe').css( 'bottom' , "0px !important" );
					//$('.plyr__video-embed iframe').css( 'bottom' , "0px" );
					//$('.plyr--vimeo').css( 'height' , ( $('#videoLoadBox').width() * grabAspect ) + "px" );
					//$('.plyr--vimeo').css( 'maxHeight' , limitVideoH + "px" );
					
					// adding these lines makes video disappear once screen resized
					// doesn't fix the height anyway/
					//$('.avPlayer iframe').css( 'height' , ( $('#videoLoadBox').width() * grabAspect ) + "px" );
					//$('.avPlayer iframe').css( 'maxHeight' , limitVideoH + "px" );
				}
				if( lightBoxViewerTool == "video-youtube-basic" ){
					grabAspect = "0.5625";
					figureH = $('#videoLoadBox').width() * grabAspect;
					//figureH -= $('#videoAssistiveControls').outerHeight(true);
					$('.avPlayer.youtubeVideoPlayer').css( 'height' , figureH + "px" );
					$('.avPlayer.youtubeVideoPlayer').css( 'maxHeight' , limitVideoH + "px" ); 
					// absolute bottom being forcefully applied to youtube iframe, can't override?!?!
					//$('.avPlayer.youtubeVideoPlayer').addClass( "forceZeroBottom" );
					
					//var forcedAbsBottom = parseFloat( $('.avPlayer.youtubeVideoPlayer').css( 'bottom' ) );
					//$( '#videoAssistiveControls' ).css( 'marginTop' , Math.abs(forcedAbsBottom) + "px" );
					
				}
				
				var targetPopListPozRef = "";
				switch(lightBoxViewerTool){
					case "video-vimeo-basic" : 
						targetPopListPozRef = $('#vmPlayer');
					break;
					case "video-youtube-basic" : 
						targetPopListPozRef = $('#ytPlayer');
					break;
					case "video-html-basic" : 
						targetPopListPozRef = $('#html5AVPlayer');
					break;
				}
				
				if( $( '#videoAssistiveControlsPopList' ).hasClass( "popListOpen" ) ){
					$( '#videoAssistiveControlsPopList' ).position({
						"my": 	"center bottom",
						//"at":	"center top-15",
						"at":	"center bottom",
						"of":	targetPopListPozRef
					});
				}
				
				
				//var avPlayerH = $('.avPlayer').height();
				
				//var videoLoadBoxPadTop = $('#videoLoadBox').css('padding-top');
				//var videoLoadBoxPozTop = $('#videoLoadBox').css('top');
				//var videoLoadBoxH = $('#videoLoadBox').css('height');
				//var videoLoadBoxH = $('#videoLoadBox').css('height');
				//console.log("videoLoadBoxPadTop = " + videoLoadBoxPadTop);
				//console.log("videoLoadBoxPozTop = " + videoLoadBoxPozTop);
				//console.log("videoLoadBoxH = " + videoLoadBoxH);
				//console.log("avPlayerH = " + avPlayerH);
				
				//var calcTop = ( $('#lightBoxDialog-Level4').height() / 2 ) - ( avPlayerH / 2 ) - videoOffset.top;
				//$('#videoLoadBox').css( 'paddingTop', calcTop + "px" );
				//$('#videoLoadBox').css( 'maxHeight', (avPlayerH - $('#videoLoadBox').css('top') ) + "px" );
				/*
				var videoPozOptions = {
				    "my": 	"center",
				    "at": 		"center",
				    "of": 		"#lightBoxDialog-Level4"
				};
				$('#videoLoadBox').position(videoPozOptions);
				*/
			//break;
	    }
	    if(lightBoxViewerTool == "document-pdf-desktop"){
			$('#documentLoadBox').css( 'height', ( $('#lightBoxDialog-Level4').height() - $('#documentDownloader').outerHeight(true) ) + 'px' ); 
	    }
	    // force a resize for confirmation pop to avoid cutting off bottom
	    if( lightBoxViewerTool == 'confirmationRestart' || lightBoxViewerTool == 'confirmationExit' ){
			var grabLB4OverlayH = $('.ui-widget-overlay').outerHeight(true);
			$("#lightBoxDialog-Level4").closest('.ui-dialog').css('height', ( grabLB4OverlayH - 30 ) + 'px'); 
			$("#lightBoxDialog-Level4").css('height', ( grabLB4OverlayH - 30 ) + 'px'); 
		}
	}
	// ! - resizer section - lightbox 3
	if(lightBoxDialog_Level3_Engaged && !topLightBoxResized){
		topLightBoxResized = 					true;
		var lightBoxDialog_Level3NewW = 	activityContentW + "px";
	    var lightBoxDialog_Level3NewH = 	( $('#CET-Activity-Content').height() + $('#CET-Activity-Content-Title-Bar').height() ) + "px"; // why extra px?
	    $('.ui-widget-overlay').css('max-width', lightBoxDialog_Level3NewW);
	    $('.ui-widget-overlay').css('max-height', lightBoxDialog_Level3NewH);
	    var lvl3BlankWedge = 			10;
	    var lvl3OverlayPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",
		    "of": 		"#CET-Activity-Header"
		};
		var lvl3DialogPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom+" + lvl3BlankWedge,
		    "of": 		"#CET-Activity-Header"
		};
		$('.ui-widget-overlay').position(lvl3OverlayPozOptions);
		$('#lightBoxDialog-Level3').closest('.ui-dialog').position(lvl3DialogPozOptions);
	    $('#lightBoxDialog-Level3').closest('.ui-dialog').css('width', (activityContentW - (lvl3BlankWedge * 2)) + 'px');
	    var adjustLVL3H = activityContentH;
	    if(newOrientationChange){
	    	if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "dashboardHelp" || lightBoxDialog_Level3_EngagedContentType == "about" || lightBoxDialog_Level3_EngagedContentType == "dashboard"){
				sideNavDropListClosedH = $('.sideNavDropList .menuSelectedLabel').outerHeight(true);
				$('.sideNavDropList .dropListContainer').css('height', (sideNavDropListClosedH) + 'px');
			}
	    	if(sideNavDropListStatus == "Dropped"){
		    	$('.sideNavDropList .menuSelectedLabel').show();
				$('.sideNavDropList .menuSelectDropButton').show();
				$('.sideNavDropList .dropListContainer').css('height', sideNavDropListClosedH + 'px');
				$('.sideNavDropList').find('.qActivityChoice').css('opacity', 0);
				sideNavDropListStatus = "Closed";
		    }
		    if(ios7HeightShimToggle){
				adjustLVL3H -= 					ios7HeightShimVal; // fix for ios7 height bug in landscape mode, adds in missing pixel value
			}else{
				if( $('html').hasClass('ipad') && $('html').hasClass('ios7') && $('html').hasClass('mobilesafari') ){ // needs reverting?
			    	adjustLVL3H += 				ios7HeightShimVal;
			    }
			}
	    }
	    $('#lightBoxDialog-Level3').css('height', ( adjustLVL3H + currentPageTitleBarHeight - (lvl3BlankWedge * 2) ) + 'px');
	    var contentH = $('#lightBoxDialog-Level3').closest('.ui-dialog').height();
	    $('.lightBoxDialog_Level3_Content_Container').css( 'height', ( contentH - $('.lightBoxDialog_Level3_TopNav').height() ) + 'px');
	    if(lightBoxDialog_Level3_EngagedContentType == "about"){
	    	var cardMargin = 							parseInt( $('.lightBoxDialog_Level3_Content').css('margin-left') );
	    }
	    if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "dashboardHelp" || lightBoxDialog_Level3_EngagedContentType == "about" || lightBoxDialog_Level3_EngagedContentType == "dashboard"){
	    	var currentLvl3ContentH = 			0;
	    	var sideNavDropListHeight = 			$('.sideNavDropList').outerHeight(true);
	    	if( $('.lightBoxDialog_Level3_Content_SideNavContainer').css('display') == 'none' ){
		    	currentLvl3ContentH = $('.lightBoxDialog_Level3_Content_Container').outerHeight(true);
		    	$('.lightBoxDialog_Level3_Content_Container').css('height', (currentLvl3ContentH - sideNavDropListHeight) + 'px');
	    	}
	    	var newLvl3ContentH = $('.lightBoxDialog_Level3_Content_Container').outerHeight(true);
	    	$('.lightBoxDialog_Level3_Content_SideNavContainer').css( 'height', newLvl3ContentH + 'px' );
	    }
	    
	    if(lightBoxDialog_Level3_EngagedContentType == "help" || lightBoxDialog_Level3_EngagedContentType == "dashboardHelp" ){
	    	/*
	    	imageObject = 										mediaContainer;//$('.mediaLauncher-image');
			singleMediaBGImageNativeWidth = 			currentAboutPage_SingleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentAboutPage_SingleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
			currentMediaWidth = 	 							imageObject.width();
			imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
			currentMediaHeight = 							imageObject.height();
			*/
			//$( '[data-viewStatus="Open"] .helpSectionReferenceContentElementData.helpSectionReferenceImage' ).each(function(){
			$( '.helpSectionReferenceContentElementData.helpSectionReferenceImage' ).each(function(){
				/*
				console.log( "ref pic" );
				console.log( "w = " + $(this). );
				$(this).on('load', function(){
		    		console.log( "loaded" );
			       //singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
			       //maximizeCETActivityContentHeight();
			        //maximizerDelayRelay();
			    });
			    */
			    
			    // resizing help reference images
			    var helpImage_url = 		$(this).css('background-image');
			    var helpImage;
				helpImage_url = 			helpImage_url.match(/^url\("?(.+?)"?\)$/); // Remove url() or in case of Chrome url("")
				//console.log( "image_url = " + image_url );
				if( helpImage_url[1] ){
				    helpImage_url = 		helpImage_url[1];
				    helpImage = 				new Image();
				    helpImage.src = 			helpImage_url;
				    //$(helpImage).load( function (){ // just in case it is not already loaded -- not working?
				        //console.log( "img src size = " + helpImage.width + ' x ' + helpImage.height );
				        //console.log( "img contained size = " + $(this).width() + ' x ' + $(this).height() );
				        //console.log( "ratio = " + ($(this).width() / helpImage.width) + ' x ' + ($(this).height() / helpImage.height) );
				        $(this).css( 'maxWidth' , helpImage.width + "px" );
				        var widthRatio = $(this).width() / helpImage.width;
				        $(this).css( 'height' , (helpImage.height * widthRatio ) + "px" );
					//});
				    //console.log( helpImage.width + 'x' + helpImage.height );
				}
			});
	    }
	    
	    if(lightBoxDialog_Level3_EngagedContentType == 'dashboard'){
	    	 if( currentDashboardSelectedArea == "courseCertificate" ){
				if( certificateReproduced ){
					if( viewPortIsNarrow ){
						$('.courseCertificateContent .dashboardSectionText').after( $('.courseCertificateContent #canvasContainer') );
						$('.courseCertificateContent #canvasContainer').css('width', '100%');
						$('.courseCertificateContent #canvasContainer').css('position', 'relative');
						$('.courseCertificateContent .dashboardSectionText').css('marginRight', '0');
						$('.courseCertificateContent .dashboardSectionSplash').css('marginRight', '0');
					}else{
						//$('.courseCertificateContent .dashboardSectionStatusLabel').after( $('.courseCertificateContent #canvasContainer') );
						$('.courseCertificateContent .dashboardSectionSplash').after( $('.courseCertificateContent #canvasContainer') );
						$('.courseCertificateContent #canvasContainer').css('width', '40%');
						$('.courseCertificateContent #canvasContainer').css('position', 'absolute');
						$('.courseCertificateContent #canvasContainer').css('top', '0');
						$('.courseCertificateContent #canvasContainer').css('right', '0');
						$('.courseCertificateContent .dashboardSectionText').css('marginRight', '43%');
						$('.courseCertificateContent .dashboardSectionSplash').css('marginRight', '43%');
					}
					resizeCertificateThumb();
				}
		    }
		    if(currentDashboardSelectedArea == "courseModule"){
			     var useDashboardActivitySplashHeight = $('.lightBoxDialog_Level3_Content_Container').height();
			     useDashboardActivitySplashHeight -= $('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionHeader').height();
			     useDashboardActivitySplashHeight -= $('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionStatusLabel').height();
			     useDashboardActivitySplashHeight -= $('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionScoreStatusLabel').height();
			     useDashboardActivitySplashHeight -= $('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionText').height();
			     if( !$('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionSplash').hasClass('disabled') ){
				     $('.dashboardContentStack li:nth-child(' + dashboardSideNavItemActive + ') .dashboardSectionSplash').css( 'height',  useDashboardActivitySplashHeight + 'px');
			     }
		    }
	    }
	    if(sideNavDropListStatus == "Dropped"){
			var useSideNavDropListCutoffHeight = $('#lightBoxDialog-Level3').height() - $('.lightBoxDialog_Level3_TopNav').outerHeight(true);
			$('.sideNavDropList').css('max-height', useSideNavDropListCutoffHeight + 'px');
			$('.sideNavDropList').css('overflow-y', 'auto');
		}else if(sideNavDropListStatus == "Closed"){
			$('.sideNavDropList').css('overflow-y', 'hidden');
		}
	}
	// ! - resizer section - lightbox 2
	if(lightBoxDialog_Level2_Engaged && !topLightBoxResized){
		topLightBoxResized = true;
		var bottomNavH = $('.lightBoxDialog_Level2_BottomNav').height();
		var lightBoxDialog_Level2NewW = 	activityContentW + "px";
	    var lightBoxDialog_Level2NewH = 	$('#CET-Activity-Content').height() + "px"; // why extra px?
	    $('.ui-widget-overlay').css('max-width', lightBoxDialog_Level2NewW);
	    $('.ui-widget-overlay').css('max-height', lightBoxDialog_Level2NewH);
	    var lvl2BlankWedge = 10;
	    var lvl2OverlayPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",
		    "of": 		"#CET-Activity-Content-Title-Bar"
		};
		var lvl2DialogPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom+" + lvl2BlankWedge,
		    "of": 		"#CET-Activity-Content-Title-Bar"
		};
		$('.ui-widget-overlay').position(lvl2OverlayPozOptions);
		$('#lightBoxDialog-Level2').closest('.ui-dialog').position(lvl2DialogPozOptions);
	    $('#lightBoxDialog-Level2').closest('.ui-dialog').css( 'width', (activityContentW - (lvl2BlankWedge * 2)) + 'px' );
	    var adjustLVL2H = activityContentH;
	    $('#lightBoxDialog-Level2').closest('.ui-dialog').css( 'height', (adjustLVL2H - (lvl2BlankWedge * 2) ) + 'px' ); // 
	    $('#lightBoxDialog-Level2').css( 'height', $('#lightBoxDialog-Level2').closest('.ui-dialog').height() + 'px' );
	    $('.lightBoxDialog_Level2_Content_Container').css( 'height',  ( $('#lightBoxDialog-Level2').height() ) + "px" );
	    
	    // here we set up an "override" item in the optionlist object for determining textstyle and image width
	    // is special handling for subsequence pages
	    if(viewPortIsNarrow){
		    $( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' , "PageWidth" );
		    $('.CET-SubSequence-Content-Main-MediaBlock').removeClass( "CET-SubSequence-Content-Main-MediaBlockUpperRight" );
			//currentSubSequencePage_Content_DataObject.meta.optionList.ImageW = '100';
			currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
			//currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle = "PageWidth";
			currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride = "PageWidth";
		}else{
			if(currentSubSequencePage_Content_DataObject.meta.optionList != undefined){ // not "basic" type
				// apply json defined text style
				if(currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle != undefined && currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle != null && currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle != ""){
					//currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle = nodeMetaOptionList.TextStyle;
					currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride = currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle;
				}else{
					//currentSubSequencePage_Content_DataObject.meta.optionList.TextStyle = "PageWidth";
					currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride = "PageWidth";
					 $( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' , "PageWidth" );
				}
				// apply json-defined image width
				if(currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != undefined && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != null && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != ""){
					currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = currentSubSequencePage_Content_DataObject.meta.optionList.ImageW;
					//pageMediaContainerWidth = nodeMetaOptionList.ImageW + '%';
					if( Number(currentSubSequencePage_Content_DataObject.meta.optionList.ImageW) < 100 ){
						$('.CET-SubSequence-Content-Main-MediaBlock').addClass( "CET-SubSequence-Content-Main-MediaBlockUpperRight" );
						//if( $( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' ) == "PageWidth" ){
							//$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
						//}else{
							$( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' , "Wrap" );
						//}
					}else{
						$('.CET-SubSequence-Content-Main-MediaBlock').removeClass( "CET-SubSequence-Content-Main-MediaBlockUpperRight" );
						$( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' , "PageWidth" );
					}
				}else{
					currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
					$('.CET-SubSequence-Content-Main-MediaBlock').removeClass( "CET-SubSequence-Content-Main-MediaBlockUpperRight" );
					$( '#lightBoxDialog-Level2' ).attr( 'data-subSequenceContentTextStyle' , "PageWidth" );
				}
			}
		}
		$('.CET-SubSequence-Content-Main-MediaBlock').css('width', currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride + "%");
		$('.CET-SubSequence-Content-Main-MediaBlockGhost').css('width', currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride + "%");
	    
	    // ---[ check subsequence page text style ]--------------------------------
	    
	    if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "Wrap" ){
			//$('.CET-SubSequence-Content-Main-TextBlock-Container').before( $('.CET-SubSequence-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
			$('.CET-SubSequence-Content-Main-MediaBlock').css({
				//'float': 'right',
				'margin': '1em 1em 1.5em 1.5em',
			    //'position': 'relative',
				'text-align': 'center',
				'padding-left': '0',
				'padding-right': '0'
			});
			$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', 'none');
			//$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
			$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
		}
	    
		if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "Wrap" || currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "PageWidth" ){
			subTBoxW = measureObjectMarginPadding('.CET-SubSequence-Content-Main-TextBlock-Container', true, true, true, true, "h");
			//$('#CET-SubSequence-Content-Main').css('width', (winWidth - (subTBoxW + 10)) + "px"); // adding arbitrary number for now
			SubSequenceContentWidth = 					$('#CET-SubSequence-Content-Main').width();
			//$('.CET-SubSequence-Content-Main-TextBlock-Container').css('width', (SubSequenceContentWidth - subTBoxW) + "px");
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('clear', 'none');
			
			//tBoxW = measureObjectMarginPadding('.CET-Activity-Content-Main-TextBlock-Container', true, true, true, true, "h");
			//mainContentWidth = 					$('#CET-Activity-Content-Main').width();
			//$('.CET-Activity-Content-Main-TextBlock-Container').css('clear', 'none');
			//$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
		}
		
		if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "PageWidth" ){ // additional pagewidth controls
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('margin-bottom', '2.2em');
			//$('.CET-SubSequence-Content-Main-TextBlock-Container').css('clear', 'both');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-top', '1em');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-bottom', '1em');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('float', 'none');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('clear', 'both');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-left', 'auto');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-right', 'auto');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('padding-left', '1em');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('padding-right', '1em');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('position', 'static');
			//$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
			//$('.CET-SubSequence-Content-Main-MediaBlock').css('height', '');
			//$('#CET-SubSequence-Content-Main').append($('.CET-SubSequence-Content-Main-MediaBlock'));
			
			if(viewPortIsNarrow){
				/*
				// diabling swapping repositioning for now. always have media after text
				if(currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-VimeoLauncher" || currentSubSequencePage_Content_DataObject.content.pageMediaStyle == "singleMedia-PDFLauncher"){
					//$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').height() );
					$('.CET-SubSequence-Content-Main-MediaBlock').after( $('.CET-SubSequence-Content-Main-TextBlock-Container') ); // DOM reposition seems to help ensure media box drops below text
					$('.CET-SubSequence-Content-Main-TextBlock-Container').css('clear', 'both');
				}else{*/
					//$('.CET-SubSequence-Content-Main-TextBlock-Container').after( $('.CET-SubSequence-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
				//}
				
				//$('.CET-Activity-Content-Main-MediaBlock').css('padding-left', '1em');
				//$('.CET-Activity-Content-Main-MediaBlock').css('padding-right', '1em');
				
				if(currentSubSequencePage_Content_DataObject.content.pageMediaStyle != "mediaGrid"){
					$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
				}else{
					$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer').outerHeight(true) + 'px');
				}
			}else{
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', 'none');
				//$('.CET-SubSequence-Content-Main-TextBlock-Container').after( $('.CET-SubSequence-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
				//$('.CET-Activity-Content-Main-MediaBlock').css('padding-left', '0');
				//$('.CET-Activity-Content-Main-MediaBlock').css('padding-right', '0');
				if(currentSubSequencePage_Content_DataObject.content.pageMediaStyle != "mediaGrid"){
					$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', ( $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
				}else{
					$('.CET-SubSequence-Content-Main-MediaBlock').css( 'height', $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer').outerHeight(true) + 'px');
				}
			}
		
		}
		
		// following block is used to set behavior of content items when text is set to scroll on its own 
		if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "MediaHeight" ){
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('overflow-x', 'hidden');
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('overflow-y', 'auto');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-left', '0.5em');
			$('.CET-SubSequence-Content-Main-MediaBlock').css('margin-right', '0em');
			SubSequenceContentWidth = 										$('#CET-SubSequence-Content').width();
			var tot = SubSequenceContentWidth - (measureObjectMarginPadding('.CET-SubSequence-Content-Main', false, false, true, true, "h") + 18); // fudged number shim for now
			$('#CET-SubSequence-Content-Main').css('width', tot);
			SubSequenceContentOuterWidth = 				$('#CET-SubSequence-Content-Main').outerWidth();
			var currentSubSequenceMediaBoxHeight = 		$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').height();
			var currentSubSequenceMediaBoxOuterWidth = 	$('.CET-SubSequence-Content-Main-MediaBlock').outerWidth(true);
			var reducedSubSequenceTextWidth = SubSequenceContentOuterWidth - (
				currentSubSequenceMediaBoxOuterWidth
				+ measureObjectMarginPadding('.CET-SubSequence-Content-Main', false, false, true, true, "h")
				+ measureObjectMarginPadding('.CET-SubSequence-Content-Main-TextBlock-Container', false, false, true, true, "h")
				+ 5 // fudged number shim for now
			);
			var currentSubSequencePageContentMediaBoxH = $('.CET-SubSequence-Content-Main-MediaBlock').height();
			var currentSubSequencePageContentTextBoxContainerRightPadding = parseInt( $('.CET-SubSequence-Content-Main-TextBlock-Container').css('padding-right') );
			var reducedSubSequenceTextHeight = currentSubSequencePageContentMediaBoxH - currentSubSequencePageContentTextBoxContainerRightPadding;
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('width', reducedSubSequenceTextWidth + 'px');
			$('.CET-SubSequence-Content-Main-TextBlock-Container').css('height', reducedSubSequenceTextHeight + 'px');
		}
		
		// ---[ check sub sequence page media style ]--------------------------------
		switch ( currentSubSequencePage_Content_DataObject.content.pageMediaStyle ){
			case "mediaGrid":
			//case "subSequenceLauncherGrid":
				maximizah('subSequence-main');
				break;
			case "singleMedia-ImageDisplay":
			case "singleMedia-ImageLauncher":
			//case "singleMedia-SubSequenceLauncher":
			case "singleMedia-VimeoLauncher":
			case "singleMedia-YoutubeLauncher":
			case "singleMedia-HTML5VideoLauncher":
			case "singleMedia-PDFLauncher":
				singleMediaSizer(currentSubSequencePage_Content_DataObject.content.pageMediaStyle, mediaPathConstructor({ mediaFileName : currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Display }), "SubSequence-Main", $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image') );
				//singleMediaSizer(currentSubSequencePage_Content_DataObject.content.pageMediaStyle, CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Display, "SubSequence-Main", $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image') );
				var setSubSeqMediaBlockH = $( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image' ).outerHeight(true);
				if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "Wrap" ){
					$( '.CET-SubSequence-Content-Main-MediaBlock' ).css( 'top' , $('.lightBoxDialog_Level2_TopNav_LabelBox').outerHeight(true) + "px" );
					$( '.CET-SubSequence-Content-Main-MediaBlockGhost' ).css( 'height' , setSubSeqMediaBlockH + 'px' );
				}
		}
		
		if( currentSubSequencePage_Content_DataObject.content.pageMedia_Deco != null && currentSubSequencePage_Content_DataObject.content.pageMedia_Deco != undefined ){
			if( currentSubSequencePage_Content_DataObject.content.pageMedia_Deco.length > 0 ){
				var subSequenceDeco1Width;
				var subSequenceDeco1WideWidthShrink = 20;
				var subSequenceDeco1NarrowWidthShrink = 60;
				if( viewPortIsNarrow ){
					subSequenceDeco1Width = $('.CET-SubSequence-Content-Main-TextBlock-Container').width(); 
				}else{
					//console.log( "a = " + $('.CET-SubSequence-Content-Main-TextBlock-Container').height() + "---" + $('.CET-SubSequence-Content-Main-MediaBlock').height() );
					if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "Wrap" ){
						if( $('.CET-SubSequence-Content-Main-TextBlock-Container').height() >= ( $('.CET-SubSequence-Content-Main-MediaBlock').height() + 20 )  ){
							subSequenceDeco1Width = $('.CET-SubSequence-Content-Main-TextBlock-Container').width() - subSequenceDeco1WideWidthShrink;
							//console.log("fee");
						}else{
							//console.log("b = " + subSequenceDeco1Width);
							subSequenceDeco1Width = $('#CET-SubSequence-Content-Main').width() - $('.CET-SubSequence-Content-Main-MediaBlock').width() - subSequenceDeco1NarrowWidthShrink;
							//console.log( $('#CET-SubSequence-Content-Main').width() + "---" + $('.CET-SubSequence-Content-Main-MediaBlock').width() + "---" + subSequenceDeco1NarrowWidthShrink );
						}
					}else if( currentSubSequencePage_Content_DataObject.meta.optionList.TextStyleOverride == "PageWidth" ){
						subSequenceDeco1Width = $('.CET-SubSequence-Content-Main-TextBlock-Container').width() - subSequenceDeco1WideWidthShrink;
					}
				}
				//console.log("fw = " + subSequenceDeco1Width);
				//$('.CET-SubSequence-Content-Main-TextBlock-Accent-Container').css( 'min-width', "100px" );
				$('.CET-SubSequence-Content-Main-TextBlock-Accent-Container').css( 'width', subSequenceDeco1Width + "px" );
				singleMediaSizer('Image', mediaPathConstructor({ mediaFileName : currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display }), "SubSequenceDeco1", $('.CET-SubSequence-Content-Main-TextBlock-Accent') );
				//singleMediaSizer('Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display, "SubSequenceDeco1", $('.CET-SubSequence-Content-Main-TextBlock-Accent') );
			}else{
				$('.CET-SubSequence-Content-Main-TextBlock-Accent').removeAttr("style");
			}
		}else{
			$('.CET-SubSequence-Content-Main-TextBlock-Accent').removeAttr("style");
		}
		
		var lvl2BottomNavPozOptions = {
		    "my": 	"bottom",
		    "at": 		"bottom",
		    "of": 		"#lightBoxDialog-Level2"
		};
		$('.lightBoxDialog_Level2_BottomNav').position(lvl2BottomNavPozOptions);
	    $('#CET-SubSequence-Content-Main').css('padding-bottom', ( $('.lightBoxDialog_Level2_BottomNav').outerHeight(true) + 7 ) + 'px');
	}
	
	// ! - resizer section - lightbox 1
	if(lightBoxDialog_Level1_Engaged && !topLightBoxResized){ 
		topLightBoxResized = true;
		var lightBoxDialog_Level1NewW = 	activityContentW + "px";
	    var lightBoxDialog_Level1NewH = 	( $('#CET-Activity-Content').height() + 1 ) + "px"; // why extra px?
	    $('.ui-widget-overlay').css('max-width', lightBoxDialog_Level1NewW);
	    $('.ui-widget-overlay').css('max-height', lightBoxDialog_Level1NewH);
	    var lvl1BlankWedge = 10;
	    var feedBackStatusBarH = $('#CET-feedbackStatus').height();
		//singleMediaSizer( 'Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + pageAssessmentSelectionResult.outputFeedback_Media_Display, "Feedback", $('#feedbackMedia') );
		$('#lightBoxDialog-Level1').closest('.ui-dialog').css( 'width', (activityContentW - (lvl1BlankWedge * 2)) + 'px' );
		var adjustLVL1H = activityContentH;
	    $('#lightBoxDialog-Level1').closest('.ui-dialog').css( 'height', (adjustLVL1H - (lvl1BlankWedge * 2) - 10 ) + 'px' ); // num is fudged
	    $('#lightBoxDialog-Level1').css( 'height', $('#lightBoxDialog-Level1').closest('.ui-dialog').height() + 'px' );
	    $('#CET-feedbackContent').css('height', ( $('#lightBoxDialog-Level1').height() - feedBackStatusBarH - 10  ) + 'px'); // num is fudged
	    var lvl1OverlayPozOptions = {
		    "my": 	"top",
		    "at": 		"bottom",
		    "of": 		"#CET-Activity-Content-Title-Bar"
		};
	    $('.ui-widget-overlay').position(lvl1OverlayPozOptions);
	    var lvl1DialogPozOptions = {
		    "my": 	"center center",
		    "at": 		"center center",
		    "of": 		".ui-widget-overlay"
		};
		$('#lightBoxDialog-Level1').closest('.ui-dialog').position(lvl1DialogPozOptions);
		
		if(viewPortIsNarrow){
		    $( '#lightBoxDialog-Level1' ).attr( 'data-feedbackContentTextStyle' , "PageWidth" );
		    pageAssessmentSelectionResult.outputFeedback_TextStyleOverride = "PageWidth";
		    pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride = '100';
		    $('#feedbackMediaBlock').removeClass( "feedbackMediaBlockUpperRight" );
		}else{
			
			// apply json-defined text style
			if( pageAssessmentSelectionResult.outputFeedback_TextStyle != undefined && pageAssessmentSelectionResult.outputFeedback_TextStyle != null && pageAssessmentSelectionResult.outputFeedback_TextStyle != ""){
				pageAssessmentSelectionResult.outputFeedback_TextStyleOverride = pageAssessmentSelectionResult.outputFeedback_TextStyle;
			}else{
				pageAssessmentSelectionResult.outputFeedback_TextStyleOverride = "PageWidth";
				$( '#lightBoxDialog-Level1' ).attr( 'data-feedbackContentTextStyle' , "PageWidth" );
			}
			
			// apply json-defined image width
			if( pageAssessmentSelectionResult.outputFeedback_MediaBlockW != undefined && pageAssessmentSelectionResult.outputFeedback_MediaBlockW != null && pageAssessmentSelectionResult.outputFeedback_MediaBlockW != ""){
				if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "Wrap" ){
					if( Number( pageAssessmentSelectionResult.outputFeedback_MediaBlockW ) < 100 ){
						pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride = pageAssessmentSelectionResult.outputFeedback_MediaBlockW;
						$('#feedbackMediaBlock').addClass( "feedbackMediaBlockUpperRight" );
						$( '#lightBoxDialog-Level1' ).attr( 'data-feedbackContentTextStyle' , "Wrap" );
					}else{
						pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride = "100";
						$('#feedbackMediaBlock').removeClass( "feedbackMediaBlockUpperRight" );
						$( '#lightBoxDialog-Level1' ).attr( 'data-feedbackContentTextStyle' , "PageWidth" );
						pageAssessmentSelectionResult.outputFeedback_TextStyleOverride = "PageWidth";
					}
				}
			}else{
				pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride = '100';
				$('#feedbackMediaBlock').removeClass( "feedbackMediaBlockUpperRight" );
				$( '#lightBoxDialog-Level1' ).attr( 'data-feedbackContentTextStyle' , "PageWidth" );
				pageAssessmentSelectionResult.outputFeedback_TextStyleOverride = "PageWidth";
			}
			
		}
		
		$('#feedbackMediaBlock').css('width', pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride + "%");
		$('#feedbackMediaBlockGhost').css('width', pageAssessmentSelectionResult.outputFeedback_MediaBlockWOverride + "%");
		
		// ---[ check feedback page text style ]--------------------------------
	    
	    if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "Wrap" ){
			$('#feedbackMediaBlock').css({
				//'float': 'right',
				'margin': '1em 1em 1.5em 1.5em',
			    //'position': 'relative',
				'text-align': 'center',
				'padding-left': '0',
				'padding-right': '0'
			});
			//$('#feedbackMediaBlock .mediaLauncher-image').css('max-height', 'none');
			$('#feedbackMediaBlock #feedbackMedia').css('max-height', 'none');
			$('#feedbackMediaBlock').css( 'height', ( $('#feedbackMediaBlock #feedbackMedia').height() + $('#feedbackMediaBlock .singleFeedbackMediaDisplayCaptionBox').height() ) + 'px');
		}
	    
		if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "Wrap" || pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "PageWidth" ){
			//subTBoxW = measureObjectMarginPadding('.CET-SubSequence-Content-Main-TextBlock-Container', true, true, true, true, "h");
			//SubSequenceContentWidth = 					$('#CET-SubSequence-Content-Main').width();
			//$('.CET-SubSequence-Content-Main-TextBlock-Container').css('clear', 'none');
		}
		
		if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "PageWidth" ){ // additional pagewidth controls
			//$('.CET-SubSequence-Content-Main-TextBlock-Container').css('margin-bottom', '2.2em');
			$('#feedbackText').css('margin-bottom', '2.2em');
			$('#feedbackMediaBlock').css('margin-top', '1em');
			$('#feedbackMediaBlock').css('margin-bottom', '1em');
			$('#feedbackMediaBlock').css('float', 'none');
			$('#feedbackMediaBlock').css('clear', 'both');
			$('#feedbackMediaBlock').css('margin-left', 'auto');
			$('#feedbackMediaBlock').css('margin-right', 'auto');
			$('#feedbackMediaBlock').css('padding-left', '1em');
			$('#feedbackMediaBlock').css('padding-right', '1em');
			$('#feedbackMediaBlock').css('position', 'static');
			
			if(viewPortIsNarrow){
				//if(currentSubSequencePage_Content_DataObject.content.pageMediaStyle != "mediaGrid"){
					$('#feedbackMediaBlock').css( 'height', ( $('#feedbackMediaBlock #feedbackMedia').height() + $('#feedbackMediaBlock .singleFeedbackMediaDisplayCaptionBox').height() ) + 'px');
				//}else{
					//$('#feedbackMediaBlock').css( 'height', $('#feedbackMediaBlock #feedbackMedia').outerHeight(true) + 'px');
				//}
			}else{
				$('#feedbackMediaBlock .mediaLauncher-image').css('max-height', 'none');
				//if(currentSubSequencePage_Content_DataObject.content.pageMediaStyle != "mediaGrid"){
					$('#feedbackMediaBlock').css( 'height', ( $('#feedbackMediaBlock #feedbackMedia').height() + $('#feedbackMediaBlock .singleFeedbackMediaDisplayCaptionBox').height() ) + 'px');
				//}else{
					//$('#feedbackMediaBlock').css( 'height', $('#feedbackMediaBlock .mediaGridContainer').outerHeight(true) + 'px');
				//}
			}
		
		}
		
		if( $( '#CET-feedbackDialog-Content-Container' ).attr( 'data-feedbackStatus' ) == "Neutral" ){
			$('#feedbackText').css('margin-top', '1em');
		}
		
		
		
		// skipping mediaheight section for now...
		
		// ---[ check feedback page type and media ]--------------------------------
		if( pageAssessmentSelectionResult.outputFeedback_Type != undefined && pageAssessmentSelectionResult.outputFeedback_Type != null && pageAssessmentSelectionResult.outputFeedback_Type != ""){
			pageAssessmentSelectionResult.outputFeedback_TypeOverride = pageAssessmentSelectionResult.outputFeedback_Type;
		}else{
			pageAssessmentSelectionResult.outputFeedback_TypeOverride = "Basic";
		}
		
		switch ( pageAssessmentSelectionResult.outputFeedback_TypeOverride ){
			case "Basic":
				
				switch( masterJSONStorage.currentStep.Assessment.type ){
					case "Single Answer - Multiple Choice" :
						if( 'outputFeedback_Media_Display' in pageAssessmentSelectionResult ){
						    //console.log('meta resizer resize fbm');
						    singleMediaSizer( 'Image', mediaPathConstructor({ mediaFileName : pageAssessmentSelectionResult.outputFeedback_Media_Display }), "Feedback", $('#feedbackMedia') );
							var setFeedbackMediaBlockH = $( '#feedbackMediaBlock #feedbackMedia' ).outerHeight(true);
							//console.log( "setFeedbackMediaBlockH = " + setFeedbackMediaBlockH );
							//console.log( "$('#CET-feedbackDetails').outerHeight(true)= " + $('#CET-feedbackDetails').outerHeight(true) );
							if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "Wrap" ){
								if( $('#CET-feedbackDetails').css("display") != "none" ){
									$( '#feedbackMediaBlock' ).css( 'top' , $('#CET-feedbackDetails').outerHeight(true) + "px" );
								}else{
									$( '#feedbackMediaBlock' ).css( 'top' , "0" );
								}
								$( '#feedbackMediaBlockGhost' ).css( 'height' , setFeedbackMediaBlockH + 'px' );
							}
						}
					break;
					case "Multiple Answer - Multiple Choice" :
					case "Advanced Multiple Answer - Multiple Choice" :
					case "Write In - Field List" :
					case "Matching" :
					case "Ranking" :
						if( pageAssessmentSelectionResult.feedback.media != undefined ){
							if( pageAssessmentSelectionResult.feedback.media[0].display != undefined ){
								singleMediaSizer( 'Image', mediaPathConstructor({ mediaFileName : pageAssessmentSelectionResult.feedback.media[0].display }), "Feedback", $('#feedbackMedia') );
								var setFeedbackMediaBlockH = $( '#feedbackMediaBlock #feedbackMedia' ).outerHeight(true);
								//console.log( "setFeedbackMediaBlockH = " + setFeedbackMediaBlockH );
								//console.log( "$('#CET-feedbackDetails').outerHeight(true)= " + $('#CET-feedbackDetails').outerHeight(true) );
								if( pageAssessmentSelectionResult.outputFeedback_TextStyleOverride == "Wrap" ){
									if( $('#CET-feedbackDetails').css("display") != "none" ){
										$( '#feedbackMediaBlock' ).css( 'top' , $('#CET-feedbackDetails').outerHeight(true) + "px" );
									}else{
										$( '#feedbackMediaBlock' ).css( 'top' , "0" );
									}
									$( '#feedbackMediaBlockGhost' ).css( 'height' , setFeedbackMediaBlockH + 'px' );
								}
							}//else{
								//$('#feedbackMediaBlock').hide();
							//}
						}//else{
							//$('#feedbackMediaBlock').hide();
						//}
					break;
				}
				
			break;
		}
		
	}
	
	// ! - resizer section - base page
	if(viewPortIsNarrow){
		pageMediaContainerWidth = '100%';
		currentBasePage_Content_TextStyle = "PageWidth";
		$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
		$('.CET-Activity-Content-Main-MediaBlock').removeClass( "CET-Activity-Content-Main-MediaBlockUpperRight" );
		$('.textBlockUnit').each(function(){
			var grabBlockStyle = $(this).attr("data-textBlockStyle");
			switch( grabBlockStyle ){
				case "Boxed" : 
				case "Simple Table" : 
					$(this).css('width','100%');
				break;
			}
			switch( grabBlockStyle ){
				case "Simple Table" : 
					//var grabTableW = $('.contentTextTable-Default').outerWidth(true);
					//$(this).find('.textBlockUnitHeader').css('width' , grabTableW + "px");
				break;
			}
		});
		
	}else{
		if(nodeMetaOptionList != undefined){
			// apply xml defined text style
			if(nodeMetaOptionList.TextStyle != undefined && nodeMetaOptionList.TextStyle != null && nodeMetaOptionList.TextStyle != ""){
				currentBasePage_Content_TextStyle = nodeMetaOptionList.TextStyle;
			}else{
				currentBasePage_Content_TextStyle = "PageWidth";
				$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
			}
			// apply xml defined image width
			if(nodeMetaOptionList.ImageW != undefined && nodeMetaOptionList.ImageW != null && nodeMetaOptionList.ImageW != ""){
				pageMediaContainerWidth = nodeMetaOptionList.ImageW + '%';
				if( Number(nodeMetaOptionList.ImageW) < 100 ){
					$('.CET-Activity-Content-Main-MediaBlock').addClass( "CET-Activity-Content-Main-MediaBlockUpperRight" );
					//if( currentBasePage_Content_TextStyle == "PageWidth" ){
						//$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
					//}else{
						$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "Wrap" );
					//}
				}else{
					$('.CET-Activity-Content-Main-MediaBlock').removeClass( "CET-Activity-Content-Main-MediaBlockUpperRight" );
					$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
				}
			}else{
				pageMediaContainerWidth = '100%';
				$('.CET-Activity-Content-Main-MediaBlock').removeClass( "CET-Activity-Content-Main-MediaBlockUpperRight" );
				$( '#CET-Activity-Container' ).attr( 'data-mainContentTextStyle' , "PageWidth" );
			}
		}
	}
	
	$('.CET-Activity-Content-Main-MediaBlock').css('width', pageMediaContainerWidth);
	$('.CET-Activity-Content-Main-MediaBlockGhost').css('width', pageMediaContainerWidth);
	
	// $( '#CET-Activity-Content-MainSandbox' ).css( "marginTop" ,  ).addClass( "SandboxOccupied" ).addClass( "focalItem" ).attr( 'tabindex' , "0" );
	
	//$( '#mainSandboxGuts' )
	//doubleHeaderHeight
	//$( '#CET-Activity-Content-MainSandbox.SandboxOccupied' ).css( "marginTop" ,  ).addClass( "SandboxOccupied" ).addClass( "focalItem" ).attr( 'tabindex' , "0" );
	$( '#CET-Activity-Content-MainSandbox' ).css( "marginTop" , "0px" ); // need to reset otherwise increments!
	$( '#CET-Activity-Content-MainSandbox' ).css( "display" , "none" );
	//$( '#CET-Activity-Content-MainSandbox.SandboxOccupied' ).css( "marginTop" , "0px" ); // need to reset otherwise increments!
	if( $( '#mainSandboxGuts' ).length > 0 ){
		//console.log( "mainSandboxGuts length = " + $( '#mainSandboxGuts' ).length() );
		//console.log( "guts offset top = " + $( '#mainSandboxGuts' ).offset().top );
		// unsure why but sandbox container places at top of viewport instead of below text section, though the actual content is placed properly
		// forcing a dynamic margin to compensate until can be more cleanly resolved
		//$( '#CET-Activity-Content-MainSandbox.SandboxOccupied' ).css( "marginTop" , "0px" ); // need to reset otherwise increments!
		$( '#CET-Activity-Content-MainSandbox' ).css( "display" , "block" );
		$( '#CET-Activity-Content-MainSandbox.SandboxOccupied' ).css( "marginTop" , ($( '#mainSandboxGuts' ).offset().top - doubleHeaderHeight) + "px" );
	}
	
	// ---[ check page text style ]--------------------------------
	
	if(currentBasePage_Content_TextStyle == "Wrap"){
		//$('.CET-Activity-Content-Main-TextBlock-Container').before( $('.CET-Activity-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
		$('.CET-Activity-Content-Main-MediaBlock').css({
			//'float': 'right',
			'margin': '1em 1em 1.5em 1.5em',
		    //'position': 'relative',
			'text-align': 'center',
			'padding-left': '0',
			'padding-right': '0'
		});
		$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', 'none');
		var setWrapMediaBlockH = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height(); 
		// these are set later as well, but seem to be set "early" here as well, in order for next height checking routine?
		$('.CET-Activity-Content-Main-MediaBlock').css( 'height' , setWrapMediaBlockH + 'px' );
		//$('.CET-Activity-Content-Main-MediaBlockGhost').css( 'height' , setWrapMediaBlockH + 'px' );
		
		if( $('.CET-Activity-Content-Main-MediaBlock').length > 0 ){
			$('.textBlockUnit').each(function(){
				var grabBlockStyle = $(this).attr("data-textBlockStyle");
				switch( grabBlockStyle ){
					case "Boxed" : 
					case "Simple Table" : 
						if( $(this).offset().top > $('.CET-Activity-Content-Main-MediaBlock').height() + $('.CET-Activity-Content-Main-MediaBlock').offset().top + 15 ){
							$(this).css( 'width' , '100%' );
						}else{
							var setMaxW = $('.CET-Activity-Content-Main-TextBlock-Container').outerWidth(true) - $('.CET-Activity-Content-Main-MediaBlock').outerWidth(true) - 15; //100 - (parseInt(nodeMetaOptionList.ImageW) + 2);
							$(this).css( 'width' , setMaxW + 'px' ); //$(this).css('width',setMaxW + '%');
						}
					break;
				}
				switch( grabBlockStyle ){
					case "Simple Table" : 
						//var grabTableW = $(this).find('.contentTextTable-Default').outerWidth(true);
						//$(this).find('.textBlockUnitHeader').css( 'width' , grabTableW + "px" );
					break;
				}
			});
		}
		
	}
	
	if(currentBasePage_Content_TextStyle == "Wrap" || currentBasePage_Content_TextStyle == "PageWidth"){
		tBoxW = measureObjectMarginPadding('.CET-Activity-Content-Main-TextBlock-Container', true, true, true, true, "h");
		mainContentWidth = 					$('#CET-Activity-Content-Main').width();
		$('.CET-Activity-Content-Main-TextBlock-Container').css('clear', 'none');
	}
	
	if(currentBasePage_Content_TextStyle == "PageWidth"){ // additional pagewidth controls
		$('.CET-Activity-Content-Main-TextBlock-Container').css('margin-bottom', '1.2em');
		$('.CET-Activity-Content-Main-TextBlock-Container').css('width', '100%');
		$('.CET-Activity-Content-Main-MediaBlock').css('margin-bottom', '1em');
		$('.CET-Activity-Content-Main-MediaBlock').css('float', 'none');
		$('.CET-Activity-Content-Main-MediaBlock').css('clear', 'both');
		$('.CET-Activity-Content-Main-MediaBlock').css('margin-left', 'auto');
		$('.CET-Activity-Content-Main-MediaBlock').css('margin-right', 'auto');
		//$('.CET-Activity-Content-Main-MediaBlock').css('margin-left', '1em');
		//$('.CET-Activity-Content-Main-MediaBlock').css('margin-right', '1em');
		$('.CET-Activity-Content-Main-MediaBlock').css('padding-left', '1em');
		$('.CET-Activity-Content-Main-MediaBlock').css('padding-right', '1em');
		if(viewPortIsNarrow){
			/*
			// attempt to set media launcher to icon height -- return to this later
			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css({
			//$('.CET-Activity-Content-Main-MediaBlock').css({
				'max-height': 			$('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').height(),
				'background-image':		'url("../img/global/1pxPNG/1px-w75.png")'
			});
			$('.CET-Activity-Content-Main-MediaBlock').css({
				'max-height': 			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height()
			});
			*/
			// diabling swapping repositioning for now. always have media after text
			/*
			if(currentBasePage_Content_PageMediaStyle == "singleMedia-VimeoLauncher" || currentBasePage_Content_PageMediaStyle == "singleMedia-PDFLauncher"){
				//$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').height() );
				$('.CET-Activity-Content-Main-MediaBlock').after( $('.CET-Activity-Content-Main-TextBlock-Container') ); // DOM reposition seems to help ensure media box drops below text
				$('.CET-Activity-Content-Main-TextBlock-Container').css('clear', 'both');
			}else{*/
				//$('.CET-Activity-Content-Main-TextBlock-Container').after( $('.CET-Activity-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
			//}
			//$('.CET-Activity-Content-Main-MediaBlock').css('padding-left', '1em');
			//$('.CET-Activity-Content-Main-MediaBlock').css('padding-right', '1em');
			if( currentBasePage_Content_PageMediaStyle != "mediaGrid" ){
				if( currentBasePage_Content_PageMediaStyle == "multiMedia-HotSpotMapDisplay" ){
					$('.CET-Activity-Content-Main-MediaBlock').css( 'height', "500" + 'px');
				}else{
					//$('.CET-Activity-Content-Main-MediaBlock').css( 'height', ( $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
					$('.CET-Activity-Content-Main-MediaBlock').css( 'height' , setWrapMediaBlockH + 'px' );
					//$('.CET-Activity-Content-Main-MediaBlockGhost').css( 'height' , setWrapMediaBlockH + 'px' );
				}
			}
		}else{
			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', 'none');
			//$('.CET-Activity-Content-Main-TextBlock-Container').after( $('.CET-Activity-Content-Main-MediaBlock') ); // DOM reposition seems to help ensure media box drops below text
			//$('.CET-Activity-Content-Main-MediaBlock').css('padding-left', '0');
			//$('.CET-Activity-Content-Main-MediaBlock').css('padding-right', '0');
			if( currentBasePage_Content_PageMediaStyle != "mediaGrid" ){
				if( currentBasePage_Content_PageMediaStyle == "multiMedia-HotSpotMapDisplay" ){
					//console.log('goop');
					$('.CET-Activity-Content-Main-MediaBlock').css( 'height', "500" + 'px');
				}else{
					//$('.CET-Activity-Content-Main-MediaBlock').css( 'height', ( $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
					$('.CET-Activity-Content-Main-MediaBlock').css( 'height' , setWrapMediaBlockH + 'px' );
					//$('.CET-Activity-Content-Main-MediaBlockGhost').css( 'height' , setWrapMediaBlockH + 'px' );

				}
			}
			
		}
	}
	// following block is used to set behavior of content items when text is set to scroll on its own 
	// USING THIS AT ALL? REVISIT
	if(currentBasePage_Content_TextStyle == "MediaHeight"){
		$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('max-height', 'none');
    	currentBasePage_Content_TextBoxContainerLeftPadding = 		grabCSSAttributeValue('.CET-Activity-Content-Main-TextBlock-Container', 'padding-left'); //$('.CET-Activity-Content-Main-MediaBlock').css('margin-left');
		currentBasePage_Content_TextBoxContainerRightPadding = 	grabCSSAttributeValue('.CET-Activity-Content-Main-TextBlock-Container', 'padding-right'); //$('.CET-Activity-Content-Main-MediaBlock').css('margin-left');
		currentBasePage_Content_MediaBoxHeight = 							$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height();
		currentBasePage_Content_ReducedTextHeight = 					currentBasePage_Content_MediaBoxHeight - currentBasePage_Content_TextBoxContainerRightPadding;
		$('.CET-Activity-Content-Main-TextBlock-Container').css('max-height', currentBasePage_Content_ReducedTextHeight  + 'px');
		$('.CET-Activity-Content-Main-TextBlock-Container').css('padding-bottom', '0');
		$('.CET-Activity-Content-Main-TextBlock-Container').css('overflow-x', 'hidden');
		$('.CET-Activity-Content-Main-TextBlock-Container').css('overflow-y', 'auto');
		$('.CET-Activity-Content-Main-TextBlock').css('padding-bottom', '1em');
		//$('.CET-Activity-Content-Main-MediaBlock').after( $('.CET-Activity-Content-Main-TextBlock-Container') ); // DOM reposition seems to help ensure media box drops below text
		$('.CET-Activity-Content-Main-MediaBlock').css('clear', 'none');
		$('.CET-Activity-Content-Main-MediaBlock').css('float', 'right');
		if( currentBasePage_Content_PageMediaStyle != "mediaGrid" ){
			$('.CET-Activity-Content-Main-MediaBlock').css( 'height', ( $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').height() ) + 'px');
		}
		$('.CET-Activity-Content-Main-MediaBlock').css('margin-left', '0.5em');
		$('.CET-Activity-Content-Main-MediaBlock').css('margin-right', '0em');
		contentWidth = 										$('#CET-Activity-Content').width();
		var tot = contentWidth - (measureObjectMarginPadding('.CET-Activity-Content-Main', false, false, true, true, "h") + 18); // fudged number shim for now
		mainContentOuterWidth = 							$('#CET-Activity-Content-Main').outerWidth();
		var currentMediaBoxHeight = 						$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height();
		var currentMediaBoxOuterWidth = 				$('.CET-Activity-Content-Main-MediaBlock').outerWidth(true);
		var reducedTextWidth = mainContentOuterWidth - (currentMediaBoxOuterWidth + 80 ); // fudged number shim for now
		var reducedTextHeight = currentBasePage_Content_ReducedTextHeight;//currentBasePage_Content_MediaBoxHeight - currentBasePage_Content_TextBoxContainerRightPadding;
		$('.CET-Activity-Content-Main-TextBlock-Container').css('width', reducedTextWidth + 'px');
		$('.CET-Activity-Content-Main-TextBlock-Container').css('max-height', reducedTextHeight + 'px'); // is this redundant, or can it be consolidated with resizing above?
	}
	
	// ---[ check assessment presence ]--------------------------------
	//if(pageType != "infoOnly"){ // if not info only, assessment needs a space below contextual content
	if(currentBasePage_Assessment_Present){
		// content main width should always be 25 less than assessment?  
		// unsure if always true but seems to be with current parameters, if not this difference then rendering jumps around
		var assessmentWidth = $('#CET-Activity-Content-Assessment').width();
		// fix to get choice icon to match text height
		if(currentBasePage_Assessment_Variant == "Basic"){
			/*
			for(var k = 1; k <= $('.choiceList_Item').length; k++){
				//var ch = 			$('#CET-Activity-Content-Assessment-PageChoiceSet li:nth-child(' + k + ') .CET-Choice-Text').height();
				var ch = 			$('.choiceList_Item:nth-child(' + k + ')').height();
				//$('#CET-Activity-Content-Assessment-PageChoiceSet li:nth-child(' + k + ') .CET-Choice-Icon-Container').css('height', ch + 'px');
				var itemPaddingTop = 			parseInt($('.choiceList_Item:nth-child(' + k + ')').css('padding-top'));
			    var itemPaddingBottom = 		parseInt($('.choiceList_Item:nth-child(' + k + ')').css('padding-bottom'));
				$('.choiceList_Item:nth-child(' + k + ') .CET-Choice-Icon-Container').css('height', (ch + itemPaddingTop + itemPaddingBottom) + 'px');
			}
			*/
			
			if( $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' ) == "Matching" || $('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' ) == "Ranking" ){
				
			}else{
				$('.choiceList_Item').each(function(){
					var listItem = 						$(this);
					//var ch = 								$(this).height();
					//var itemPaddingTop = 			parseInt( $(this).css('padding-top') );
				    //var itemPaddingBottom = 		parseInt( $(this).css('padding-bottom') );
				    //$(this).find('.CET-Choice-Icon-Container').css('height', (ch + itemPaddingTop + itemPaddingBottom) + 'px');
					$(this).find('.CET-Choice-Icon-Container').position({
						my : 	"left center" ,
						at : 	"left center" ,
						of : 	listItem
					});
				});
			}
			/*
			for(var k = 1; k <= $('.choiceList_Item').length; k++){
				//var ch = 			$('#CET-Activity-Content-Assessment-PageChoiceSet li:nth-child(' + k + ') .CET-Choice-Text').height();
				var ch = 			$('.choiceList_Item:nth-child(' + k + ')').height();
				//$('#CET-Activity-Content-Assessment-PageChoiceSet li:nth-child(' + k + ') .CET-Choice-Icon-Container').css('height', ch + 'px');
				var itemPaddingTop = 			parseInt($('.choiceList_Item:nth-child(' + k + ')').css('padding-top'));
			    var itemPaddingBottom = 		parseInt($('.choiceList_Item:nth-child(' + k + ')').css('padding-bottom'));
				$('.choiceList_Item:nth-child(' + k + ') .CET-Choice-Icon-Container').css('height', (ch + itemPaddingTop + itemPaddingBottom) + 'px');
			}
			*/
		}
		//if(currentBasePage_Assessment_Variant == "MediaGrid"){
		if(currentBasePage_Assessment_Variant == "Media"){
			for(var k = 1; k <= $('#CET-Activity-Content-Assessment .mediaGridBoxOuter').length; k++){
				//var ch = 			$('#CET-Activity-Content-Assessment .mediaGridBoxOuter:nth-child(' + k + ') .CET-Choice-Text').height();
				//$('#CET-Activity-Content-Assessment .mediaGridBoxOuter:nth-child(' + k + ') .CET-Choice-Icon-Container').css('height', ch + 'px');
			}
		}
		
	}
	//console.log( "currentBasePage_Content_PageMediaStyle = " + currentBasePage_Content_PageMediaStyle );
	// ---[ check page media style ]--------------------------------
	switch (currentBasePage_Content_PageMediaStyle){
		case "mediaGrid":
		case "subSequenceLauncherGrid":
			maximizah('main');
		break;
		case "singleMedia-ImageDisplay":
		case "singleMedia-ImageLauncher":
		case "singleMedia-SubSequenceLauncher":
		case "singleMedia-VimeoLauncher":
		case "singleMedia-YoutubeLauncher":
		case "singleMedia-HTML5VideoLauncher":
		case "singleMedia-PDFLauncher":
			singleMediaSizer(currentBasePage_Content_PageMediaStyle, mediaPathConstructor({ mediaFileName : currentBasePage_Content_PageMediaList[0].mediaFile_Display }), "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			//singleMediaSizer(currentBasePage_Content_PageMediaStyle, CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentBasePage_Content_PageMediaList[0].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			var setMediaBlockH =  0;
			if( $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').length > 0  ){
				setMediaBlockH += $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').outerHeight(true);
			}
			setMediaBlockH += $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').outerHeight(true);
			$('.CET-Activity-Content-Main-MediaBlock').css( 'height' , setMediaBlockH + "px" );
			if( currentBasePage_Content_TextStyle == "Wrap" ){
				$('.CET-Activity-Content-Main-MediaBlockGhost').css( 'height' , setMediaBlockH + 'px' );
			}
			/*
			if( $('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').length > 0 ){ // fix for issue with dashboard, return-to-dashboard, and next buttons apparently looking for this dom element and getting confused
				$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').position({ 
					'my' : 	"top" ,
					'at' : 	"bottom" ,
					'of' : 	$('.mediaLauncher-image')
				});
			}
			/*/
		break;
		case "multiMedia-HotSpotMapDisplay":
		
		break;
	}
	
	//if(currentBasePage_Assessment_Variant == "MediaGrid"){
	if( currentBasePage_Assessment_Variant == "Media" ){
		maximizah('assessment');
	}
	
	if( currentBasePage_Content_PageMedia_Deco != null && currentBasePage_Content_PageMedia_Deco != undefined ){
		if( currentBasePage_Content_PageMedia_Deco.length > 0 ){
			var deco1Width;
			var deco1WideWidthShrink = 20;
			var deco1NarrowWidthShrink = 60;
			if(viewPortIsNarrow){
				deco1Width = $('.CET-Activity-Content-Main-TextBlock-Container').width();
				//$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css( 'width', deco1Width + "px" );
				//$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css( 'height' , "100%" );
				//$('.CET-Activity-Content-Main-MediaBlock').css( 'height' , $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height() + "px" );
				//var currentMediaBoxHeight = 						$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height();
				//var currentMediaBoxOuterWidth = 				$('.CET-Activity-Content-Main-MediaBlock').outerWidth(true);
			}else{
				
				if( currentBasePage_Content_TextStyle == "Wrap" ){
					if( $('.CET-Activity-Content-Main-TextBlock-Container').height() >= ( $('.CET-Activity-Content-Main-MediaBlock').height() + 20 )  ){
						deco1Width = $('.CET-Activity-Content-Main-TextBlock-Container').width() - deco1WideWidthShrink;
						//console.log("fee");
					}else{
						//console.log("b = " + subSequenceDeco1Width);
						deco1Width = $('#CET-Activity-Content-Main').width() - $('.CET-Activity-Content-Main-MediaBlock').width() - deco1NarrowWidthShrink;
						//console.log( $('#CET-SubSequence-Content-Main').width() + "---" + $('.CET-SubSequence-Content-Main-MediaBlock').width() + "---" + subSequenceDeco1NarrowWidthShrink );
					}
				}else if( currentBasePage_Content_TextStyle == "PageWidth" ){
					deco1Width = $('.CET-Activity-Content-Main-TextBlock-Container').width() - deco1WideWidthShrink;
				}
				/*
				if( $('.CET-Activity-Content-Main-TextBlock-Container').height() >= ( $('.CET-Activity-Content-Main-MediaBlock').height() + 20 )  ){
					deco1Width = $('.CET-Activity-Content-Main-TextBlock-Container').width() - deco1WideWidthShrink;
				}else{
					deco1Width = $('#CET-Activity-Content-Main').width() - $('.CET-Activity-Content-Main-MediaBlock').width() - deco1NarrowWidthShrink;
				}
				*/
			}
			$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css( 'width', deco1Width + "px" );
			singleMediaSizer('Image', mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageDeco1Image }), "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
			//singleMediaSizer('Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentBasePage_Content_PageDeco1Image, "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
		}
	}
	
	var paperW;
	if(lightBoxDialog_Level3_EngagedContentType == "about"){
		var authorBlockCount = 0;
		$('.authorInfo .authorBlock').each(function(){
			var authorDataObjLen = 0;
			if(currentCETActivity_AuthorDataArray[authorBlockCount].authorPortraitFileName != null && currentCETActivity_AuthorDataArray[authorBlockCount].authorPortraitFileName != "" && currentCETActivity_AuthorDataArray[authorBlockCount].authorPortraitFileName != undefined){
				singleMediaSizer( 'Image', mediaPathConstructor({ 'mediaFileName' : currentCETActivity_AuthorDataArray[authorBlockCount].authorPortraitFileName }), "About", $(this).find('.authorBioCardPortraitImage') );
				//singleMediaSizer( 'Image', CETActivityContentPath + '/' + CETActivityID + '/' + CETActivityVersion + '/media/' +  currentCETActivity_AuthorDataArray[authorBlockCount].authorPortraitFileName, "About", $(this).find('.authorBioCardPortraitImage') );
			}
			authorBlockCount++;
		});
	}
	/*
	if(lightBoxDialog_Level3_EngagedContentType == "resources"){
		maximizah('resources');
		paperW = $('.subPageContentType_resources').outerWidth(true);
		$('#resourcesNoteClip').css('width', paperW + 'px');
	}
	*/
	if(lightBoxDialog_Level3_EngagedContentType == "clipboard"){
		maximizah('clipboard');
		paperW = $('.subPageContentType_Clipboard').outerWidth(true);
		//var clipZ = $('#clipboardClipContainer').zIndex();
		var clipZ = $('#clipboardClipContainer').css( "z-index" );
		$('.lightBoxDialog_Level3_TopNav_CloseContainer').css('z-index', clipZ + 1);
	}
	/*
	if(lightBoxDialog_Level3_EngagedContentType == "notepad"){
		paperW = $('.subPageContentType_Notepad').outerWidth(true);
    	$('#notepadSpiralStripContainer').css('width', paperW + 'px');
    	$('.lightBoxDialog_Level3_Main_OuterContainer').css('background-color', '#9A998E');
		var spiralStripPreAndPostW = $('#notepadSpiralStripPre').width();
        $('#notepadSpiralStrip').css('width', ((paperW - spiralStripPreAndPostW) + 1) + 'px'); // until css can be worked out, this sizes the h width of the strip between bookends
	}
	*/
	//$('#CET-Activity-Content-Title-Bar').css( 'top', ( $('#CET-Activity-Header').outerHeight(true) + 4 ) + 'px' ); // why extra needed?
	$('#CET-Activity-Content-Title-Bar').css( 'top', ( $('#CET-Activity-Header').outerHeight(true) ) + 'px' ); // why extra needed?
	$('#CET-Activity-Content').css( 'margin-top', $('#CET-Activity-Content-Title-Bar').outerHeight(true) + 'px' );
	
	//var combineContentBlocks = 0;
	//combineContentBlocks += $('#CET-Activity-Content-Main').outerHeight(true);
	//combineContentBlocks += $('#CET-Activity-Content-MainSandbox').outerHeight(true);
	//combineContentBlocks += $('#CET-Activity-Content-Assessment').outerHeight(true);
	
	//$('#CET-Activity-Content-InnerWrap').css( 'height', combineContentBlocks + 'px' );
	
	//$('#CET-Activity-Content').css( 'overflow-y', "scroll" );
	
	//$('#CET-Activity-Container').css( 'height', window.innerHeight + 'px' );
	
	newOrientationChange = false;
	
	//console.log( "resizer postAction = " + postAction );
	if( postAction != undefined && postAction != "" ){
		if( postAction == "HideWaitCover" ){
			//console.log( "resizer postAction exists = HideWaitCover" );
			//console.log( "waitCover animstate = " + $( ".waitCover" ).attr( "data-animState" ) );
			if( $( ".waitCover" ).attr( "data-animState" ) == "Launched" ||
				$( ".waitCover" ).attr( "data-animState" ) == "Launching" ){
				//console.log( "resizer postAction DO HideWaitCover" );
				waitCoverController({ 'coverAction' : "Hide" });
			}
		}
	}
	
	/*
	if( context.postAction == "HideWaitCover" ){
		console.log("Resizer Post Action = Hide Wait Cover!");
		waitCoverController({ 'coverAction' : "Hide" });
	}
	*/
	
	///$('html').scrollTop = 0;
	//$('body').scrollTop = 0;
	
}
/*
// ! F.Core.Video.Resizer proportional ---
function sizeVimeoVideo(){
	allVideos = $("iframe[src^='" + vimeoHTTP + "://player.vimeo.com'], iframe[src^='" + youtubeHTTP + "://www.youtube.com'], object, embed");
	videoFluidBox = $("#videoLoadBox");
	allVideos.each(function(){
		$(this)
		    // jQuery .data does not work on object/embed elements
			.attr('data-aspectRatio', this.height / this.width)
			.removeAttr('height')
			.removeAttr('width');
	});
	maximizerDelayRelay();
}
*/

// ! F.HTML5 video player loaded metadata ---
$(document).on( "loadedmetadata" , ".plyr" , function(event){
	html5VideoData.metaDataLoaded = 		true;
	maximizeCETActivityContentHeight();
});

// ! F.Core.Video.Resizer proportional ---
function sizeAVWindow(){ // sizeVimeoVideo(){
	html5VideoData.allVideos = $( "iframe[src^='" + html5VideoData.vimeoHTTP + "://player.vimeo.com'] , iframe[src^='" + html5VideoData.youtubeHTTP + "://www.youtube.com'] , object , embed , video" );
	html5VideoData.videoFluidBox = $("#videoLoadBox");
	html5VideoData.allVideos.each(function(){
		$(this).attr( 'data-aspectRatio', this.height / this.width );
		$(this).removeAttr('height')
		$(this).removeAttr('width');
	});
	 switch( lightBoxViewerTool ){
		case "video-vimeo-basic" :
			//console.log("size av window vimeo");
			$("#videoLoadBox iframe").fitVids();
			//$("#videoLoadBox iframe").attr( 'data-aspectRatio', this.height / this.width );
			//$("#videoLoadBox iframe").attr( 'data-aspectRatio' , "0.5625" ); // force 16:9 ratio otherwise is NaN
			//$("#videoLoadBox iframe").removeAttr('height')
			//$("#videoLoadBox iframe").removeAttr('width');
		break;
		case "video-youtube-basic" :  // fix is for youtube, but apply to vimeo too?
		//case "video-html-basic" :
			//$("#videoLoadBox").fitVids(); // not working well for youtube?
		break;
		case "video-html-basic" :
			$("#videoLoadBox").width( '100%' );
		break;
	}
	maximizeCETActivityContentHeight();
}

// ! F.Core.Grid.Build for single group ---
function mediaGridBuilder( context ){
	
	var groupIncrement = 		context.groupIncrement;
	var gridCount = 			context.gridCount;
	var dataPool = 				context.dataPool;
	
	//console.log( "mgb datapool = " + dataPool );
	
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error 412 precondition failed (code?)
	var mediaGridUDAGroup = "";
	var mediaGridLabel = "";
	var mediaGridGroupLabel = "";
	switch( dataPool ){
	    case "main": 
	    	mediaGridUDAGroup = "MediaGrid-Main";
	    	mediaGridLabel = langPack.screenreader.stepBase.stepMediaGrid;
	    break;
	    case "subSequence-main": 
	    	mediaGridUDAGroup = "MediaGrid-SubSeqMain";
	    	mediaGridLabel = langPack.screenreader.subSequence.subSeqPageMediaGrid;
	    break;
	    case "clipboard": 
	    	mediaGridUDAGroup = "MediaGrid-Clipboard";
	    	//mediaGridGroupLabel = "Clipboard Item Group Label: <span class='gridGroupLabelAccess accessViz'></span>";
	    	mediaGridLabel = langPack.screenreader.clipboard.gridGroup;
	    break;
	    case "assessment": 
	    	mediaGridUDAGroup = "MediaGrid-Assessment";
	    	mediaGridLabel = langPack.screenreader.stepBase.stepAssessmentGrid;
	    break;
	}
	//var gridBoxBuild = 			'<div class="mediaGridContainer focalItem UDArrowGroup" data-UDArrowGroup="' + mediaGridUDAGroup + '" tabindex="0" aria-label="' + mediaGridGroupLabel + 'Media Grid : Use space or return to enter grid, then use up or down arrow keys to cycle grid items and space or return to launch the selected grid item.">';
	var gridBoxBuild = 			'<div class="mediaGridContainer focalItem UDArrowGroup" data-UDArrowGroup="' + mediaGridUDAGroup + '" tabindex="0" aria-label="' + mediaGridLabel +'">';
	var mediaThumbFile;
	var mediaLaunchType;
	var mediaLaunchVariant;
	var mediaCaption;
	var launchableItem = false;
	var gridDataParseCountStart = 0;
	if(dataPool == "resources" || dataPool == "clipboard"){
	    gridDataParseCountStart = 1; // skip first element in each group for clipboard, as this is the group label
    }
	for(var j = gridDataParseCountStart ; j < gridCount ; j++){ // each grid item in the current group pass, skipping first element in group (3, 2)
		if(dataPool == "resources" || dataPool == "clipboard"){
		    //mediaThumbFile = 	clipboardGridStackArray[groupIncrement][j][1];
		    //mediaLaunchType = 	clipboardGridStackArray[groupIncrement][j][0];
		    //mediaCaption = 		clipboardGridStackArray[groupIncrement][j][3];
		    launchableItem = true;
		    mediaThumbFile = 			clipboardGridStackArray[groupIncrement][j].displayFile; //clipboardGridStackArray[groupIncrement][j][2];
		    mediaLaunchType = 	clipboardGridStackArray[groupIncrement][j].launchMediaType; //clipboardGridStackArray[groupIncrement]
		    mediaLaunchVariant = 	clipboardGridStackArray[groupIncrement][j].launchMediaVariant; //[j][1];
		    mediaCaption = 				clipboardGridStackArray[groupIncrement][j].caption; //clipboardGridStackArray[groupIncrement][j][4];
		    
		    mediaDescriptionDisplay =		clipboardGridStackArray[groupIncrement][j].descriptionDisplay; // ADA long description
		    mediaDescriptionLaunched = 		clipboardGridStackArray[groupIncrement][j].descriptionLaunched; // ADA long description
		    
	    }else if(dataPool == "main"){
	    	//console.log("waaa --- " + currentBasePage_Content_PageMedia_MainGrid[j].mediaFile_Display);
		    mediaThumbFile = 				currentBasePage_Content_PageMedia_MainGrid[j].mediaFile_Display;
		    //if( currentBasePage_Content_PageMediaStyle == "subSequenceLauncherGrid" ){
		    //if(pageMediaStyle == "subSequenceLauncherGrid"){
			    //mediaLaunchType = 	"SubSequence";
		    //}else{
			    mediaLaunchType = 		currentBasePage_Content_PageMedia_MainGrid[j].mediaType;
			    mediaLaunchVariant = 	currentBasePage_Content_PageMedia_MainGrid[j].mediaVariant;
		    //}
		    mediaCaption = 					currentBasePage_Content_PageMedia_MainGrid[j].mediaCaption;
		    
		    mediaDescriptionDisplay =		currentBasePage_Content_PageMedia_MainGrid[j].descriptionDisplay; // ADA long description
		    mediaDescriptionLaunched = 		currentBasePage_Content_PageMedia_MainGrid[j].descriptionLaunched; // ADA long description
		    
		    //if( currentBasePage_Assessment_OutputList[j].outputMedia_Launched != undefined && 
		    if( currentBasePage_Content_PageMedia_MainGrid[j].mediaFile_Launched != undefined && 
		    	currentBasePage_Content_PageMedia_MainGrid[j].mediaFile_Launched.length > 0 || 
		    	mediaLaunchType == "SubSequence" ){
			    launchableItem = true;
		    }else{
			    launchableItem = false;
		    }
		    //console.log(mediaThumbFile);
	    }else if(dataPool == "subSequence-main"){
	    	//console.log("waaa --- " + currentBasePage_Content_PageMedia_MainGrid[j].mediaFile_Display);
		    mediaThumbFile = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaFile_Display;
		    //if( currentBasePage_Content_PageMediaStyle == "subSequenceLauncherGrid" ){
		    //if(pageMediaStyle == "subSequenceLauncherGrid"){
			    //mediaLaunchType = 	"SubSequence";
		    //}else{
			    mediaLaunchType = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaType;
			    mediaLaunchVariant = 	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaVariant;
		    //}
		    mediaCaption = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaCaption;
		    
		    mediaDescriptionDisplay =		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaDescriptionDisplay; // ADA long description
		    mediaDescriptionLaunched = 		currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaDescriptionLaunched; // ADA long description
		    
			if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[j].mediaFile_Launched.length > 0 ){
			    launchableItem = true;
		    }else{
			    launchableItem = false;
		    }
		    //console.log(mediaThumbFile);
	    }else if(dataPool == "assessment"){
	    
			/*
								
			// store output media grid display image
			assessmentChoiceObjectData.outputMedia_Display = $(this).find("nodeAssessment_OutputMediaFile_Display").text();
			
			// store output media grid launched file
			assessmentChoiceObjectData.outputMedia_Launched = $(this).find("nodeAssessment_OutputMediaFile_Launched").text();
			
			*/	    
			
			launchableItem = false;
			
			mediaThumbFile = 			currentBasePage_Assessment_OutputList[j].outputMedia_Display;
			mediaLaunchType = 		currentBasePage_Assessment_OutputList[j].mediaLaunchType;
			mediaLaunchVariant = 	currentBasePage_Assessment_OutputList[j].mediaLaunchVariant;
			mediaCaption = 				currentBasePage_Assessment_OutputList[j].outputMedia_Caption;
			
			mediaDescriptionDisplay =		currentBasePage_Assessment_OutputList[j].outputMedia_DescriptionDisplay; // ADA long description
		    mediaDescriptionLaunched = 		currentBasePage_Assessment_OutputList[j].outputMedia_DescriptionLaunched; // ADA long description
			
			if( mediaCaption == undefined ){
				mediaCaption = "";
			}
			
			if(currentBasePage_Assessment_OutputList[j].outputMedia_Launched != undefined && 
				currentBasePage_Assessment_OutputList[j].outputMedia_Launched != '' && 
				currentBasePage_Assessment_OutputList[j].outputMedia_Launched != null){
				launchableItem = true;
			}
			
		    //mediaThumbFile = 	assessmentGridArray[j][1];
		    //mediaLaunchType = 	assessmentGridArray[j][0];
		    //mediaCaption = 		assessmentGridArray[j][3];
	    }
	    
	    var mediaGridFirst = "";
	    var mediaGridLast = "";
	    if( j == gridDataParseCountStart ){
		    mediaGridFirst = "mediaGridItemFirst ";
	    }
	    if( j == gridCount - 1 ){
		    mediaGridLast = "mediaGridItemLast ";
	    }
	    
	    //console.log( "mlt = " + mediaLaunchType );
	    
	    var gridLabeling = "";
	    var launcherDescriptionType = "";
	    var mediaCaptionLabel = "";
	    switch( dataPool ){
		    case "clipboard" : 
		    	gridLabeling = langPack.screenreader.clipboard.gridItemCommonStart; // "Clipboard Grid ";
		    	mediaCaptionLabel = langPack.screenreader.clipboard.gridItemCaption;
		    	
		    	//console.log( "mlt = " + mediaLaunchType );
		    	
		    	switch( mediaLaunchType ){
				    case "Image" :
				    case "Still Image" :
				    	launcherDescriptionType = langPack.screenreader.clipboard.gridItemImageLaunch; // "Image";
				    break;
				    case "Av Media" :
				    	launcherDescriptionType = langPack.screenreader.clipboard.gridItemVideoLaunch; //"Video";
				    break;
				    case "Media Link" :
				    	switch( mediaLaunchType ){
					    	case "vimeo" : 
					    		launcherDescriptionType = langPack.screenreader.clipboard.gridItemVideoLaunch; //"Video";
					    	break;	
					    	default : 
					    		launcherDescriptionType = langPack.screenreader.clipboard.gridItemVideoLaunch; //"Video";
					    	break;	
					    }
				    break;
				    case "Document" :
				    case "Rich Document" :
				    	launcherDescriptionType = langPack.screenreader.clipboard.gridItemPdfLaunch; //"PDF";
				    break;
			    }
		    break;
		    case "main" : 
		    	gridLabeling = langPack.screenreader.stepBase.stepMediaGridItemCommonStart; // "Media Grid ";
		    	mediaCaptionLabel = langPack.screenreader.stepBase.stepMediaLaunchCaption;
		    	switch( mediaLaunchType ){
				    case "Image" :
				    case "Still Image" :
				    	launcherDescriptionType = langPack.screenreader.stepBase.stepMediaGridItemImage; // "Image";
				    break;
				    case "Av Media" :
				    	launcherDescriptionType = langPack.screenreader.stepBase.stepMediaGridItemVideo; //"Video";
				    break;
				    case "Document" :
				    case "Rich Document" :
				    	launcherDescriptionType = langPack.screenreader.stepBase.stepMediaGridItemPdf; //"PDF";
				    break;
				    case "SubSequence" :
				    	launcherDescriptionType = langPack.screenreader.stepBase.stepMediaGridItemSubSequence; //"SubSequence";
				    break;
			    }
		    break;
		    case "subSequence-main" : 
		    	gridLabeling = langPack.screenreader.subSequence.subSeqPageMediaGridItemCommonStart; // "SubSequence Media Grid ";
		    	mediaCaptionLabel = langPack.screenreader.subSequence.subSeqPageMediaLaunchCaption;
		    	switch( mediaLaunchType ){
				    case "Image" :
				    case "Still Image" :
				    	launcherDescriptionType = langPack.screenreader.subSequence.subSeqPageMediaGridItemImage; // "Image";
				    break;
				    case "Av Media" :
				    	launcherDescriptionType = langPack.screenreader.subSequence.subSeqPageMediaGridItemVideo; //"Video";
				    break;
				    case "Document" :
				    case "Rich Document" :
				    	launcherDescriptionType = langPack.screenreader.subSequence.subSeqPageMediaGridItemPdf; //"PDF";
				    break;
			    }
		    break;
		    case "assessment" : // not yet prepared
		    	gridLabeling = langPack.screenreader.stepBase.stepMediaGrid; // "Step Assessment Media Grid ";
		    break;
	    }
	    
	    
	    if( dataPool == "assessment" ){
		    if( currentBasePage_Assessment_Type == "Single Answer - Multiple Choice" ){
			    gridBoxBuild += 					'<div class="mediaGridBoxOuter arrowNavUD ' + mediaGridFirst + mediaGridLast + 'focalItem" tabindex="0" data-samcChoice="1-' + currentBasePage_Assessment_OutputList[j].choiceID + '">';
		    }
		    if( currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice" ){
			    gridBoxBuild += 					'<div class="mediaGridBoxOuter arrowNavUD ' + mediaGridFirst + mediaGridLast + 'focalItem" tabindex="0" data-mamcChoice="1-' + currentBasePage_Assessment_OutputList[j].choiceID + '">';
		    }
		    if( currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
			    gridBoxBuild += 					'<div class="mediaGridBoxOuter arrowNavUD ' + mediaGridFirst + mediaGridLast + 'focalItem" tabindex="0" data-amamcChoice="1-' + currentBasePage_Assessment_OutputList[j].choiceID + '">';
		    }
		    
	    }else{
		    gridBoxBuild += 						'<div class="mediaGridBoxOuter arrowNavUD ' + mediaGridFirst + mediaGridLast + 'focalItem" tabindex="0">';
	    }
	    
	    //gridBoxBuild += 							'<div class="mediaGridBoxOuter arrowNavUD focalItem" tabindex="0">';
	    //gridBoxBuild +=      							'<div class="mediaGridBox"><span class="accessViz">' + gridLabeling + ' Item : ' + launcherDescriptionType + ' Launcher : </span>';
	    
	    var addDisplayDescription = "";
	    if( mediaDescriptionDisplay != undefined && mediaDescriptionDisplay != "" && mediaDescriptionDisplay != null ){
		    addDisplayDescription = " : " + langPack.screenreader.clipboard.gridItemDesc + " : " + mediaDescriptionDisplay + " : ";
	    }
	    //var addLaunchedDescription = "";
	    //if( mediaDescriptionLaunched != undefined && mediaDescriptionLaunched != "" && mediaDescriptionLaunched != null ){
		    //addLaunchedDescription = mediaDescriptionLaunched;
	    //}
	    
	    gridBoxBuild +=      							'<div class="mediaGridBox"><span class="accessViz">' + gridLabeling + launcherDescriptionType + '</span>';
	    //gridBoxBuild +=        							'<div class="mediaGridBoxInner" style="background: url(\'' + mediaGridThumbPath +  mediaThumbFile + '\');">';
	    //singleMediaSizer(currentBasePage_Content_PageMediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMediaList[0].mediaFile_Display);
	    //var gridMediaURLString = 						'../../content/' + CETActivityID + '/media/' + mediaThumbFile;
	     var gridMediaURLString = 						mediaPathConstructor({ mediaFileName : mediaThumbFile });
	    //var gridMediaURLString = 						CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + mediaThumbFile;
	    //gridBoxBuild +=        							'<div class="mediaGridBoxInner" style="background: url(\"../../content/' + CETActivityID + '/media/' + mediaThumbFile + '\");">';
	    //gridBoxBuild +=        							'<div class="mediaGridBoxInner" style="background: url(' + gridMediaURLString + ');">';
	    //if(mediaLaunchType == "Image"){
	    if(launchableItem){
	    	
	    	gridBoxBuild +=        							'<div class="mediaGridBoxInner launchable" style="background: url(' + gridMediaURLString + dummyTStamp() + ');">';	
	    	
	    	//console.log( "mediaLaunchType = " + mediaLaunchType );
	    	//console.log( "mediaLaunchVariant = " + mediaLaunchVariant );
	    	
		    if( mediaLaunchType == "Image" || 
		    	mediaLaunchType == "Still Image" ){
			    if( mediaLaunchVariant == "Basic" || mediaLaunchVariant == "jpg" || mediaLaunchVariant == "png" || mediaLaunchVariant == "gif" ){
					gridBoxBuild += 									'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
					gridBoxBuild += 										'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_basic + '"></div>';
					gridBoxBuild += 									'</div>';
				}
			}
		    //if(mediaLaunchType == "Video"){
		    //if( mediaLaunchType == "Video" && mediaLaunchVariant == "Vimeo"){
			if( mediaLaunchType == "AV Media" ||
				mediaLaunchType == "Av Media" || 
				mediaLaunchType == "Media Link" ){
				switch( mediaLaunchVariant ){
					case "Vimeo" : 
					case "vimeo" : 
					case "Youtube" : 
					case "YouTube" : 
					case "youtube" : 
					case "HTML5Video" : 
					case "html5video" : 
						 gridBoxBuild += 							'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
						 gridBoxBuild += 								'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_video + '"></div>';
						 gridBoxBuild += 							'</div>';
					break;
				}
		    }
		    if( mediaLaunchType == "Document" || mediaLaunchType == "Rich Document" ){
			    if( mediaLaunchVariant == "PDF" || mediaLaunchVariant == "pdf" ){
				    gridBoxBuild += 									'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
					gridBoxBuild += 										'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_document + '"></div>';
					gridBoxBuild += 									'</div>';
				}
		    }
		    if( mediaLaunchType == "SubSequence" && mediaLaunchVariant == "Basic" ){
			    gridBoxBuild += 									'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
				gridBoxBuild += 										'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_subsequence + '"></div>';
				gridBoxBuild += 									'</div>';
		    }
	    }else{
		     gridBoxBuild +=        								'<div class="mediaGridBoxInner" style="background: url(' + gridMediaURLString + dummyTStamp() + ');">';
		    
	    }
	    gridBoxBuild +=        								'</div>'; // close media grid box inner
	    gridBoxBuild +=     			 				'</div>'; // close media grid box
		gridBoxBuild +=      							'<div class="mediaGridCaptionBox">';
		
		if(dataPool == "assessment"){
			gridBoxBuild +=        							'<div class="mediaGridCaptionBoxInner">';
		    gridBoxBuild +=        								'<div class="CET-Choice-Text"><span class="accessViz">Choice Text : </span>' + mediaCaption + '</div>';
		    gridBoxBuild +=        							'</div>';
	    }else{
		    if( mediaCaption != undefined && mediaCaption != "" && mediaCaption != null){
				gridBoxBuild +=        						'<div class="mediaGridCaptionBoxInner"><span class="accessViz">'+ mediaCaptionLabel + '</span>' + mediaCaption + '</div>';
			}
	    }
	    
	    gridBoxBuild +=      							'</div>';
	    
	    //var addDisplayDescription = "";
	    if( mediaDescriptionDisplay != undefined && mediaDescriptionDisplay != "" && mediaDescriptionDisplay != null ){
		    //addDisplayDescription = " : " + langPack.screenreader.clipboard.gridItemDesc + " : " + mediaDescriptionDisplay + " : ";
		    gridBoxBuild +=        						'<div class="mediaGridAccessDescription accessViz"> : ' + langPack.screenreader.clipboard.gridItemDesc + mediaDescriptionDisplay + '</div>';
	    }
	    
	    var gridLaunch = "";
	    switch( dataPool ){
		    case "clipboard" : 
		    	gridLaunch = langPack.screenreader.clipboard.gridItemLaunch;
		    break;
		    case "main" : 
		    	gridLaunch = langPack.screenreader.stepBase.gridItemLaunch;
		    break;
		    case "subSequence-main" : 
		    	gridLaunch = langPack.screenreader.subSequence.gridItemLaunch;
		    break;
		    case "assessment" : 
		    	gridLaunch = langPack.screenreader.stepBase.gridItemToggle;
		    break;
	    }
	    
	    gridBoxBuild +=  							'<span class="accessViz">' + gridLaunch + '</span>';
	    
	    gridBoxBuild +=    						'</div>'; // close media grid box outer shell
	}
	gridBoxBuild +=    						'</div>'; // close media grid container
	return gridBoxBuild;
}

// ! F.Core.Grid.Apply cover style to grid thumbs ---
function gridBoxThumbFillBox(){
	// this (or adding to in-line html) seems the only way to apply the 'contain' style, why?
    // tried adding a class combining all 4, tried to include in boxInner class, but these methods don't work
    $('.mediaGridBoxInner').css('-webkit-background-size', 'cover');
    $('.mediaGridBoxInner').css('-moz-background-size', 'cover');
    $('.mediaGridBoxInner').css('-o-background-size', 'cover');
    $('.mediaGridBoxInner').css('background-size', 'cover');
    $('.mediaGridBoxInner').css('background-position', 'center center');
}
// ! F.Core.Grid.Update box shape and style on captioned boxes ---
function gridBoxThumbCaptionRestyle(groupIncrement, gridCount, dataPool){
	var gridDataParseCountStart = 0;
	if(dataPool == "resources" || dataPool == "clipboard"){
	    gridDataParseCountStart = 1; // skip first element in each group for clipboard, as this is the group label
    }
	for(var k = gridDataParseCountStart ; k < gridCount ; k++){
		if(dataPool == "resources"){
		    //if(clipboardGridStackArray[groupIncrement][k][4].length > 0){
			if(clipboardGridStackArray[groupIncrement][k].caption.length > 0){
		    	$('.gridGroupContainer:nth-child(' + (groupIncrement + 1) + ') .mediaGridBoxOuter:nth-child(' + k + ') .mediaGridBoxInner').css('border-radius', '0.3em 0.3em 0 0');
		    }else{
		    	$('.gridGroupContainer:nth-child(' + (groupIncrement + 1)  + ') .mediaGridBoxOuter:nth-child(' + k + ')').find('.mediaGridCaptionBox').css('opacity', '0');
		    }
	    }else if(dataPool == "clipboard"){
		    //if(clipboardGridStackArray[groupIncrement][k][4].length > 0){
			if(clipboardGridStackArray[groupIncrement][k].caption.length > 0){
		    	$('.gridGroupContainer:nth-child(' + (groupIncrement + 1) + ') .mediaGridBoxOuter:nth-child(' + k + ') .mediaGridBoxInner').css('border-radius', '0.3em 0.3em 0 0');
		    }else{
		    	$('.gridGroupContainer:nth-child(' + (groupIncrement + 1)  + ') .mediaGridBoxOuter:nth-child(' + k + ')').find('.mediaGridCaptionBox').css('opacity', '0');
		    }
	    }else if(dataPool == "main"){
		    if(currentBasePage_Content_PageMedia_MainGrid[k].mediaCaption.length > 0){
			    $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(' + (k + 1) + ') .mediaGridBoxInner').css('border-radius', '0.3em 0.3em 0 0');
		    }else{
			     $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(' + (k + 1) + ')').find('.mediaGridCaptionBox').css('opacity', '0');
		    }
	    }else if(dataPool == "subSequence-main"){
		    if(currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid[k].mediaCaption.length > 0){
			    $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(' + (k + 1) + ') .mediaGridBoxInner').css('border-radius', '0.3em 0.3em 0 0');
		    }else{
			     $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(' + (k + 1) + ')').find('.mediaGridCaptionBox').css('opacity', '0');
		    }
	    }else if(dataPool == "assessment"){
		    //if(assessmentGridArray[k][3].length > 0){
		    if(currentBasePage_Assessment_OutputList[k].outputStatus != undefined && 
		   	 currentBasePage_Assessment_OutputList[k].outputStatus != "" && 
		   	 currentBasePage_Assessment_OutputList[k].outputStatus != null){
			    $('#CET-Activity-Content-Assessment .mediaGridBoxOuter:nth-child(' + (k + 1) + ') .mediaGridBoxInner').css('border-radius', '0.3em 0.3em 0 0');
		    }else{
			     $('#CET-Activity-Content-Assessment .mediaGridBoxOuter:nth-child(' + (k + 1) + ')').find('.mediaGridCaptionBox').css('opacity', '0');
		    }
	    }
    }
}
// ! F.Core.Grid.Content resizing controller  ---
function maximizah(actionContext){
	var thumbBoxW;
	if(actionContext == "resources"){
		for (var p = 0 ; p < clipboardGridStackArray.length ; p++) { // each grid group (2)
			thumbBoxW = $('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter:nth-child(1) .mediaGridBoxInner').width() + 6; // number matches box border/shadow value?
			//console.log("tbw - " + thumbBoxW);
			for (var r = 1 ; r < clipboardGridStackArray[p].length ; r++) { // each grid item in the current group pass, skipping first element in group (3, 2)
	        	$('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter:nth-child(' + r + ') .mediaGridCaptionBox').css('width', thumbBoxW + 'px');
	        }
	       $('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter .mediaGridCaptionBox').responsiveEqualHeightGrid();
	    }
	}else if(actionContext == "clipboard"){
		for (var p = 0 ; p < clipboardGridStackArray.length ; p++) { // each grid group (2)
			thumbBoxW = $('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter:nth-child(1) .mediaGridBoxInner').width() + 6; // number matches box border/shadow value?
			//console.log("tbw - " + thumbBoxW);
			for (var r = 1 ; r < clipboardGridStackArray[p].length ; r++) { // each grid item in the current group pass, skipping first element in group (3, 2)
	        	$('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter:nth-child(' + r + ') .mediaGridCaptionBox').css('width', thumbBoxW + 'px');
	        }
	       $('.gridGroupContainer:nth-child(' + (p + 1) + ') .mediaGridBoxOuter .mediaGridCaptionBox').responsiveEqualHeightGrid();
	    }
	}else if(actionContext == "main"){
		thumbBoxW = $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(1) .mediaGridBoxInner').width() + 6; // number matches box border/shadow value?
	    for (var k = 1; k <= $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter').length; k++) {
	        $('.CET-Activity-Content-Main-MediaBlock .mediaGridBoxOuter:nth-child(' + k + ') .mediaGridCaptionBox').css('width', thumbBoxW + 'px');
	    }
	    $('.CET-Activity-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter .mediaGridCaptionBox').responsiveEqualHeightGrid();
	}else if(actionContext == "subSequence-main"){
		thumbBoxW = $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter:nth-child(1) .mediaGridBoxInner').width() + 6; // number matches box border/shadow value?
	    for (var k = 1; k <= $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter').length; k++) {
	        $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridBoxOuter:nth-child(' + k + ') .mediaGridCaptionBox').css('width', thumbBoxW + 'px');
	    }
	    $('.CET-SubSequence-Content-Main-MediaBlock .mediaGridContainer .mediaGridBoxOuter .mediaGridCaptionBox').responsiveEqualHeightGrid();
	}else if(actionContext == "assessment"){
		thumbBoxW = $('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter:nth-child(1) .mediaGridBoxInner').width() + 6; // number matches box border/shadow value?
	    for (var k = 1; k <= $('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter').length; k++) {
	        $('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter:nth-child(' + k + ') .mediaGridCaptionBox').css('width', thumbBoxW + 'px');
	    }
	    $('#CET-Activity-Content-Assessment-Main .mediaGridBoxOuter .mediaGridCaptionBox').responsiveEqualHeightGrid();
	}
}

/*
var enlargementItemPage_Nav_CurrentPage = 1;
var enlargementItemPage_Nav_TotalPages;
var enlargementItemPage_Nav_MidNumRange = 3;
var enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page

 lightBoxDialog_Level4_TopNav += 				"<div class='lightBoxDialog_Level4_TopNav_enlargementItemPageNavContainer'>";
lightBoxDialog_Level4_TopNav += 					"<div id='enlargementItemPageNav-Strip'>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PrevBut'><</div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NumBox enlargementItemPageNav-NumBox-HardFirst'></div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PreGap'>...</div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-MidGroup'></div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-PostGap'>...</div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NumBox enlargementItemPageNav-NumBox-HardLast'></div>";
lightBoxDialog_Level4_TopNav += 						"<div class='enlargementItemPageNav-NextBut'>></div>";
lightBoxDialog_Level4_TopNav += 					"</div>";
*/

// ! F.Core.Media.Single media item size update ---
function singleMediaSizer(mediaKind, displayFile, contentMode, mediaContainer){
	
	//console.log("mk --- " + mediaKind);
	//var imageContainerObjectParent;
	var imageContainerObject;
	var imageObject;
	
	var singleMediaBGImageNativeWidth;
	var singleMediaBGImageNativeHeight;
	var nativeWHRatio;
	var currentMediaWidth;
	var imageBoxW;
	var currentMediaHeight;
	var mediaLauncherOverlayWidth;
	
	switch( contentMode ){
		case "Main" :
			imageObject = 										$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image');
			singleMediaBGImageNativeWidth = 			currentBasePage_SingleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentBasePage_SingleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
		    currentMediaWidth = 	 							imageObject.width();
		    imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
		    if( currentBasePage_Content_PageMedia_Main.length > 0 ){
			    if(currentBasePage_Content_PageMedia_Main[0].mediaCaption != "" && currentBasePage_Content_PageMedia_Main[0].mediaCaption != null && currentBasePage_Content_PageMedia_Main[0].mediaCaption != undefined){
					imageBoxW = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').width() + 6; // number matches box border/shadow value?
					$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('width', imageBoxW + 'px');
				}
		    }
		    currentMediaHeight = imageObject.height();
		    if( mediaKind == "singleMedia-VimeoLauncher" || mediaKind == "singleMedia-YoutubeLauncher" || mediaKind == "singleMedia-HTML5VideoLauncher" ){
		         // center placement of icon over video placeholder
				 mediaLauncherOverlayWidth = $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').width();
				 $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('top', ((currentMediaHeight / 2) - (mediaLauncherOverlayWidth / 2)));
				 $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('left', ((currentMediaWidth / 2) - (mediaLauncherOverlayWidth / 2)));
		    }else{
			    $('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('top', '0px');
				$('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('left', '0px');
		    }
		break;
		case "SubSequence-Main" :
			imageObject = 										$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image');
			singleMediaBGImageNativeWidth = 			currentSubSequencePage_Content_DataObject.content.singleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentSubSequencePage_Content_DataObject.content.singleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
		    currentMediaWidth = 	 							imageObject.width();
		    imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
		    if(currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaCaption != "" && 
		    	currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaCaption != null && 
		    	currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaCaption != undefined){
				imageBoxW = $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').width() + 6; // number matches box border/shadow value?
					$('.CET-SubSequence-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('width', imageBoxW + 'px');
			}
		    currentMediaHeight = imageObject.height();
		    if( mediaKind == "singleMedia-VimeoLauncher" || mediaKind == "singleMedia-YoutubeLauncher" || mediaKind == "singleMedia-HTML5VideoLauncher" ){
		         // center placement of icon over video placeholder
				 mediaLauncherOverlayWidth = $('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').width();
				 $('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('top', ((currentMediaHeight / 2) - (mediaLauncherOverlayWidth / 2)));
				 $('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('left', ((currentMediaWidth / 2) - (mediaLauncherOverlayWidth / 2)));
		    }else{
			    $('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('top', '0px');
				$('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Container').css('left', '0px');
		    }
		break;
		case "About" :
			//imageContainerObjectParent = 				$('.authorBioCard');
			//imageContainerObject = 							$('.authorBioCardPortrait');
			//imageObject = 										$('.authorBioCardPortraitImage');//$('.mediaLauncher-image');
			imageObject = 										mediaContainer;//$('.mediaLauncher-image');
			//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
			//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
			singleMediaBGImageNativeWidth = 			currentAboutPage_SingleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentAboutPage_SingleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
			currentMediaWidth = 	 							imageObject.width();
			imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
			// caption stuff?  probably
			/*
			//if( currentBasePage_Content_PageMedia_Main.length  == 1 ){
				//if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1" ){
					var singleFeedbackMediaCaptionBuild = '<div class="singleFeedbackMediaDisplayCaptionBox">';
					singleFeedbackMediaCaptionBuild +=     	'<div class="singleFeedbackMediaDisplayCaptionBoxInner">' + feedbackMediaCaption + '</div>';
					singleFeedbackMediaCaptionBuild += 	'</div>';
					$('#feedbackMedia').css('border-radius', '0.3em .3em 0 0');
					//$('.CET-Activity-Content-Main-MediaBlock').after(singleMediaCaptionBuild);
					$('feedbackMedia').after(singleFeedbackMediaCaptionBuild);
					// needed to place caption behind media block?
					//var mediaBoxZ = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').zIndex();
					//$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('z-index', mediaBoxZ - 1);
				//}
			//}
		}
			*/
			currentMediaHeight = imageObject.height();
			//console.log(currentMediaWidth + " --- " + currentMediaHeight);
		break;
		case "Help" :
			/*
			imageObject = 										mediaContainer;//$('.mediaLauncher-image');
			singleMediaBGImageNativeWidth = 			currentAboutPage_SingleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentAboutPage_SingleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
			currentMediaWidth = 	 							imageObject.width();
			imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
			currentMediaHeight = 							imageObject.height();
			*/
		break;
		case "Feedback" :
			// feedbackMedia
			//imageContainerObjectParent = 				$('.authorBioCard');
			//imageContainerObject = 							$('.authorBioCardPortrait');
			//imageObject = 										$('.authorBioCardPortraitImage');//$('.mediaLauncher-image');
			imageObject = 										mediaContainer;//$('.mediaLauncher-image');
			//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
			//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
			singleMediaBGImageNativeWidth = 			currentFeedbackPage_SingleMediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentFeedbackPage_SingleMediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
			console.log( "singleMediaBGImageNativeWidth = " + singleMediaBGImageNativeWidth + " -- singleMediaBGImageNativeHeight = " + singleMediaBGImageNativeHeight );
			currentMediaWidth = 	 							imageObject.width();
			console.log( "currentMediaWidth = " + currentMediaWidth + " -- nativeWHRatio = " + nativeWHRatio );
			imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
			// caption stuff?  probably
			//var feedbackImageBoxW = $('#feedbackMediaBlock').width() + 6; // number matches box border/shadow value?
			//var feedbackImageBoxW = $('#feedbackMediaBlock').width(); // number matches box border/shadow value?
			//$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
			$('#feedbackMediaBlock').css( 'width' , pageAssessmentSelectionResult.outputFeedback_MediaBlockW + "%" ); 
			if( Number(pageAssessmentSelectionResult.outputFeedback_MediaBlockW) == 100 ){
				$('#feedbackMediaBlock').css( 'margin' , "0" ); 
				$('#feedbackMediaBlock').css( 'marginBottom' , "0.6em" ); 
				$('#feedbackMediaBlock').css( 'float' , "none" ); 
				$('#CET-feedbackContent').addClass('hasMedia');
				$('#CET-feedbackContent').addClass('fullWidthMedia');
				//$('#feedbackMediaBlock').after( $('#feedbackText') );
				//$('#feedbackText').after( $('#feedbackMediaBlock') );
			}
			var feedbackImageBoxW = $('#feedbackMediaBlock').width();
			$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
			if( pageAssessmentSelectionResult.outputFeedback_ImageFraming != null && 
		      pageAssessmentSelectionResult.outputFeedback_ImageFraming != '' && 
		      pageAssessmentSelectionResult.outputFeedback_ImageFraming != undefined ){
		    	switch (pageAssessmentSelectionResult.outputFeedback_ImageFraming){
			    	case 'Clear':
						//$('#feedbackMediaBlock').css('box-shadow', 'none');
						//var feedbackImageBoxW = $('#feedbackMediaBlock').width(); // don't add the extra space added when there is an image border
						//$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
						$('.singleFeedbackMediaDisplayCaptionBox').css('left', '0px'); // don't bump to the left like normal
						$('.singleFeedbackMediaDisplayCaptionBoxInner').css('paddingTop', '0.7em'); // don't bump to the left like normal
						//console.log('ooooo');
					break;
					case 'Default':
					default:
						var feedbackImageBoxW = feedbackImageBoxW += 6; // number matches box border/shadow value?
						//var feedbackImageBoxW = $('#feedbackMediaBlock').width(); // number matches box border/shadow value?
						//$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
					break;
		    	}
	    	}
			$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
			//console.log('aaaqaaaaaa');
			currentMediaHeight = imageObject.height();
			//console.log(currentMediaWidth + " --- " + currentMediaHeight);
		break;
		case "MainDeco1" :
			imageObject = 										mediaContainer;
			singleMediaBGImageNativeWidth = 			currentBasePage_Deco1MediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentBasePage_Deco1MediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
		    currentMediaWidth = 	 							imageObject.width();
		    imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
		    //currentMediaHeight = imageObject.height();
		break;
		case "SubSequenceDeco1" :
			imageObject = 										mediaContainer;
			singleMediaBGImageNativeWidth = 			currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject.width;
		    singleMediaBGImageNativeHeight = 			currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject.height;
		    nativeWHRatio = 									singleMediaBGImageNativeWidth / singleMediaBGImageNativeHeight;
		    currentMediaWidth = 	 							imageObject.width();
		    imageObject.css('height', (currentMediaWidth / nativeWHRatio) + 'px');
		    //currentMediaHeight = imageObject.height();
		break;
	}
	//singleMedia-PDFLauncher
	//console.log(displayFile);
	//var image = new Image();
	//currentBasePage_SingleMediaImageObject.src = displayFile;
	//image.src = displayFile;
}

// ! F.Core.Media.Single media item build ---
function singleMediaBuild( mediaKind , displayFile , contentMode , mediaContainer ){
	//console.log( "smb" );
	// mediaKind -- singleMedia-VimeoLauncher / singleMedia-ImageLauncher / singleMedia-PDFLauncher
	// displayFile -- the file to place in container
	// contentMode -- Main / Feedback / About / Help
	// mediaContainer - box to place image in
	
	//singleMediaBuild( 'Image', '../../content/' + CETActivityID + '/media/' +   currentCETActivity_AuthorDataObject.authorPortraitFileName );
	
	//var URLBuild = '../../content/' + CETActivityID + '/media/' + displayFile;
	
	//var imageContainerObjectParent;
	//var imageContainerObject;
	var imageObject;
	//var imageContainerObjectPairedTextBlock;
	//var overlayContainerObject;
	//if(lightBoxDialog_Level3_EngagedContentType == "about"){
	if(contentMode == "Main"){
		//imageContainerObjectParent = 				$('.CET-Activity-Content-Main-MediaBlock');
		//imageContainerObject = 						$('.authorBioCardPortraitInner');
		//imageObject = 										$('.mediaLauncher-image');
		imageObject = 										mediaContainer;
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}else if(contentMode == "SubSequence-Main"){
		//imageContainerObjectParent = 				$('.authorBioCard');
		//imageContainerObject = 						$('.authorBioCardPortrait');
		imageObject = 										mediaContainer;//$('.authorBioCardPortraitImage');//$('.mediaLauncher-image');
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}else if(contentMode == "About"){
		//imageContainerObjectParent = 				$('.authorBioCard');
		//imageContainerObject = 						$('.authorBioCardPortrait');
		imageObject = 										mediaContainer;//$('.authorBioCardPortraitImage');//$('.mediaLauncher-image');
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}else if(contentMode == "Feedback"){
		//imageContainerObjectParent = 				$('.CET-Activity-Content-Main-MediaBlock');
		//imageContainerObject = 						$('.authorBioCardPortraitInner');
		//imageObject = 										$('.mediaLauncher-image');
		imageObject = 										mediaContainer;
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}else if(contentMode == "MainDeco1"){
		//imageContainerObjectParent = 				$('.CET-Activity-Content-Main-MediaBlock');
		//imageContainerObject = 						$('.authorBioCardPortraitInner');
		//imageObject = 										$('.mediaLauncher-image');
		imageObject = 										mediaContainer;
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}else if(contentMode == "SubSequenceDeco1"){
		//imageContainerObjectParent = 				$('.CET-Activity-Content-Main-MediaBlock');
		//imageContainerObject = 						$('.authorBioCardPortraitInner');
		//imageObject = 										$('.mediaLauncher-image');
		imageObject = 										mediaContainer;
		//imageContainerObjectPairedTextBlock = 	$('.CET-Activity-Content-Main-TextBlock-Container');
		//overlayContainerObject = 						$('.CET-MediaLauncher-MediaTypeOverlay-Container');
	}
	
	//console.log( "mediaKind = " + mediaKind );
	//console.log( "contentMode = " + contentMode );
	//console.log( "displayFile = " + displayFile );
	
	// composite
	imageObject.css('background', 'url("' + displayFile + '") no-repeat center center');
    imageObject.css('-webkit-background-size', 'cover');
    imageObject.css('-moz-background-size', 'cover');
    imageObject.css('-o-background-size', 'cover');
    imageObject.css('background-size', 'cover');
    // this section checks image dimensions for loaded bg image to apply proper scaling of image object on page
    //var image_url = $('.mediaLauncher-image').css('background-image'), image;
	var image_url = imageObject.css('background-image'), image; // remove comma image, needed?
	// Remove url() or in case of Chrome url("")
	//image_url = image_url.match(/url\([^)]+\)/)[0];
	image_url = image_url.match(/^url\("?(.+?)"?\)$/);
	//image_url = image_url.replace(/"/g,"").replace(/url\(|\)$/ig, "");
	//var singleMediaBGImageWidth;
	//var singleMediaBGImageHeight;
	
	var singleMediaImageNativeWidth;
	var singleMediaImageNativeHeight;
	
	if(image_url[1]){
	    image_url = image_url[1];
	    //var image = new Image();
	    
	    if(contentMode == "Main"){
			currentBasePage_SingleMediaImageObject = new Image();
			//image.src = image_url;
			currentBasePage_SingleMediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    //$(currentBasePage_SingleMediaImageObject).load(function(){
			$(currentBasePage_SingleMediaImageObject).on('load', function(){
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        //maximizerDelayRelay();
		    });
		}else  if(contentMode == "SubSequence-Main"){
			currentSubSequencePage_Content_DataObject.content.singleMediaImageObject = new Image();
			//image.src = image_url;
			currentSubSequencePage_Content_DataObject.content.singleMediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    $(currentSubSequencePage_Content_DataObject.content.singleMediaImageObject).on('load', function(){
		    	
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        //maximizerDelayRelay();
		    });
		}else if(contentMode == "About"){
			currentAboutPage_SingleMediaImageObject = new Image();
			//image.src = image_url;
			currentAboutPage_SingleMediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    $(currentAboutPage_SingleMediaImageObject).on('load', function(){
		    	
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        
		    }); 
		}else if(contentMode == "Feedback"){ 
			currentFeedbackPage_SingleMediaImageObject = new Image();
			//image.src = image_url;
			currentFeedbackPage_SingleMediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    //*
		    // may not need to check the null, etc. first...
		    /*
		    if(pageAssessmentSelectionResult.outputFeedback_Media_Style != null && 
		      pageAssessmentSelectionResult.outputFeedback_Media_Style != '' && 
		      pageAssessmentSelectionResult.outputFeedback_Media_Style != undefined){
			      switch (pageAssessmentSelectionResult.outputFeedback_Media_Style){
				      case 'ClearNaked':
				      	$('#feedbackMediaBlock').css('box-shadow', 'none');
				      	var feedbackImageBoxW = $('#feedbackMediaBlock').width(); // don't add the extra space added when there is an image border
					  	$('.singleFeedbackMediaDisplayCaptionBox').css('width', feedbackImageBoxW + 'px');
				      	$('.singleFeedbackMediaDisplayCaptionBox').css('left', '0px'); // don't bump to the left like normal
				      	//console.log('ooooo');
				      	break;
			      }
		      }
		      */
		    //*/
		    
		    $(currentFeedbackPage_SingleMediaImageObject).on('load', function(){
		    	console.log("loaded");
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        
		    });
		}else if(contentMode == "MainDeco1"){
			currentBasePage_Deco1MediaImageObject = new Image();
			//image.src = image_url;
			currentBasePage_Deco1MediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    $(currentBasePage_Deco1MediaImageObject).on('load', function(){
		    	//var singleMediaImageNativeWidth = 				currentBasePage_SingleMediaImageObject.width;
				//var singleMediaImageNativeHeight = 				currentBasePage_SingleMediaImageObject.height;
				singleMediaImageNativeWidth = 				currentBasePage_Deco1MediaImageObject.width;
				//singleMediaBGImageNativeHeight = 			currentBasePage_Deco1MediaImageObject.height;
				$('.CET-Activity-Content-Main-TextBlock-Accent').css('max-width', singleMediaImageNativeWidth + 'px'); // maximum width is original image width
		    	
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        
		    });
		}else if(contentMode == "SubSequenceDeco1"){
			currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject = new Image();
			//image.src = image_url;
			currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject.src = image_url;
		    // just in case it is not already loaded
		    //$(image).load(function(){
		    $(currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject).on('load', function(){
		    	//var singleMediaImageNativeWidth = 				currentBasePage_SingleMediaImageObject.width;
				//var singleMediaImageNativeHeight = 				currentBasePage_SingleMediaImageObject.height;
				singleMediaImageNativeWidth = 				currentSubSequencePage_Content_DataObject.content.Deco1MediaImageObject.width;
				//singleMediaBGImageNativeHeight = 			currentBasePage_Deco1MediaImageObject.height;
				$('.CET-SubSequence-Content-Main-TextBlock-Accent').css('max-width', singleMediaImageNativeWidth + 'px'); // maximum width is original image width
		    	
		       singleMediaSizer(mediaKind, image_url, contentMode, mediaContainer);
		       maximizeCETActivityContentHeight();
		        
		    });
		}
	}
	
	/*
		// for the accent, originally residing after the single image build sequence
		
		$('.CET-Activity-Content-Main-TextBlock-Accent').css('background', 'url("../img/accents/accent_exam.png") no-repeat center center');
	    $('.CET-Activity-Content-Main-TextBlock-Accent').css('-webkit-background-size', 'cover');
	    $('.CET-Activity-Content-Main-TextBlock-Accent').css('-moz-background-size', 'cover');
	    $('.CET-Activity-Content-Main-TextBlock-Accent').css('-o-background-size', 'cover');
	    $('.CET-Activity-Content-Main-TextBlock-Accent').css('background-size', 'cover');
	    
	    // this section checks image dimensions for loaded bg image to apply proper scaling of image object on page
	    var accent_image_url = $('.CET-Activity-Content-Main-TextBlock-Accent').css('background-image');
		accent_image_url = accent_image_url.match(/^url\("?(.+?)"?\)$/);
		var accentImageWidth;
		var accentImageHeight;
		if( accent_image_url[1]){
		     accent_image_url =  accent_image_url[1];
		    var  accent_image = new Image();
			 accent_image.src =  accent_image_url;
			
		    // just in case it is not already loaded
		    $(accent_image).load(function () {
		        accent_ImageNativeWidth = 		 accent_image.width;
		        accent_ImageNativeHeight = 		 accent_image.height;
		        var nativeWHRatio = 		accent_ImageNativeWidth / accent_ImageNativeHeight;
		        var currentMediaHeight = 	$('.CET-Activity-Content-Main-TextBlock-Accent').width();
		        $('.mediaLauncher-image').css('height', (currentMediaWidth / nativeWHRatio) + 'px');
		        var currentMediaHeight = 	$('.CET-Activity-Content-Main-MediaBlock').height();
		        if(pageTextStyle == 	"mediaHeight"){ // this seems to help fix issue with initial page load not getting (yet-to-load?) image height for text box sizing until first resize is performed
		        	var currentTextBoxContainerLeftPadding = 	grabCSSAttributeValue('.CET-Activity-Content-Main-TextBlock-Container', 'padding-left'); //$('.CET-Activity-Content-Main-MediaBlock').css('margin-left');
					var currentTextBoxContainerRightPadding = 	grabCSSAttributeValue('.CET-Activity-Content-Main-TextBlock-Container', 'padding-right'); //$('.CET-Activity-Content-Main-MediaBlock').css('margin-left');
					var currentMediaBoxHeight = 						$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').height();
					var reducedTextHeight = 							currentMediaBoxHeight - currentTextBoxContainerRightPadding;
					$('.CET-Activity-Content-Main-TextBlock-Container').css('height', reducedTextHeight + 'px');
		        }
		    });
		}
		*/
		/*
		<div class="CET-Activity-Content-Main-TextBlock-Accent-Container">
			<div class="CET-Activity-Content-Main-TextBlock-Accent"></div>
		</div>
		*/
	
}
// ! F.Core.Media Enlarge.Nav Update.Pre gap ---
function enlargementItemPageNavPreGapCheck(){
    var maxMidVal = enlargementItemPage_Nav_CurrentPage + enlargementItemPage_Nav_MidSideSplit;
    if(maxMidVal - subSeqNavMidNumRange <= 1){
        $('.enlargementItemPageNav-PreGap').hide();
    }else{
        $('.enlargementItemPageNav-PreGap').show();
    }
}
// ! F.Core.Media Enlarge.Nav Update.Post gap ---
function enlargementItemPageNavPostGapCheck(){
    var maxMidVal = enlargementItemPage_Nav_CurrentPage + enlargementItemPage_Nav_MidSideSplit;
    if(enlargementItemPage_Nav_TotalPages - maxMidVal <= 1){
        $('.enlargementItemPageNav-PostGap').hide();
    }else{
        $('.enlargementItemPageNav-PostGap').show();
    }
}
// ! F.Core.Media Enlarge.Page nav update---
function enlargementItemPageNavMidNumsBuild( clearCurrentEnlargement ){

	if( currentBasePage_Meta_nodeContentVariant == "SubSequences" ){
		
		$('.enlargementItemPageNav-PrevBut').hide();
		$('.enlargementItemPageNav-NextBut').hide();
		$('.enlargementItemPageNav-ButtonLabelPrev').hide();
		$('.enlargementItemPageNav-ButtonLabelNext').hide();
		/*
		$('.enlargementItemPageNav-PrevBut').removeClass('enlargementItemPageNavBookendButton-On');
        $('.enlargementItemPageNav-PrevBut').addClass('enlargementItemPageNavBookendButton-Off');
        $('.enlargementItemPageNav-ButtonLabelPrev').removeClass('enlargementItemPageNavButtonLabel-On');
        $('.enlargementItemPageNav-ButtonLabelPrev').addClass('enlargementItemPageNavButtonLabel-Off');
        
        $('.enlargementItemPageNav-NextBut').removeClass('enlargementItemPageNavBookendButton-On');
        $('.enlargementItemPageNav-NextBut').addClass('enlargementItemPageNavBookendButton-Off');
        $('.enlargementItemPageNav-ButtonLabelNext').removeClass('enlargementItemPageNavButtonLabel-On');
        $('.enlargementItemPageNav-ButtonLabelNext').addClass('enlargementItemPageNavButtonLabel-Off');
        */
        $('.enlargementItemPageNav-MidGroup').hide();
        
	}else{
		if( !clearCurrentEnlargement ){ // if initial nums build, initial lightbox launch
			//enlargementItemPage_Nav_CurrentPage = launchedMediaItem + 1;
			//enlargementItemPage_Nav_TotalPages = mediaGridArray.length;
			if( lightBoxDialog_Level4_LaunchedFrom == "SubSequencePage_MediaGrid" ){
				enlargementItemPage_Nav_CurrentPage = launchedMediaItemTracker.SubSeqGrid + 1;
			}
			if( lightBoxDialog_Level4_LaunchedFrom == "Clipboard_MediaGrid" || 
				lightBoxDialog_Level4_LaunchedFrom == "ClipboardMediaGroupGrid" ){
				enlargementItemPage_Nav_CurrentPage = launchedMediaItemTracker.ClipboardGrid + 1;
			}
			if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_MediaGrid" ){
				enlargementItemPage_Nav_CurrentPage = launchedMediaItemTracker.BaseGrid + 1;
			}
			$('.enlargementItemPageNav-NumBox-HardFirst').html('1');
			$('.enlargementItemPageNav-NumBox-HardLast').html(enlargementItemPage_Nav_TotalPages);
		}else{
			$('#lightBoxDialog-Level4').empty();
			if( lightBoxDialog_Level4_LaunchedFrom == "SubSequencePage_MediaGrid" ){
				launchedMediaItemTracker.SubSeqGrid = enlargementItemPage_Nav_CurrentPage-1;
			}
			if( lightBoxDialog_Level4_LaunchedFrom == "Clipboard_MediaGrid" || 
				lightBoxDialog_Level4_LaunchedFrom == "ClipboardMediaGroupGrid" ){
				launchedMediaItemTracker.ClipboardGrid = enlargementItemPage_Nav_CurrentPage-1;
			}
			if( lightBoxDialog_Level4_LaunchedFrom == "BasePage_MediaGrid" ){
				launchedMediaItemTracker.BaseGrid = enlargementItemPage_Nav_CurrentPage-1;
			}
			level4LightboxContentPlacer({
				'navButtonReact' : 		enlargementItemPage_Nav_CurrentPage , 
				'event' : 					null , 
		   		'eventType' : 			$( '#lightBoxDialog-Level4' ).attr( 'data-eventType' ) , 
		   		'markerID' : 				$( '#lightBoxDialog-Level4' ).attr( 'data-currentMarkerID' ) 
			});
		}
	    if( enlargementItemPage_Nav_CurrentPage == 1 ){
	        $('.enlargementItemPageNav-NumBox-HardFirst').removeClass('enlargementItemPageNav-NumBox-noncurrent');
	        $('.enlargementItemPageNav-NumBox-HardFirst').addClass('enlargementItemPageNav-NumBox-current');
	        $('.enlargementItemPageNav-NumBox-HardFirst').css('background-color', skinPrimaryColor);
	        $('.enlargementItemPageNav-PrevBut').removeClass('enlargementItemPageNavBookendButton-On');
	        $('.enlargementItemPageNav-PrevBut').addClass('enlargementItemPageNavBookendButton-Off');
	        $('.enlargementItemPageNav-ButtonLabelPrev').removeClass('enlargementItemPageNavButtonLabel-On');
	        $('.enlargementItemPageNav-ButtonLabelPrev').addClass('enlargementItemPageNavButtonLabel-Off');
	    }else{
	        $('.enlargementItemPageNav-NumBox-HardFirst').removeClass('enlargementItemPageNav-NumBox-current');
	        $('.enlargementItemPageNav-NumBox-HardFirst').addClass('enlargementItemPageNav-NumBox-noncurrent');
	        $('.enlargementItemPageNav-NumBox-HardFirst').css('background-color', ' #54524C');
	        $('.enlargementItemPageNav-PrevBut').removeClass('enlargementItemPageNavBookendButton-Off');
	        $('.enlargementItemPageNav-PrevBut').addClass('enlargementItemPageNavBookendButton-On');
	        $('.enlargementItemPageNav-ButtonLabelPrev').removeClass('enlargementItemPageNavButtonLabel-Off');
	        $('.enlargementItemPageNav-ButtonLabelPrev').addClass('enlargementItemPageNavButtonLabel-On');
	    }
	    if( enlargementItemPage_Nav_CurrentPage == enlargementItemPage_Nav_TotalPages ){
	        $('.enlargementItemPageNav-NumBox-HardLast').removeClass('enlargementItemPageNav-NumBox-noncurrent');
	        $('.enlargementItemPageNav-NumBox-HardLast').addClass('enlargementItemPageNav-NumBox-current');
	        $('.enlargementItemPageNav-NumBox-HardLast').css('background-color', skinPrimaryColor);
	        $('.enlargementItemPageNav-NextBut').removeClass('enlargementItemPageNavBookendButton-On');
	        $('.enlargementItemPageNav-NextBut').addClass('enlargementItemPageNavBookendButton-Off');
	        $('.enlargementItemPageNav-ButtonLabelNext').removeClass('enlargementItemPageNavButtonLabel-On');
	        $('.enlargementItemPageNav-ButtonLabelNext').addClass('enlargementItemPageNavButtonLabel-Off');
	    }else{
	        $('.enlargementItemPageNav-NumBox-HardLast').removeClass('enlargementItemPageNav-NumBox-current');
	        $('.enlargementItemPageNav-NumBox-HardLast').addClass('enlargementItemPageNav-NumBox-noncurrent');
	        $('.enlargementItemPageNav-NumBox-HardLast').css('background-color', ' #54524C');
	        $('.enlargementItemPageNav-NextBut').removeClass('enlargementItemPageNavBookendButton-Off');
	        $('.enlargementItemPageNav-NextBut').addClass('enlargementItemPageNavBookendButton-On');
	        $('.enlargementItemPageNav-ButtonLabelNext').removeClass('enlargementItemPageNavButtonLabel-Off');
	        $('.enlargementItemPageNav-ButtonLabelNext').addClass('enlargementItemPageNavButtonLabel-On');
	    }
	    
	    $('.enlargementItemPageNav-MidGroup').html('');
	    var lowestVal = enlargementItemPage_Nav_CurrentPage - enlargementItemPage_Nav_MidSideSplit;
	    var highestVal = enlargementItemPage_Nav_CurrentPage + enlargementItemPage_Nav_MidSideSplit;
	    if( lowestVal < 2 ){
	        lowestVal = 2;
	    }
	    if( highestVal > ( enlargementItemPage_Nav_TotalPages - 1 ) ){
	        highestVal = ( enlargementItemPage_Nav_TotalPages - 1 );
	    }
	    var midGroupIncrement = 1;
	    for( var p = lowestVal ; p <= highestVal ; p++ ){
	        $('.enlargementItemPageNav-MidGroup').append('<div class="enlargementItemPageNav-NumBox">' + p + '</div>');
	        if( p == enlargementItemPage_Nav_CurrentPage ){
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').removeClass('enlargementItemPageNav-NumBox-noncurrent');
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').addClass('enlargementItemPageNav-NumBox-current');
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').css('background-color', skinPrimaryColor);
	        }else{
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').removeClass('enlargementItemPageNav-NumBox-current');
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').addClass('enlargementItemPageNav-NumBox-noncurrent');
	            $('.enlargementItemPageNav-MidGroup .enlargementItemPageNav-NumBox:nth-child(' + midGroupIncrement + ')').css('background-color', '#54524C');
	        }
	        midGroupIncrement++;
	    }
	    
	    if( $('html').hasClass('iphone') || $('html').hasClass('ipod') ){
	    	//enlargementItemPage_Nav_MidNumRange = 1;
			//enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page
	    	if( $('html').hasClass('portrait') ){
				$('.enlargementItemPageNav-MidGroup').hide();
				//enlargementItemPage_Nav_MidNumRange = 1;
				//enlargementItemPage_Nav_MidSideSplit = Math.floor(enlargementItemPage_Nav_MidNumRange / 2); // num of items before or after current subseq page
		  	}else{
		    	$('.enlargementItemPageNav-MidGroup').show();
			}
	    }
	    
	}
    
    //for(var p = 0 ; p <= $('#lightBoxDialog-Level4').length ; p++){
   //$('#lightBoxDialog-Level4').children().each(function(){
        //console.log("p - " + p);
        //if( !$(this).hasClass('lightBoxDialog_Level4_CaptionBox') ){
        	// was going to spare the caption box being cleared, but should be ok to just redraw it.  helps avoid unwanted persistence anyway
	        //console.log( $(this).index() );
        //}
   // });
    
}
/* reference course for authoring preview
{
	"courseParams" : {
		"title" : 										"Course : Sample Course",
		"overview": {
			"text" : 									"Overview text description/summary for the course"
		},
		"courseDateStamp_Created" : 	"8/3/2015",
		"courseDateStamp_Saved" : 		"8/3/2015",
		"exitMenuItem" :						"Exit",
		"persistentData" : 	{
			"dataModel" : 			"Internal"
		},
		"playerSkin" : {
			"color_Primary" : 					"5c0025", 
			"color_Secondary" :				"5B97AB",
			"logo" : 								"aTm1_wht-500x172.svg"
		},
		"activities" : [
			{
				"type" : 							"Course Module Group",
				"variant" :							"Basic",
				"modules" : [
					{
						"type" : 					"Learning Module",
						"variant" : 					"Basic",
						"id" : 						"#pathAuthoringPreviewMode"
					}
				]
			}
		]
	}
}
///////////
"scoring" : { // add in scoring later, when adding in assessment option.  provide other scoring conditions (reaching end of last path, etc) .  no scoring subobject if scoring isn't being used in course.
			"passingThreshold" : 				"70",
			"scoringUnits" : 						"perc",
			"scoreCaptureEvent" : 			"CourseAssessmentPassed"
		},
*/
// ! F.Core.MediaPath.Constructor ---
function mediaPathConstructor( context ){
	
	//console.log('mpc pre pre');
	
	//console.log("mpc context : ");
	//console.log( JSON.stringify( context , null , 4 ) );
	
	var forcePath = context.forcePath;
	if( forcePath == undefined || forcePath == '' ){
		forcePath = "Default";
	}
	
	//console.log('mpc pre');
	
	//var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	//var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	//var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	var usePath;
	switch( forcePath ){
		case "Default" :
			usePath = CETActivityContentPath + CETActivityID + '/media/'; // normal usage
		break;
		case "CourseMedia" :
			usePath = 	CETCourseContentPath + 'media/';
		break;
	}
	if( isAuthoringMode ){
		//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		if( authoringMode == "PathBuilder" ){
			usePath = '../' + usePath;
		}
	}
	var functionDefaults = {
        //'useMediaPath' : 	CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' // normal usage 
        'useMediaPath' : 	usePath
    };
    //console.log( "context = " + JSON.stringify( context , null , 4 ) );
    var functionArgumentContext = 	mergeObjectProperties(functionDefaults, context);
    //console.log( "functionArgumentContext = " + JSON.stringify( functionArgumentContext , null , 4 ) );
	// first we look to see if filename identifies as a theme or default media file
	var splitFileName_Locale = 		functionArgumentContext.mediaFileName.split('_');
	var checkFileNameLocale = 		splitFileName_Locale[0];
	if( checkFileNameLocale == 'at-def' ){
		functionArgumentContext.useMediaPath = 		mediaDefaultsPath;
	}
	if( checkFileNameLocale == 'at-thm' ){
		functionArgumentContext.useMediaPath  = 		themeDefaultsPath;
	}
	// next we extract the extension
	var splitFileName_Ext = 			functionArgumentContext.mediaFileName.split('.');
	var grabFileNameExt = 				splitFileName_Ext.pop();
	var grabFileName = 					splitFileName_Ext.join('');
	var authoringThumbTail = 			'_at-thm';
	var constructedMediaPath;
	if( functionArgumentContext.authoringThumbToggle ){
		constructedMediaPath = 		functionArgumentContext.useMediaPath + '_authoringThumbs/' + grabFileName + authoringThumbTail + '.' + grabFileNameExt;
	}else{
		constructedMediaPath = 		functionArgumentContext.useMediaPath + functionArgumentContext.mediaFileName;
	}
	
	//console.log('dir -- ' + CETActivityID);
	
	//console.log('file -- ' + functionArgumentContext.useMediaPath);
	
	//console.log('post');
	//console.log('constructedMediaPath = ' + constructedMediaPath);
	
	return constructedMediaPath;
}

// ! F.Core.MediaLauncher.Prepare launcher content ---
function makeMediaLauncherContent(mediaPlane, mediaStyle, mediaSlot){
	//console.log("mmlc");
	if(mediaPlane == 'main'){
		
		if(mediaStyle == "singleMedia-ImageDisplay"){
			$('.CET-Activity-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"><span class="accessViz">' + langPack.screenreader.stepBase.stepMediaNonLaunch + '</span></div>');
			//console.log("shouldbehere");
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display }), "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
		}
		
		if( mediaStyle == "singleMedia-ImageLauncher" || 
		mediaStyle == "singleMedia-SubSequenceLauncher" || 
		mediaStyle == "singleMedia-VimeoLauncher" || 
		mediaStyle == "singleMedia-YoutubeLauncher" || 
		mediaStyle == "singleMedia-HTML5VideoLauncher" || 
		mediaStyle == "singleMedia-PDFLauncher"
		){
			var mediaLaunchType = "";
			switch( mediaStyle ){
				case "singleMedia-ImageLauncher" :
					mediaLaunchType = langPack.screenreader.stepBase.stepMediaLaunchImage;
				break;
				case "singleMedia-SubSequenceLauncher" :
					mediaLaunchType = langPack.screenreader.stepBase.stepMediaLaunchSubSeq;
				break;
				case "singleMedia-VimeoLauncher" :
				case "singleMedia-YoutubeLauncher" :
				case "singleMedia-HTML5VideoLauncher" :
					mediaLaunchType = langPack.screenreader.stepBase.stepMediaLaunchVideo;
				break;
				case "singleMedia-PDFLauncher" :
					mediaLaunchType = langPack.screenreader.stepBase.stepMediaLaunchPdf;
				break;
			}
			$('.CET-Activity-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"><span class="accessViz">' + mediaLaunchType + '</span></div>');
			//console.log("shouldbehere");
			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').addClass('launchable');
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display }), "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
		}
		
		switch( nodeMetaOptionList.ImageFraming ){
			case "Clear" :
				$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Clear" );
			break;
			case "Default" : 
			default :
				$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Default" );
			break;
		}
		
	}
	
	if(mediaPlane == 'subsequence'){
		
		if(mediaStyle == "singleMedia-ImageDisplay"){
			
			//currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].descriptionDisplay
			
			$('.CET-SubSequence-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"><span class="accessViz">' + langPack.screenreader.subSequence.subSeqPageMediaNonLaunch + '</span></div>');
			//console.log("shouldbehere");
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, mediaPathConstructor({ 'mediaFileName' : currentSubSequencePage_Content_DataObject.content.pageMedia_Main[mediaSlot].mediaFile_Display }), "SubSequence-Main", $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image') ); 
			
			
			//currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].descriptionDisplay
			
		}
		
		if( mediaStyle == "singleMedia-ImageLauncher" || 
		mediaStyle == "singleMedia-VimeoLauncher" || 
		mediaStyle == "singleMedia-YoutubeLauncher" || 
		mediaStyle == "singleMedia-HTML5VideoLauncher" || 
		mediaStyle == "singleMedia-PDFLauncher"
		){
			var mediaLaunchType = "";
			switch( mediaStyle ){
				case "singleMedia-ImageLauncher" :
					mediaLaunchType = langPack.screenreader.subSequence.subSeqPageMediaLaunchImage;
				break;
				case "singleMedia-VimeoLauncher" :
				case "singleMedia-YoutubeLauncher" :
				case "singleMedia-HTML5VideoLauncher" :
					mediaLaunchType = langPack.screenreader.subSequence.subSeqPageMediaLaunchVideo;
				break;
				case "singleMedia-PDFLauncher" :
					mediaLaunchType = langPack.screenreader.subSequence.subSeqPageMediaLaunchPdf;
				break;
			}
			$('.CET-SubSequence-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"><span class="accessViz">' + langPack.screenreader.subSequence.subSeq + mediaLaunchType + '</span></div>');
			//console.log("shouldbehere");
			$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').addClass('launchable');
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, mediaPathConstructor({ 'mediaFileName' : currentSubSequencePage_Content_DataObject.content.pageMedia_Main[mediaSlot].mediaFile_Display }), "SubSequence-Main", $('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image') );
		}
		
		switch( currentSubSequencePage_Content_DataObject.meta.optionList.ImageFraming ){
			case "Clear" :
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Clear" );
			break;
			case "Default" : 
			default :
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Default" );
			break;
		}
		
	}
	
	//if(mediaStyle == "mediaGrid"){
		//console.log("shouldbehere");
		//$('#CET-Activity-Content-Main-MediaBlock').append( mediaGridBuilder(0, currentBasePage_Content_PageMedia_MainGrid.length, "main") );
		//$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').addClass('launchable');
		//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
	//}
	//singleMediaBuild(currentBasePage_Content_PageMediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[g].mediaFile_Display);
	//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
	//singleMediaBuild(mediaStyle, mediaSlot);
}

// ! F.Core.Media Enlarge.Page content update ---
function newEnlargementItemPageAction(clearCurrentEnlargement){
	enlargementItemPageNavPreGapCheck();
    enlargementItemPageNavMidNumsBuild(clearCurrentEnlargement);
    enlargementItemPageNavPostGapCheck();
}

// ! F.Core.Course.Load Meta param data ---
function loadCourseMetaParams(){
	//var dummyTS = Number(new Date());
	/*
	{
		"poolParams" : {
			"playerSkin" : {
				"color_Primary" : 					"8ebcc1", 
				"color_Secondary" :				"5797ac",
				"exitMenuItem" :					"Exit"
			},
		}
	}			
	*/
	$.ajax({
		type:			'GET',//'POST',
		url:			PoolContentMetaPath + 'json/poolRules.json' + dummyTStamp(),
		dataType: 	'json'
	}).done(function (scanPoolRulesResponse){
		if( scanPoolRulesResponse != "" && scanPoolRulesResponse != null && scanPoolRulesResponse != undefined ){
			masterJSONStorage.courseMetaParams = scanPoolRulesResponse.poolParams;
			
			skinPrimaryColor = 				'#' + masterJSONStorage.courseMetaParams.playerSkin.color_Primary;
			//skinSecondaryColor = 			'#' + masterJSONStorage.courseParams.skinPrimaryDark;
			skinSecondaryColor = 			'#' + masterJSONStorage.courseMetaParams.playerSkin.color_Secondary;
			
			if( masterJSONStorage.courseMetaParams.playerSkin.textColor_Content_Primary != undefined &&
			masterJSONStorage.courseMetaParams.playerSkin.textColor_Content_Primary != "" ){
				skinTextContentPrimaryColor_Base = 	'#' + masterJSONStorage.courseMetaParams.playerSkin.textColor_Content_Primary;
				var skinNeutralTextColorObj = getColorRGBAObject( masterJSONStorage.courseMetaParams.playerSkin.textColor_Content_Primary );
				skinNeutralTextColorObj.alpha = 0.55;
				skinNeutralTextColor = "rgba(" + skinNeutralTextColorObj.red + "," + skinNeutralTextColorObj.green + "," + skinNeutralTextColorObj.blue + "," + skinNeutralTextColorObj.alpha + ")";
			}
			if( masterJSONStorage.courseMetaParams.playerSkin.textColor_SubSeq_Primary != undefined &&
			masterJSONStorage.courseMetaParams.playerSkin.textColor_SubSeq_Primary != "" ){
				skinTextContentPrimaryColor_SubSeqBase = 	'#' + masterJSONStorage.courseMetaParams.playerSkin.textColor_SubSeq_Primary;
			}
			
			
			
			//skinLogo_MediaFile = 						masterJSONStorage.courseParams.playerSkin.logo;
			exitMenuItem = 								masterJSONStorage.courseMetaParams.playerSkin.exitMenuItem; // "True",
			//organization = 								masterJSONStorage.courseParams.organization;
			//organization = 								organization.replace(/ /g, "_"); // quick clean up if spaces exist
			//organization = 								organization.replace(/\./g, "_"); // quick clean up if periods exist
			var checkForScoring = 					masterJSONStorage.courseMetaParams.scoring;
			if( checkForScoring != undefined && checkForScoring != "" && checkForScoring != null ){
				persistentData.recordScore_LMS = 									true;
				courseStatusObject.courseModulesScore = 						0;
				courseStatusObject.courseAssessmentScore =					-1;
				courseStatusObject.courseReportedScore = 					0;
				courseStatusObject.courseAssessmentScore = 				0;
				courseStatusObject.courseAssessmentCompletionDate = 	'x';
				/*
				"scoring" : {
					"scoreReportMethod" : "Summed",
					"maxScore" : "5.0",
					"maxScoreIsCustom" : "true",
					"passingScore" : "0.01",
					"passingScoreIsCustom" : "true"
				}
				*/
				persistentData.score_PassingScore = 				masterJSONStorage.courseMetaParams.scoring.passingScore;
				persistentData.score_MaxScore = 					masterJSONStorage.courseMetaParams.scoring.maxScore;
				persistentData.score_ReportMethod = 			masterJSONStorage.courseMetaParams.scoring.scoreReportMethod;
				//persistentData.score_PassingThreshold = 	masterJSONStorage.courseMetaParams.scoring.passingThreshold;
				//persistentData.scoreType = 						masterJSONStorage.courseMetaParams.scoring.scoringUnits;
				//persistentData.scoreCaptureEvent = 			masterJSONStorage.courseMetaParams.scoring.scoreCaptureEvent;
			}
			var skinStyling = "<style type=\"text/css\">"; // setup custom colors in css   
			skinStyling += 			".skinPrimaryColor {";
			skinStyling += 				'color : ' + skinPrimaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling += 			".skinPrimaryColorBG {";
			skinStyling += 				'background : ' + skinPrimaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling += 			".skinPrimaryColorBoxShadow_ChoiceRadio {";
			skinStyling += 				'box-shadow :  0px 0px 0px 2px ' + skinPrimaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling += 			".skinSecondaryColor {";
			skinStyling += 				'color : ' + skinSecondaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling += 			".skinSecondaryColorBG {";
			skinStyling += 				'background : ' + skinSecondaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling += 			".skinSecondaryColorBoxShadow_ChoiceRadio {";
			skinStyling += 				'box-shadow : 0px 0px 0px 2px ' + skinSecondaryColor + ' !important;';
			skinStyling += 			"}";
			skinStyling +=  	"</style>";
			//$('head').append('<style type="text/css">body{font:normal 14pt Arial, Helvetica, sans-serif;background:#000;color:#fff}a,a:visited{color:#ccc;text-decoration:none;border-bottom:1px solid #00ff00}a:hover{color:#00ff00;border-color:#ccc}</style>');
			$("head").append( skinStyling );
			loadCourseParams();
		}else{
			console.log('error with read pool rules data...');
		}
	}).fail(function (response){
		console.log('error with scan pool rules...');
	});
	
}

// ! F.Core.Course.Load param data ---
function loadCourseParams(){ 
	//console.log('loadCourseParams');
	masterJSONStorage.pathParamsSet = 			[];
	masterJSONStorage.clipBoardCatalogSet = 	[];
	persistentData.persistentDataLoaded = 		"";
	$.ajax({
		type:			'GET',//'POST',
		url:			CETCourseContentPath + 'json/courseParams.json' + dummyTStamp(),
		dataType: 	'json'
	}).done(function (doneResponse){
		masterJSONStorage.courseParams = 			doneResponse.courseParams;
		courseTitle = 												masterJSONStorage.courseParams.title;
		courseOverviewText = 								masterJSONStorage.courseParams.overview.text;
		if( masterJSONStorage.courseParams.overview.media != undefined && masterJSONStorage.courseParams.overview.media != '' && masterJSONStorage.courseParams.overview.media.length > 0 ){
			courseOverview_MediaFile = 					masterJSONStorage.courseParams.overview.media[0].display;
			courseOverview_MediaRole = 					masterJSONStorage.courseParams.overview.media[0].role;
			courseOverview_MediaType = 				masterJSONStorage.courseParams.overview.media[0].type;
			courseOverview_MediaVariant = 				masterJSONStorage.courseParams.overview.media[0].variant;
		}
		//courseCompletionButton = 						masterJSONStorage.courseParams.courseCompletionButton; // "Exit",
		// check for explicit data model override
		var checkForPersistentDataModelOverride = masterJSONStorage.courseParams.persistentData.dataModel;
		if( checkForPersistentDataModelOverride != undefined && checkForPersistentDataModelOverride != "" && checkForPersistentDataModelOverride != null ){
			persistentData.dataModel = 					checkForPersistentDataModelOverride;
		}else{
			persistentData.dataModel = 					"Internal";
		}
		// check if there is an explicit suspend string override
		var checkForPersistentSuspendDataOverride = 	masterJSONStorage.courseParams.persistentData.suspendData;
		if( checkForPersistentSuspendDataOverride != undefined && checkForPersistentSuspendDataOverride != "" && checkForPersistentSuspendDataOverride != null ){
			persistentData.persistentDataLoaded = 			checkForPersistentSuspendDataOverride;
		}else{
			// it doesn't seem possible for the lms to return any suspend data a this point, as the lms engagement actions don't start until the end of this large function...
			// thus, we will default to "Generate", and the persistence handling will override Generate if it successfully loads the suspend string from lms
			//var checkForSuspendData = 							masterJSONStorage.courseProgressLoadStorage.suspendData;
			//if( checkForSuspendData == undefined || checkForSuspendData == null || checkForSuspendData == "" ){
				// if suspend data not pulled in from lms/storage, generate it
				persistentData.persistentDataLoaded = 		"Generate"; //"[P]x"; // build out
			//}else{
				//persistentData.persistentDataLoaded = 		checkForSuspendData; //"[P]x"; // build out
			//}
		}
		courseCreated = 								masterJSONStorage.courseParams.persistentData.courseDateStamp_Created;
		courseSaved = 									masterJSONStorage.courseParams.persistentData.courseDateStamp_Saved;
		//persistentData_Simulation = 			true; //masterJSONStorage.courseParams.persistentData_Simulation;
		var checkForSkinOverride = 				masterJSONStorage.courseParams.playerSkin;
		if( checkForSkinOverride != undefined && checkForSkinOverride != "" && checkForSkinOverride != null ){
			skinPrimaryColor = 							'#' + masterJSONStorage.courseParams.playerSkin.color_Primary;
			skinSecondaryColor = 					'#' + masterJSONStorage.courseParams.playerSkin.color_Secondary;
			//skinLogo_MediaFile = 						masterJSONStorage.courseParams.playerSkin.logo;
			exitMenuItem = 								masterJSONStorage.courseParams.playerSkin.exitMenuItem; // "True",
			//organization = 								masterJSONStorage.courseParams.organization;
			//organization = 								organization.replace(/ /g, "_"); // quick clean up if spaces exist
			//organization = 								organization.replace(/\./g, "_"); // quick clean up if periods exist
		}
		var checkForScoringOverride = 			masterJSONStorage.courseParams.scoring;
		if( checkForScoringOverride != undefined && checkForScoringOverride != "" && checkForScoringOverride != null ){
			if( !persistentData.recordScore_LMS ){ // not yet set by meta params, init
				persistentData.recordScore_LMS = 									true;
				courseStatusObject.courseModulesScore = 						0;
				courseStatusObject.courseAssessmentScore =					-1;
				courseStatusObject.courseReportedScore = 					0;
				courseStatusObject.courseAssessmentScore = 				0;
				courseStatusObject.courseAssessmentCompletionDate = 	'x';
			}
			/*
			"scoring" : {
				"scoreReportMethod" : "Summed",
				"maxScore" : "5.0",
				"maxScoreIsCustom" : "true",
				"passingScore" : "0.01",
				"passingScoreIsCustom" : "true"
			}
			*/
			persistentData.score_PassingScore = 				masterJSONStorage.courseParams.scoring.passingScore;
			persistentData.score_MaxScore = 					masterJSONStorage.courseParams.scoring.maxScore;
			persistentData.score_ReportMethod = 			masterJSONStorage.courseParams.scoring.scoreReportMethod;
			//persistentData.score_PassingThreshold = 	masterJSONStorage.courseParams.scoring.passingThreshold;
			//persistentData.scoreType = 						masterJSONStorage.courseParams.scoring.scoringUnits;
			//persistentData.scoreCaptureEvent = 			masterJSONStorage.courseParams.scoring.scoreCaptureEvent;
		}
		courseOverviewHeader = 				courseTitle; // for overview
		displayActivityType = 					extractBoolean(masterJSONStorage.courseParams.displayActivityType); // decide whether or not to prepend - not using now?
		$('head').append('<style>.skinColor_Primary{background-color: ' + skinPrimaryColor + ' !important;}</style>');
		$('head').append('<style>.skinColor_Secondary{background-color: ' + skinSecondaryColor + ' !important;}</style>');
		//$('head').append('<style>.skinColor_Secondary_HighlightDropShadow{box-shadow: 0 0 0 2px ' + skinSecondaryColor + ' inset !important;}</style>');
		//var cssbuild = "box-shadow: 0 0 0 2px #e3e1da, 0 -1px 0 2px " + skinSecondaryColor + " inset !important;";
		$('head').append('<style>.skinColor_Secondary_HighlightDropShadow_GridBoxTop{box-shadow: 0 0 0 1px #e3e1da, 0 -1px 0 2px " + skinSecondaryColor + " !important;}</style>');
		$('head').append('<style>.skinColor_Secondary_HighlightDropShadow_GridBoxBottom{box-shadow: 0 -2px 0 3px ' + skinSecondaryColor + ' inset !important;}</style>');
		$(this).removeClass("skinColor_Secondary_HighlightDropShadow");
		if( exitMenuItem != "Exit" ){
			$('#menuNavItem-exit').remove(); 
		}
		$('#CET-Activity-Header-Title .headerTitleTextVisible').html( 'TestFill' );
		$('#CET-Activity-Header').css('background-color', skinPrimaryColor);
		$('#CET-Activity-Header-Title .headerTitleTextVisible').html( courseTitle );
		$('#CET-Activity-Header').css('background-color', skinPrimaryColor);
		$('#navItem-continue').css('background-color', skinPrimaryColor);	
		//$('#navItem-continue.allowContinueHover').css('background-color', skinSecondaryColor);	
		/*
		if( skinLogo_MediaFile != undefined && skinLogo_MediaFile != '' && skinLogo_MediaFile != null ){
			var splitLogoFile = 							skinLogo_MediaFile.split('.');
			skinLogo_MediaType = 					splitLogoFile[ splitLogoFile.length - 1 ];
			skinLogo_MediaType = 					skinLogo_MediaType.toLowerCase();
			$('#contentProviderLogo').css( 'background-image', "url('" + CETUpwardLadderPath + "common/img/" + skinLogo_MediaType + "/" + skinLogo_MediaFile + "')" );
		}
		*/
		/*
		for(var w = 0 ; w < courseModuleArray.length ; w++){
			sideNavStackTotalCount++;
			for(var v = 0 ; v < courseModuleArray[w].modules.length ; v++){
				sideNavLearningModuleTotalCount++;
			}
		}
		*/
		// store the course module array structure
		masterJSONStorage.clipboardListGroups = [];
		for( var i = 0 ; i < masterJSONStorage.courseParams.activities.length ; i++ ){
			var checkActivityType = masterJSONStorage.courseParams.activities[i].type; // context of sidenav grouping, etc..
			if( checkActivityType == "Course Module Group" ){
				// prepare group data storage
				var courseModuleGroupData = 		{};
				courseModuleGroupData.variant = 	masterJSONStorage.courseParams.activities[i].variant;
				courseModuleGroupData.modules = 	[];
				var clipBoardListGroup = [];
				masterJSONStorage.clipboardListGroups.push( clipBoardListGroup );
				for( var j = 0 ; j < masterJSONStorage.courseParams.activities[i].modules.length ; j++ ){
					var courseModuleData = {};
					if( masterJSONStorage.courseParams.activities[i].modules[j].type == "Learning Module" ){
						if( isAuthoringMode ){
							//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
							if( authoringMode == "PathBuilder" ){
								courseModuleData.moduleID = CETAuthoringActivityID;
							}else{
								courseModuleData.moduleID = masterJSONStorage.courseParams.activities[i].modules[j].id;
							}
						}else{
							courseModuleData.moduleID = masterJSONStorage.courseParams.activities[i].modules[j].id;
						}
						var checkPathPreReqs = masterJSONStorage.courseParams.activities[i].modules[j].preReq;
						if( checkPathPreReqs != "" && checkPathPreReqs != null && checkPathPreReqs != undefined ){
							courseModuleData.modulePreReqs = [];
							for( var u = 0 ; u < checkPathPreReqs.activityList.length ; u++ ){
								courseModuleData.modulePreReqs.push( checkPathPreReqs.activityList[u] );
							}
						}
						var clipBoardListGroup_PathSub = [];
						masterJSONStorage.clipboardListGroups[i].push( clipBoardListGroup_PathSub );
						sideNavLearningModuleTotalCount++;
						courseModuleGroupData.modules.push( courseModuleData );
					}
					//courseModuleGroupsArray.push( courseModuleGroupData );
				}
				courseModuleArray.push( courseModuleGroupData );
			}
			
			if( checkActivityType == "Course Assessment" ){
				courseAssessment_Present = 		true;
			}
			if( checkActivityType == "Course Survey" ){
				courseSurvey_Present = 				true;
			}
			if( checkActivityType == "Course Certificate" ){
				courseCertificate_Present = 			true;
			}
		}
		var moduleCyclingData = {};
		//!-Fi.Setup Module Cycling Data ---
		function setModuleCyclingData(context){
			moduleCyclingData[context.dataElement] = context.dataVal;
		}
		setModuleCyclingData({ 'dataElement' : 'moduleGroupCount' , 'dataVal' : 0 });
		setModuleCyclingData({ 'dataElement' : 'moduleCount' , 'dataVal' : 0 });
		//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogGroupCount' , 'dataVal' : 0 });
		//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCount' , 'dataVal' : 0 });
		//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryCount' , 'dataVal' : 0 });
		//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryUnitCount' , 'dataVal' : 0 });
		masterJSONStorage.pathStructureSet = [];
		loadModuleStructureLoop( false );
		//!-Fi.Path.Load path structure loop ---
		function loadModuleStructureLoop( toggleGroupIncrement ){
			loadModuleStructureData({ 
				//'moduleGroupCount' : 		moduleCyclingData.moduleGroupCount , 
				//'moduleCount' : 					moduleCyclingData.moduleCount , 
				'pathID' : 							courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].moduleID , 
				'toggleGroupIncrement' : 	toggleGroupIncrement 
			});
		}
		//!-Fi.Path.Load full path structure ---
		function loadModuleStructureData( context ){
			//var moduleGroupCount = 		context.moduleGroupCount;
			//var moduleCount = 				context.moduleCount;
			var pathID = 							context.pathID;
			var toggleGroupIncrement = 	context.toggleGroupIncrement;
			var moduleStructureURL;
			if( isAuthoringMode ){
				//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
				if( authoringMode == "PathBuilder" ){
					moduleStructureURL = '../' + CETActivityContentPath + CETAuthoringActivityID + '/json/structure.json' + dummyTStamp();
				}else{
					moduleStructureURL = CETActivityContentPath + pathID +  '/json/structure.json' + dummyTStamp();
				}
			}else{
				moduleStructureURL = CETActivityContentPath + pathID +  '/json/structure.json' + dummyTStamp();
			}
			$.ajax({
				type:			'GET',
				url: 			moduleStructureURL,
				dataType: 	'json'
			}).done(function (moduleStructureLoaded){
				//========[ init storage arrays before loading scorm attempted ]================
				// need path params to reflect grouping
				var moduleStructureData = moduleStructureLoaded.nodeMap;
				//var moduleContainer = [];
				if( masterJSONStorage.pathStructureSet.length == 0 ){
					masterJSONStorage.pathStructureSet[moduleCyclingData.moduleGroupCount] = [];
				}
				masterJSONStorage.pathStructureSet[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount] = moduleStructureData;
				var moduleGroupInnerCount = 							courseModuleArray[moduleCyclingData.moduleGroupCount].modules.length;
				// loop through function again, cycling through all module groups and their inner modules
				// first check if still have modules to load
				if( moduleCyclingData.moduleCount < (moduleGroupInnerCount - 1) ){
					// increment the group's inner module selector
					moduleCyclingData.moduleCount++;
					masterJSONStorage.pathStructureSet[moduleCyclingData.moduleGroupCount].push( [] );
					loadModuleStructureLoop( false );
				}else{
					if( moduleCyclingData.moduleGroupCount < (courseModuleArray.length - 1) ){
						// increment the module group selector
						moduleCyclingData.moduleGroupCount++;
						masterJSONStorage.pathStructureSet.push( [] );
						moduleCyclingData.moduleCount = 0;
						loadModuleStructureLoop( true );
					}else{
						setModuleCyclingData({ 'dataElement' : 'moduleGroupCount' , 'dataVal' : 0 });
						setModuleCyclingData({ 'dataElement' : 'moduleCount' , 'dataVal' : 0 });
						//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogGroupCount' , 'dataVal' : 0 });
						//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCount' , 'dataVal' : 0 });
						//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryCount' , 'dataVal' : 0 });
						//setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryUnitCount' , 'dataVal' : 0 });
						loadModuleParamsLoop( false );
					}
				}
				//loadModuleParamsLoop( false );
			}).fail(function (failResponse){
				console.log('error');
			});
		}
		//!-Fi.Core.Load Path Params Loop
		function loadModuleParamsLoop( toggleGroupIncrement ){
			loadModuleParamsData({ 
				//'moduleGroupCount' : 		moduleCyclingData.moduleGroupCount , 
				//'moduleCount' : 					moduleCyclingData.moduleCount , 
				'pathID' : 							courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].moduleID , 
				'toggleGroupIncrement' : 	toggleGroupIncrement 
			});
		}
		//function loadModuleParamsData( courseModuleArrayElementNum , courseSubModuleArrayElementNum ,  id , toggleGroupIncrement){
		//!-Fi.Core.Load Individual Path Params data
		function loadModuleParamsData( context ){
			//console.log('loadmoduleparamsdata');
			// loads the params data file for each module
			// function is called first time as initialization, then has recursive routine until completed
			//for( var i = 0 ; i < courseModuleArray.length ; i++ ){
				var pathID = 							context.pathID;
				//console.log('pathID = ' + pathID);
				var toggleGroupIncrement = 	context.toggleGroupIncrement;
				//console.log('toggleGroupIncrement = ' + toggleGroupIncrement);
				////var moduleTempClipboardStorageArray = [];
				////courseClipboardStorageArrayStack.push(moduleTempClipboardStorageArray);
				var moduleURL;
				if( isAuthoringMode ){
					//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
					if( authoringMode == "PathBuilder" ){
						////activityURL = CETActivityContentPath + '/' + CETAuthoringActivityID + CETActivityVersion + '/xml/activityParams.xml?' + dummyTS;
						//moduleURL = CETActivityContentPath + '/' + CETAuthoringActivityID + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
						//moduleURL = CETActivityContentPath + CETAuthoringActivityID + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
						//moduleURL = CETActivityContentPath + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
						moduleURL = '../' + CETActivityContentPath + CETAuthoringActivityID + '/json/pathParams.json' + dummyTStamp();
					}else{
						////activityURL = CETActivityContentPath + '/' + id + CETActivityVersion + '/xml/activityParams.xml?' + dummyTS;
						//moduleURL = CETActivityContentPath + '/' + id + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
						//moduleURL = CETActivityContentPath + id + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
						moduleURL = CETActivityContentPath + pathID +  '/json/pathParams.json' + dummyTStamp();
					}
				}else{
					moduleURL = CETActivityContentPath + pathID +  '/json/pathParams.json' + dummyTStamp();
				}
				$.ajax({
					type:			'GET',//'POST',
					url: 			moduleURL,
					dataType: 	'json'//'xml',
				}).done(function (loadModuleParamsResponse){
					//console.log('moduleCyclingData.moduleGroupCount = ' + moduleCyclingData.moduleGroupCount);
					//console.log('moduleCyclingData.moduleCount = ' + moduleCyclingData.moduleCount);
					//========[ init storage arrays before loading scorm attempted ]================
					// need path params to reflect grouping
					var moduleData = loadModuleParamsResponse.pathData;
					//var moduleContainer = [];
					if( masterJSONStorage.pathParamsSet.length == 0 ){
						masterJSONStorage.pathParamsSet[moduleCyclingData.moduleGroupCount] = [];
					}
					masterJSONStorage.pathParamsSet[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount] = moduleData;
					var moduleGroupInnerCount = 							courseModuleArray[moduleCyclingData.moduleGroupCount].modules.length;
					var newActivityParamArray = 								[];
					var newActivityPathArray = 								['x'];
					//var newActivityClipBoardViewStatusArray = 		['x'];
					var newActivityClipBoardViewStatusArray = 		[];
					if( courseStatusObject.courseModuleGroupStack.length == 0 ){
					//if( sideNavLearningModuleTotalCount == 0 ){
						courseStatusObject.courseModuleGroupStack.push(newActivityParamArray);
					}
					//console.log('newpass = ');
					courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount] = 						{};
					courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].userPath = 		newActivityPathArray;
					var checkPathType = moduleData.meta.pathType; // courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].activityType;
					//console.log("init checkpathtype = " + checkPathType);
					//console.log( "start" );
					if( isAuthoringMode ){
						//console.log( "isAuthoringMode" );
						//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
						if( authoringMode == "PathBuilder" ){
							//console.log( "authoringMode = pathbuilder" );
							courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].activityID = CETAuthoringActivityID;
							
							//console.log("moduleCyclingData.moduleGroupCount = " + moduleCyclingData.moduleGroupCount);
							//console.log("moduleCyclingData.moduleCount = " + moduleCyclingData.moduleCount);
							
							//checkPathType = moduleData.meta.pathType; // courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].activityType;
							//console.log( "checkPathType 1 = " + moduleData.meta.pathType );
					    	/*
					    	switch( checkPathType ){
						    	case "Case Study" : 
						    		//console.log("set as Case Study");
						    		$('body').attr( 'data-activePathType' , "Case Study" );
						    	break;
						    	case "Procedural" : 
						    		//console.log("set as Procedural");
						    		$('body').attr( 'data-activePathType' , "Procedural" );
							    	buildDashboardPathMap();
							    	//if( authoringMode == "PathBuilder" ){ // force set, as the sidenav is "locked" in pathbuilder
								    	//$('body').attr( 'data-activePathType' , "Procedural" );
							    	//}
						    	break;
						    	case undefined : 
						    	case null : 
						    	case '' : 
						    		//console.log("force to Case Study");
						    		courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].activityType = "Case Study";
									$('body').attr( 'data-activePathType' , "Case Study" );
						    	break;
					    	}
					    	*/
							/*
							//$('.dashboardSectionStepMap').show();
					    	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
						    var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
						    var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
					    	var checkPathType = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType;
					    	console.log( "cpt = "  + );
					    	switch( checkPathType ){
						    	case "Case Study" : 
						    		$('body').attr( 'data-activePathType' , "Case Study" );
						    	break;
						    	case "Procedural" : 
							    	buildDashboardPathMap();
							    	if( authoringMode == "PathBuilder" ){ // force set, as the sidenav is "locked" in pathbuilder
								    	$('body').attr( 'data-activePathType' , "Procedural" );
							    	}
						    	break;
						    	case undefined : 
						    	case null : 
						    	case '' : 
						    		courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType = "Case Study";
									$('body').attr( 'data-activePathType' , "Case Study" );
						    	break;
					    	}
							*/
							
							//$('body').attr( 'data-activePathType' , "Case Study" );
						}else{
							courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].activityID = pathID;
						}
					}else{
						
						//checkPathType = courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].activityType;
						//console.log( "checkPathType 2 = " + checkPathType );
						/*
				    	switch( checkPathType ){
					    	case "Case Study" : 
					    		$('body').attr( 'data-activePathType' , "Case Study" );
					    	break;
					    	case "Procedural" : 
						    	//buildDashboardPathMap();
						    	$('body').attr( 'data-activePathType' , "Procedural" );
					    	break;
					    	case undefined : 
					    	case null : 
					    	case '' : 
					    		courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount].activityType = "Case Study";
								$('body').attr( 'data-activePathType' , "Case Study" );
					    	break;
				    	}
						*/
						courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].activityID = pathID;
					}
					courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].moduleProgressStatus = 			'Unattempted';
					courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount].clipboardElementViewStatus = 	[newActivityClipBoardViewStatusArray];
					//=======================================================================================
					var moduleDataPath = 					courseModuleArray[moduleCyclingData.moduleGroupCount].modules[moduleCyclingData.moduleCount];
					var storageReadPath = 					masterJSONStorage.pathParamsSet[moduleCyclingData.moduleGroupCount][moduleCyclingData.moduleCount];
					if( storageReadPath.meta.type != undefined && storageReadPath.meta.type != "" && storageReadPath.meta.type != null ){
						moduleDataPath.activityType = 	storageReadPath.meta.type; // Legacy
					}else{ // not legacy
						if( storageReadPath.meta.pathType != undefined && storageReadPath.meta.pathType != "" && storageReadPath.meta.pathType != null ){
							moduleDataPath.activityType = 	storageReadPath.meta.pathType; //storageReadPath.meta.type;
						}else{
							moduleDataPath.activityType = 	"Case Study"; // default
						}
					}
					moduleDataPath.activityLabel = 									storageReadPath.meta.title;
					if( storageReadPath.overview.textStack != undefined && storageReadPath.overview.textStack != '' && storageReadPath.overview.textStack != null ){
						moduleDataPath.activityOverview_Text = 				textBlockStackProcessor({'textBlockStackData' : storageReadPath.overview.textStack});
					}else{
						moduleDataPath.activityOverview_Text = 				storageReadPath.overview.mainText;
					}
					
					// check if path overview media exists
					if( storageReadPath.overview.media != undefined && storageReadPath.overview.media != '' && storageReadPath.overview.media.length > 0 ){
						moduleDataPath.activityOverview_MediaFile = 			storageReadPath.overview.media[0].display;
						moduleDataPath.activityOverview_MediaRole = 		storageReadPath.overview.media[0].role;
						moduleDataPath.activityOverview_MediaType = 		storageReadPath.overview.media[0].type;
						moduleDataPath.activityOverview_MediaVariant = 	storageReadPath.overview.media[0].variant;
					}
					// loop through function again, cycling through all module groups and their inner modules
					// first check if still have modules to load
					if( moduleCyclingData.moduleCount < (moduleGroupInnerCount - 1) ){
						// increment the group's inner module selector
						moduleCyclingData.moduleCount++;
						masterJSONStorage.pathParamsSet[moduleCyclingData.moduleGroupCount].push( [] );
						courseStatusObject.courseModuleGroupStack[moduleCyclingData.moduleGroupCount].push( [] );
						loadModuleParamsLoop( false );
					}else{
						if( moduleCyclingData.moduleGroupCount < (courseModuleArray.length - 1) ){
							// increment the module group selector
							//if( toggleGroupIncrement ){
								moduleCyclingData.moduleGroupCount++;
								masterJSONStorage.pathParamsSet.push( [] );
								courseStatusObject.courseModuleGroupStack.push( [] );
								moduleCyclingData.moduleCount = 0;
							//}
							loadModuleParamsLoop( true );
						}else{
							var moduleTempClipboardStorageArray = [];
							//courseClipboardStorageArrayStack.push(moduleTempClipboardStorageArray);
							//loadCourseClipBoardCatalog(courseModuleArray[0].modules[0].moduleID);
							courseClipBoardCatalog[0] = [];
							//setModuleCyclingData({ 'dataElement' : 'moduleGroupCount' , 'dataVal' : 0 });
							//setModuleCyclingData({ 'dataElement' : 'moduleCount' , 'dataVal' : 0 });
							setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogGroupCount' , 'dataVal' : 0 });
							setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCount' , 'dataVal' : 0 });
							setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryCount' , 'dataVal' : 0 });
							setModuleCyclingData({ 'dataElement' : 'moduleClipBoardCatalogCategoryUnitCount' , 'dataVal' : 0 });
							
							// init blank completion status array for later use (and to avoid errors when direct-step-jumping)
							for( var w = 0 ; w < courseStatusObject.courseModuleGroupStack.length ; w++ ){
						    	var setupModuleCompletionChain = [];
								activitiesCompleteCountArray.push( setupModuleCompletionChain );
						    	for( var v = 0 ; v < courseStatusObject.courseModuleGroupStack[w].length ; v++ ){
							    	var newModuleCompletionSlot = 0;
							    	activitiesCompleteCountArray[w].push( newModuleCompletionSlot );
								}
							}
							
							loadModuleClipBoardLoop( false );
						}
					}
				}).fail(function (failResponse){
					console.log('error');
				});
			//}
		}
		//var moduleClipBoardCatalogGroupCount = 	0;
		//var moduleClipBoardCatalogCount = 			0;
		//!-Fi.Core.Load path cllipboard loop
		function loadModuleClipBoardLoop( toggleGroupIncrement ){
			//console.log("moduleClipBoardCatalogGroupCount = " + moduleClipBoardCatalogGroupCount);
			/*
			loadCourseClipBoardCatalog( 
			moduleClipBoardCatalogGroupCount , 
			moduleClipBoardCatalogCount , 
			courseModuleArray[moduleCyclingData.moduleClipBoardCatalogGroupCount].modules[moduleCyclingData.moduleClipBoardCatalogCount].moduleID , 
			toggleGroupIncrement 
			);
			*/
			//loadCourseClipBoardCatalog(courseModuleArray[0].modules[0].moduleID);
			//loadCourseClipBoardCatalog(courseModuleArray[moduleClipBoardCatalogCount].activityID);
			loadCourseClipBoardCatalog({ 
				//'moduleGroupCount' : 		moduleCyclingData.moduleGroupCount , 
				//'moduleCount' : 					moduleCyclingData.moduleCount , 
				'pathID' : 							courseModuleArray[moduleCyclingData.moduleClipBoardCatalogGroupCount].modules[moduleCyclingData.moduleClipBoardCatalogCount].moduleID , 
				'toggleGroupIncrement' : 	toggleGroupIncrement 
			});
		}
		/*
		var moduleClipBoardCatalogGroupCount = 			0; // mirrors the module group increment
		var moduleClipBoardCatalogCount = 					0; // mirrors the module subset increment
		var moduleClipBoardCatalogCategoryCount = 		0;
		var moduleClipBoardCatalogCategoryUnitCount = 0;
		*/
		//function loadCourseClipBoardCatalog( moduleClipBoardCatalogGroup , moduleClipBoardCatalogSub ,  id , toggleGroupIncrement ){
		//!-Fi.Core.Load and setup course clipboard catalog
		function loadCourseClipBoardCatalog( context){
			var pathID = 							context.pathID;
			var toggleGroupIncrement = 	context.toggleGroupIncrement;
			// course clipboard storage for all clipboards, but each catalog is paired with an individual module, following the module group structure
			// individual clipboards do not reflect the grouped structure 
			// nor do clipboards bridge/accumulate across modules or groups or coursewide, at least not at this time (not a bad idea for a packaging option)
			//if( toggleGroupIncrement ){
				//courseClipBoardCatalog.push('');
			//}
			//courseClipBoardCatalog[moduleClipBoardCatalogGroupCount] = [];
			if( toggleGroupIncrement ){
				courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount] = [];
			}
			courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount] = [];
			var moduleClipBoardCatalogGroupInnerCount = courseModuleArray[moduleCyclingData.moduleClipBoardCatalogGroupCount].modules.length;
			//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
			/*
			var useURL = CETActivityContentPath + pathID + '/json/clipBoardList.json' + dummyTStamp();
			if( isAuthoringMode ){
				//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
				if( authoringMode == "PathBuilder" ){
					useURL = '../' + useURL;
				}
			}
			*/
			var moduleURL;
			if( isAuthoringMode ){
				//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
				if( authoringMode == "PathBuilder" ){
					////activityURL = CETActivityContentPath + '/' + CETAuthoringActivityID + CETActivityVersion + '/xml/activityParams.xml?' + dummyTS;
					//moduleURL = CETActivityContentPath + '/' + CETAuthoringActivityID + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
					//moduleURL = CETActivityContentPath + CETAuthoringActivityID + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
					//moduleURL = CETActivityContentPath + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
					moduleURL = '../' + CETActivityContentPath + CETAuthoringActivityID + '/json/clipBoardList.json' + dummyTStamp();
				}else{
					////activityURL = CETActivityContentPath + '/' + id + CETActivityVersion + '/xml/activityParams.xml?' + dummyTS;
					//moduleURL = CETActivityContentPath + '/' + id + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
					//moduleURL = CETActivityContentPath + id + CETActivityVersion + '/json/pathParams.json?' + dummyTS;
					moduleURL = CETActivityContentPath + pathID +  '/json/clipBoardList.json' + dummyTStamp();
				}
			}else{
				moduleURL = CETActivityContentPath + pathID +  '/json/clipBoardList.json' + dummyTStamp();
			}
			$.ajax({
				type:			'GET',//'POST',
				//url: 			CETActivityContentPath + '/' + id + CETActivityVersion + '/xml/clipBoardList.xml?' + dummyTS,
				//dataType: 	'xml',
				//url: 			CETActivityContentPath + '/' + id + CETActivityVersion + '/json/clipBoardList.json?' + dummyTS,
				url: 			moduleURL,
				dataType: 	'json'
			}).done(function (courseClipboardCatalogResponse){
				//*
				// new method -- organized by category
				// 	in each category group, member array element is clipboard "bundle", including array list of usage node numbers
				// 	should be able to use this and alter it directly, but for now just organizing it to fit
				// 	the existing clipboard storage structure.  not as efficient as it should be, should be
				// 	updated to better use new json structure
				// existing method is organized by step id
				//masterJSONStorage.clipBoardCatalogSet.push(response.nodeUsageList);
				//var clipBoardCatalogLoadResponseObj = 							response.nodeUsageList;
				// currently not utilizing this catalog array?
				//masterJSONStorage.clipBoardCatalogSet[moduleClipBoardCatalogGroupCount].push(response.clipboardListGroups);
				// this stores the clipboard element catalog that pertains to a module in the course
				// is an array of categories (objects), each category has a label element and then a members list
				// each member is a clipboard package element for the category
				//masterJSONStorage.clipboardListGroups.push( clipBoardListGroup_PathSub );
				//masterJSONStorage.clipboardListGroups[moduleClipBoardCatalogGroup][moduleClipBoardCatalogSub].push( clipBoardListGroup_PathSub );
				//courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount] = [];
				//masterJSONStorage.clipboardListGroups[moduleClipBoardCatalogGroup][moduleClipBoardCatalogSub] = courseClipboardCatalogResponse.clipboardListGroups;
				masterJSONStorage.clipboardListGroups[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount] = courseClipboardCatalogResponse.clipboardListGroups;
				var clipBoardCatalogLoadResponseObj = 			courseClipboardCatalogResponse.clipboardListGroups;
				//console.log("moduleClipBoardCatalogGroup = " + moduleClipBoardCatalogGroup);
				//var catalogIncrement = 									0;
				var placement;
				//console.log( 'a -- ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount] );
				// scan though each category of json clipboard category group list
				for( var i = 0 ; i < clipBoardCatalogLoadResponseObj.length ; i++ ){
					var categoryLabel = clipBoardCatalogLoadResponseObj[i].category;
					//console.log('catlabel - ' + categoryLabel );
					//console.log( 'cl = ' + categoryLabel );
					//console.log( 'len = ' + clipBoardCatalogLoadResponseObj[i].members.length );
					//console.log( 'b -- ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount] );
					// might not have any members (category shell -- ignore drawing to screen if no members in player)
					if( clipBoardCatalogLoadResponseObj[i].members != undefined && clipBoardCatalogLoadResponseObj[i].members.length > 0 ){
						// scan through each category member
						for( var j = 0 ; j < clipBoardCatalogLoadResponseObj[i].members.length ; j++ ){ 
							//console.log( 'c -- ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount] );
							// check if item is tagged with usage within course
							// if no usage tag, item is not applied to any page and can be ignored
							if( clipBoardCatalogLoadResponseObj[i].members[j].usage != undefined && clipBoardCatalogLoadResponseObj[i].members[j].usage.length > 0 ){
								// scan through each category member's usage array element
								for( var k = 0 ; k < clipBoardCatalogLoadResponseObj[i].members[j].usage.length ; k++ ){ 
									//console.log('usg - '  + clipBoardCatalogLoadResponseObj[i].members[j].usage[k]);
									// set array content as the members usage sub-array
									var clipboardFileUsageInstanceSubArray = [ clipBoardCatalogLoadResponseObj[i].members[j].usage[k] ];
									//var usageNum = clipBoardCatalogLoadResponseObj[i].members[j].usage[k];
									//console.log('usg - '  + usageNum);
									var exists = false;
									// check for existence of node id in catalog as it exists up to this iteration check
									// catalog is appended as this process cycles
									//for( var m = 0 ; m < courseClipBoardCatalog[moduleClipBoardCatalogCount].length ; m++ ){ 
									for( var m = 0 ; m < courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount].length ; m++ ){ 
										//console.log('cats - ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount][m][0] + " ---- " + clipboardFileUsageInstanceSubArray[0] );
										//console.log('cats - ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount][m][0] + " ---- " + usageNum );
										if( courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount][m][0] == clipboardFileUsageInstanceSubArray[0] ){
										//if( courseClipBoardCatalog[caseClipBoardCatalogLoaderCount][m][0] == usageNum ){
											exists = true;
											placement = m;
											break;
										}	
									}
									// clipboard structure is still legacy in player, stored clipboard json needs to be converted
									// usage num identifies a step that clipboard items are stored  under
									// if usage num doesn't already exist
									//var newStepIDGroupPosition = courseClipBoardCatalog[moduleClipBoardCatalogGroupCount][moduleClipBoardCatalogCount].length - 1;
									//var newStepIDGroupPosition = courseClipBoardCatalog[moduleClipBoardCatalogGroupCount][moduleClipBoardCatalogCount][m].length - 1;
									if( !exists ){
										var newStepIDGroup = [];
										courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount].push( newStepIDGroup );
										placement = courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount].length - 1; // set again here if logic matches
										courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount][placement].push( clipboardFileUsageInstanceSubArray[0] );
										////console.log('no exist - ' + usageNum );
										////courseClipBoardCatalog[caseClipBoardCatalogLoaderCount].push( usageNum );
										//placement = catalogIncrement;
										//catalogIncrement++;
										//moduleClipBoardCatalogCount++;
									}
									//console.log( 'd -- ' + courseClipBoardCatalog[caseClipBoardCatalogLoaderCount] );
									//console.log( placement );
									var clipboardItemParamsObject = {};
									// prepare data for clipboard item
									clipboardItemParamsObject.clipboardCategory = 			categoryLabel;
									clipboardItemParamsObject.mediaType = 					clipBoardCatalogLoadResponseObj[i].members[j].type;
									clipboardItemParamsObject.mediaVariant = 				clipBoardCatalogLoadResponseObj[i].members[j].variant;
									clipboardItemParamsObject.mediaCaption = 				clipBoardCatalogLoadResponseObj[i].members[j].caption;
									
									clipboardItemParamsObject.mediaDescriptionDisplay =		clipBoardCatalogLoadResponseObj[i].members[j].descriptionDisplay; // ADA long description
									clipboardItemParamsObject.mediaDescriptionLaunched = 	clipBoardCatalogLoadResponseObj[i].members[j].descriptionLaunched; // ADA long description
									
									clipboardItemParamsObject.mediaFile_Display = 			clipBoardCatalogLoadResponseObj[i].members[j].display;
									//clipboardItemParamsObject.mediaFile_Poster = 			clipBoardCatalogLoadResponseObj[i].members[j].poster;
									clipboardItemParamsObject.mediaFile_Launched = 		clipBoardCatalogLoadResponseObj[i].members[j].launched;
									if( clipBoardCatalogLoadResponseObj[i].members[j].zoomNav != undefined ){
										clipboardItemParamsObject.mediaFile_ZoomNav = 	clipBoardCatalogLoadResponseObj[i].members[j].zoomNav;
									}
									if( clipboardItemParamsObject.mediaVariant == "HTML5Video" || clipboardItemParamsObject.mediaVariant == "html5video" ){
										if( clipBoardCatalogLoadResponseObj[i].members[j].poster != undefined && 
											clipBoardCatalogLoadResponseObj[i].members[j].poster != ""  ){
											clipboardItemParamsObject.mediaFile_Poster = 	clipBoardCatalogLoadResponseObj[i].members[j].poster;
										}
										if( clipBoardCatalogLoadResponseObj[i].members[j].captionTracks != undefined && 
											clipBoardCatalogLoadResponseObj[i].members[j].captionTracks != ""  ){
											clipboardItemParamsObject.captionTracks = 		clipBoardCatalogLoadResponseObj[i].members[j].captionTracks;
										}
									}
									courseClipBoardCatalog[moduleCyclingData.moduleClipBoardCatalogGroupCount][moduleCyclingData.moduleClipBoardCatalogCount][placement].push( clipboardItemParamsObject );
								}
							}
						}
					}
				}
				//*/
				//===============================================
				// at this point the the clipboard catalog corresponding to a module in the stack has been fully established
				// we now check for next step in process loop
				// increment the group's inner catalog selector
				//moduleClipBoardCatalogCount++;
				// loop through function again, cycling through all module groups and their inner modules
				// first check if still have modules to load
				//console.log("moduleClipBoardCatalogCount = " + moduleClipBoardCatalogCount);
				//console.log("moduleClipBoardCatalogGroupCount = " + moduleClipBoardCatalogGroupCount);
				//console.log("moduleClipBoardCatalogGroupInnerCount = " + moduleClipBoardCatalogGroupInnerCount);
				if( moduleCyclingData.moduleClipBoardCatalogCount < (moduleClipBoardCatalogGroupInnerCount - 1) ){
					moduleCyclingData.moduleClipBoardCatalogCount++;
					loadModuleClipBoardLoop( false );
				}else{
					if( moduleCyclingData.moduleClipBoardCatalogGroupCount < (courseModuleArray.length - 1) ){
						// increment the module group selector
						//if( toggleGroupIncrement ){
							moduleCyclingData.moduleClipBoardCatalogGroupCount++;
							moduleCyclingData.moduleClipBoardCatalogCount = 0;
							//console.log("bbb");
						//}
						loadModuleClipBoardLoop( true );
					}else{
						if( parentComponentCaller != undefined && parentComponentCaller == "CoursePackager" ){
							window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'courseLoaded'  });
						}
						switch( persistentData.dataModel ){
							case 'SCORM1.2' :
							case 'SCORM2004.4' : 
								//switch( persistentDataLoaded ){
									//case 'Generate' : 
										
									//break;
									//default : 
										setupPersistenceEnvironment(); // call to setup in persistbidniss
										// do process suspend data within above process
									//break;
								//}
							break;
							case 'Internal' :
								//if( persistentData_Simulation ){
									if( persistentData.persistentDataLoaded != undefined && persistentData.persistentDataLoaded != null && persistentData.persistentDataLoaded != '' ){
										processSuspendData({ 
											'pDataModel' : 		persistentData.dataModel , 
											'pData_Suspend' : 	persistentData.persistentDataLoaded 
										});
									}//else{
										//createSuspendData('Internal');
									//}
									//loadFakeScorm();
								//}//else{
									//initSCORM();
									//initProgressRecall('Internal');
								//}
							break;
						}
						/*
						switch( persistentData.dataModel ){
							case 'Internal' :
								//if( persistentData_Simulation ){
									if( persistentDataLoaded != undefined && persistentDataLoaded != null && persistentDataLoaded != '' ){
										processSuspendData({ 'pDataModel' : persistentData.dataModel , 'pData_Suspend' : persistentDataLoaded });
									}//else{
										//createSuspendData('Internal');
									//}
									//loadFakeScorm();
								//}//else{
									//initSCORM();
									//initProgressRecall('Internal');
								//}
							break;
							case 'SCORM1.2' :
								//if( persistentData_Simulation ){
									if( persistentDataLoaded != undefined && persistentDataLoaded != null && persistentDataLoaded != '' ){
										processSuspendData({ 'pDataModel' : persistentData.dataModel , 'pData_Suspend' : persistentDataLoaded });
									}//else{
										//createSuspendData('SCORM1.2');
									//}
									//loadFakeScorm();
								//}//else{
									//initSCORM();
									//initProgressRecall('SCORM1.2');
								//}
							break;
						}
						*/
					}
				}
				/*
				if(moduleClipBoardCatalogCount < courseModuleArray.length){
					// recursive action if catalogs from additional courses in the bundle need to be loaded
					//loadCourseClipBoardCatalog(courseModuleArray[moduleClipBoardCatalogCount].activityID);
					loadModuleClipBoardLoop( false );
				}else{
					if(persistentData == 'SCORM'){
						if(persistentData_Simulation){
							loadFakeScorm();
						}else{
							initSCORM();
						}
					}
				}
				*/
			}).fail(function (failResponse){
				console.log('error');
			});
		}
	}).fail(function (failResponse){
		console.log('error');
	});
}

// ! F.Core.Count complete activities ---
function activitiesCompleteCountSum(){
	var buildSum = 0;
	if( activitiesCompleteCountArray.length > 0 ){
		for( var i = 0 ; i < activitiesCompleteCountArray.length ; i++ ){
			if( activitiesCompleteCountArray[i].length > 0 ){
				for( var j = 0 ; j < activitiesCompleteCountArray[i].length ; j++ ){
					if( activitiesCompleteCountArray[i][j] == 1 ){
						buildSum++;
					}
				}
			}
		}
	}
	return buildSum;
}
// ! F.Core.Update Step Path Chain record ---
function updateStepChainRecord(context){
	console.log('update step chain record');
	/*
	userPath : 
	"4:1"
	"4:1+2+3" -- using pluses as combiner for mamc? or another character?
	what about mamc choice based?  i think mamc must be stored as choices to work?  update system to do this, if not
	it isn't very useful to have mamc selections refer to the special handling
	
	"1" , "3:1$+1.00" , "4:1" , "2"
	maybe dont need to store scores in progress tracker?
	scores in structure could be cross referenced when tallying scores, all score data for path is present in updated structure, matched to step and choice, mamc should work too
	
	*/
	var afterAction = 									context.afterAction;
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	var pathToUserpath = 							courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1];
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	//console.log("lastUserPathIndex - " + lastUserPathIndex);
	//var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[lastUserPathIndex];
	// clear and re-write last userpath element with stored assessment selection once feedback is launched
	var activityTarget = 								dashboardSideNavItemActive - 2;
	//var selectedAssessmentItem = 				pageAssessmentSelectionArray[0].indexOf("on");
	var activityUserPathLength = 					pathToUserpath.userPath.length;
	var currentNodeNumSplit = 					pathToUserpath.userPath[activityUserPathLength - 1].split(':');
	var negater = 										false;
	// store the choiceID number(s), rather than the direct index of the selection(s)
	//console.log('currentBasePage_Assessment_Type = ' + currentBasePage_Assessment_Type);
	switch( currentBasePage_Assessment_Type ){
		case "Single Answer - Multiple Choice":
		// samc stores a single numeric indicator of selected item cid/choiceID
			//courseStatusObject.courseModuleGroupStack[activityTarget].userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + (selectedAssessmentItem + 1);
			var choiceMade = 							pageAssessmentSelectionResult.choiceID;
			if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
				if( choiceMade == undefined ){ // in case no selections are made, as procedural allows progress from incomplete assessments
					choiceMade = 						"x";
				}
			}
			pathToUserpath.userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + choiceMade;
		break;
		case "Multiple Answer - Multiple Choice":
		case "Advanced Multiple Answer - Multiple Choice":
		// mamc stores a comma-separated list of cid/choiceIDs of selected items
		// list is ordered by the visual page stack, even if random.  may not match directly when returning, so order of mamc storage is not important
			var cidList = []; // choice id list
			var useMAMCOutList =		 			"";
			assessmentSelectionArrayLoop:
			for( var i = 0 ; i < pageAssessmentSelectionArray[0].length ; i++ ){
				if( pageAssessmentSelectionArray[0][i] == 'on' ){
					var multiChoiceOutMade = 		currentBasePage_Assessment_OutputList[i].choiceID;
					if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
						if( multiChoiceOutMade == undefined ){ // in case no selections are made, as procedural allows progress from incomplete assessments
							negater = 						true;
							break assessmentSelectionArrayLoop;
						}
					}
					if( !negater ){
						cidList.push( multiChoiceOutMade );
					}
				}
			}
			if( negater ){
				useMAMCOutList = "x";
			}else{
				useMAMCOutList = cidList.join(',');
			}
			pathToUserpath.userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + useMAMCOutList;
		break;
		case "Write In - Field List":
			var inputValueList = []; // choice id list
			var haveAtLeastOneInput = false;
			for( var i = 0 ; i < pageAssessmentSelectionArray[0].length ; i++ ){
				// for now, purging curly brackets from input storage, as this will cause issues with the progress/score tracking
				// we are wrapping each input value in curly brackets for the storage string, so they can still be comma-delimited
				var preparedInputValue = pageAssessmentSelectionArray[0][i].replace( "{" , "" ).replace( "}" , "" );
				if( preparedInputValue != "" ){
					haveAtLeastOneInput = true;
				}
				var inputSlot = 	"{";
				inputSlot += 		pageAssessmentSelectionArray[0][i];
				inputSlot += 		"}";
				inputValueList.push( inputSlot );
			}
			if( !haveAtLeastOneInput ){
				useInputList = "x";
			}else{
				useInputList = inputValueList.join(',');
			}
			pathToUserpath.userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + useInputList;
		break;
		case "Matching":
		// stores comma-separated list of selected option oids, ordered by each corresponding parent cid
		// ordered by original, unshuffled cid/choiceID data stack -- ORDER IMPORTANT
			
			// step through page assessment selections array
			// pageAssessmentSelectionArray[0]...
			// grab stack item order id via the output list, matches order of selection array
			// currentBasePage_Assessment_OutputList[0].choiceID
			// sequentially create a new array of each incrementing target choice id, with the value in pageAssessmentSelectionArray as the element each pass
			
			//var choicePositionsList = [];
			var matchingSelectionArray = [];
			var matchingSelectionList = "x";
			var incrementer = 1;
			// set up a sequence of the index of each choice
			collectChoicePositions:
			for( var i = 0 ; i < currentBasePage_Assessment_OutputList.length ; i++ ){
				cycleInner1:
				for( var j = 0 ; j < currentBasePage_Assessment_OutputList.length ; j++ ){
					if( currentBasePage_Assessment_OutputList[j].choiceID == String( incrementer ) ){
						var selectedChoiceOID = 	pageAssessmentSelectionArray[0][j];
						cycleInner2:
						for( var k = 0 ; k < currentBasePage_Assessment_OutputList[j].choiceOptions.length ; k++ ){
							if( currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid == selectedChoiceOID ){
								matchingSelectionArray.push( currentBasePage_Assessment_OutputList[j].choiceOptions[k].oid );
								break cycleInner2;
							}
						}
						incrementer++;
						continue collectChoicePositions;
					}
				}
			}
			if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
				if( matchingSelectionArray.length != pageAssessmentSelectionArray.length ){ // in case no/not all selections are made, as procedural allows progress from incomplete assessments
					negater = 						true;
				}
			}
			if( !negater ){
				matchingSelectionList = matchingSelectionArray.join(','); // will always be the complete list, or no list
			}
			pathToUserpath.userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + matchingSelectionList;
		break;
		case "Ranking":
		// stores comma-separated list of cid/choiceIDs, ordered by each corresponding "goal" cid
		// ordered by original, unshuffled cid/choiceID data stack -- ORDER IMPORTANT
		// for a "perfect" result, the list should increment from 1 upward normally, for count of the list.  anything else is incorrect/partially correct
		// the array placement order IS the final order to store -- just use the pageAssessmentSelectionArray
			var rankingSelectionArray= [];
			var rankingSelectionList = "x";
			for( var i = 0 ; i < pageAssessmentSelectionArray[0].length ; i++ ){
				if( pageAssessmentSelectionArray[0][i] != "off" ){ // only places selection in full list if is actually selected
					rankingSelectionArray.push( pageAssessmentSelectionArray[0][i] );
				}
			}
			if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
				if( rankingSelectionArray.length != pageAssessmentSelectionArray.length ){ // in case no/not all selections are made, as procedural allows progress from incomplete assessments
					negater = 						true;
				}
			}
			if( !negater ){
				rankingSelectionList = rankingSelectionArray.join(','); // will always be the complete list, or no list
			}
			pathToUserpath.userPath[activityUserPathLength - 1 ] = currentNodeNumSplit[0] + ":" + rankingSelectionList;
		break;
	}
	//console.log( "afterAction = " + afterAction );
	if( afterAction != undefined && afterAction != null && afterAction != '' ){
		switch( afterAction ){
			case "LoadStep" : 
				//console.log( "context.targetStep = " + context.targetStep );
				waitCoverController({ 
					'coverAction' : 	"Launch" , 
					'loadStep' : 		context.targetStep
				});
				//loadNewActivityPage({ 'loadDataFile' : context.targetStep });
			break;
		}
	}
}
// ! F.Core.Text Block Stack processor  ---
function textBlockStackProcessor(context){
	var textBlockStackData = context.textBlockStackData;
	var processedBlockStack = "";
	for( var a = 0 ; a < textBlockStackData.length ; a++ ){
		processedBlockStack += textBlockProcessor({ 'textBlockData' : textBlockStackData[a] });
	}
	return processedBlockStack;
}
// ! F.Core.Text Block processor  ---
function textBlockProcessor(context){
	var textBlockData = 		context.textBlockData;
	var textBlockStyle = 		textBlockData.textBlockStyle;
	var textBlockVariant = 	textBlockData.textBlockVariant;
	var textBlockHeader = 	textBlockData.textBlockHeader;
	var textBlockBody = 		textBlockData.textBlockBody;
	var buildBlock = '<div class="textBlockUnit" data-textBlockStyle="' + textBlockStyle + '" data-textBlockVariant="' + textBlockVariant + '">';
	if( textBlockStyle == "Simple Table" ){
		buildBlock += 	'<div class="textBlockWrapper">';
	}
	if( textBlockHeader != undefined && textBlockHeader != '' && textBlockHeader != null){
		buildBlock += 		'<div class="textBlockUnitHeader">' + textBlockHeader + '</div>';
	}
	if( textBlockBody != undefined && textBlockBody != '' && textBlockBody != null){
		buildBlock += 		'<div class="textBlockUnitBody">' + textBlockBody + '</div>';
	}
	if( textBlockStyle == "Simple Table" ){
		buildBlock += 	'</div>';	
	}
	buildBlock += '</div>';
	return buildBlock;
}
// ! F.Core.Place Localized Language Content  ---
function placeLocalizedContent( context ){
	var targetItem = 		context.targetItem; // jq element pointer
	var srcData = 			context.srcData; // nested obj data
	var placementMode = 	context.placementMode; // "Text" | "Html" | "Append" | "Prepend" | "Attribute"
	var placementMode2 = 	context.placementMode2; // not passed if a "normal" jq reference (id, class, data-att, etc.) -- used if "special" targeting
	var forceCase = 		context.forceCase;
	var varSet = 			context.varSet; // array of vars to place
	
	if( varSet != undefined && varSet != "" && varSet != null ){
		for( var a = 0 ; a < varSet.length ; a++){
			srcData = srcData.replace( "[var" + (a+1) + "]" , varSet[a] );
		}
	}
	
	// using css for case forcing for now, mostly, but leaving this here for now
	if( forceCase == "Upper" ){
		srcData = srcData.toUpperCase();
	}else if( forceCase == "Lower" ){
		srcData = srcData.toLowerCase();
	}
	
	switch( placementMode ){
		case "Return" : 
			return srcData;
		break;
		case "Text" : 
			targetItem.text( srcData );
		break;
		case "Append" : 
			targetItem.append( srcData );
		break;
		case "Prepend" : 
			targetItem.prepend( srcData );
		break;
		case "Attribute" : 
			if( placementMode2 == "aria-label" ){ /* ! fill aria label with html formatted text */
				$( '#textProk' ).html( srcData );
				targetItem.attr( 'aria-label' , $( '#textProk' ).html() );
				$( '#textProk' ).empty();
			}else{
				targetItem.attr( placementMode2 , srcData );
			}
		break;
		case "Html" : 
		case undefined : 
		case "" : 
		case null : 
		default : 
			targetItem.html( srcData );
		break;
	}
	
	
}

// ! =============================================================
// ! F.Scoring.Tally path progress score ---
function tallyPathProgressScoring( context ){
	var courseModule = 								context.courseModule;  // pathgroup_path
	//console.log( "courseModule = " + courseModule );
	console.log( "tallyPathProgressScoring trigger ID = " + context.triggerID );
	// assemble list of scores to process
	var baseLineScore = 							0;
	var rawScoreList = 								[];
	var splitCourseModule = 						courseModule.split('_');
	var courseModule_Group = 						Number(splitCourseModule[0]);
	var courseModule_Module = 						Number(splitCourseModule[1]);
	var userPath = 									courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath;
	var resultScore;
	var finalScore = 								baseLineScore;
	var pathScoringData = 							masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring;
	var useScoreValue;
	if( pathScoringData != undefined && pathScoringData !== "" ){ // redundant check if in function scope, already have this clearance?
		if( pathScoringData.pathScoreMethod == "Completion" ){
			resultScore = 	 						pathScoringData.pathScorePass; // pathScoringData.passingScore;
			finalScore = 							String(resultScore);
			courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore = 		finalScore;
			courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus = 	"Passed";
		}else{
			userPathLoop: // cycle the learner's chain of step ids and choices
			for( var a = 0 ; a < userPath.length ; a++ ){
				var stepChainIteration = 0;
				var structureNodePath;
				var splitStepID = 					userPath[a].split(":");
				var grabStepID = 					splitStepID[0];
				if( splitStepID[1] != undefined && splitStepID[1] !== '' ){ // if assessment exists
					var nodeMapUnitsPath = 			masterJSONStorage.pathStructureSet[courseModule_Group - 1][courseModule_Module - 1].nodeMapUnits;
					var allowStepScoreTally = 		true;
					structureNodesLoop: // seek the structure node with matching node id to user path element pre-colon id
					for( var q = 0 ; q < nodeMapUnitsPath.length ; q++ ){
						if( Number(nodeMapUnitsPath[q].nodeID) == Number(grabStepID) ){
							structureNodePath = 	nodeMapUnitsPath[q];
							if( nodeMapUnitsPath[q].scoringDisabled != undefined && nodeMapUnitsPath[q].scoringDisabled == true || nodeMapUnitsPath[q].scoringDisabled == "true" ){
								//console.log( "nodeMapUnitsPath[q].scoringDisabled = true : " + q + " :: " + nodeMapUnitsPath[q].nodeID );
								allowStepScoreTally = false;
							}else{
								//console.log( "nodeMapUnitsPath[q].scoringDisabled = nonexist, or false : " + q + " :: " + nodeMapUnitsPath[q].nodeID );
							}
							break structureNodesLoop;
						}
					} // end structureNodesLoop
					if( allowStepScoreTally ){
						// universal handling of selections, will always split for mamc choice selections (must have at least one)
						var choiceIDList = 	splitStepID[1].split(","); // MAMC, Matching, Ranking all split choices via commas
						
						// might be commas in learner inputs for write in, so need to split at },{ and remove last bookend { } chars from results
						
						if( choiceIDList[0] != "x" ){ // start process if step assessment selection is not x
							// check for special handled results
							var checkForSpecialHandling = {
								"type" : "",
								"data" : ""
							};
							
							// check for choice-based scoring 
							// in the step, this would show nodeAssessment.scoring.captureMethod -- Sum Selections , Special Handler
							// not checking captureMethod for now?  just looking for data? always using structure data?
							
							var checkForMamcChoices = structureNodePath.mamcChoices; 
							if( checkForMamcChoices != undefined && checkForMamcChoices !== '' ){ 
								checkForSpecialHandling.type = "MAMC";
								checkForSpecialHandling.data = checkForMamcChoices; // array
								checkForSpecialHandling.funneling = structureNodePath.outputs; // array
								// mamcChoices has status for all choices in mamc, even if not using summing method
							}
							var checkForAdvancedMamcChoices = structureNodePath.amamcChoices; 
							if( checkForAdvancedMamcChoices != undefined && checkForAdvancedMamcChoices !== '' ){ 
								checkForSpecialHandling.type = "AMAMC";
								checkForSpecialHandling.data = checkForAdvancedMamcChoices; // array
								checkForSpecialHandling.funneling = structureNodePath.outputs; // array
								checkForSpecialHandling.rules = structureNodePath.amamcRules; // array
							}
							var checkForWriteInExpectedInputs = structureNodePath.writeInFieldListExpectedInputs; 
							if( checkForWriteInExpectedInputs != undefined && checkForWriteInExpectedInputs !== '' ){ 
								checkForSpecialHandling.type = "WriteInFieldList";
								checkForSpecialHandling.data = checkForWriteInExpectedInputs; // array
								checkForSpecialHandling.funneling = structureNodePath.outputs; // array
								checkForSpecialHandling.rules = structureNodePath.writeInFieldListRules; 
							}
							var checkForMatchingChoices = structureNodePath.matchingChoices;
							if( checkForMatchingChoices != undefined && checkForMatchingChoices !== '' ){ 
								checkForSpecialHandling.type = "Matching";
								checkForSpecialHandling.data = checkForMatchingChoices; // array
								checkForSpecialHandling.funneling = structureNodePath.outputs; // array
							}
							var checkForRankingChoices = structureNodePath.rankingChoices;
							if( checkForRankingChoices != undefined && checkForRankingChoices !== '' ){ 
								checkForSpecialHandling.type = "Ranking";
								checkForSpecialHandling.data = checkForRankingChoices; // number of items, as string
								checkForSpecialHandling.funneling = structureNodePath.outputs; // array
							}
							if( checkForSpecialHandling.type != "" ){ 
								switch( checkForSpecialHandling.type ){
									case "MAMC" : 
										// make an array of all correct choices in the mamc for comparison during tally
										var stepAssessmentCorrectList = [];
										cycleCorrectCollector: // find all necessary correct choices to get perfect correct for tally
										for( var v = 0 ; v < checkForSpecialHandling.data.length ; v++ ){
											var checkForMamcChoiceStatus = checkForSpecialHandling.data[ v ].outputStatus;
											if( checkForMamcChoiceStatus == "Correct" ){
												stepAssessmentCorrectList.push( String(v+1) ); // push choice id to array as a string for processing
											}
										}
										var checkForMamcScoringInit = checkForSpecialHandling.data[ 0 ].scoring; // look for scoring data in the first funneled handler box
										// equivalent to looking for "sum selections/selected" in step assessment scoring controls, but looking at structure instead
										if( checkForMamcScoringInit != undefined && checkForMamcScoringInit !== '' ){
											stepMamcChoiceStackLoop: // cycle mamcChoices list in structure node
											for( var v = 0 ; v < checkForSpecialHandling.data.length ; v++ ){
												// if mamc has scoring values attached to choices (summing score method only)
												// should be "all or none", so can check just first index and not recheck every mamcChoices item in list
												var checkForMamcScoring = checkForSpecialHandling.data[ v ].scoring;
												//if( checkForMamcScoring != undefined && checkForMamcScoring !== '' ){
													useScoreValue = "+0.00"; // default to using a score of 0,
													// if unselected score value is present, new default to this unselected score value, and use this unless it is overridden by a selected value tied to an actual selection
													if( checkForMamcScoring.unselected != undefined && checkForMamcScoring.unselected !== '' ){
														useScoreValue = checkForMamcScoring.unselected;
													}
													// cycle the selected choice(s) for step iteration
													// if choice id num matches the index+1 of the cycling mamc choice list, useScoreValue is the selected value
													if( checkForMamcScoring.selected != undefined && checkForMamcScoring.selected !== '' ){
														choiceIDListLoop:
														for( var b = 0 ; b < choiceIDList.length ; b++ ){
															if( Number(choiceIDList[b]) == (v+1) ){ // selection cid matches the mamcChoices list index, use the selected value (override the unselected value)
																// if selected value exists (always should) and the choice is recorded as selected, then selected score overrides default and unselected values
																useScoreValue = checkForMamcScoring.selected;
																break choiceIDListLoop;
															}
														} // end choiceIDListLoop
													}
													rawScoreList.push( useScoreValue );
													//console.log("useScoreValue summed = " + useScoreValue);
												//}
											} // end stepMamcChoiceStackLoop
										}else{
											// step assessment is mamc (mamcChoices sub-array exists in node), but is not summed.  
											// scoring is in the outputs section
											
											// will need to ensure changes in logic or control params are reflected here as well
											// ... like selecting default non-correct (currently auto partial), etc.
											/*
											stepAssessmentSelectionStatusResult = {
												"id" : "4",
												"outputStatus" : "Correct", // status element only needed for mamc specialhandling
												"method" : "StepForward",
												"scoring" : {
													"selected" : "+4.00"
												}
											}
											*/
											var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
												'action' : 				"pathScoreTally" , 
												'handlingType' : 		checkForSpecialHandling.type ,
												'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
												'moduleGroup' : 		courseModule_Group , 
												'moduleComponent' : 	courseModule_Module , 
												'componentStep' : 		grabStepID , 
												'scanChoiceList' : 		checkForSpecialHandling.data ,
												'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
												'choiceIDList' :		choiceIDList , // only passed with tally action
												'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
											});
											//console.log("stepAssessmentSelectionStatusResult : ");
											//console.log( JSON.stringify( stepAssessmentSelectionStatusResult , null , 4 ) );
											useScoreValue = stepAssessmentSelectionStatusResult.scoring.selected;
											rawScoreList.push( useScoreValue );
											//console.log("useScoreValue s.h. = " + useScoreValue);
										}
									break;
									
									// stepAssessmentCorrectList
									// choiceIDList
									// structureNodePath
									
									case "AMAMC" :
									
										// need to collect matched scoring values for patterns and non-patterned choices
										/*
										console.log( "AMAMC handlingType - " + checkForSpecialHandling.type );
										console.log( "AMAMC moduleGroup - " + courseModule_Group );
										console.log( "AMAMC moduleComponent - " + courseModule_Module );
										console.log( "AMAMC componentStep - " + grabStepID );
										console.log( "AMAMC scanChoiceList - " + checkForSpecialHandling.data );
										console.log( "AMAMC scanFunnelingList - " + checkForSpecialHandling.funneling );
										console.log( "AMAMC correctList - " + stepAssessmentCorrectList );
										console.log( "AMAMC choiceIDList - " + choiceIDList );
										console.log( "AMAMC handlingData - " + structureNodePath );
										*/
										//*
										var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
											'action' : 				"pathScoreTally" , 
											'handlingType' : 		checkForSpecialHandling.type ,
											'moduleGroup' : 		courseModule_Group , 
											'moduleComponent' : 	courseModule_Module , 
											'componentStep' : 		grabStepID , 
											'scanChoiceList' : 		checkForSpecialHandling.data ,
											'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
											'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
											'choiceIDList' :		choiceIDList , // only passed with tally action
											'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
										});
										console.log( "amamc score tally stepAssessmentSelectionStatusResult = " + JSON.stringify( stepAssessmentSelectionStatusResult , null , 4 ) );
										//useScoreValue = stepAssessmentSelectionStatusResult.scoring.selected;
										useScoreValue = stepAssessmentSelectionStatusResult.scoring.scoreVal;
										rawScoreList.push( useScoreValue );
										//*/
									break;
									
									case "WriteInFieldList" :
										//console.log( "sending componentStep = " + grabStepID );
										/*
										console.log( "WriteInFieldList handlingType - " + checkForSpecialHandling.type );
										console.log( "WriteInFieldList moduleGroup - " + courseModule_Group );
										console.log( "WriteInFieldList moduleComponent - " + courseModule_Module );
										console.log( "WriteInFieldList componentStep - " + grabStepID );
										console.log( "WriteInFieldList scanChoiceList - " + checkForSpecialHandling.data );
										console.log( "WriteInFieldList scanFunnelingList - " + checkForSpecialHandling.funneling );
										console.log( "WriteInFieldList correctList - " + stepAssessmentCorrectList );
										console.log( "WriteInFieldList choiceIDList - " + choiceIDList );
										console.log( "WriteInFieldList handlingData - " + structureNodePath );
										*/
										//*
										var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
											'action' : 				"pathScoreTally" , 
											'handlingType' : 		checkForSpecialHandling.type ,
											'moduleGroup' : 		courseModule_Group , 
											'moduleComponent' : 	courseModule_Module , 
											'componentStep' : 		grabStepID , 
											'scanChoiceList' : 		checkForSpecialHandling.data ,
											'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
											'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
											'choiceIDList' :		choiceIDList , // only passed with tally action
											'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
										});
										console.log( "write in score tally stepAssessmentSelectionStatusResult = " + JSON.stringify( stepAssessmentSelectionStatusResult , null , 4 ) );
										useScoreValue = stepAssessmentSelectionStatusResult.scoring.scoreVal;
										rawScoreList.push( useScoreValue );
										//*/
									break;
									
									case "Matching" : 
										
										// still need to add scoring per-option, extrapolate from MAMC method above
										// currently just handling via special handler for matching
										
										var stepAssessmentCorrectList = [];
										cycleHandlingData:
										for( var v = 0 ; v < checkForSpecialHandling.data.length ; v++ ){
											for( var w = 0 ; w < checkForSpecialHandling.data[v].length ; w++ ){
												if( checkForSpecialHandling.data[v][w].status == "Correct" ){
													stepAssessmentCorrectList.push( String( w+1 ) );
													continue cycleHandlingData;
												}
											}
										}
										var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
											'action' : 				"pathScoreTally" , 
											'handlingType' : 		checkForSpecialHandling.type ,
											'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
											'moduleGroup' : 		courseModule_Group , 
											'moduleComponent' : 	courseModule_Module , 
											'componentStep' : 		grabStepID , 
											'scanChoiceList' : 		checkForSpecialHandling.data ,
											'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
											'choiceIDList' :		choiceIDList , // only passed with tally action
											'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
										});
										useScoreValue = stepAssessmentSelectionStatusResult.scoring.scoreVal;
										rawScoreList.push( useScoreValue );
									break;
									case "Ranking" : 
										var stepAssessmentCorrectList = [];
										for( var v = 0 ; v < Number( checkForSpecialHandling.data ) ; v++ ){
											stepAssessmentCorrectList.push( String(v+1) ); // push to array as a string for processing
										}
										var stepAssessmentSelectionStatusResult = filterSpecialHandlingOutputStatus({ 
											'action' : 				"pathScoreTally" , 
											'handlingType' : 		checkForSpecialHandling.type ,
											'correctList' : 		stepAssessmentCorrectList , // only passed with tally action
											'moduleGroup' : 		courseModule_Group , 
											'moduleComponent' : 	courseModule_Module , 
											'componentStep' : 		grabStepID , 
											'scanChoiceList' : 		checkForSpecialHandling.data ,
											'scanFunnelingList' : 	checkForSpecialHandling.funneling ,
											'choiceIDList' :		choiceIDList , // only passed with tally action
											'handlingData' : 		structureNodePath //structureNodePath.outputs // structure 
										});
										useScoreValue = stepAssessmentSelectionStatusResult.scoring.scoreVal;
										rawScoreList.push( useScoreValue );
									break;
								}
							}else{
								// special/funneled handling doesn't exist, so step assessment is SAMC
								// scoring will be in the outputs section
								// this is also the target scoring area for samc by default
								// if samc with scoring, scoring can ONLY be in the outputs, and will ONLY register selected values
								// if mamc, a "selected" indicator in outputs isn't really useful, as it doesn't work that way, but may be simpler to maintain/switch layouts this way...
								useScoreValue = "+0.00";
								stepOutputChoiceStackLoop:
								for( var v = 0 ; v < structureNodePath.outputs.length ; v++ ){
									if( Number(choiceIDList[0]) == (v+1) ){
										var checkForOutputScoring = structureNodePath.outputs[ v ].scoring;
										if( checkForOutputScoring != undefined && checkForOutputScoring !== '' ){
											// if unselected score value is present, new default to this unselected score value
											if( checkForOutputScoring.unselected != undefined && checkForOutputScoring.unselected !== '' ){
												useScoreValue = checkForOutputScoring.unselected;
											}
											// cycle the selected choice(s) for step iteration
											// if choice id num matches the index+1 of the cycling mamc choice list, usecorevalue is the selected value
											if( checkForOutputScoring.selected != undefined && checkForOutputScoring.selected !== '' ){
												choiceIDListLoop:
												for( var b = 0 ; b < choiceIDList.length ; b++ ){
													if( Number(choiceIDList[b]) == (v+1) ){ // selection id matches the mamcchoice list, use the selected value
														useScoreValue = checkForOutputScoring.selected;
														break choiceIDListLoop;
													}
												}
											}
										}
										break stepOutputChoiceStackLoop;
									}
								} // end stepOutputChoiceStackLoop
								rawScoreList.push( useScoreValue ); // here?
							}
						} // end process if step assessment selection is not x
					} // end if allowStepScoreTally
				} // end structureNodesLoopcountStepChain
				//for( var t = stepChainIteration ; t < userPath.length ; t++ ){
					//console.log( "rawScoreList for step id " + grabStepID + " = " + rawScoreList.join(" ::: ") );
					//var stepScoreList = 
				//}
				//stepChainIteration++;
				//console.log( "step id added = " + grabStepID + " : ");
				//console.log( "rawScoreList = " + rawScoreList.join(" ::: ") );
			} // end userPathLoop
			//console.log( "rawScoreList =  " + rawScoreList.join(" - ") );
			// purge blank values.  cycle list backwards so splicing clears unwanted items nicely
			for( var a = rawScoreList.length ; a >=0 ; a-- ){
			    if( rawScoreList[a] == "+0.00" || rawScoreList[a] == "-0.00" ){
			        rawScoreList.splice( a , 1);
			    }
			}
			//console.log( "rawScoreList =  " + rawScoreList.join(" ::: ") );
			var positiveList = 	[];
			var negativeList = 	[];
			for( var a = 0 ; a < rawScoreList.length ; a++ ){
				switch( rawScoreList[a].substring(0,1) ){
					case "+" : // sum positive adjustments first
						positiveList.push( rawScoreList[a].substr(1) );
					break;
					case "-" : // then subtract sum of negatives
						negativeList.push( rawScoreList[a].substr(1) );
					break;
				}
			}
			var sumPos = 	positiveList.reduce( sumFloat , 0 );
			var sumNeg = 	negativeList.reduce( sumFloat , 0 );
			resultScore = (sumPos - sumNeg).toFixed(2);
			//if( resultScore > baseLineScore ){ // this needed?
			if( String(resultScore).charAt(0) == "-" ){
				finalScore = String(resultScore);
			}else{
				finalScore = "+" + String(resultScore);
			}
			//console.log( "tallied score = " + finalScore ); 
			courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].talliedScore = finalScore;
			if( Number(finalScore) >= Number(masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring.pathScorePass) ){
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus = "Passed";
			}else{
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].passedStatus = "Failed";
			}
		}
	}
}
// ! =============================================================
// ! F.SubSequence.Update nav display ---
function subSeqNumsBuild(){
	/*
	<div class='subSequenceNav-PrevBut webFontForceRedrawClass focalItem' tabindex="0" aria-label="SubSequence Navigation : Previous SubSequence Page : Currently on first page of this SubSequence, so this control is currently disabled."></div>
	<div class="subSequenceNavNums focalItem" tabindex="0"><span class="accessViz subSequenceCurrentPageIndicationAccess">SubSequence Navigation : Current SubSequence Page Indication: </span><span class="accessViz subSequenceCurrentPageAccess">Page </span><span class="subSequenceNavNumCurrent"></span> <span class="subSequenceNavNumDivider">|<span class="accessViz"> of </span></span> <span class="subSequenceNavNumTotal"></span></div>
	<div class='subSequenceNav-NextBut webFontForceRedrawClass focalItem' tabindex="0" aria-label="SubSequence Navigation : Next SubSequence Page : Use space/return to step forward in SubSequence."></div>	
	
	SubSequence Navigation : Current SubSequence Page Indication : Page N 
	
	of N
	
	"subSequence" : { 
		"subSeq" : 							"Popup Topic ",
		"subSeqPageTitle" : 				"Popup Topic Page Title : ",
		"subSeqPageText" : 					"Popup Topic Page Text : ",
		"subSeqPageMediaNonLaunch" : 		"Popup Topic Display Media: ",
		"subSeqPageMediaNonLaunchCaption" : "Image Caption : ",
		"subSeqPageMediaNonLaunchDesc" : 	"Image Description : ",
		"subSeqPageMediaLaunchImage" : 		"Image Launcher Media: Use space or return to launch media.",
		"subSeqPageMediaLaunchVideo" : 		"Video Launcher Media: Use space or return to launch media.",
		"subSeqPageMediaLaunchPdf" : 		"PDF Launcher Media: Use space or return to launch media.",
		"subSeqPageMediaLaunchCaption" : 	"Image Caption : ",
		"subSeqPageMediaLaunchDesc" : 		" : Image Description : ",
		"subSeqPageMediaGrid" : 				"Media Grid : Use space or return to enter grid, then use up or down arrow keys to cycle grid items and space or return to launch the selected grid item.",
		"subSeqPageMediaGridItemCommonStart" : 	"Media Grid Item : ",
		"subSeqPageMediaGridItemImage" : 		"Image Launcher : ",
		"subSeqPageMediaGridItemVideo" : 		"Video Launcher : ",
		"subSeqPageMediaGridItemPdf" : 			"PDF Launcher : ",
		"subSeqPageMediaGridItemCaption" : 		"Image Caption : ",
		"subSeqPageMediaGridItemDesc" : 		"Image Description : ",
		"subSeqPageMediaGridItemCommonEnd" : 	" : Use space or return to launch the selected grid item.",
		"subSeqPageNavCurrentPage" : 		"Popup Topic Navigation : Current Popup Topic Page Indication: Page [var1] of [var2]",
		"subSeqPageNavStepFwdLastPage" : 	"Popup Topic Navigation : Next Popup Topic Page : Currently on last page of this Popup Topic, so this control is currently disabled.",
		"subSeqPageNavStepFwd" : 			"Popup Topic Navigation : Next Popup Topic Page : Use space/return to step forward in Popup Topic.",
		"subSeqPageNavStepBackFirstPage" : 	"Popup Topic Navigation : Previous Popup Topic Page : Currently on first page of this Popup Topic, so this control is currently disabled.",
		"subSeqPageNavStepBack" : 			"Popup Topic Navigation : Previous Popup Topic Page : Use space/return to step backward in the Popup Topic."
	*/
    if(currentBasePage_Content_SubSequenceCurrentPage == 1){
        $('.subSequenceNav-NumBox-HardFirst').removeClass('subSequenceNav-NumBox-noncurrent');
        $('.subSequenceNav-NumBox-HardFirst').addClass('subSequenceNav-NumBox-current');
        $('.subSequenceNav-PrevBut').removeClass('subSeqNavBookendButton-On');
        $('.subSequenceNav-PrevBut').addClass('subSeqNavBookendButton-Off');
        //$('.subSequenceNav-PrevBut').attr('aria-label' , langPack.screenreader.subSequence.subSeqPageNavStepBackFirstPage );
        placeLocalizedContent({
			'targetItem' : 		$('.subSequenceNav-PrevBut') ,
			'srcData' : 		langPack.screenreader.subSequence.subSeqPageNavStepBackFirstPage , 
			'placementMode' : 	"Attribute" , 
			'placementMode2' : 	"aria-label"
		});
    }else{
        $('.subSequenceNav-NumBox-HardFirst').removeClass('subSequenceNav-NumBox-current');
        $('.subSequenceNav-NumBox-HardFirst').addClass('subSequenceNav-NumBox-noncurrent');
        $('.subSequenceNav-PrevBut').removeClass('subSeqNavBookendButton-Off');
        $('.subSequenceNav-PrevBut').addClass('subSeqNavBookendButton-On');
        //$('.subSequenceNav-PrevBut').attr('aria-label' , langPack.screenreader.subSequence.subSeqPageNavStepBack );
        placeLocalizedContent({
			'targetItem' : 		$('.subSequenceNav-PrevBut') ,
			'srcData' : 		langPack.screenreader.subSequence.subSeqPageNavStepBack , 
			'placementMode' : 	"Attribute" , 
			'placementMode2' : 	"aria-label"
		});
    }
    if(currentBasePage_Content_SubSequenceCurrentPage == currentBasePage_Content_SubSequenceCurrentPageTotal){
        $('.subSequenceNav-NumBox-HardLast').removeClass('subSequenceNav-NumBox-noncurrent');
        $('.subSequenceNav-NumBox-HardLast').addClass('subSequenceNav-NumBox-current');
        $('.subSequenceNav-NextBut').removeClass('subSeqNavBookendButton-On');
        $('.subSequenceNav-NextBut').addClass('subSeqNavBookendButton-Off');
        //$('.subSequenceNav-NextBut').attr('aria-label' , langPack.screenreader.subSequence.subSeqPageNavStepFwdLastPage );
        placeLocalizedContent({
			'targetItem' : 		$('.subSequenceNav-NextBut')  ,
			'srcData' : 		langPack.screenreader.subSequence.subSeqPageNavStepFwdLastPage , 
			'placementMode' : 	"Attribute" , 
			'placementMode2' : 	"aria-label"
		});
    }else{
        $('.subSequenceNav-NumBox-HardLast').removeClass('subSequenceNav-NumBox-current');
        $('.subSequenceNav-NumBox-HardLast').addClass('subSequenceNav-NumBox-noncurrent');
        $('.subSequenceNav-NextBut').removeClass('subSeqNavBookendButton-Off');
        $('.subSequenceNav-NextBut').addClass('subSeqNavBookendButton-On');
        //$('.subSequenceNav-NextBut').attr('aria-label' , langPack.screenreader.subSequence.subSeqPageNavStepFwd );
        placeLocalizedContent({
			'targetItem' : 		$('.subSequenceNav-NextBut')  ,
			'srcData' : 		langPack.screenreader.subSequence.subSeqPageNavStepFwd , 
			'placementMode' : 	"Attribute" , 
			'placementMode2' : 	"aria-label"
		});
    }
    $('.subSequenceNav-MidGroup').html('');
    
    var lowestVal = currentBasePage_Content_SubSequenceCurrentPage - subSeqNavMidSideSplit;
    var highestVal = currentBasePage_Content_SubSequenceCurrentPage + subSeqNavMidSideSplit;
    if(lowestVal < 2){
    
    }
    
    var grabNavNumTotal = addLeadingZeros({ 
		"baseNum" : currentBasePage_Content_SubSequenceCurrentPageTotal
	});
	$('.subSequenceNavNumTotal').html( grabNavNumTotal );
    
    var grabNavNumCurrent = addLeadingZeros({ 
		"baseNum" : currentBasePage_Content_SubSequenceCurrentPage
	});
    $('.subSequenceNavNumCurrent').html( grabNavNumCurrent );
    
    $( '.subSequenceCurrentPageIndicationAccess' ).html( langPack.screenreader.subSequence.subSeqPageNavCurrentPage );
    $( '.subSequenceCurrentPageIndicationSplitAccess' ).html( langPack.screenreader.subSequence.subSeqPageNavCurrentPageSplit );
    
    //currentSubSequence = 1;
	//currentSubSeqPage = 1;
	//totalSubSeqPages = 7;
    
}
// ! F.SubSequence.Update page content ---
function newSubSequencePageAction( context ){
    //subSeqNavPreGapCheck();
    subSeqNumsBuild();
    //subSeqNavPostGapCheck();
    currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].currentPage = currentBasePage_Content_SubSequenceCurrentPage;
    subSequencePageContentFill({ 'passedContext' : context });
    
    $('.lightBoxDialog_Level2_Content_Container').animate({ scrollTop: 0 }, "slow");
}
// ! F.SubSequence.Fill Page Content ---
function subSequencePageContentFill( passedData ){
	//if( currentBasePage_Content_SubSequenceTotal > 1 ){
		//console.log("dree");
	if( currentBasePage_Content_PageMedia_MainGrid.length > 0 || currentBasePage_Meta_nodeContentType == "HotSpots" ){
		//currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "mediaGrid";
	}else{
		currentBasePage_Content_SubSequenceCurrentSequence = 1;
	}
	
	currentBasePage_Content_SubSequenceCurrentPageTotal = currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1].length - 1;
	var accessLastSubSeqPage = currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].currentPage;
	if( accessLastSubSeqPage >= currentBasePage_Content_SubSequenceCurrentPageTotal || currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].endReached ){
		$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.launcher_subsequenceend)[0].data);
		if(!currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].endReached){
			currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][0].endReached = true;
			$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').fadeIn(300).fadeOut(300).fadeIn(300).fadeOut(300).fadeIn(300);
		}
		if( currentBasePage_Content_PageMedia_MainGrid.length > 0 ){
			$('.CET-Activity-Content-Main-MediaBlock .mediaGridBoxOuter:nth-child(' + currentBasePage_Content_SubSequenceCurrentSequence + ') .CET-MediaLauncher-MediaTypeOverlay-Image').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.launcher_subsequenceend)[0].data);
		}else{
			$('.CET-Activity-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Image').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.launcher_subsequenceend)[0].data);
		}
	}
	var currentSubSequencePage_MetaPath = 		currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][accessLastSubSeqPage].meta;
	var currentSubSequencePage_ContentPath = 	currentBasePage_Content_SubSequenceStackObject.content[currentBasePage_Content_SubSequenceCurrentSequence - 1][accessLastSubSeqPage].content;
	
	// clear elements in case they do not receive content in new page load
	$('.lightBoxDialog_Level2_TopNav_LabelText').html('');
	$('.CET-SubSequence-Content-Main-TextBlock').html(''); 
	$('.CET-SubSequence-Content-Main-MediaBlock').html('');
	$('.CET-SubSequence-Content-Main-TextBlock').html('');					
	$('.CET-SubSequence-Content-Main-TextBlock-Accent').html('');	
	
	// clear storage data for page content and/or begin populating storage elements
	currentSubSequencePage_Content_DataObject = 															{};
	currentSubSequencePage_Content_DataObject.meta = 													{};
	currentSubSequencePage_Content_DataObject.meta.optionList = 										currentSubSequencePage_MetaPath.optionList;
	//currentSubSequencePage_Content_DataObject.meta.pageMediaWidth = 						currentSubSequencePage_MetaPath.optionList.ImageW;
	currentSubSequencePage_Content_DataObject.content = 												{};
	currentSubSequencePage_Content_DataObject.content.pageTitle = 									currentSubSequencePage_ContentPath.pageTitle;
	currentSubSequencePage_Content_DataObject.content.pageText = 									currentSubSequencePage_ContentPath.pageText;
	currentSubSequencePage_Content_DataObject.content.singleMediaImageObject = 			null;
	currentSubSequencePage_Content_DataObject.content.pageMedia_Main = 						[];
	currentSubSequencePage_Content_DataObject.content.pageMedia_Deco = 						[];
	currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid = 					[];
	currentSubSequencePage_Content_DataObject.content.pageMediaStyle = 						undefined;
	
	if(currentSubSequencePage_Content_DataObject.content.pageText != "" && currentSubSequencePage_Content_DataObject.content.pageText != null && currentSubSequencePage_Content_DataObject.content.pageText != undefined){
		$( '.CET-SubSequence-Content-Main-TextBlock-Container' ).addClass( "focalItem" );
		$( '.CET-SubSequence-Content-Main-TextBlock-Container' ).attr( "tabindex" , "0" );
		//var buildAccessibleIndicator = '<span class="accessViz">Subsequence Step Text Content: </span>';
		//$('.CET-SubSequence-Content-Main-TextBlock').prepend( buildAccessibleIndicator );
		$(".CET-SubSequence-Content-Main-TextBlock-Container").show();
	}else{
		$(".CET-SubSequence-Content-Main-TextBlock-Container").hide();
	}
	/*
	if(currentSubSequencePage_MetaPath.optionList.TextStyle != undefined && currentSubSequencePage_MetaPath.optionList.TextStyle != null && currentSubSequencePage_MetaPath.optionList.TextStyle != ""){
		currentSubSequencePage_Content_DataObject.meta.textStyle = currentSubSequencePage_MetaPath.optionList.TextStyle;
	}else{
		currentSubSequencePage_Content_DataObject.meta.textStyle = 'Default';
	}
	*/
	// sort media elements into arrays, even if singles
	if( currentSubSequencePage_ContentPath.pageMediaList != undefined && currentSubSequencePage_ContentPath.pageMediaList != null && currentSubSequencePage_ContentPath.pageMediaList != "" ){
		for(var e = 0 ; e < currentSubSequencePage_ContentPath.pageMediaList.length ; e++){
			/*
			if( currentSubSequencePage_ContentPath.pageMediaList[e].mediaRole == "BgAccent1"){
				currentSubSequencePage_Content_DataObject.content.pageMedia_BgAccent.push(currentSubSequencePage_Content_DataObject.content.pPageMediaList[e]);
			}
			
			if( currentSubSequencePage_ContentPath.pageMediaList[e].mediaRole == "BgBase1"){
				currentSubSequencePage_Content_DataObject.content.pageMedia_BgBase.push(currentSubSequencePage_Content_DataObject.content.pageMediaList[e]);
			}
			*/
			if( currentSubSequencePage_ContentPath.pageMediaList[e].mediaRole == "Main1" ){
				currentSubSequencePage_Content_DataObject.content.pageMedia_Main.push(currentSubSequencePage_ContentPath.pageMediaList[e]);
			}
			
			if( currentSubSequencePage_ContentPath.pageMediaList[e].mediaRole == "Deco1" ){
				currentSubSequencePage_Content_DataObject.content.pageMedia_Deco.push(currentSubSequencePage_ContentPath.pageMediaList[e]);
			}
			
			if( currentSubSequencePage_ContentPath.pageMediaList[e].mediaRole == "MainGrid1" ){
				currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.push(currentSubSequencePage_ContentPath.pageMediaList[e]);
			}
		}
	}
	
	// fill in subsequence page title
	$(".lightBoxDialog_Level2_TopNav_LabelText").html('<span class="accessViz">' + langPack.screenreader.subSequence.subSeqPageTitle + '</span>' + currentSubSequencePage_Content_DataObject.content.pageTitle );
	
	// fill in subsequence page text
	$(".CET-SubSequence-Content-Main-TextBlock").html('<span class="accessViz">' + langPack.screenreader.subSequence.subSeqPageText + '</span>' + currentSubSequencePage_Content_DataObject.content.pageText);
	
	if( passedData!= undefined && passedData.passedContext.action == "LaunchSubSequencePanel" ){ // Next | Previous
		//currentSubSequencePage_Content_DataObject.content.pageTitle
		$('#ariaLiveAssertive').html( langPack.screenreader.ariaLiveNotice.subSeqLaunch +  currentSubSequencePage_Content_DataObject.content.pageTitle );
	}
	
	if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length >= 1){
		// add an "override" item to optionlist for handling responsive sizing
		if(viewPortIsNarrow){
			currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
		}else{
			if(currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != undefined && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != null && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != ""){
				//currentSubSequencePage_Content_DataObject.meta.optionList.ImageW = currentSubSequencePage_Content_DataObject.meta.pageMediaWidth + '%';
			}else{
				currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
			}
		}
		$('.CET-SubSequence-Content-Main-MediaBlock').css('width', currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride + "%");
		var launcherPresent = false;
		// if has "launched" file element
		if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Launched != "" && 
			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Launched != null && 
			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].mediaFile_Launched != undefined ){
				launcherPresent = true;
		}
	}
	
	// process main media file(s) for current subsequence page
	for( var g = 0 ; g < currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length ; g++ ){
		// if building main content page SINGULAR media (not deco, bg)
		if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length == 1 && currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaRole == "Main1" ){
			switch (currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaType){
				case "Image":
					if(currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaVariant == "Basic"){
						if(launcherPresent){
							currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-ImageLauncher";
							makeMediaLauncherContent('subsequence', currentSubSequencePage_Content_DataObject.content.pageMediaStyle, g);
							var imageLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
							imageLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_basic + '"></div>';
							imageLauncherIconBuilder += 			'</div>';
							$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable').append(imageLauncherIconBuilder);
						}else{
							currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-ImageDisplay";
							makeMediaLauncherContent('subsequence', currentSubSequencePage_Content_DataObject.content.pageMediaStyle, g);
						}
						
						
						//currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].descriptionDisplay
						
					}
					break;
				//case "Video":
				case "AV Media":
					switch( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaVariant ){
						case "Vimeo" :
							if(launcherPresent){ // should always be a launcher!
								currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-VimeoLauncher";
							}
						break;
						case "Youtube" :
							if(launcherPresent){ // should always be a launcher!
								currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-YoutubeLauncher";
							}
						break;
						case "HTML5Video" :
							if(launcherPresent){ // should always be a launcher!
								currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-HTML5VideoLauncher";
							}
						break;
					}
					makeMediaLauncherContent('subsequence', currentSubSequencePage_Content_DataObject.content.pageMediaStyle, g);
					var videoLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
					videoLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_video + '"></div>';
					videoLauncherIconBuilder += 			'</div>';
					$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable').append(videoLauncherIconBuilder);
					$('.CET-SubSequence-Content-Main-MediaBlock .CET-MediaLauncher-MediaTypeOverlay-Image').css('border-radius', '0.1em');
					break;
				case "Document": 
					if(currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaVariant == "PDF"){
						if(launcherPresent){ // should always be a launcher!
							currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "singleMedia-PDFLauncher";
							makeMediaLauncherContent('subsequence', currentSubSequencePage_Content_DataObject.content.pageMediaStyle, g);
							var pdfLauncherIconBuilder = 			'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
							pdfLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_document + '"></div>';
							pdfLauncherIconBuilder += 			'</div>';
							$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image.launchable').append(pdfLauncherIconBuilder);
						}
					}
					break;
			}// end switch
			
			var accessibleMediaLauncher = false;
			if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].descriptionDisplay != "" && 
			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].descriptionDisplay != undefined ){
				accessibleMediaLauncher = true;
			}
			if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption != "" &&
			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption != undefined ){
				accessibleMediaLauncher = true;
			}
			if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaFile_Launched != "" &&
			currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaFile_Launched != undefined ){
				accessibleMediaLauncher = true;
			}
			if( accessibleMediaLauncher ){
				$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').addClass( "focalItem" );
				$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( "tabindex" , "0" );
				//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( "aria-label" , "Image Description" );
				//$( '.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( "title" , langPack.screenreader.subSequence.subSeqPageMediaLaunchDesc );
			}
		}
		//*
		if(currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption != "" && currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption != null && currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption != undefined){
			if(currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length == 1 && currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaRole == "Main1"){
				
				
				var singleMediaCaptionBuild = '<div class="singleMediaDisplayCaptionBox" aria-hidden="true">'
				singleMediaCaptionBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner">' + currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption + '</div>';
				singleMediaCaptionBuild += 	'</div>';
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').after( singleMediaCaptionBuild );
				
				var singleMediaCaptionAccessBuild = '<div class="singleMediaDisplayCaptionBoxAccess accessViz">';
				singleMediaCaptionAccessBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner"><span class="accessViz">' + langPack.screenreader.subSequence.subSeqPageMediaNonLaunchCaption + '</span>' + currentSubSequencePage_Content_DataObject.content.pageMedia_Main[g].mediaCaption + '</div>';
				singleMediaCaptionBuild += 	'</div>';
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').append( singleMediaCaptionAccessBuild );
				
				
				/*
				switch( currentSubSequencePage_Content_DataObject.meta.optionList.ImageFraming ){
					case "Clear" :
						//$('.CET-SubSequence-Content-Main-MediaBlock').css('box-shadow', 'none');
						//$('.singleFeedbackMediaDisplayCaptionBox').css('left', '0px'); // don't bump to the left like normal
						//$('.singleFeedbackMediaDisplayCaptionBoxInner').css('paddingTop', '0.7em'); // don't bump to the left like normal
						$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Clear" );
					break;
					case "Default" : 
					default :
						//$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').css('border-radius', '0.3em .3em 0 0');
						$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').attr( 'data-mediaBlockFraming' , "Default" );
					break;
				}
				*/
				//$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').after( singleMediaCaptionBuild );
				
				
				
				
			}
		}
		//*/
		
	}
	
	// process subsequence page media GRID file(s) for current subsequence page
	
	if( currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length > 0 ){
		currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "mediaGrid";
		//currentSubSequencePage_Content_DataObject.content.pageMediaStyle = "mediaGrid";
		/*
		if(viewPortIsNarrow){
			currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
		}else{
			if(currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != undefined && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != null && currentSubSequencePage_Content_DataObject.meta.optionList.ImageW != ""){
				//currentSubSequencePage_Content_DataObject.meta.optionList.ImageW = currentSubSequencePage_Content_DataObject.meta.pageMediaWidth + '%';
			}else{
				currentSubSequencePage_Content_DataObject.meta.optionList.ImageWOverride = '100';
			}
		}
		*/
		$('.CET-SubSequence-Content-Main-MediaBlock').append( mediaGridBuilder({
			'groupIncrement' : 	0 ,
			'gridCount' :  			currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length , 
			'dataPool' : 			"subSequence-main"
		}) );
	    gridBoxThumbCaptionRestyle(0, currentSubSequencePage_Content_DataObject.content.pageMedia_MainGrid.length, "subSequence-main");
	    gridBoxThumbFillBox();
	    maximizah('subSequence-main');
	}else{
		
		
		if( currentSubSequencePage_Content_DataObject.content.pageMedia_Main.length > 0 ){
			var descriptionDisplay = currentSubSequencePage_Content_DataObject.content.pageMedia_Main[0].descriptionDisplay;
			if( descriptionDisplay != "" && descriptionDisplay != null && descriptionDisplay != undefined ){
				//assessmentChoiceObjectData.outputFeedback_Media_descriptionDisplay = 	descriptionDisplay; // ADA long description
				var singleMediaDisplayDescriptionBuild = '<div class="accessViz">' + langPack.screenreader.subSequence.subSeqPageMediaLaunchDesc + descriptionDisplay + '</div>';
				$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').append( singleMediaDisplayDescriptionBuild );
			}	
		}
		//var descriptionLaunched = currentBasePage_Content_PageMedia_Main[g].descriptionLaunched;
		//if( descriptionLaunched != "" && descriptionLaunched != null && descriptionLaunched != undefined ){
			//assessmentChoiceObjectData.outputFeedback_Media_descriptionLaunched = 	descriptionLaunched; // ADA long description
		//}
	}
	/*
	if(currentBasePage_Content_PageMedia_MainGrid.length > 0){
		if(viewPortIsNarrow){
			pageMediaContainerWidth = '100%';
		}else{
			if(nodeMetaOptionList.ImageW != undefined && nodeMetaOptionList.ImageW != null &&nodeMetaOptionList.ImageW != ""){
				pageMediaContainerWidth = nodeMetaOptionList.ImageW + '%';
			}else{
				pageMediaContainerWidth = '100%';
			}
		}
		$('.CET-Activity-Content-Main-MediaBlock').css('width', pageMediaContainerWidth);
		currentBasePage_Content_PageMediaStyle = "mediaGrid";
		$('.CET-Activity-Content-Main-MediaBlock').append( mediaGridBuilder(0, currentBasePage_Content_PageMedia_MainGrid.length, "main") );
	    gridBoxThumbCaptionRestyle(0, currentBasePage_Content_PageMedia_MainGrid.length, "main");
	    gridBoxThumbFillBox();
	    maximizah('main');
	}
	/*/
	//singleMediaSizer('Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display, "SubSequenceDeco1", $('.CET-SubSequence-Content-Main-TextBlock-Accent') );
	for(var j = 0 ; j < currentSubSequencePage_Content_DataObject.content.pageMedia_Deco.length ; j++){
		//currentBasePage_Content_PageDeco1Image = currentBasePage_Content_PageMedia_Deco[j].mediaFile_Display;
		if( currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display != 'none' ){
			
			//$('.CET-Activity-Content-Main-TextBlock-Accent').css({
				//'background-image': 'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image + '")'//,
				//'display': 'block',
				//'position': 'relative'
				//'width': '100px'
			//});
			
			//singleMediaBuild('Image', '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image, "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
			singleMediaBuild('Image', mediaPathConstructor({ 'mediaFileName' : currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display }), "SubSequenceDeco1", $('.CET-SubSequence-Content-Main-TextBlock-Accent') );
			//singleMediaBuild('Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentSubSequencePage_Content_DataObject.content.pageMedia_Deco[0].mediaFile_Display, "SubSequenceDeco1", $('.CET-SubSequence-Content-Main-TextBlock-Accent') );
			
			//singleMediaBuild( 'Image', '../../content/' + CETActivityID + '/media/' + currentCETActivity_AuthorDataObject.authorPortraitFileName, "About", $('.authorBioCardPortraitImage') );
			
			/*
			$('.CET-Activity-Content-Main-TextBlock-Accent').css({
				'background-image': 'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image + '")'//,
				//'display': 'block',
				//'position': 'relative'
			});
			$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css('height', '400px');
			/*/
		}
	}
	
	maximizeCETActivityContentHeight();
	//maximizerDelayRelay();
	
	//$('#ariaLiveAssertive').text( "You have launched the Assessment Feedback Panel. Status : " + currentSubSequencePage_Content_DataObject.content.pageTitle );
	
	$('.lightBoxDialog_Level2_TopNav_LabelText').focus();
	updateFocus({ 'action' : "Update" });
	
}
// ! =============================================================
// ! F.About.Launcher ---
function navAboutLauncher(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	mediaGridStacksEnabled = false;
	level3LightboxLauncher("about");
}
// ! F.About.Stack list count ---
function aboutStackLoadIncrement(passedLabel, toggleAvail){
	for( var t = 0 ; t < aboutSideNavArray.length ; t++ ){
		//console.log( aboutSideNavArray[t].label + ' == ' +  passedLabel );
		//if( aboutSideNavArray[t].label == passedLabel ){
			//console.log( "ha" );
			aboutSideNavArray[t].available = toggleAvail;
		//}
	}
	aboutSideNavTotalItems++;
	//if(aboutSideNavTotalItems >= aboutSideNavArray.length){
		//aboutSideNavItemActive = $('.aboutSideNavStack').find('li:visible:first').index() + 1; // first visible item
		//sideNavReset('about', aboutSideNavItemActive);
	//}
}
// ! F.About.Authors.Load data--- 
function loadAuthorData(){
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	var label = 'ABOUT THE AUTHOR';
	//*
	countAuthors = 0;
	currentCETActivity_AuthorDataArray = [];
	
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	
	//[currentCourseModule]
	
	for( var i = 0 ; i < masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].authorList.length ; i++ ){
		var authorPath = masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].authorList[i];
		countAuthors++;
		var buildAuthorBlock = '<div class="authorBlock focalItem" tabindex="0" role="document">';
		buildAuthorBlock += 		'<span class="accessViz">' + langPack.screenreader.about.authorCardTitle + '</span>';
		buildAuthorBlock += 		'<div class="authorBioCard">';
		buildAuthorBlock +=				'<div class="authorBioCardPortrait">';
		buildAuthorBlock +=					'<div class="authorBioCardPortraitImage mediaLauncher-image"></div>';
		buildAuthorBlock +=				'</div>';
		buildAuthorBlock +=				'<div class="authorBioCardInfo">';
		buildAuthorBlock +=					'<div class="authorCardName"></div><span class="accessViz"> : </span>';
		buildAuthorBlock +=					'<div class="authorCardTitle"></div><span class="accessViz"> : </span>';
		buildAuthorBlock +=					'<div class="authorCardLocation"></div><span class="accessViz"> : </span>';
		buildAuthorBlock +=					'<div class="authorCardSeparatorLineH"></div><span class="accessViz"> : </span>';
		buildAuthorBlock +=					'<ul class="authorSubTitleList"></ul><span class="accessViz"> : </span>';
		buildAuthorBlock +=				'</div>';
		buildAuthorBlock +=			'</div>';
		buildAuthorBlock +=			'<div class="authorBioInfo"></div>';
		buildAuthorBlock +=		'</div>';
		$('.authorInfo').append(buildAuthorBlock);
		$('.authorBlock:nth-child(' + countAuthors + ') .authorCardName').html( '<strong>' + authorPath.name + '</strong>' );
		$('.authorBlock:nth-child(' + countAuthors + ') .authorCardTitle').html( authorPath.titles.mainTitle );
		$('.authorBlock:nth-child(' + countAuthors + ') .authorCardLocation').html( authorPath.titles.mainLocation );
		var hasBioText = false;
		if( authorPath.bioText == undefined || authorPath.bioText == "" || authorPath.bioText == null ){
			$('.authorBlock:nth-child(' + countAuthors + ') .authorBioInfo').html( "&nbsp;" ); // dead space so card sizes correctly
		}else{
			 hasBioText = true;
			$('.authorBlock:nth-child(' + countAuthors + ') .authorBioInfo').html( authorPath.bioText );
		}
		var disclosureBuilder = "";
		//console.log( "authorPath.disclosures =  " + authorPath.disclosures );
		if( authorPath.disclosures != undefined && authorPath.disclosures != '' ){
			if( !hasBioText ){
				$('.authorBlock:nth-child(' + countAuthors + ') .authorBioInfo').empty(); // clear above dead space
				//disclosureBuilder += 	"&nbsp;";
			}
			disclosureBuilder += 		'<div class="authorDisclosureBlock">';
			disclosureBuilder += 			'<div class="authorDisclosureHeader"><strong>' + langPack.ui.about.aboutAuthor.relevantDisclosure + ': </strong></div>';
			disclosureBuilder += 			authorPath.disclosures;
			disclosureBuilder += 		'</div>';
		}else{
			// if here, then has already added dead space during biotext check if that is also empty
		}
		$('.authorBlock:nth-child(' + countAuthors + ') .authorBioInfo').append( disclosureBuilder );
		$('.authorBlock:nth-child(' + countAuthors + ') .authorCardSeparatorLineH').css('background-color', skinPrimaryColor);
		if( authorPath.titles.subTitles != undefined ){
			for( var k = 0 ; k < authorPath.titles.subTitles.length ; k++ ){
				$('.authorBlock:nth-child(' + countAuthors + ') .authorSubTitleList').append('<li>' + authorPath.titles.subTitles[k] + '</li>');
			}
		}
		var newAuthorDataObject = {};
	    currentCETActivity_AuthorDataArray.push(newAuthorDataObject);
	    currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName = authorPath.portrait;
	    singleMediaBuild( 'Image', mediaPathConstructor({ 'mediaFileName' : currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName }), "About", $('.authorInfo .authorBlock:nth-child(' + countAuthors + ')').find('.authorBioCardPortraitImage') );
		//singleMediaBuild( 'Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName, "About", $('.authorInfo .authorBlock:nth-child(' + countAuthors + ')').find('.authorBioCardPortraitImage') );
	}
	// handle pluralizing author label in sidenav and droplist sidenav, should only happen when about is launched.
    if( countAuthors >= 2 ){
	    //$('.authorNavLabel').append('s'); // pluralize author label sidenav, special class is currently hard coded in html about loader
	    $('.authorPluralS').append('s'); // used in accessible space/return note 
	    //data-uiText="LBLvl3SideNav-AboutAuthors"
	    //$('.authorInfoSectionHeader').append('s');
	    //$('.sideNavDropList .menuSelectedLabel').append('s'); // pluralize author label droplist selected item sidenav (is always first in list, currently)
		/*
		for( var j = 0 ; j < sideNavArray.length ; j++ ){
	    	if( sideNavArray[j].navSlotLabel == "About the Author" ){
	    		sideNavArray[j].navSlotLabel += 's'; // add the plural to the array entry, for further interactions
		    	$('.sideNavDropList .qActivityChoice:nth-child(' + (j + 2) + ') .sidenavItemInnerText').append('s'); // pluralize author label droplist sidenav
	    	}
		}
		*/
		//console.log("EEEE");
		$('.sidenavItemInnerText [data-uiText="LBLvl3SideNav-AboutAuthors"]').html( langPack.ui.about.aboutAuthor.aboutAuthors );
		$('.sideNavDropList .sidenavItemInnerText.aboutAuthorsPluralizable').html( langPack.ui.about.aboutAuthor.aboutAuthors );
		$('[data-uiText="AboutTopicTitle-AboutAuthors"]').html( langPack.ui.about.aboutAuthor.aboutAuthors );
    }else{
	    //console.log("RRRR");
	    $('.sidenavItemInnerText [data-uiText="LBLvl3SideNav-AboutAuthors"]').html( langPack.ui.about.aboutAuthor.aboutAuthor );
	    $('.sideNavDropList .sidenavItemInnerText.aboutAuthorsPluralizable').html( langPack.ui.about.aboutAuthor.aboutAuthor );
	    $('[data-uiText="AboutTopicTitle-AboutAuthors"]').html( langPack.ui.about.aboutAuthor.aboutAuthor );
    }
    aboutStackLoadIncrement(label, true);
    
    // setup about authors text for ADA focusing
    $( '.authorInfo .authorBlock' ).each(function(){
		setupTextHyperlinks({ 
			'linkElement' : $(this).find('a'), 
			'uniqueClass' : "AboutAuthorBlockTextHyperlink" 
		});
	});
    
    
	/*/
	/*
	//--- original stuff
	$.ajax({
		type:			'POST',
		//url: 			'xml_updates/' + loadDataFile + '.xml',
		//url: 			'../../content/' + CETActivityID + '/xml/authorData.xml?' + dummyTS,
		url: 			CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/xml/authorData.xml?' + dummyTS,
		dataType: 	'xml',
		data:			{
							
						},
		success: 	function(response){
							
							countAuthors = 0;
							
							
							$(response).find("authorDataSet").each(function(){
								countAuthors++;
								var buildAuthorBlock = '<div class="authorBlock">';
								buildAuthorBlock += 		'<div class="authorBioCard">';
								buildAuthorBlock +=				'<div class="authorBioCardPortrait">';
								buildAuthorBlock +=					'<div class="authorBioCardPortraitImage mediaLauncher-image"></div>';
								buildAuthorBlock +=				'</div>';
								buildAuthorBlock +=				'<div class="authorBioCardInfo">';
								buildAuthorBlock +=					'<div class="authorCardName"></div>';
								buildAuthorBlock +=					'<div class="authorCardTitle"></div>';
								buildAuthorBlock +=					'<div class="authorCardLocation"></div>';
								buildAuthorBlock +=					'<div class="authorCardSeparatorLineH"></div>';
								buildAuthorBlock +=					'<ul class="authorSubTitleList"></ul>';
								buildAuthorBlock +=				'</div>';
								buildAuthorBlock +=			'</div>';
								buildAuthorBlock +=			'<div class="authorBioInfo"></div>';
								buildAuthorBlock +=		'</div>';
								
								$('.authorInfo').append(buildAuthorBlock);
								
								$('.authorBlock:nth-child(' + countAuthors + ') .authorCardName').html( '<strong>' + $(this).find("authorName").text() + '</strong>' );
								$('.authorBlock:nth-child(' + countAuthors + ') .authorCardTitle').html( $(this).find("mainTitle").text() );
								$('.authorBlock:nth-child(' + countAuthors + ') .authorCardLocation').html( $(this).find("mainLocation").text() );
								$('.authorBlock:nth-child(' + countAuthors + ') .authorBioInfo').html( $(this).find("authorBioText").text() );
								$('.authorBlock:nth-child(' + countAuthors + ') .authorCardSeparatorLineH').css('background-color', skinPrimaryColor);
								$(this).find("subTitleListItem").each(function(){
									$('.authorBlock:nth-child(' + countAuthors + ') .authorSubTitleList').append('<li>' + $(this).text() + '</li>');
							    });
							    
							    var newAuthorDataObject = {};
							    currentCETActivity_AuthorDataArray.push(newAuthorDataObject);
							    currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName = $(this).find("authorPortrait").text();
							   // singleMediaBuild( 'Image', '../../content/' + CETActivityID + '/media/' + currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName, "About", $('.authorInfo .authorBlock:nth-child(' + countAuthors + ')').find('.authorBioCardPortraitImage') );
								singleMediaBuild( 'Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentCETActivity_AuthorDataArray[countAuthors - 1].authorPortraitFileName, "About", $('.authorInfo .authorBlock:nth-child(' + countAuthors + ')').find('.authorBioCardPortraitImage') );
						    });
						    // handle pluralizing author label in sidenav and droplist sidenav, should only happen when about is launched.
						    if( countAuthors >= 2 ){
							    $('.authorNavLabel').append('s'); // pluralize author label sidenav, special class is currently hard coded in html about loader
							    $('.sideNavDropList .menuSelectedLabel').append('s'); // pluralize author label droplist selected item sidenav (is always first in list, currently)
								for( var j = 0 ; j < sideNavArray.length ; j++ ){
							    	if( sideNavArray[j].navSlotLabel == "About the Author" ){
							    		sideNavArray[j].navSlotLabel += 's'; // add the plural to the array entry, for further interactions
								    	$('.sideNavDropList .qActivityChoice:nth-child(' + (j + 2) + ') .sidenavItemInnerText').append('s'); // pluralize author label droplist sidenav
							    	}
								}
						    }
						    aboutStackLoadIncrement(label, true);
						},
		  error: 		function(response){
		  					$('.aboutSideNavStack li').each(function(){
			  					if( $(this).find('.sidenavItemInnerText').text() == label ){
				  					$(this).hide();
				  				}
				  			});
				  			aboutStackLoadIncrement(label, false);
				  		}
	});
	/*/
}

// ! F.About.Credits.Load data ---
function loadProductionCreditsData(){ 
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	//var label = 'PRODUCTION CREDITS';
	var label = 'ACKNOWLEDGEMENTS';
	$('.creditStack').html('');
	
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	
	if( masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].credits != undefined && masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].credits.length > 0 ){
		for( var i = 0 ; i < masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].credits.length ; i++ ){
			var creditsPath = 			masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].credits[i];
			var creditBlockBuild = 	'<div class="creditSection focalItem" tabindex="0" role="document">';
			creditBlockBuild += 		'<span class="accessViz">' + langPack.screenreader.about.acknowledgementsBlock + '</span>';
			creditBlockBuild += 		'<div class="creditSection_Header"><strong>' + creditsPath.creditSectionLabel + '</strong><span class="accessViz"> : </span></div>';
			creditBlockBuild += 		'<div class="creditSection_Content">' + creditsPath.creditSectionInfoText + '</div>';
			creditBlockBuild += 	'</div>';
			$('.creditStack').append( creditBlockBuild );
		}
	}
	
	// hard-coded production team list
	/*
	var productionTeamWedge = 					{};
	productionTeamWedge.creditSectionLabel = 	"Production Team";
	productionTeamWedge.creditSectionInfoText = 		"This case was produced by the Center for Educational Technologies at Texas A&M University College of Veterinary Medicine & Biomedical Sciences.<br /><br /><table class='contentTextTable-Small1'><tr class='contentTextTable-Row-Normal'><td>Dan Shuta:</td><td>Software Development</td></tr><tr class='contentTextTable-Row-Normal'><td>Jodi Korich:</td><td>Project Management</td></tr><tr class='contentTextTable-Row-Normal'><td>Jordan Tayce:</td><td>Instructional Design</td><tr class='contentTextTable-Row-Normal'><td>Lisa Keefe:</td><td>Instructional Design</td></tr><tr class='contentTextTable-Row-Normal'><td>Scott Birch:</td><td>Multimedia Production</td></tr><tr class='contentTextTable-Row-Normal'><td>Suzie Kabat:</td><td>Graphic Design</td></tr><tr class='contentTextTable-Row-Normal'><td>Tonya Miles:</td><td>Content Architecture</td></tr></table>";
	var productionTeamBlockBuild = 	'<div class="creditSection">';
	productionTeamBlockBuild += 			'<div class="creditSection_Header"><strong>' + productionTeamWedge.creditSectionLabel + '</strong></div>';
	productionTeamBlockBuild += 			'<div class="creditSection_Content">' + productionTeamWedge.creditSectionInfoText + '</div>';
	productionTeamBlockBuild += 		'</div>';
	$('.creditStack').append( productionTeamBlockBuild );
	
	aboutStackLoadIncrement(label, true);
	*/
	
	var StepStoneBlockBuild = '<div class="creditSection focalItem" tabindex="0">';
	StepStoneBlockBuild += 		'<div class="creditSection_Content stepStoneDisclaimerBlock_Credits">';
	//StepStoneBlockBuild += 			'<div class="stepStoneDisclaimer_Credits">The content of this course is not endorsed by StepStone, Texas A&M CVM, or CET.</div>';
	//StepStoneBlockBuild += 			'<div class="creditLogoContainer" data-creditLogo="StepStoneLogo">';
	//StepStoneBlockBuild += 				'<div class="creditLogo"></div>';
	//StepStoneBlockBuild += 			'</div><div class="creditLogoContainer" data-creditLogo="ATMLogo">';
	StepStoneBlockBuild += 			'<div class="creditLogoContainer" data-creditLogo="CETLogo">';
	StepStoneBlockBuild += 				'<div class="creditLogo"><span class="accessViz">' + langPack.screenreader.about.acknowledgementsLast_OrgCET + '</span></div>';
	StepStoneBlockBuild += 			'<div class="accessViz"> -- </div>';
	StepStoneBlockBuild += 			'</div><div class="creditLogoContainer" data-creditLogo="ATMLogo">';
	StepStoneBlockBuild += 				'<div class="creditLogo"><span class="accessViz">' + langPack.screenreader.about.acknowledgementsLast_OrgTamuCVM + '</span></div>';
	StepStoneBlockBuild += 			'</div>';
	StepStoneBlockBuild += 			'<div class="accessViz"> -- </div>';
	StepStoneBlockBuild += 			'<div class="stepStoneDisclaimer_Credits"><span class="accessViz">' + langPack.screenreader.about.acknowledgementsLast_Disclaimer1 + '</span>' + langPack.ui.about.acknowledgements.stepStoneLegalNotice + '</div>';
	StepStoneBlockBuild += 		'</div>';
	StepStoneBlockBuild += 	'</div>';
	$('.creditStack').append( StepStoneBlockBuild );
	
	// setup about acknowledgements text for ADA focusing
    $( '.creditStack .creditSection' ).each(function(){
		setupTextHyperlinks({ 
			'linkElement' : $(this).find('a'), 
			'uniqueClass' : "AboutAttributionBlockTextHyperlink" 
		});
	});
	
	/*
		
		{
	"pathData" : {
		"meta" : {
			"type" : "Case Study",
			"sysVersion" : "1.2",
			"title" : "Case Study Title Here"
		},
		"overview" : {
			"mainText" : "In this case, you&#39;ll evaluate Barkley the<br /> <br /> damn dog to determine a diagnosis and appropriate course of treatment.",
			"media" : [
				{
					"role" : "Main1",
					"type" : "Image",
					"variant" : "Basic",
					"display" : "pic2.jpg"
				}
			]
		},
		"authorList" : [
			{
				"name" : "Audrey K. Cook",
				"portrait" : "pic4.jpg",
				"titles" : {
					"mainTitle" : "Associate Ba dass",
					"mainLocation" : "Texas A&M University College of Veterinary Medicine & Biomedical Sciences",
					"subTitles" : [
						"BVM&S - Edinburgh University, Scotland",
						"MRCVS - London, England",
						"Diplomate, ACVIM - Small Animal Internal Medicine",
						"Diplomate, ECVIM - Companion Anima",
						"Diplomate, ABVP - Feline Practice",
						"Lord of all that you survey"
					]
				},
				"bioText" : "Audrey Cook<br />graduated with Distinction from the Royal (Dick) School of Veterinary Studies, University of Edinburgh, Scotland, in 1989. The following year, she completed an Internship in Small Animal Medicine and Surgery at North Carolina State University College of Veterinary Medicine, and then spent three years at the University of California at Davis College of Veterinary Medicine as a Resident in Small Animal Internal Medicine. In 1994, she passed the examinations and completed the requirements to become a Diplomate in the American College of Veterinary Internal Medicine. In 1996, she achieved Diplomate status in the European College of Veterinary Internal Medicine. From 1997 to 2007, Audrey Cook owned a specialty referral practice in Newport News, Virginia, before joining the faculty at Texas A&amp;M.",
				"disclosures" : "Audrey Cook discloses the following financial relationships relevant to the course content and materials: Consultant for Dechra Pharmaceuticals, Abbott Laboratories, and Antech Diagnostics."
			}
		]
	}
}
		
		
		
		"credits" : [
			{
				"sectionLabel" : 	"Acknowledgements",
				"sectionData" : 	"Radiographs and lab work provided courtesy of the Imaging and Clinical Pathology Sections, Texas A&M Veterinary Medical Teaching Hospital.<br /><br />Clinical pathology images courtesy of:<br />Mark C. Johnson, DVM, Dipl. ACVP<br />Clinical Associate Professor<br />Texas A&M University College of Veterinary Medicine & Biomedical Sciences<br /><br /><h2>Production Team</h2>This case was produced by the Center for Educational Technologies at Texas A&M University College of Veterinary Medicine & Biomedical Sciences.<br /><br /><table class='contentTextTable-Small1'><tr class='contentTextTable-Row-Normal'><td>Dan Shuta:</td><td>Software Development</td></tr><tr class='contentTextTable-Row-Normal'><td>Jodi Korich:</td><td>Project Management</td></tr><tr class='contentTextTable-Row-Normal'><td>Jordan Tayce:</td><td>Instructional Design</td></tr><tr class='contentTextTable-Row-Normal'><td>Scott Birch:</td><td>Multimedia Production</td></tr><tr class='contentTextTable-Row-Normal'><td>Suzie Kabat:</td><td>Graphic Design</td></tr><tr class='contentTextTable-Row-Normal'><td>Tonya Miles:</td><td>Content Architecture</td></tr></table>"
			}
		]
	*/
	/*
	$.ajax({
		type:			'POST',
		//url: 			'xml_updates/' + loadDataFile + '.xml',
		//url: 			'../../content/' + CETActivityID + '/xml/productionCreditsData.xml?' + dummyTS,
		url: 			CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/xml/productionCreditsData.xml?' + dummyTS,
		dataType: 	'xml',
		data:			{
							
						},
		success: 	function(response){
							$('.creditStack').html('');
							$(response).find("creditDataSet").each(function(){
								var sectionHeader = $(this).attr('sectionLabel');
								$('.creditStack').append( '<div class="productionCredits-SectionHeader"><strong>' + sectionHeader + '</strong></div>' );
								$('.creditStack').append( $(this).text() );
							});
							//aboutMenuStackList.productioncredits = true;
							aboutStackLoadIncrement(label, true);
						},
		  error: 		function(response){
		  					$('.aboutSideNavStack li').each(function(){
			  					if( $(this).find('.sidenavItemInnerText').text() == label ){
				  					$(this).hide();
				  				}
				  			});
				  			aboutStackLoadIncrement(label, false);
				  		}
	});
	*/
}
// ! =============================================================
// ! F.Help.Launcher ---
function navHelpLauncher(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	mediaGridStacksEnabled = false;
	if( $('body').attr('data-lightBoxPanel3') == "Dashboard" ){
		level3LightboxLauncher("dashboardHelp");
	}else{
		level3LightboxLauncher("help");
	}
}
// ! F.Help.Support.Load data ---
function loadOrganizationHelp(){
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	//var label = 'SUPPORT';
	$('.supportInfo').html('');
	var buildSupport = '';
	buildSupport += '<ul class="supportItemStack">';
	//buildSupport += 	'<li>';
	//buildSupport += 		'<div class="supportItemLabel">StepStone Website: </div>';
	//buildSupport += 		'<div class="supportItemLinkLine"><a href="http://www.tamucet.org/portfolio/stepstone-content-authoring-app/" target="_blank">http://www.tamucet.org/portfolio/stepstone-content-authoring-app/</a></div>';
	//buildSupport += 	'</li>';
	buildSupport += 	'<li>';
	buildSupport += 		'<div class="supportItemLabel">Contact the StepStone Team: </div>';
	buildSupport += 		'<div class="supportItemLinkLine"><a href=mailto:CETHelpdesk@cvm.tamu.edu?Subject=StepStone%20Support%20Inquiry>Contact the StepStone Team</a></div>';
	//buildSupport += 		'<div class="supportItemLinkLine"><a href="http://www.tamucet.org/contact/" target="_blank">http://www.tamucet.org/contact/</a></div>';
	buildSupport += 	'</li>';
	buildSupport += '</ul>';
	$('.supportInfo').append(buildSupport);
	//$('.supportItemStack').before('<div class="supportSectionHeader">Contact Us</div>');
										
	/*
	var checkOrganization = organization;
	if( checkOrganization != undefined && checkOrganization != null && checkOrganization != '' ){
		checkOrganization = organization;
	}else{
		checkOrganization = 'CET';
	}
	
	$.ajax({
		type:			'POST',
		//url: 			'xml_updates/' + loadDataFile + '.xml',
		url: 			'../xml/supportSet-' + checkOrganization + '.xml?' + dummyTS,
		dataType: 	'xml',
		data:			{
							
						},
		success: 	function(response){
							$('.supportInfo').html('');
							var buildSupport = '';
							$(response).find("supportElementGroup").each(function(){
								var sectionHeader = '';
								buildSupport += '<ul class="supportItemStack">';
								$(this).find("supportElement").each(function(){
									var grabLabel = $(this).attr("label");
									if(grabLabel == "Header"){
										sectionHeader = $(this).text();
									}else{
										buildSupport += 	'<li>';
										buildSupport += 		'<span class="supportItemLeftBlock">' + grabLabel + ': </span>';
										
										switch (grabLabel){
											
											case 'Web':
												buildSupport += '<a href=' + $(this).text() + ' target="_blank">' + $(this).text() + '</a>';
												break;
												
											case 'Email':
												buildSupport += '<a href=mailto:' + $(this).text() + '?Subject=Case%20Player%20Support%20Issue>' + $(this).text() + '</a>';
												break;
												
											default:
												buildSupport += $(this).text();
											
										}
										
										buildSupport += 	'</li>';
									}
								});
								buildSupport += '</ul>';
								$('.supportInfo').append(buildSupport);
								$('.supportItemStack').before('<div class="supportSectionHeader">' + sectionHeader  + '</div>');
							});
						},
		  error: 		function(response){
		  					$('.helpSideNavStack li').each(function(){
			  					if( $(this).find('.sidenavItemInnerText').text() == label ){
				  					$(this).hide();
				  				}
				  			});
				  		}
	});
	*/
}
// ! =============================================================
// ! F.BasePlayer.Reset Page data ---
function currentBasePageReset(){
	//console.log("cbp reset");
	$('#CET-Activity-Content-Main').css('max-width', '');
	$('#CET-Activity-Content-Title-Text .contentHeaderTitleTextVisible').html();
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_infoonly)[0].data);
	$('#CET-Activity-Content-Title-PageTypeIndicator').attr( 'data-buttonAction' , "Off" );
	//$('#CET-Activity-Content-BGContainer').html();
	$('#CET-Activity-Content-BGContainer').css('background-image', 'none');
	//var contentBuild = 	'<div id="CET-Activity-Content-Main">';
	var contentBuild = 			'';
	contentBuild += 			'<div id="CET-Activity-Content-Main-MediaBlockGhost" class="CET-Activity-Content-Main-MediaBlockGhost"></div>';
	contentBuild += 			'<div class="CET-Activity-Content-Main-TextBlock-Container" role="document">';
	contentBuild += 				'<div class="CET-Activity-Content-Main-TextBlock"></div>';
	contentBuild += 			'</div>';
	contentBuild += 			'<div id="CET-Activity-Content-Main-MediaBlock" class="CET-Activity-Content-Main-MediaBlock"></div>';
	contentBuild += 			'<div class="CET-Activity-Content-Main-TextBlock-Accent-Container">';
	contentBuild += 				'<div class="CET-Activity-Content-Main-TextBlock-Accent"></div>';
	contentBuild += 			'</div>';
	$('#CET-Activity-Content-Main').empty();
	$('#CET-Activity-Content-Main').html(contentBuild);
	$('#CET-Activity-Content-Assessment').empty();
	
	//$('#CET-Activity-Content').removeClass( "webkitOverflowScrollingTouch" );
	//$('#CET-Activity-Content').removeClass( "overflowYAuto" ).addClass( "overflowYHidden" );
	
	//var assessmentBuild = 	'<div id="CET-Activity-Content-Assessment"></div>';
	// new page meta
	nodeMetaOptionList = 														{};
	currentBasePage_Meta_nodeContentType = 						undefined;
	currentBasePage_Meta_nodeContentVariant = 					undefined;
	currentBasePage_Meta_nodeContentTheme = 						undefined;
	currentBasePage_Meta_pageTypeIndicatorIcon = 				undefined;
	// new page content
	currentBasePage_Content_PageTitle = 								undefined;
	currentBasePage_Content_PageText = 								undefined;
	currentBasePage_Content_PageMediaList = 						[];
	currentBasePage_Content_PageMedia_BgBase = 					[];
	currentBasePage_Content_PageMedia_BgAccent = 				[];
	currentBasePage_Content_PageMedia_Main = 						[];
	currentBasePage_Content_PageMedia_Deco = 					[];
	currentBasePage_Content_PageMedia_MainGrid = 				[];
	currentBasePage_Content_PageMediaStyle = 						undefined;
	currentBasePage_Content_PageClipboardList =					[];
	//currentBasePage_Content_PageBGImage = 						'none';
	currentBasePage_Content_PageDeco1Image = 					'none';
	currentBasePage_Content_PageBGSolidColor = 					'none';
	currentBasePage_Content_PageBGSolidOpacity = 				'none';
	currentBasePage_Content_TextStyle = 								"Default";
	currentBasePage_Content_SubSequenceStackObject = 		{};
	currentBasePage_Content_SubSequenceTotal;
	currentBasePage_Content_SubSequenceCurrentSequence;
	currentBasePage_Content_SubSequenceCurrentPage;
	currentBasePage_Content_SubSequenceCurrentPageTotal;
	currentSubSequencePage_Content_DataObject = 				{};
	//clear main single media object
	currentBasePage_SingleMediaImageObject = 						{};
	//clear about media object
	currentAboutPage_SingleMediaImageObject = 						{};
	//clear main deco 1 media object
	currentBasePage_Deco1MediaImageObject = 						{};
	// clear feedback media object
	currentFeedbackPage_SingleMediaImageObject = 				{};
	// new page assessment
	currentBasePage_Assessment_Present = 							false;
	currentBasePage_Assessment_Type = 								undefined;
	currentBasePage_Assessment_Variant = 							undefined;
	currentBasePage_Assessment_Requirement = 						undefined;
	currentBasePage_Assessment_SingleAttempt = 					false;
	currentBasePage_Assessment_InstructionText = 					undefined;
	currentBasePage_Assessment_HintText = 							undefined;
	currentBasePage_Assessment_OutputCount = 					undefined;
	currentBasePage_Assessment_OutputShuffle = 					undefined;
	//currentBasePage_Assessment_ChoiceOptionShuffle = 			undefined;
	currentBasePage_Assessment_OutputList = 						[];
	currentBasePage_Assessment_SpecialHandlingData = {};
	currentBasePage_Assessment_FeedbackWasChecked = 		false;
	nodeAssessment_SpecialHandling_OutputCount	= 							0;
	nodeAssessment_SpecialHandling_OutputStatusMatchList = 				[];
	nodeAssessment_SpecialHandling_VitalCorrectMatchList = 				[];
	nodeAssessment_SpecialHandling_OutputDataList = 					[];
	nodeAssessment_SpecialHandling_PartialAllowed = 					false;
	nodeAssessment_SpecialHandling_NeutralAllowed = 					false;
	nodeAssessment_Patterns_VitalCorrectMatchList = 					[];
	pageAssessmentSelectionResult = 									{};
	currentCETActivity_Clipboard_NewPageQuarantine = 			[];
	currentBasePage_Content_MediaBoxHeight = 						undefined;
	currentBasePage_Content_PageMediaStyle = 						undefined;
	currentBasePage_Content_ReducedTextHeight = 				undefined;
	currentBasePage_Content_TextBoxContainerLeftPadding = 	undefined;
	currentBasePage_Content_TextBoxContainerRightPadding = undefined;
	$( '#CET-Activity-Content-MainSandbox' ).empty().removeClass( "SandboxOccupied" ).removeClass( "focalItem" ).removeAttr( 'tabindex' );
	//$( '#CET-Activity-Content-MainSandbox' ).empty().removeClass( "SandboxOccupied" );
}
// ! F.BasePlayer.Load New Page data ---
function loadNewActivityPage( context ){
	console.log("load new activity page");
	
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	
	//console.log( "load step, userpath 0 = " + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.join(" > ") );
	
	// supplied when launching a path
	var setCurrentPathType	= 						context.setCurrentPathType;
	if( setCurrentPathType != "" && setCurrentPathType != null && setCurrentPathType != undefined ){
		//setCurrentPathType = "Case Study"; // default
		//setCurrentPathType = "Case Study"; // default
		//console.log( "setCurrentPathType = " + setCurrentPathType );
		$('body').attr( 'data-activePathType' , setCurrentPathType );
	}
	
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	
	// set the data file id to load
	var loadDataFile = context.loadDataFile;
	updateCourseModuleGroupedActive({ 'updateStepID' : loadDataFile });
	courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].lastViewedStep = loadDataFile;
	
	//console.log( 'ldf -- ' + loadDataFile );
	
	pageAssessmentSelectionArray = [];
	
	// if previewing in authoring tool, perform checks
	//if( isAuthoringMode ){
	if( isAuthoringMode ){
		//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		if( authoringMode == "PathBuilder" ){
			// call to authoring tool 
			var checkLoadAllowance = {};
			if( authoringMode_PreviewerLaunched ){
				// if previewer already launched
				checkLoadAllowance = window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'saveStatusCheck' , 'stepID' : loadDataFile });
			}else{
				// at init of preview launch
				//checkLoadAllowance = window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'saveStatusCheck_AutoApprove' , 'stepID' : loadDataFile });
				checkLoadAllowance.allowanceGate = "allowStepLoad";
			}
			// if allowance gate is a returned property
			if( checkLoadAllowance.allowanceGate != undefined ){
				switch( checkLoadAllowance.allowanceGate ){
					case "allowStepLoad" : 
						// if allowance gate approves loading the target step file
						// allow the step to be loaded as normal
						//returnObject.loadStepID = context.stepID;
						console.log( 'ok to go' );
						if( !authoringMode_PreviewerLaunched ){
							window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'newLaunch' , 'stepID' : loadDataFile });
							// store the initial launch parameter so subsequent calls to this function handle uniquely
							//authoringMode_PreviewerLaunched = true;
						}else{
							window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'pageLoad' , 'stepID' : loadDataFile });
						}
					break;
					case "suspendStepLoad" : 
						// cancel the new page load
						console.log( 'block load' );
						return false;
					break;
				}
			}
		}
	}
	
	if( isAuthoringMode){
		if( !authoringMode_PreviewerLaunched ){
			authoringMode_PreviewerLaunched = true;
		}
	}
	
	//if( isAuthoringMode ){
		
		//var stepIDNumSplit = 	activeDataSource.split('x');
		//var stepIDNum = 			Number(stepIDNumSplit[1]);
		
		// -------------------------------------
		// requires same-domain
		
		//if( !authoringMode_PreviewerLaunched ){
			//window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'newLaunch' , 'stepID' : stepIDNum });
			// store the initial launch parameter so subsequent calls to this function handle uniquely
			//authoringMode_PreviewerLaunched = true;
		//}else{
			//window.parent.previewer_AuthoringTool_SendCommand({ 'reflexType' : 'pageLoad' , 'stepID' : stepIDNum });
		//}
		// alternate...
		//parent.document.getElementById('hiddenField').value = $(this).blah();
		// -------------------------------------
	//}else{
		//alert('aint');
		//window.triggerAlert = function (){
       		//alert('iFrame');
	   	//}
	//}
	
		/*
	if( context.triggerOrigin != undefined ){
		if( context.triggerOrigin == 'authoringTool_previewerReload' ){
			
		}
	}
	*/
	
	//console.log('start load');
	var loadNodeName = "draggybox" + loadDataFile;
	activeDataSource = loadNodeName;
	//console.log('step load 1');
	
	//console.log('cbvs = ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus );
	//console.log('cbvsl = ' + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus.length );
	
	var grabActiveModule = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1];
	
	if(loadNodeName == "draggybox1"){
		//$('#navItem-restart').addClass('sneakyHider').find('*').addClass('sneakyHider');
		//$('#menuNavItem-restart').addClass('sneakyHider').find('*').addClass('sneakyHider');
		//	({ 'setIcon' : "Dashboard" , 'setLabel' : "RETURN" , 'setAction' : "Return" });
		stepBackButtonSet({ 'setAction' : "Dashboard" });
		
	}else{
		//stepBackButtonSet({ 'setIcon' : "StepBack" , 'setLabel' : "BACK" , 'setAction' : "StepBackward" });
		stepBackButtonSet({ 'setAction' : "StepBackward" });
		//$('#navItem-restart').removeClass('sneakyHider').find('*').removeClass('sneakyHider');
		//$('#menuNavItem-restart').removeClass('sneakyHider').find('*').removeClass('sneakyHider');
	}
	
	//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
		
	var initClipboardViewData = false;	
	if( grabActiveModule.clipboardElementViewStatus == '' ){
		initClipboardViewData = true;	
	}
	if( grabActiveModule.clipboardElementViewStatus.length == 1 && grabActiveModule.clipboardElementViewStatus[0][0] == 'x' ){
		initClipboardViewData = true;
	}
	if( initClipboardViewData ){
		// we don't change completion status here, but initialize other elements of course status object
		clipboardGridStackArray = [];
		//grabActiveModule.userPath = [];
		var emptyCBViewStatus = ['x'];
		grabActiveModule.clipboardElementViewStatus = [emptyCBViewStatus];
	} 
	
	//console.log('step load 2');
	//var dummyTS = Number(new Date());
	//console.log('test url string = ' + CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/json/' + loadNodeName + '.json?' + dummyTS);
	var useURL = CETActivityContentPath + CETActivityID + '/json/' + loadNodeName + '.json' + dummyTStamp();
	if( isAuthoringMode ){
		//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
			if( authoringMode == "PathBuilder" ){
			useURL = '../' + useURL;
		}
	}
	$.ajax({
		type:			'GET',//'POST',
		//url: 			'xml_updates/' + loadDataFile + '.xml',
		//url: 			'../../content/' + CETActivityID + '/xml/' + loadDataFile + '.xml?' + dummyTS,
		//url: 			CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/xml/' + loadDataFile + '.xml?' + dummyTS,
		//dataType: 	'xml',
		//url: 			CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/json/' + loadNodeName + '.json?' + dummyTS,
		url: 			useURL,
		dataType: 	'json'
	}).done(function (doneResponse){
		//console.log('success load');
		currentBasePageReset();
		//var activityTarget = 														dashboardSideNavItemActive - 2;
		var nodeTargetArray =														loadNodeName.split('x'); // split at x in draggybox
		var newPathElement = 														parseInt(nodeTargetArray[1]);
		masterJSONStorage.currentStep = 										{};
		masterJSONStorage.currentStep.Content = 							doneResponse.nodeContent;
		masterJSONStorage.currentStep.Assessment = 					doneResponse.nodeAssessment;
		//------[ parse content meta section ]-------------------------------------------
		currentBasePage_Meta_nodeContentType = 						doneResponse.nodeContent.type;
		currentBasePage_Meta_nodeContentVariant = 					doneResponse.nodeContent.variant;
		// singular media subseq launcher -- OLD METHOD, keep for legacy for nowz
		if( currentBasePage_Meta_nodeContentType == "SubSequence" || currentBasePage_Meta_nodeContentType == "Popup Topic" ){ 
			currentBasePage_Content_SubSequenceStackObject.type = 		"Basic";//response.nodeContent.content.media[i].launched[j].type;
			currentBasePage_Content_SubSequenceStackObject.variant = 	"Basic";//response.nodeContent.content.media[i].launched[j].variant;
			currentBasePage_Content_SubSequenceStackObject.content = 	[];
			var subSequenceItemCount = 													0;
		}
		// singular media subseq launcher -- NEW METHOD
		if( currentBasePage_Meta_nodeContentType == "Image" ){ 
			if( currentBasePage_Meta_nodeContentVariant == "SubSequence" || currentBasePage_Meta_nodeContentVariant == "Popup Topic" ){ 
				currentBasePage_Content_SubSequenceStackObject.type = 		"Basic";//response.nodeContent.content.media[i].launched[j].type;
				currentBasePage_Content_SubSequenceStackObject.variant = 	"Basic";//response.nodeContent.content.media[i].launched[j].variant;
				currentBasePage_Content_SubSequenceStackObject.content = 	[];
				var subSequenceItemCount = 													0;
			}
		}
		if( currentBasePage_Meta_nodeContentVariant == "SubSequences" || currentBasePage_Meta_nodeContentVariant == "Popup Topics" ){ // grid media subseq launcher
			currentBasePage_Content_SubSequenceStackObject.type = 		"Basic";//response.nodeContent.content.media[i].launched[j].type;
			currentBasePage_Content_SubSequenceStackObject.variant = 	"Basic";//response.nodeContent.content.media[i].launched[j].variant;
			currentBasePage_Content_SubSequenceStackObject.content = 	[];
			var subSequenceItemCount = 													0;
		}
		currentBasePage_Meta_nodeContentTheme = 						doneResponse.nodeContent.theme;
		var p1 = doneResponse.nodeContent.options;
		for( var key in p1 ){
		  if( p1.hasOwnProperty(key) ){
			  nodeMetaOptionList[key] = p1[key];
		  }
		}
		/*
		nodeMetaOptionList.ImageHPosition =   							doneResponse.nodeContent.options.ImageHPosition;
		nodeMetaOptionList.ImageVPosition =   							response.nodeContent.options.ImageVPosition;
		nodeMetaOptionList.ImageW =   										response.nodeContent.options.ImageW;
		nodeMetaOptionList.ImageStaticToggle =   						response.nodeContent.options.ImageStaticToggle;
		nodeMetaOptionList.ImageZoomToggle =   						response.nodeContent.options.ImageZoomToggle;
		nodeMetaOptionList.TextStyle =   									response.nodeContent.options.TextStyle;
		nodeMetaOptionList.ImageFraming = 								doneResponse.nodeContent.options.ImageFraming;
		*/
		//------[ parse content content section ]-------------------------------------------
		currentBasePage_Content_PageTitle =	 							doneResponse.nodeContent.content.title;
		var currentBasePage_Content_PageText_PreTrim = 			doneResponse.nodeContent.content.text;
		currentBasePage_Content_PageText = 								currentBasePage_Content_PageText_PreTrim.trim();
		
		// parse content media section
		if( doneResponse.nodeContent.content.media != undefined ){
			for( var i = 0 ; i < doneResponse.nodeContent.content.media.length ; i++ ){
				var mediaPath = 																doneResponse.nodeContent.content.media[i]; 
				var nodeContentMediaObjectData = 								new Object;
				nodeContentMediaObjectData.mediaRole = 							mediaPath.role;
				nodeContentMediaObjectData.mediaType = 							mediaPath.type;
				nodeContentMediaObjectData.mediaVariant = 						mediaPath.variant;
				// bg params
				if(nodeContentMediaObjectData.mediaRole == "BgBase1" || nodeContentMediaObjectData.mediaRole == "BgAccent1"){
					nodeContentMediaObjectData.BGRepeat = 						mediaPath.repeat;
					nodeContentMediaObjectData.BGPosition = 					mediaPath.position;
					nodeContentMediaObjectData.BGSize = 						mediaPath.bgsize;
				}
				nodeContentMediaObjectData.mediaFile_Display = 					mediaPath.display;
				nodeContentMediaObjectData.mediaFile_Launched = 				mediaPath.launched;
				if( mediaPath.zoomNav != undefined ){
					nodeContentMediaObjectData.mediaFile_ZoomNav = 				mediaPath.zoomNav;
				}
				if( nodeContentMediaObjectData.mediaVariant == "HTML5Video" ){
					if( mediaPath.poster != undefined && 
						mediaPath.poster != ""  ){
						nodeContentMediaObjectData.mediaFile_Poster = 			mediaPath.poster;
					}
					if( mediaPath.captionTracks != undefined && 
						mediaPath.captionTracks != ""  ){
						nodeContentMediaObjectData.captionTracks = 				mediaPath.captionTracks;
					}
				}
				if( mediaPath.zoomNavPoz != undefined ){
					nodeContentMediaObjectData.mediaFile_ZoomNavPoz = 			mediaPath.zoomNavPoz;
				}
				nodeContentMediaObjectData.mediaCaption = 						mediaPath.caption;
				
				nodeContentMediaObjectData.descriptionDisplay = 				mediaPath.descriptionDisplay; // ADA long description
				nodeContentMediaObjectData.descriptionLaunched = 				mediaPath.descriptionLaunched; // ADA long description
				
				currentBasePage_Content_PageMediaList.push(nodeContentMediaObjectData);
				
				if( nodeContentMediaObjectData.mediaType == 'SubSequence' ){
					
					//if( currentBasePage_Content_SubSequenceStackObject.content == undefined ){
						//currentBasePage_Content_SubSequenceStackObject.content = [];
					//}
					
					// handling single media subseq launcher
					if( doneResponse.nodeContent.content.media[i].role == "Main1" ){
						
						var subSequenceItemArray = 		[];
						var subSequencePageCount = 	0;
						currentBasePage_Content_SubSequenceStackObject.content.push(subSequenceItemArray);
						var pageNumberingObject = 						{};
						pageNumberingObject.currentPage = 			1;
						pageNumberingObject.endReached = 			false;
						currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(pageNumberingObject);
						
						for( var j = 0 ; j < doneResponse.nodeContent.content.media[i].launched.length ; j++ ){
							var launchedSubSequencePage = 													doneResponse.nodeContent.content.media[i].launched[j];
							var nodeContent_SubSequencePageData = 										new Object;
				    		// meta for subseq page
				    		nodeContent_SubSequencePageData.meta = 									{};
				    		nodeContent_SubSequencePageData.meta.pageContentType = 		launchedSubSequencePage.type;
				    		nodeContent_SubSequencePageData.meta.pageContentVariant = 	launchedSubSequencePage.variant;
				    		nodeContent_SubSequencePageData.meta.pageContentTheme = 		launchedSubSequencePage.theme;
				    		nodeContent_SubSequencePageData.meta.optionList = 					{};
				    		var p2 = 																						doneResponse.nodeContent.content.media[i].launched[j].options;
							for( var key in p2 ){
							  if( p2.hasOwnProperty(key) ){
								  nodeContent_SubSequencePageData.meta.optionList[key] = 		p2[key];
							  }
							}
							// content for subseq page
						    nodeContent_SubSequencePageData.content = 								{};
						    nodeContent_SubSequencePageData.content.pageTitle = 				launchedSubSequencePage.content.title;
							var nodeContent_SubSequencePageData_PageText_PreTrim = 			launchedSubSequencePage.content.text;
							nodeContent_SubSequencePageData.content.pageText = 				nodeContent_SubSequencePageData_PageText_PreTrim.trim();
						    var nodeContent_SubSequencePageData_PageMediaList = 												[];
						    if( 'media' in doneResponse.nodeContent.content.media[i].launched[j].content ){
								for( var k = 0 ; k < doneResponse.nodeContent.content.media[i].launched[j].content.media.length ; k++ ){
									var subSequencePageMediaPath = 																			doneResponse.nodeContent.content.media[i].launched[j].content.media[k];
									var nodeContent_SubSequencePageData_MediaObjectData = 									new Object;
									nodeContent_SubSequencePageData_MediaObjectData.mediaRole = 							subSequencePageMediaPath.role;
									nodeContent_SubSequencePageData_MediaObjectData.mediaType = 						subSequencePageMediaPath.type;
									nodeContent_SubSequencePageData_MediaObjectData.mediaVariant = 					subSequencePageMediaPath.variant;
									// bg params
									if(nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgBase1" || nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgAccent1"){
										nodeContent_SubSequencePageData_MediaObjectData.BGRepeat = 						subSequencePageMediaPath.repeat;
										nodeContent_SubSequencePageData_MediaObjectData.BGPosition = 					subSequencePageMediaPath.position;
										nodeContent_SubSequencePageData_MediaObjectData.BGSize = 							subSequencePageMediaPath.bgsize;
									}
									nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Display = 				subSequencePageMediaPath.display;
									nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Launched = 			subSequencePageMediaPath.launched;
									if( subSequencePageMediaPath.zoomNav != undefined ){
										nodeContent_SubSequencePageData_MediaObjectData.mediaFile_ZoomNav = 		subSequencePageMediaPath.zoomNav;
									}
									if( subSequencePageMediaPath.variant == "HTML5Video" ){
										if( subSequencePageMediaPath.poster != undefined && 
											subSequencePageMediaPath.poster != ""  ){
											nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Poster = 		subSequencePageMediaPath.poster;
										}
										if( subSequencePageMediaPath.captionTracks != undefined && 
											subSequencePageMediaPath.captionTracks != ""  ){
											nodeContent_SubSequencePageData_MediaObjectData.captionTracks = 			subSequencePageMediaPath.captionTracks;
										}
									}
									nodeContent_SubSequencePageData_MediaObjectData.mediaCaption = 					subSequencePageMediaPath.caption;
									
									nodeContent_SubSequencePageData_MediaObjectData.descriptionDisplay = 			subSequencePageMediaPath.descriptionDisplay; // ADA long description
									nodeContent_SubSequencePageData_MediaObjectData.descriptionLaunched = 			subSequencePageMediaPath.descriptionLaunched; // ADA long description
									
									nodeContent_SubSequencePageData_PageMediaList.push(nodeContent_SubSequencePageData_MediaObjectData);
							    }
								nodeContent_SubSequencePageData.content.pageMediaList = 										nodeContent_SubSequencePageData_PageMediaList;
							}
				    		currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(nodeContent_SubSequencePageData);
				    		subSequencePageCount++;
						}
						subSequenceItemCount++;
					}
					
					// handling grid subseq
					if( doneResponse.nodeContent.content.media[i].role == "MainGrid1" ){
						
						var subSequenceItemArray = 																						[];
						var subSequencePageCount = 																						0;
						currentBasePage_Content_SubSequenceStackObject.content.push(subSequenceItemArray);
						var pageNumberingObject = 																						{};
						pageNumberingObject.currentPage = 																				1;
						pageNumberingObject.endReached = 																				false;
						currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(pageNumberingObject);
						
						for( var j = 0 ; j < doneResponse.nodeContent.content.media[i].launched.length ; j++ ){
							var launchedSubSequencePage = 																doneResponse.nodeContent.content.media[i].launched[j];
							var nodeContent_SubSequencePageData = 														new Object;
				    		// meta for subseq page
				    		nodeContent_SubSequencePageData.meta = 														{};
				    		nodeContent_SubSequencePageData.meta.pageContentType = 										launchedSubSequencePage.type;
				    		nodeContent_SubSequencePageData.meta.pageContentVariant = 									launchedSubSequencePage.variant;
				    		nodeContent_SubSequencePageData.meta.pageContentTheme = 									launchedSubSequencePage.theme;
				    		nodeContent_SubSequencePageData.meta.optionList = 											{};
				    		var p2 = doneResponse.nodeContent.content.media[i].launched[j].options;
							for( var key in p2 ){
							  if( p2.hasOwnProperty(key) ){
								  nodeContent_SubSequencePageData.meta.optionList[key] = 								p2[key];
							  }
							}
							// content for subseq page
						    nodeContent_SubSequencePageData.content = 													{};
						    nodeContent_SubSequencePageData.content.pageTitle = 										launchedSubSequencePage.content.title;
							var nodeContent_SubSequencePageData_PageText_PreTrim = 										launchedSubSequencePage.content.text;
							nodeContent_SubSequencePageData.content.pageText = 											nodeContent_SubSequencePageData_PageText_PreTrim.trim();
						    var nodeContent_SubSequencePageData_PageMediaList = 											[];
						    if( 'media' in doneResponse.nodeContent.content.media[i].launched[j].content ){
								for( var k = 0 ; k < doneResponse.nodeContent.content.media[i].launched[j].content.media.length ; k++ ){
									var subSequencePageMediaPath = 																		doneResponse.nodeContent.content.media[i].launched[j].content.media[k];
									var nodeContent_SubSequencePageData_MediaObjectData = 								new Object;
									nodeContent_SubSequencePageData_MediaObjectData.mediaRole = 						subSequencePageMediaPath.role;
									nodeContent_SubSequencePageData_MediaObjectData.mediaType = 						subSequencePageMediaPath.type;
									nodeContent_SubSequencePageData_MediaObjectData.mediaVariant = 						subSequencePageMediaPath.variant;
									// bg params
									if(nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgBase1" || nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgAccent1"){
										nodeContent_SubSequencePageData_MediaObjectData.BGRepeat = 						subSequencePageMediaPath.repeat;
										nodeContent_SubSequencePageData_MediaObjectData.BGPosition = 					subSequencePageMediaPath.position;
										nodeContent_SubSequencePageData_MediaObjectData.BGSize = 						subSequencePageMediaPath.bgsize;
									}
									nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Display = 				subSequencePageMediaPath.display;
									nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Launched = 				subSequencePageMediaPath.launched;
									if( subSequencePageMediaPath.zoomNav != undefined ){
										nodeContent_SubSequencePageData_MediaObjectData.mediaFile_ZoomNav = 			subSequencePageMediaPath.zoomNav;
									}
									if( nodeContent_SubSequencePageData_MediaObjectData.mediaVariant == "HTML5Video" ){
										if( subSequencePageMediaPath.poster != undefined && 
											subSequencePageMediaPath.poster != ""  ){
											nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Poster = 			subSequencePageMediaPath.poster;
										}
										if( subSequencePageMediaPath.captionTracks != undefined && 
											subSequencePageMediaPath.captionTracks != ""  ){
											nodeContent_SubSequencePageData_MediaObjectData.captionTracks = 			subSequencePageMediaPath.captionTracks;
										}
									}
									nodeContent_SubSequencePageData_MediaObjectData.mediaCaption = 						subSequencePageMediaPath.caption;
									
									nodeContent_SubSequencePageData_MediaObjectData.descriptionDisplay = 				subSequencePageMediaPath.descriptionDisplay; // ADA long description
									nodeContent_SubSequencePageData_MediaObjectData.descriptionLaunched = 				subSequencePageMediaPath.descriptionLaunched; // ADA long description
									
									nodeContent_SubSequencePageData_PageMediaList.push(nodeContent_SubSequencePageData_MediaObjectData);
							    }
								nodeContent_SubSequencePageData.content.pageMediaList = 								nodeContent_SubSequencePageData_PageMediaList;
							}
				    		currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(nodeContent_SubSequencePageData);
				    		subSequencePageCount++;
						}
						subSequenceItemCount++;
					}
				}
				
				if( doneResponse.nodeContent.content.media[i].role == "MainHotSpotMap1" ){
						
					var captureMapImage = 			doneResponse.nodeContent.content.media[i].display;
					var captureMapNavImage =		doneResponse.nodeContent.content.media[i].zoomNav;
					
					for( var j = 0 ; j < doneResponse.nodeContent.content.media[i].markers.length ; j++ ){
						var markerPath = doneResponse.nodeContent.content.media[i].markers[j];
						// this needs to iterate per marker, as this is all contained in one media object		
						var hotSpotNodeArray = [];
						var newHotSpotMarker = {};
						newHotSpotMarker.xPoz = 					Number( markerPath.xPoz );
						newHotSpotMarker.yPoz = 					Number( markerPath.yPoz );
						newHotSpotMarker.markerAction = 		markerPath.action; 
						newHotSpotMarker.markerType = 		markerPath.type; // "SubSequence";
						newHotSpotMarker.markerVariant = 	markerPath.variant; 
						newHotSpotMarker.zoomThreshViz = 	Number( markerPath.zoomThreshViz );
						newHotSpotMarker.zoomNavPoz = 		markerPath.zoomNavPoz; // topright, topleft, bottomright, bottomleft
						newHotSpotMarker.launchResponse = 	'test'; // ?
						switch( newHotSpotMarker.markerAction ){
							case "MediaViewer" : 
								newHotSpotMarker.launched = 	markerPath.launched;
								switch( newHotSpotMarker.markerType ){
									case "Basic" : 
										switch( newHotSpotMarker.markerVariant ){
											case "Basic" : // hotspot still image launcher
												newHotSpotMarker.zoomNav = 	markerPath.zoomNav;
											break;
										}
									break;
									case "Document" : 
										switch( newHotSpotMarker.markerVariant ){
											case "pdf" :
											case "PDF" :
											
											break;
										}
									break;
									case "AV Media" : 
										switch( newHotSpotMarker.markerVariant ){
											case "Vimeo" : // hotspot vimeo launcher
											
											break;
											case "Youtube" : // hotspot yto launcher
											
											break;
											case "HTML5Video" : // hotspot html5 video launcher
												if( markerPath.poster != undefined && markerPath.poster != ""  ){
													newHotSpotMarker.poster = 	markerPath.poster;
												}
												if( markerPath.captionTracks != undefined && markerPath.captionTracks != ""  ){	
													newHotSpotMarker.captionTracks = 	markerPath.captionTracks;
												}
											break;
										}
									break;
								}
							break;
						}
						
						currentBasePage_Content_HotSpotArray.push( newHotSpotMarker );
						
						switch( newHotSpotMarker.markerAction ){
							case "MediaViewer" : 
								switch( newHotSpotMarker.markerVariant ){
									case "Basic" : 
										switch( newHotSpotMarker.markerVariant ){
											case "Basic" : // hotspot still image launcher
												
											break;
										}
									break;
									case "Document" : 
										switch( newHotSpotMarker.markerVariant ){
											case "pdf" :
											case "PDF" :
											
											break;
										}
									break;
									case "AV Media" : 
										switch( newHotSpotMarker.markerVariant ){
											case "Vimeo" : // hotspot vimeo launcher
											
											break;
											case "Youtube" : // hotspot yto launcher
											
											break;
											case "HTML5Video" : // hotspot html5 video launcher
											
											break;
										}
									break;
								}
							break;
							case "SubSequence" : 
								var subSequenceItemArray = 		[];
								var subSequencePageCount = 	0;
								currentBasePage_Content_SubSequenceStackObject.content.push(subSequenceItemArray);
								var pageNumberingObject = 		{};
								pageNumberingObject.currentPage = 1;
								pageNumberingObject.endReached = false;
								currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(pageNumberingObject);
								for( var u = 0 ; u < doneResponse.nodeContent.content.media[i].markers[j].launched.length ; u++ ){
									var launchedSubSequencePage = doneResponse.nodeContent.content.media[i].markers[j].launched[u];
									var nodeContent_SubSequencePageData = 								new Object;
						    		// meta for subseq page
						    		nodeContent_SubSequencePageData.meta = 									{};
						    		nodeContent_SubSequencePageData.meta.pageContentType = 		launchedSubSequencePage.type;
						    		nodeContent_SubSequencePageData.meta.pageContentVariant = 	launchedSubSequencePage.variant;
						    		nodeContent_SubSequencePageData.meta.pageContentTheme = 		launchedSubSequencePage.theme;
						    		nodeContent_SubSequencePageData.meta.optionList = 					{};
						    		var p2 = doneResponse.nodeContent.content.media[i].markers[j].launched[u].options;
									for( var key in p2 ){
									  if( p2.hasOwnProperty(key) ){
										  nodeContent_SubSequencePageData.meta.optionList[key] = p2[key];
									  }
									}
									// content for subseq page
								    nodeContent_SubSequencePageData.content = 							{};
								    nodeContent_SubSequencePageData.content.pageTitle = 			launchedSubSequencePage.content.title;
									var nodeContent_SubSequencePageData_PageText_PreTrim = 		launchedSubSequencePage.content.text;
									nodeContent_SubSequencePageData.content.pageText = 			nodeContent_SubSequencePageData_PageText_PreTrim.trim();
								    var nodeContent_SubSequencePageData_PageMediaList = 			[];
								    if( 'media' in doneResponse.nodeContent.content.media[i].markers[j].launched[u].content ){
										for( var k = 0 ; k < doneResponse.nodeContent.content.media[i].markers[j].launched[u].content.media.length ; k++ ){
											var subSequencePageMediaPath  = doneResponse.nodeContent.content.media[i].markers[j].launched[u].content.media[k];
											var nodeContent_SubSequencePageData_MediaObjectData = 						new Object;
											nodeContent_SubSequencePageData_MediaObjectData.mediaRole = 				subSequencePageMediaPath.role;
											nodeContent_SubSequencePageData_MediaObjectData.mediaType = 				subSequencePageMediaPath.type;
											nodeContent_SubSequencePageData_MediaObjectData.mediaVariant = 				subSequencePageMediaPath.variant;
											// bg params
											if(nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgBase1" || nodeContent_SubSequencePageData_MediaObjectData.mediaRole == "BgAccent1"){
												nodeContent_SubSequencePageData_MediaObjectData.BGRepeat = 				subSequencePageMediaPath.repeat;
												nodeContent_SubSequencePageData_MediaObjectData.BGPosition = 			subSequencePageMediaPath.position;
												nodeContent_SubSequencePageData_MediaObjectData.BGSize = 				subSequencePageMediaPath.bgsize;
											}
											nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Display = 		subSequencePageMediaPath.display;
											nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Launched = 		subSequencePageMediaPath.launched;
											if( subSequencePageMediaPath.zoomNav != undefined ){
												nodeContent_SubSequencePageData_MediaObjectData.mediaFile_ZoomNav = 	subSequencePageMediaPath.zoomNav;
											}
											if( nodeContent_SubSequencePageData_MediaObjectData.mediaVariant == "HTML5Video" ){
												if( subSequencePageMediaPath.poster != undefined && 
													subSequencePageMediaPath.poster != "" ){
													nodeContent_SubSequencePageData_MediaObjectData.mediaFile_Poster = 	subSequencePageMediaPath.poster;
												}
												if( subSequencePageMediaPath.captionTracks != undefined && 
													subSequencePageMediaPath.captionTracks != "" ){
													nodeContent_SubSequencePageData_MediaObjectData.captionTracks = 	subSequencePageMediaPath.captionTracks;
												}
											}
											nodeContent_SubSequencePageData_MediaObjectData.mediaCaption = 				subSequencePageMediaPath.caption;
											
											nodeContent_SubSequencePageData_MediaObjectData.descriptionDisplay = 		subSequencePageMediaPath.descriptionDisplay; // ADA long description
											nodeContent_SubSequencePageData_MediaObjectData.descriptionLaunched = 		subSequencePageMediaPath.descriptionLaunched; // ADA long description
											
											nodeContent_SubSequencePageData_PageMediaList.push(nodeContent_SubSequencePageData_MediaObjectData);
									    }
										nodeContent_SubSequencePageData.content.pageMediaList = nodeContent_SubSequencePageData_PageMediaList;
									}
						    		currentBasePage_Content_SubSequenceStackObject.content[subSequenceItemCount].push(nodeContent_SubSequencePageData);
						    		subSequencePageCount++;
								}
								subSequenceItemCount++;
								currentBasePage_Content_SubSequenceTotal = subSequenceItemCount;
								//currentSubSequence = 1;
								//currentSubSeqPage = 1;
								//totalSubSeqPages = currentBasePage_Content_SubSequenceStackObject.content.length;
								
								// need to re-check above, may not properly set up subsequences after update...
							break;
						}
					}
				}
				
			}
		} // end media parse
		
		if( doneResponse.nodeContent.content.miniApps != undefined ){
			for( var i = 0 ; i < doneResponse.nodeContent.content.miniApps.length ; i++ ){
				var miniAppIteration = doneResponse.nodeContent.content.miniApps[i];
				/*
				apiSet "Basic"
				caption ""
				launched "phytoCert1"
				maxH "Auto"
				maxW "Auto"
				minH "Auto"
				role "MainSandbox1"
				type "Custom"
				variant "Basic"
				*/
				//var useSandboxURL = CETActivityContentPath + CETActivityID + '/apps/' + miniAppIteration.launched + dummyTStamp();
				var useSandboxURL = CETActivityContentPath + CETActivityID + '/apps/' + miniAppIteration.launched + '/index.html' + dummyTStamp(); // needs full file path for scorm
				//var buildiFrame = '<iframe name="mainSandboxGuts" id="mainSandboxGuts" class="focalItem" src="' + useSandboxURL + '"';
				var buildiFrame = '<iframe name="mainSandboxGuts" id="mainSandboxGuts" class="mainSandboxGuts" src="' + useSandboxURL + '"';
				//buildiFrame += '&CETUID=' + 	targetedAuthor;
				//buildiFrame += '&CETAID=' + 	accessedPath;
				//buildiFrame += '&CETAP=' + 	staticVars.targetAuthorPool;
				//buildiFrame += '&debugga=pageinfo&pagejump=1_1_' + nodeSelectionArray[0];
				//buildiFrame += '"></iframe>';
				//buildiFrame += ' sandbox="allow-forms allow-popups allow-scripts"></iframe>';
				//buildiFrame += ' sandbox="allow-scripts" tabindex="0"></iframe>';
				buildiFrame += ' sandbox="allow-scripts"></iframe>';
				$( '#CET-Activity-Content-MainSandbox' ).html( buildiFrame ).addClass( "SandboxOccupied" ).addClass( "focalItem" ).attr( 'tabindex' , "0" );
				//$( '#CET-Activity-Content-MainSandbox' ).html( buildiFrame ).addClass( "SandboxOccupied" );
			}
		}
		
	    //------[ get data from the activity clipboard list ]-------------------------------------------
	    for( var k = 0 ; k < courseClipBoardCatalog[courseModule_Group - 1][courseModule_Module - 1].length ; k++ ){ // step through each node listed in the available catalog for current activity, in order to check for a matching index number
		    var clipboardCategoryGroup = 																courseClipBoardCatalog[courseModule_Group - 1][courseModule_Module - 1][k];
			if( clipboardCategoryGroup[0] == newPathElement ){ // if the number of the node in the clipboard catalog exists in the current user path step being checked
				for( var m = 1 ; m < clipboardCategoryGroup.length ; m++ ){ // loop through items in the catalog entry for current node from step value, after id number (as many as exist for step num)
					var nodeContentClipboardObjectData = 												new Object;
					nodeContentClipboardObjectData.mediaType = 											clipboardCategoryGroup[m].mediaType;
					nodeContentClipboardObjectData.mediaVariant = 										clipboardCategoryGroup[m].mediaVariant;
					nodeContentClipboardObjectData.clipboardCategory = 									clipboardCategoryGroup[m].clipboardCategory;
					nodeContentClipboardObjectData.mediaFile_Display = 									clipboardCategoryGroup[m].mediaFile_Display;
					nodeContentClipboardObjectData.mediaFile_Launched = 								clipboardCategoryGroup[m].mediaFile_Launched;
					if( clipboardCategoryGroup[m].mediaFile_ZoomNav != undefined ){
						nodeContentClipboardObjectData.mediaFile_ZoomNav = 								clipboardCategoryGroup[m].mediaFile_ZoomNav;
					}
					if( nodeContentClipboardObjectData.mediaVariant == "HTML5Video" || nodeContentClipboardObjectData.mediaVariant == "html5video" ){
						if( clipboardCategoryGroup[m].mediaFile_Poster != undefined && 
							clipboardCategoryGroup[m].mediaFile_Poster != ""  ){
							nodeContentClipboardObjectData.mediaFile_Poster = 							clipboardCategoryGroup[m].mediaFile_Poster;
						}
						if( clipboardCategoryGroup[m].captionTracks != undefined && 
							clipboardCategoryGroup[m].captionTracks != ""  ){
							nodeContentClipboardObjectData.captionTracks = 								clipboardCategoryGroup[m].captionTracks;
						}
					}
					nodeContentClipboardObjectData.mediaCaption = 										clipboardCategoryGroup[m].mediaCaption;
					
					nodeContentClipboardObjectData.descriptionDisplay = 								clipboardCategoryGroup[m].mediaDescriptionDisplay; // ADA long description
					nodeContentClipboardObjectData.descriptionLaunched = 								clipboardCategoryGroup[m].mediaDescriptionLaunched; // ADA long description
					
					currentBasePage_Content_PageClipboardList.push(nodeContentClipboardObjectData);
				}
			}
		}
	    //------[ parse assessment meta section ]-------------------------------------------
		currentBasePage_Assessment_Type = 																	doneResponse.nodeAssessment.type;
		currentBasePage_Assessment_Variant = 																doneResponse.nodeAssessment.variant;
		currentBasePage_Assessment_Requirement = 															doneResponse.nodeAssessment.requirement;
		currentBasePage_Assessment_SingleAttempt = 														doneResponse.nodeAssessment.singleAttempt;
		if( currentBasePage_Assessment_SingleAttempt == "true" ){
			currentBasePage_Assessment_SingleAttempt = 													true;
		}
		currentBasePage_Assessment_FeedbackDetails = 													doneResponse.nodeAssessment.feedbackDetails;
		/*[
			"Status",
			"Selected",
			"Correct",
			"Feedback"
		]*/
	    
	    //------[ parse assessment content section ]-------------------------------------------
		currentBasePage_Assessment_InstructionText = 														doneResponse.nodeAssessment.instruction;
		//currentBasePage_Assessment_HintText = 															$(this).find("nodeAssessment_Hint").text();
		if( 'outputs' in doneResponse.nodeAssessment ){
			currentBasePage_Assessment_OutputCount = 													doneResponse.nodeAssessment.outputs.length;
		}else{
			currentBasePage_Assessment_OutputCount = 													0;
		}
		currentBasePage_Assessment_OutputShuffle = 														extractBoolean(doneResponse.nodeAssessment.shuffle);
		var outputIncrement = 																							1;
		switch( currentBasePage_Assessment_Type ){
			case "Multiple Answer - Multiple Choice":
			case "Advanced Multiple Answer - Multiple Choice":
			case "Write In - Field List":
			case "Matching":
			case "Ranking":
				currentBasePage_Assessment_SpecialHandlingData = 										doneResponse.nodeAssessment.specialHandling;
				nodeAssessment_SpecialHandling_OutputCount = 											currentBasePage_Assessment_SpecialHandlingData.data.length;
				if( nodeAssessment_SpecialHandling_OutputCount > 0 ){ 
					for( var d = 0 ; d < nodeAssessment_SpecialHandling_OutputCount ; d++ ){
						var specialHandlingOutputDataPath = 												doneResponse.nodeAssessment.specialHandling.data[d];
						var specialHandlingResultData = 													new Object;
						specialHandlingResultData.targetNode = 												specialHandlingOutputDataPath.targetNode;
						specialHandlingResultData.outputBehavior = 											specialHandlingOutputDataPath.outputBehavior;
						specialHandlingResultData.outputStatus = 											specialHandlingOutputDataPath.outputStatus;
						if( specialHandlingOutputDataPath.feedback != undefined ){ 
							if( specialHandlingOutputDataPath.feedback.text != undefined && specialHandlingOutputDataPath.feedback.text != '' ){
								specialHandlingResultData.outputFeedback_Text = 							specialHandlingOutputDataPath.feedback.text;
							}
							if( specialHandlingOutputDataPath.feedback.type != undefined && specialHandlingOutputDataPath.feedback.type != '' ){
								specialHandlingResultData.outputFeedback_Type = 							specialHandlingOutputDataPath.feedback.type;
							}
							if( 'media' in specialHandlingOutputDataPath.feedback ){
								var feedbackMediaPath;
								// legacy handling, if s.h. feedback media is not an array
								if( Array.isArray( specialHandlingOutputDataPath.feedback.media ) ){
									feedbackMediaPath = specialHandlingOutputDataPath.feedback.media[0];
								}else{
									feedbackMediaPath = specialHandlingOutputDataPath.feedback.media;
								}
								specialHandlingResultData.outputFeedback_Media_Display = 			feedbackMediaPath.display;
								if( feedbackMediaPath.displayStyle != undefined ){
									specialHandlingResultData.outputFeedback_ImageFraming = 		feedbackMediaPath.displayStyle; // legacy?
								}else{ // if not legacy?
									if( specialHandlingOutputDataPath.feedback.ImageFraming != undefined ){
										specialHandlingResultData.outputFeedback_ImageFraming = 		specialHandlingOutputDataPath.feedback.ImageFraming; // legacy?
									}
									if( specialHandlingOutputDataPath.feedback.TextStyle != undefined ){
										specialHandlingResultData.outputFeedback_TextStyle = 		specialHandlingOutputDataPath.feedback.TextStyle; // legacy?
									}
								}
								if( feedbackMediaPath.ImageW != undefined ){
									specialHandlingResultData.outputFeedback_MediaBlockW = 		feedbackMediaPath.ImageW; // new? not in legacy?
								}else{
									specialHandlingResultData.outputFeedback_MediaBlockW = 		40; // add for legacy?
								}
								if( feedbackMediaPath.launched != undefined ){
									specialHandlingResultData.outputFeedback_Media_Launched = 	feedbackMediaPath.launched;
								}
							}
						}
						nodeAssessment_SpecialHandling_OutputDataList.push( specialHandlingResultData );
						// adding redundancy here?
						// scoring data is not in nodeassessment_special.......
					}
				}
			break;
		}
		
		if( 'outputs' in doneResponse.nodeAssessment ){
			//console.log( "outputs exist" );
			for( var e = 0 ; e < doneResponse.nodeAssessment.outputs.length ; e++ ){
				var assessmentChoiceObjectData = new Object;
				var choiceDataIteration = doneResponse.nodeAssessment.outputs[e];
				//console.log( "currentBasePage_Assessment_Type 1 = " + currentBasePage_Assessment_Type );
				switch(currentBasePage_Assessment_Type){
					case "PassThrough":
						assessmentChoiceObjectData.choiceType = "PassThrough";
					break;
					case "Single Answer - Multiple Choice":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							case "Media":
								assessmentChoiceObjectData.choiceType = "Media";
							break;
						}
					break;
					case "Multiple Answer - Multiple Choice":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							case "Media":
								assessmentChoiceObjectData.choiceType = "Media";
							break;
						}
					break;
					case "Advanced Multiple Answer - Multiple Choice":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							case "Media":
								assessmentChoiceObjectData.choiceType = "Media";
							break;
						}
					break;
					case "Write In - Field List":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							case "Media":
								assessmentChoiceObjectData.choiceType = "Media";
							break;
						}
					break;
					case "Matching":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							//case "Media":
								//assessmentChoiceObjectData.choiceType = "Media";
							//break;
						}
					break;
					case "Ranking":
						switch(currentBasePage_Assessment_Variant){
							case "Basic":
								assessmentChoiceObjectData.choiceType = "Basic";
							break;
							//case "Media":
								//assessmentChoiceObjectData.choiceType = "Media";
							//break;
						}
					break;
				}
				
				/* 
				============	============	============	
				samc outputs: // never special handling, always complete data per choice/output
				{
					"cid" : "1", // mandatory on all types
					"outputStatus" : "Incorrect", // always present in samc, mamc outputs.  
					"outputBehavior" : "Redirect",
					"scoring" : {
						"selected" : "+0.00"
					},
					"text" : "IRIS stage 1",
					"feedback" : {
						"text" : "Review the IRIS Staging for Cats Guidelines chart.",
						"type" : "Basic",
						"media" : [
							{
								"role" : "FeedbackDisplay",
								"type" : "Image",
								"variant" : "Basic",
								"display" : "iris_staging_cat.png",
								"caption" : "",
								"ImageW" : "100"
							}
						],
						"ImageFraming" : "Clear",
						"TextStyle" : "PageWidth"
					},
					"targetNode" : "12"
				}
				============	============	============	
				mamc outputs:	// for now, no choice-based feedback, always special handler feedback
				{
					"cid" : "1",
					"outputStatus" : "Incorrect", // always present in samc, mamc outputs.  
					"text" : "Administer maropitant"
				}
				============	============	============	
				matching outputs:
				{
					"cid" :	 								"1",
					"text" : 									"Matching Choice 1 Text",
					"shuffle" : 								"false", // optional shuffling for this choice
					"options" : [							// thus far, this is unique to matching only
						{
							"oid" : 							"1", // option id, separate from parent choice id
							"text" : 							"Matching Choice 1 - Option 1 Text (Correct)",
							"outputStatus" : 			"Correct",
							"selectionStatus" : 		"Unselected",
							"scoring" : { 					// optional, and only if scoring is not applied to special handling 
								"selected" : 				"+2.00"
							}
							"feedback" : {				// optional per-option feedback, doesn't need to be on every option in a choice if this is utilized
								"text" : 						"Choice 2 - Option 1 direct feedback", 
								"type" : 					"Basic"
							}
						}
					],
					"feedback" : { 						// optional per-choice feedback, can be used in addition to, or instead of, per-option fb (this is like samc feedback, attached per choice). 
						"text" : 								"Choice 1 all-option feedback",
						"type" : 							"Basic"
					}
				}
				============	============	============	
				ranking outputs: (never a status, status and scoring always handled by special handler for ranking.  same for feedback (like mamc) )
				{
					"cid" : 									"1",
					"text" : 									"Option A",
					"rankPlaced" : 						"1" // present if json-prefilled, otherwise not present in loaded data
				}
				============	============	============	
				*/
				
				if( currentBasePage_Assessment_Type == "Advanced Multiple Answer - Multiple Choice" ){
					if( choiceDataIteration.outputStatus != undefined && choiceDataIteration.outputStatus != "" && choiceDataIteration.outputStatus != null ){
						if( choiceDataIteration.require != undefined && choiceDataIteration.require != "" && choiceDataIteration.require != null ){
							assessmentChoiceObjectData.selectionRequirement = 		choiceDataIteration.require; // string
						}
					}else{ /* is patterned, will only have cid and any display data (text, media, ada description) */
						
					}
				}
				//console.log( "currentBasePage_Assessment_Type = " + currentBasePage_Assessment_Type );
				if( currentBasePage_Assessment_Type == "Write In - Field List" ){
					//console.log( "is write in" );
					if( choiceDataIteration.require != undefined && choiceDataIteration.require != "" && choiceDataIteration.require != null ){
						assessmentChoiceObjectData.matchRequirement = 				choiceDataIteration.require; // string
					}
					if( choiceDataIteration.textValsAllowed != undefined && choiceDataIteration.textValsAllowed != "" && choiceDataIteration.textValsAllowed != null ){
						assessmentChoiceObjectData.textValsAllowed = 				choiceDataIteration.textValsAllowed; // array
					}
					/*if( choiceDataIteration.statusFilledMatch != undefined && choiceDataIteration.statusFilledMatch != "" && choiceDataIteration.statusFilledMatch != null ){
						assessmentChoiceObjectData.statusFilledMatch = 				choiceDataIteration.statusFilledMatch; // string
					}
					if( choiceDataIteration.scoreFilledMatch != undefined && choiceDataIteration.scoreFilledMatch != "" && choiceDataIteration.scoreFilledMatch != null ){
						assessmentChoiceObjectData.scoreFilledMatch = 				choiceDataIteration.scoreFilledMatch; // string
					}
					if( choiceDataIteration.statusNoMatch != undefined && choiceDataIteration.statusNoMatch != "" && choiceDataIteration.statusNoMatch != null ){
						assessmentChoiceObjectData.statusNoMatch = 					choiceDataIteration.statusNoMatch; // string
					}
					if( choiceDataIteration.scoreNoMatch != undefined && choiceDataIteration.scoreNoMatch != "" && choiceDataIteration.scoreNoMatch != null ){
						assessmentChoiceObjectData.scoreNoMatch = 					choiceDataIteration.scoreNoMatch; // string
					}*/
					if( choiceDataIteration.ignoreList != undefined && choiceDataIteration.ignoreList != "" && choiceDataIteration.ignoreList != null ){
						assessmentChoiceObjectData.ignoreList = 					choiceDataIteration.ignoreList; // array
					}
				}
				
				if( currentBasePage_Assessment_Type == "Matching" ){
					assessmentChoiceObjectData.choiceOptions = 					choiceDataIteration.options; // array
					var checkChoiceOptionShuffle = 											choiceDataIteration.shuffle; // array
					if( checkChoiceOptionShuffle == "true" ){
						assessmentChoiceObjectData.choiceOptionShuffle = 		true;
					}
					if( checkChoiceOptionShuffle == undefined || checkChoiceOptionShuffle =="" || checkChoiceOptionShuffle== "false" ){
						assessmentChoiceObjectData.choiceOptionShuffle = 		false;
					}
					//currentBasePage_Assessment_ChoiceOptionShuffle = 			extractBoolean( doneResponse.nodeAssessment.outputs[e].shuffle );
				}
				
				if( currentBasePage_Assessment_Type == "Ranking" ){
					assessmentChoiceObjectData.rankPlaced = 							choiceDataIteration.rankPlaced;
				}
				
				// store output id for keeping track of outputs even when shuffled
				if( choiceDataIteration.cid != undefined && choiceDataIteration.cid != "" && choiceDataIteration.cid != null ){
					assessmentChoiceObjectData.choiceID = 								choiceDataIteration.cid;
				}
				
				// store output media launch type
				//assessmentChoiceObjectData.mediaLaunchType = 		$(this).attr('mediaLaunchType');
				
				// store output media launch type
				//assessmentChoiceObjectData.mediaLaunchVariant = 	$(this).attr('mediaLaunchVariant');
				
				//if( currentBasePage_Assessment_Type != "Multiple Answer - Multiple Choice" &&
				//currentBasePage_Assessment_Type != "Matching" &&
				//currentBasePage_Assessment_Type != "Ranking" ){
					// store output target node -- blank if not in xml (retry, etc.) -- not present in mamc, matching, ranking choices ( is in special handling )
					if( choiceDataIteration.targetNode != undefined && choiceDataIteration.targetNode != "" && choiceDataIteration.targetNode != null ){
						assessmentChoiceObjectData.targetNode = 								choiceDataIteration.targetNode;
					}
				
					// store output behavior -- LoadTarget, ForceForward(ForceCorrect?), Retry -- not present in mamc, matching, ranking choices ( is in special handling )
					if( choiceDataIteration.outputBehavior != undefined && choiceDataIteration.outputBehavior != "" && choiceDataIteration.outputBehavior != null ){
						assessmentChoiceObjectData.outputBehavior = 							choiceDataIteration.outputBehavior;
					}
				
					// store output status -- Correct, Incorrect, Jump?, Neutral? -- not in matching, ranking choices ( in choice options OR special handling in matching, always special handling in ranking )
					if( choiceDataIteration.outputStatus != undefined && choiceDataIteration.outputStatus != "" && choiceDataIteration.outputStatus != null ){
						assessmentChoiceObjectData.outputStatus = 								choiceDataIteration.outputStatus;
					}
				//}
				
				//'', // base page media display file -- blank or radiograph_2_t.jpg
				//'', // launched base page media file, vimeo link, pdf (megazoom nav file assumed from filename) -- blank or radiograph_2_f.jpg (_n)
				
				if( currentBasePage_Assessment_Type == "Matching" ){ // grab the choice-level feedback, if exists
					if( 'feedback' in choiceDataIteration){
						assessmentChoiceObjectData.feedback = 						choiceDataIteration.feedback;
					}
				}
				
				// store output display text -- blank OR caption OR text choice display
				if( 'text' in choiceDataIteration){
					assessmentChoiceObjectData.outputDisplayText = 				choiceDataIteration.text;
				}
				//if( response.nodeAssessment.outputs[e].media.length > 0 ){
				if( 'media' in choiceDataIteration ){
					// store output media grid display image
					if( choiceDataIteration.media[0].display != undefined ){
						assessmentChoiceObjectData.outputMedia_Display = 		choiceDataIteration.media[0].display;
					}
					//assessmentChoiceObjectData.outputMedia_Display = response.nodeAssessment.outputs[e].media[0].display;//$(this).find("nodeAssessment_OutputMediaFile_Display").text();
				
					// store output media grid launched file
					if( choiceDataIteration.media[0].launched != undefined ){
						assessmentChoiceObjectData.outputMedia_Launched = 	choiceDataIteration.media[0].launched;
					}
					//assessmentChoiceObjectData.outputMedia_Launched = response.nodeAssessment.outputs[e].media[0].launched;//$(this).find("nodeAssessment_OutputMediaFile_Launched").text();
				
					// store output media grid caption text
					assessmentChoiceObjectData.outputMedia_Caption = 			choiceDataIteration.text;
					
					assessmentChoiceObjectData.descriptionDisplay = 			choiceDataIteration.descriptionDisplay; // ADA long description
					assessmentChoiceObjectData.descriptionLaunched = 			choiceDataIteration.descriptionLaunched; // ADA long description
					
					//assessmentChoiceObjectData.outputMedia_Caption = response.nodeAssessment.outputs[e].media[0].caption;//$(this).find("nodeAssessment_OutputMedia_CaptionText").text();
				}
				
				// store output feedback text
				// blank OR feedback text
				
				// "PassThrough" checked for possible legacy, can maybe remove
				if( currentBasePage_Assessment_Type != undefined && 
					currentBasePage_Assessment_Type != "Pass Through" && 
					currentBasePage_Assessment_Type != "PassThrough" && 
					currentBasePage_Assessment_Type != "End" ){ 
					currentBasePage_Assessment_Present = true;
				}//else{
					switch( currentBasePage_Assessment_Type ){
						case "Single Answer - Multiple Choice" :
						case  "Matching" :
							if( 'feedback' in choiceDataIteration ){
								if( choiceDataIteration.feedback.text != undefined ){
									assessmentChoiceObjectData.outputFeedback_Text = 							choiceDataIteration.feedback.text;
									//if( choiceDataIteration.feedback.media != undefined ){
									assessmentChoiceObjectData.outputFeedback_TextStyle = 					choiceDataIteration.feedback.TextStyle;
									//}
								}
								if( choiceDataIteration.feedback.media != undefined ){
									assessmentChoiceObjectData.outputFeedback_ImageFraming = 			choiceDataIteration.feedback.ImageFraming;
									assessmentChoiceObjectData.outputFeedback_MediaBlockW = 				choiceDataIteration.feedback.media[0].ImageW;
									// just handling single image for now
									assessmentChoiceObjectData.outputFeedback_Media_Display = 			choiceDataIteration.feedback.media[0].display;
									//assessmentChoiceObjectData.outputFeedback_Media_Style = 			response.nodeAssessment.outputs[e].feedback.media[0].displayStyle;
									// defaulting to clearnaked style for now, will improve later
									//assessmentChoiceObjectData.outputFeedback_Media_Style = 			"ClearNaked";
									// feedback image launcher
									// this should work, disabling for now
									//assessmentChoiceObjectData.outputFeedback_Media_Launched = response.nodeAssessment.outputs[e].feedback[0].media.launched;
									if( choiceDataIteration.feedback.media[0].caption != undefined && choiceDataIteration.feedback.media[0].caption != '' ){
										assessmentChoiceObjectData.outputFeedback_Media_Caption = 			choiceDataIteration.feedback.media[0].caption;
									}
									
									if( choiceDataIteration.feedback.media[0].descriptionDisplay != undefined && choiceDataIteration.feedback.media[0].descriptionDisplay != '' ){
										assessmentChoiceObjectData.outputFeedback_Media_descriptionDisplay = 	choiceDataIteration.feedback.media[0].descriptionDisplay; // ADA long description
									}
									if( choiceDataIteration.feedback.media[0].descriptionLaunched != undefined && choiceDataIteration.feedback.media[0].descriptionLaunched != '' ){
										assessmentChoiceObjectData.outputFeedback_Media_descriptionLaunched = 	choiceDataIteration.feedback.media[0].descriptionLaunched; // ADA long description
									}
									
								}
							}
						break;
						//case  "Matching" :
							// look for choice-level feedback (not specific to option selection)
							/*
							if( 'feedback' in choiceDataIteration ){
								if( choiceDataIteration.feedback.text != undefined ){
									assessmentChoiceObjectData.outputFeedback_Text = 							choiceDataIteration.feedback.text;
									assessmentChoiceObjectData.outputFeedback_TextStyle = 					choiceDataIteration.feedback.TextStyle;
								}
								if( choiceDataIteration.feedback.media != undefined ){
									assessmentChoiceObjectData.outputFeedback_ImageFraming = 			choiceDataIteration.feedback.ImageFraming;
									assessmentChoiceObjectData.outputFeedback_MediaBlockW = 				choiceDataIteration.feedback.media[0].ImageW;
									assessmentChoiceObjectData.outputFeedback_Media_Display = 			choiceDataIteration.feedback.media[0].display;
									if( choiceDataIteration.feedback.media[0].caption != undefined && choiceDataIteration.feedback.media[0].caption != '' ){
										assessmentChoiceObjectData.outputFeedback_Media_Caption = 		choiceDataIteration.feedback.media[0].caption;
									}
								}
							}
							*/
							// look for option-level feedback.  need to inspect each option!
							/*
							"options" : [							// thus far, this is unique to matching only
								{
									"oid" : 							"1", // option id, separate from parent choice id
									"text" : 							"Matching Choice 1 - Option 1 Text (Correct)",
									"outputStatus" : 			"Correct",
									"selectionStatus" : 		"Unselected",
									"scoring" : { 					// optional, and only if scoring is not applied to special handling 
										"selected" : 				"+2.00"
									}
									"feedback" : {				// optional per-option feedback, doesn't need to be on every option in a choice if this is utilized
										"text" : 						"Choice 2 - Option 1 direct feedback", 
										"type" : 					"Basic"
									}
								}
							],
							*/
							/*
							for( var optionIteration = 0 ; optionIteration < 	assessmentChoiceObjectData.choiceOptions.length ; optionIteration++ ){
								if( 'feedback' in 	assessmentChoiceObjectData.choiceOptions[optionIteration] ){
									var optionFeedbackPath = assessmentChoiceObjectData.choiceOptions[optionIteration].feedback;
									if( optionFeedbackPath.text != undefined ){
										
									}
									if( optionFeedbackPath.media != undefined ){
										
									}
								}
							}
							*/
						//break;
					//}
				}
				// not storing scoring data in here
				currentBasePage_Assessment_OutputList.push( assessmentChoiceObjectData ); 
		    }
		}
	    
	    //---[ ]----------------------------------------------------------------------------------------------------------------
	    // Now that everything is parsed and stored from new step data, process it
	    //---[ ]----------------------------------------------------------------------------------------------------------------
	    
	    // update the user's path, status info
	    /*
		var activityTarget = 					dashboardSideNavItemActive - 2;
		var nodeTargetArray =				loadDataFile.split('x'); // split at x in draggybox
		var newPathElement = 				parseInt(nodeTargetArray[1]);
		*/
		var userPathNumArray = 			[];
		// build number array for comparison
		
		//console.log( "load step, userpath 1 = " + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.join(" > ") );
		
		for(var p = 0 ; p < courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length ; p++){
			var pathListArray =				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[p].split(':'); // split at x in draggybox
			var pathListElementNum = 	pathListArray[0];
			userPathNumArray.push( parseInt(pathListElementNum) );
		}
		//console.log('indexofcheck7');
		//var newPathElementNum = ;
		var stepNumExistsInHistory = false;
		//console.log( "userPathNumArray = " + userPathNumArray.join('-') + " --- newPathElement = " + newPathElement );
		//console.log( "userpath = " + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.join('-') );
		if( userPathNumArray.indexOf(newPathElement) == -1 ){
			//console.log("wee");
			//alert( "allow " + newPathElement );
			/*
			if(currentBasePage_Assessment_Present){
				newPathElement += ":x"; // default to no assessment selection yet made
			}
			*/
		    // allow add to path if node does not currently exist here -- reconsider in case of user-nav loops?
			//courseStatusObject.courseModuleGroupStack[activityTarget].userPath.push( String(newPathElement) );
		}else{
			//console.log("woo");
		// otherwise, clear the path after the matching element, rebuild with any nodes preceeding the last step, and then manually push the last step as needed
			//alert( "don't allow " + newPathElement );
			
			// this is beginning of how to recall user's choice when returning to an assessment case page.
			// need to update choices to include a persistent id so that shuffling doesn't affect this method
			/*
			if(currentBasePage_Assessment_Present){
				var assessmentData;
				var checkForAssessmentCompletion = courseStatusObject.courseModuleGroupStack[activityTarget].userPath[courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1].split(":");
				if( checkForAssessmentCompletion[1] != 'x'  ){
					assessmentData = ":" + checkForAssessmentCompletion[1]; // default to no assessment selection yet made
				}else{
					assessmentData = ":x"; // default to no assessment selection yet made
				}
			}
			*/
			//console.log('indexofcheck8'); 
			switch( $('body').attr( 'data-activePathType' ) ){
				case "Case Study" : 
					var truncatedPath = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.slice( 0, userPathNumArray.indexOf(newPathElement) );
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath = [];
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.concat(truncatedPath);
					//courseStatusObject.courseModuleGroupStack[activityTarget].userPath
				break;
				case "Procedural" : 
					// console.log("wub");
					stepNumExistsInHistory = true;
				break;
			}
			
			/*
			if(currentBasePage_Assessment_Present){
				newPathElement += assessmentData; // default to no assessment selection yet made
			}
			*/
		}
		
		// until we improve the handling of recalling user's choice when returning to case page assessment, just globally revert to no choice made.
		if(currentBasePage_Assessment_Present){
			newPathElement += ":x"; // default to no assessment selection yet made
		}
		
		switch( $('body').attr( 'data-activePathType' ) ){
			case "Case Study" : 
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.push( String(newPathElement) );
				// here we clean up the array if it keeps an "x" at the beginning (due to the dev page jump method?)
				if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length > 1 ){
					if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[0] == 'x' ){
						courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.shift();
					}
				}
			break;
			case "Procedural" : 
				if( stepNumExistsInHistory ){
			
				}else{
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.push( String(newPathElement) );
					// here we clean up the array if it keeps an "x" at the beginning (due to the dev page jump method?)
					if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length > 1 ){
						if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[0] == 'x' ){
							courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.shift();
						}
					}
				}
			break;
		}
		
		//console.log( "load step, userpath 2 = " + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.join(" > ") );
		
		//console.log( "AFTER -- userPathNumArray = " + userPathNumArray.join('-') + " --- newPathElement = " + newPathElement );
		//console.log( "AFTER userpath = " + courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.join('-') );
		
		//var lastUserPathIndex = 	courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1;
		//var lastUserPathEntry = 	courseStatusObject.courseModuleGroupStack[activityTarget].userPath[lastUserPathIndex];
		/*
		var activityTarget = dashboardSideNavItemActive - 2;
		var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[activityTarget].userPath.length - 1;
		var lastUserPathEntry = courseStatusObject.courseModuleGroupStack[activityTarget].userPath[lastUserPathIndex];
		var lastUserPathStepNum;
		if(lastUserPathEntry != 'x'){
			var lastUserPathStepArray = courseStatusObject.courseModuleGroupStack[dashboardSideNavItemActive - 2].userPath[lastUserPathIndex].split(':');
			lastUserPathStepNum = lastUserPathStepArray[0];
		}else{
			lastUserPathStepNum = '1';
		}
		loadNewActivityPage("draggybox" + lastUserPathStepNum);
		*/
	    
	    //console.log('before base page build');
	    buildNewBasePage();
	   //console.log('after base page build');
	}).fail(function (failResponse){
		console.log('error');
	});
}

function callTest(){
	console.log("called");
}

// ! F.BasePlayer.Initialize New Page ---
function initBasePage(){
	//console.log("init base page");
	var freshBase = 	'';
	
	//freshBase += 		'<div id="CET-Activity-Content-InnerWrap">';
	
	freshBase += 		'<div id="CET-Activity-Content-BGContainer"></div>';
	freshBase += 		'<div id="CET-Activity-Content-Main"></div>';
	freshBase += 		'<div id="CET-Activity-Content-MainSandbox"></div>';
	freshBase += 		'<div id="CET-Activity-Content-Assessment" class="CET-Activity-Content-Assessment"></div>';
	
	//freshBase += 		'</div>';
	
	//freshBase += 		'<div id="CET-Activity-Content-Bumper"></div>';
	$('#CET-Activity-Content').html(freshBase);
}

// ! F.Accessibility - check execution command ---
function checkExecutionCmnd( passedEvent ){
	//console.log( "check execution cmnd - type = " + passedEvent.type );
	switch( passedEvent.type ){
		case "click" :
			return true;
		break;
		case "keyup" :
			var code = ( passedEvent.keyCode ? passedEvent.keyCode : passedEvent.which );
			//console.log( "code1 = " + code );
			if( code == 13 || code == 32 ){ // space or return
		       return true;
		    }else{
			   return false;
		    }
		break;
		default :
			return false;
		break;
	}
}

// ! F.Setup Text Hyperlinks ---
function setupTextHyperlinks(context){
	var linkElement = context.linkElement;
	linkElement.addClass("textHyperlink");
	linkElement.first().addClass("textHyperlinkFirst");
	linkElement.last().addClass("textHyperlinkLast");
	linkElement.addClass("focalItem");
	linkElement.attr("tabindex" , 0);
	linkElement.css("position" , "relative");
	//linkElement.addClass( context.uniqueClass );
	linkElement.attr( "data-uniqueClass" , context.uniqueClass );
	//if( linkElement.hasClass( "linkNotification" ) ){
	if( linkElement.attr( 'data-linkNotification' ) != undefined && linkElement.attr( 'data-linkNotification' ) != null && linkElement.attr( 'data-linkNotification' ) != "" ){
		switch( linkElement.attr( 'data-linkNotification' ) ){
			case "externalContentADADisclaimer-Default" :
				//linkElement.append( '<span class="accessVizToggle"></span>' );
				linkElement.append( '<span class="accessViz accessVizLinkNotification" aria-hidden="true">' + linkNotifications.externalContentADADisclaimerDefault + '</span>' );
			break;
		}
	}
	
}

// ! F.BasePlayer.Build New Page ---
function buildNewBasePage(){
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 				Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 				Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	if( $('#viewPortNarrowThreshold').css('color') == "rgb(0, 0, 0)" ){
		viewPortIsNarrow = true;
	}else{
		viewPortIsNarrow = false;
	}
	var pageText;
	//$('#CET-Activity-Header-Title').html(CETActivityHeaderTitle);
	//$('#CET-Activity-Content-Title-Text').html(CETActivityHeaderTitle);
	$('#CET-Activity-Content-Title-Text .contentHeaderTitleTextVisible').html(currentBasePage_Content_PageTitle);
	$('.CET-Activity-Content-Main-TextBlock').html(currentBasePage_Content_PageText);
	
	// setup base page text for ADA focusing
	setupTextHyperlinks({ 
		'linkElement' : $('.CET-Activity-Content-Main-TextBlock a'), 
		'uniqueClass' : "MainPageTextHyperlink" 
	});
	
	//pageTextBGPlate = "lightHaze";
	switch (pageTextBGPlate){
		case "none":
			$('.CET-Activity-Content-Main-TextBlock-Container').css('background', "none");
			
			//var stepMainTextColor = "#393836"; // default if no override
			var stepMainTextColor = skinTextContentPrimaryColor_Base; // default if no override
			
			// check for text color set via path level
			var checkPathTextColorSet = masterJSONStorage.pathParamsSet[courseModule_Group-1][courseModule_Module-1].meta.textColorOverride;
			if( checkPathTextColorSet != undefined && checkPathTextColorSet != "" ){
				//textColorOverride = nodeMetaOptionList.TextColorOverride;
				stepMainTextColor = "#" + checkPathTextColorSet;
			}
			
			// check for text color set via step level
			// this will override the set path color override
			var checkStepTextColorSet = nodeMetaOptionList.TextColorOverride;
			if( checkStepTextColorSet != undefined && checkStepTextColorSet != "" ){
				//textColorOverride = nodeMetaOptionList.TextColorOverride;
				stepMainTextColor = "#" + checkStepTextColorSet;
			}
			
			//$('.CET-Activity-Content-Main-TextBlock').css('color', '#393836'); // #54524C
			$('.CET-Activity-Content-Main-TextBlock').css( 'color' , stepMainTextColor ); // #54524C
		break;
		case "lightHaze":
			$('.CET-Activity-Content-Main-TextBlock-Container').css('background', "rgba(0,0,0,0.4) url('" + CETUpwardLadderPath + "common/img/global/1pxPNG/1px-w75.png') repeat center center fixed");
		break;
		case "darkHaze":
			$('.CET-Activity-Content-Main-TextBlock-Container').css('background', "rgba(0,0,0,0.65) url('" + CETUpwardLadderPath + "common/img/global/1pxPNG/1px-w20.png') repeat center center fixed");
		break;
	}
	if(currentBasePage_Meta_nodeContentType == "Basic"){
		$('.CET-Activity-Content-Main-MediaBlock').hide();
	}
	if(currentBasePage_Content_PageText != "" && currentBasePage_Content_PageText != null && currentBasePage_Content_PageText != undefined){
		//if( currentBasePage_Content_PageText.length > 0 ){
			$( '.CET-Activity-Content-Main-TextBlock-Container' ).addClass( "focalItem" );
			$( '.CET-Activity-Content-Main-TextBlock-Container' ).attr( "tabindex" , "0" );
			var buildAccessibleIndicator = '<span class="accessViz">' + langPack.screenreader.stepBase.stepText + '</span>';
			$('.CET-Activity-Content-Main-TextBlock').prepend( buildAccessibleIndicator );
		//}
		$('.CET-Activity-Content-Main-TextBlock-Container').show();
	}else{
		$('.CET-Activity-Content-Main-TextBlock-Container').hide();
	}
	if(nodeMetaOptionList.TextStyle != undefined && nodeMetaOptionList.TextStyle != null && nodeMetaOptionList.TextStyle != ""){
		currentBasePage_Content_TextStyle = nodeMetaOptionList.TextStyle;
	}else{
		currentBasePage_Content_TextStyle = 'Default';
	}
	// sort media elements into arrays, even if singles
	for( var e = 0 ; e < currentBasePage_Content_PageMediaList.length ; e++ ){
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "BgAccent1"){
			currentBasePage_Content_PageMedia_BgAccent.push(currentBasePage_Content_PageMediaList[e]);
		}
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "BgBase1"){
			currentBasePage_Content_PageMedia_BgBase.push(currentBasePage_Content_PageMediaList[e]);
		}
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "Main1"){
			currentBasePage_Content_PageMedia_Main.push(currentBasePage_Content_PageMediaList[e]);
		}
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "Deco1"){
			currentBasePage_Content_PageMedia_Deco.push(currentBasePage_Content_PageMediaList[e]);
		}
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "MainHotSpotMap1"){
			currentBasePage_Content_PageMedia_Main.push(currentBasePage_Content_PageMediaList[e]); 
		}
		if( currentBasePage_Content_PageMediaList[e].mediaRole == "MainGrid1" || currentBasePage_Content_PageMediaList[e].mediaRole == "SubSeqGrid1" ){
			currentBasePage_Content_PageMedia_MainGrid.push(currentBasePage_Content_PageMediaList[e]);
		}
		/*
		if(currentBasePage_Content_PageMediaList[e].mediaRole == "SubSeqGrid1"){
			currentBasePage_Content_PageMedia_SubSeqGrid.push(currentBasePage_Content_PageMediaList[e]);
		}
		*/
	}
	var BGFileBuild = 			"";
	var BGRepeatBuild = 		"";
	var BGPositionBuild = 		"";
	var BGSizeBuild = 			"";
	var BGBaseCount = 		currentBasePage_Content_PageMedia_BgBase.length;
	var BGAccentCount = 	currentBasePage_Content_PageMedia_BgAccent.length;
	/*
	var mediaElement;
	var useMediaDir = 	CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/';
	if(mediaPlane == 'main'){
		mediaElement = currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display;
		if( mediaElement.substr(0, 7) == 'default_'  ){
			useMediaDir = mediaDefaultsPath;
		}
		if( mediaElement.substr(0, 5) == 'theme_'  ){
			useMediaDir = themeDefaultsPath;
		}
		if(mediaStyle == "singleMedia-ImageDisplay"){
			$('.CET-Activity-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"></div>');
			//console.log("shouldbehere");
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, useMediaDir + mediaElement, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
		}
		if(mediaStyle == "singleMedia-ImageLauncher" || mediaStyle == "singleMedia-SubSequenceLauncher" || mediaStyle == "singleMedia-VimeoLauncher" || mediaStyle == "singleMedia-PDFLauncher"){
			$('.CET-Activity-Content-Main-MediaBlock').append('<div class="mediaLauncher-image"></div>');
			//console.log("shouldbehere");
			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').addClass('launchable');
			//singleMediaBuild(mediaStyle, '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_Main[mediaSlot].mediaFile_Display, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
			singleMediaBuild(mediaStyle, useMediaDir + mediaElement, "Main", $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image') );
		}
	}
	if(mediaPlane == 'subsequence'){
		mediaElement = currentSubSequencePage_Content_DataObject.content.pageMedia_Main[mediaSlot].mediaFile_Display;
		if( mediaElement.substr(0, 7) == 'default_'  ){
			useMediaDir = mediaDefaultsPath;
		}
		if( mediaElement.substr(0, 5) == 'theme_'  ){
			useMediaDir = themeDefaultsPath;
		}
	*/
	// process bg accent file for current main page, accent needs to be first to display on top of base
	for( var f = 0 ; f < BGAccentCount ; f++ ){
		//BGFileBuild += 			'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_BgAccent[f].mediaFile_Display + '"), ';
		BGFileBuild += 				'url("' + mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageMedia_BgAccent[f].mediaFile_Display }) + '"), ';
		//BGFileBuild += 			'url("' + CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentBasePage_Content_PageMedia_BgAccent[f].mediaFile_Display + '"), ';
		BGRepeatBuild +=			currentBasePage_Content_PageMedia_BgAccent[f].BGRepeat + ', ';
		BGPositionBuild +=			currentBasePage_Content_PageMedia_BgAccent[f].BGPosition + ', ';
		BGSizeBuild +=				currentBasePage_Content_PageMedia_BgAccent[f].BGSize + ', ';
	}
	// process bg base file for current main page
	for( var f = 0 ; f < BGBaseCount ; f++ ){
		//currentBasePage_Content_PageBGImage = currentBasePage_Content_PageMedia_Bg[f].mediaFile_Display;
		//BGFileBuild += 			'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageMedia_BgBase[f].mediaFile_Display + '")';
		BGFileBuild += 				'url("' + mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageMedia_BgBase[f].mediaFile_Display }) + '")';
		BGRepeatBuild +=			currentBasePage_Content_PageMedia_BgBase[f].BGRepeat;
		BGPositionBuild +=			currentBasePage_Content_PageMedia_BgBase[f].BGPosition;
		BGSizeBuild +=				currentBasePage_Content_PageMedia_BgBase[f].BGSize;
		/*
		<nodeContent_MediaItem role="Bg1" type="Image" variant="Basic" repeat="no=repeat" position="center center" bgsize="cover">
      		<nodeContent_MediaFile_Display>physical_exam_texture_background.png</nodeContent_MediaFile_Display>
	  	</nodeContent_MediaItem>
	  	<nodeContent_MediaItem role="Bg2" type="Image" variant="Basic" repeat="no-repeat" position="right bottom" bgsize="auto">
      		<nodeContent_MediaFile_Display>physical_exam_object_background.png</nodeContent_MediaFile_Display>
	  	</nodeContent_MediaItem>
		if(nodeContentMediaObjectData.mediaRole == "Bg1" || nodeContentMediaObjectData.mediaRole == "Bg2"){
			nodeContentMediaObjectData.BGRepeat = 			$(this).attr('repeat');
			nodeContentMediaObjectData.BGPosition = 			$(this).attr('position');
			nodeContentMediaObjectData.BGSize = 				$(this).attr('bgsize');
		}
		#CET-Activity-Content-BGContainer{
			position: 						absolute;
			z-index: 							-2;
			background: 					#E3E1DA no-repeat center center fixed; 
			-webkit-background-size: 	cover;
			-moz-background-size: 		cover;
			-o-background-size: 			cover;
			background-size: 				cover;
		}
		*/
		/*
		if(currentBasePage_Content_PageBGImage != 'none'){
			$('#CET-Activity-Content-BGContainer').css({
				'background-image': 'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageBGImage + '")'//,
				//'display': 'block',
				//'position': 'relative'
			});
		}
		*/
	}
	if( BGAccentCount > 0 || BGBaseCount > 0 ){
		$('#CET-Activity-Content-BGContainer').css({
			'background-image': BGFileBuild,
			'background-repeat': BGRepeatBuild,
			'background-position': BGPositionBuild,
			'background-size': BGSizeBuild
			//'display': 'block',
			//'position': 'relative'
		});
	}
	// process main media file(s) for current main page
	for( var g = 0 ; g < currentBasePage_Content_PageMedia_Main.length ; g++ ){
		if( viewPortIsNarrow ){
			pageMediaContainerWidth = '100%';
		}else{
			if( nodeMetaOptionList.ImageW != undefined && nodeMetaOptionList.ImageW != null && nodeMetaOptionList.ImageW != "" ){
				pageMediaContainerWidth = nodeMetaOptionList.ImageW + '%';
			}else{
				pageMediaContainerWidth = '100%';
			}
		}
		$('.CET-Activity-Content-Main-MediaBlock').css('width', pageMediaContainerWidth);
		var launcherPresent = false;
		// if has "launched" file element
		if( currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != "" && currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != null && currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != undefined ){
			launcherPresent = true;
		}
		//if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "SubSeqGrid1" ){
			//auncherPresent = true;
		//}
		// if building main content page SINGULAR media (not deco, bg)
		if( currentBasePage_Content_PageMedia_Main.length == 1 ){
			if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1" ){
				switch (currentBasePage_Content_PageMedia_Main[g].mediaType){
					case "Image":
						if( currentBasePage_Content_PageMedia_Main[g].mediaVariant == "Basic" ){
							if( launcherPresent ){
								currentBasePage_Content_PageMediaStyle = "singleMedia-ImageLauncher";
								makeMediaLauncherContent('main', currentBasePage_Content_PageMediaStyle, g);
								var imageLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								imageLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_basic + '"></div>';
								imageLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(imageLauncherIconBuilder);
							}else{
								currentBasePage_Content_PageMediaStyle = "singleMedia-ImageDisplay";
								makeMediaLauncherContent('main', currentBasePage_Content_PageMediaStyle, g);
							}
						}
					break;
					case "SubSequence":
						//console.log("BEEP");
						if( currentBasePage_Content_PageMedia_Main[g].mediaVariant == "Basic" ){
							//console.log("MEEP");
							//if(launcherPresent){
								currentBasePage_Content_PageMediaStyle = "singleMedia-SubSequenceLauncher";
								makeMediaLauncherContent('main', currentBasePage_Content_PageMediaStyle, g);
								var imageLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								imageLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_subsequence + '"></div>';
								imageLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(imageLauncherIconBuilder);
							//}else{
								//currentBasePage_Content_PageMediaStyle = "singleMedia-ImageDisplay";
								//makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, g);
							//}
						}
					break;
					//case "Video":
					case "AV Media":
						//console.log( "currentBasePage_Content_PageMedia_Main[g].mediaVariant = " + currentBasePage_Content_PageMedia_Main[g].mediaVariant  );
						//console.log( "launcherPresent = " + launcherPresent  );
						switch( currentBasePage_Content_PageMedia_Main[g].mediaVariant ){
							case "Vimeo" : 
								if( launcherPresent ){ // should always be a launcher!
									currentBasePage_Content_PageMediaStyle = "singleMedia-VimeoLauncher";
								}
							break;
							case "Youtube" : 
							case "YouTube" : 
								if( launcherPresent ){ // should always be a launcher!
									currentBasePage_Content_PageMediaStyle = "singleMedia-YoutubeLauncher";
								}
							break;
							case "HTML5Video" : 
								if( launcherPresent ){ // should always be a launcher!
									currentBasePage_Content_PageMediaStyle = "singleMedia-HTML5VideoLauncher";
								}
							break;
						}
						makeMediaLauncherContent('main', currentBasePage_Content_PageMediaStyle, g);
						var videoLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
						videoLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_video + '"></div>';
						videoLauncherIconBuilder += 			'</div>';
						$('.mediaLauncher-image.launchable').append(videoLauncherIconBuilder);
						$('.CET-MediaLauncher-MediaTypeOverlay-Image').css('border-radius', '0.1em');
					break;
					case "Document": 
						if( currentBasePage_Content_PageMedia_Main[g].mediaVariant == "PDF" ){
							if( launcherPresent ){ // should always be a launcher!
								currentBasePage_Content_PageMediaStyle = "singleMedia-PDFLauncher";
								makeMediaLauncherContent('main', currentBasePage_Content_PageMediaStyle, g);
								var pdfLauncherIconBuilder = 			'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								pdfLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="' + webFontAssignmentObject.launcher_document + '"></div>';
								pdfLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(pdfLauncherIconBuilder);
							}
						}
					break;
				}// end switch
				var accessibleMediaLauncher = false;
				if( currentBasePage_Content_PageMedia_Main[g].descriptionDisplay != "" && 
				currentBasePage_Content_PageMedia_Main[g].descriptionDisplay != undefined ){
					accessibleMediaLauncher = true;
				}
				if( currentBasePage_Content_PageMedia_Main[g].mediaCaption != "" &&
				currentBasePage_Content_PageMedia_Main[g].mediaCaption != undefined ){
					accessibleMediaLauncher = true;
				}
				if( currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != "" &&
				currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != undefined ){
					accessibleMediaLauncher = true;
				}
				if( accessibleMediaLauncher ){
					$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').addClass( "focalItem" );
					$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( "tabindex" , "0" );
					//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( "aria-label" , "Image Description" );
					//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( "title" , langPack.screenreader.stepBase.stepMediaLaunchDesc );
				}
			}
			if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "MainHotSpotMap1" ){
				currentBasePage_Content_PageMediaStyle = "multiMedia-HotSpotMapDisplay";
				//mediaLaunchBuild += '<div id="imageLoadBox"><div id="imageViewer-Zoom"></div></div>';
				var basePageHotSpotMapContainerBuild = 	'<div id="basePageHotSpotMapContainer">';
				basePageHotSpotMapContainerBuild +=			'<div id="basePageContentHotSpotMap-Zoom">';
				basePageHotSpotMapContainerBuild +=				'<ul data-markers=""></ul>';
				basePageHotSpotMapContainerBuild +=			'</div>';
				basePageHotSpotMapContainerBuild +=		'</div>';
				$( '#CET-Activity-Content-Main-MediaBlock').append(basePageHotSpotMapContainerBuild);
				
				//if( currentBasePage_Content_PageText.length > 0 ){
				//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').addClass( "focalItem" );
				//$( '#CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').attr( "tabindex" , "0" );
				//var buildAccessibleIndicator = '<span class="accessViz">Step Text Content: </span>';
				//$('.CET-Activity-Content-Main-TextBlock').prepend( buildAccessibleIndicator );
			//}
				
				for( var i = 0 ; i < currentBasePage_Content_HotSpotArray.length ; i++ ){
					var markerSkin_base;
					var markerSkin_hover;
					var markerSkin_hilite;
					var markerBuilder = 		'<li class="trymarkerclass1" ';
					markerBuilder += 			'data-marker-type="tooltip" ';
					markerBuilder += 			'data-show-content="yes" ';
					markerBuilder += 			'data-reg-point="centerbottom" ';
					//switch( currentBasePage_Content_HotSpotArray[i].markerType ){
					switch( currentBasePage_Content_HotSpotArray[i].markerAction ){
						case "MediaViewer" :
							//markerSkin_base = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-enlarge-avail.png";
							//markerSkin_hover = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-enlarge-hover.png";
							//markerSkin_hilite = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-enlarge-hilite.png";
							markerSkin_base = 	megazoomSkinPath + "hs_marker-enlarge-avail.png";
							markerSkin_hover = 	megazoomSkinPath + "hs_marker-enlarge-hover.png";
							markerSkin_hilite = 	megazoomSkinPath + "hs_marker-enlarge-hilite.png";
						break;
						case "SubSequence" :
							//markerSkin_base = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-subseq-avail.png";
							//markerSkin_hover = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-subseq-hover.png";
							//markerSkin_hilite = 	"../css/3p/megazoom/skin_minimal_dark/skin/hs_marker-subseq-hilite.png";
							markerSkin_base = 	megazoomSkinPath + "hs_marker-subseq-avail.png";
							markerSkin_hover = 	megazoomSkinPath + "hs_marker-subseq-hover.png";
							markerSkin_hilite = 	megazoomSkinPath + "hs_marker-subseq-hilite.png";
						break;
					}
					markerBuilder += 			'data-marker-normal-state-path="' + markerSkin_base + '" ';
					markerBuilder += 			'data-marker-selected-state-path="' + markerSkin_hover + '" ';
					markerBuilder += 			'data-marker-hilite-state-path="' + markerSkin_hilite + '" ';
					markerBuilder += 			'data-marker-left="' + currentBasePage_Content_HotSpotArray[i].xPoz + '" ';
					markerBuilder += 			'data-marker-top="' + currentBasePage_Content_HotSpotArray[i].yPoz + '" ';
					markerBuilder += 			'data-marker-width="32" ';
					markerBuilder += 			'data-marker-height="38" ';
					markerBuilder += 			'data-show-after-zoom-factor="' + currentBasePage_Content_HotSpotArray[i].zoomThreshViz + '" ';
					//markerBuilder += 			'data-markerCustomID="HSMarker_' + (i + 1) + '" ';
					//markerBuilder += 			'data-markerCustomClass="HSMarker_' + (i + 1) + '" ';
					//markerBuilder += 			'data-markerCustomClass="markerType_' + currentBasePage_Content_HotSpotArray[i].markerType + '" ';
					markerBuilder += 			'>';
					//markerBuilder += 				'<div class="markerIDPolyp" data-hsMarkerID="' + (i + 1) + '"></div>';
					markerBuilder += 			'</li>';
					$( '#basePageContentHotSpotMap-Zoom > ul' ).append( markerBuilder );
				}
				//var currentBasePage_Content_HotSpotArray = [
				/*
					{
						"xPoz" : 177,
						"yPoz" : 207,
						"markerType" : "mediaViewer",
						"zoomThreshViz" : 0,
						"launchResponse" : "Article Types"
					},{
						"xPoz" : 207,
						"yPoz" : 352,
						"markerType" : "subSequence",
						"zoomThreshViz" : 0,
						"launchResponse" : "Text Availability"
					},{
						"xPoz" : 221,
						"yPoz" : 494,
						"markerType" : "mediaViewer",
						"zoomThreshViz" : 0,
						"launchResponse" : "Publication dates"
					},{
						"xPoz" : 128,
						"yPoz" : 637,
						"markerType" : "mediaViewer",
						"zoomThreshViz" : 0,
						"launchResponse" : "Species"
					},{
						"xPoz" : 251,
						"yPoz" : 820,
						"markerType" : "mediaViewer",
						"zoomThreshViz" : 0,
						"launchResponse" : "Show additional filters"
					}
					*/
				//];
				/*
				$(document).ready(function(){
					for( var i = 0 ; i < hotSpotArray.length ; i++ ){
						var markerSkin_base;
						var markerSkin_hover;
						var markerSkin_hilite;
						var markerBuilder = 			'<li ';
						markerBuilder += 			'data-marker-type="tooltip" ';
						markerBuilder += 			'data-show-content="no" ';
						markerBuilder += 			'data-reg-point="centerbottom" ';
						switch( hotSpotArray[i].markerType ){
							case "mediaViewer" :
								markerSkin_base = "skin_minimal_dark/skin/hs_marker-enlarge-avail.png";
								markerSkin_hover = "skin_minimal_dark/skin/hs_marker-enlarge-hover.png";
								markerSkin_hilite = "skin_minimal_dark/skin/hs_marker-enlarge-hilite.png";
							break;
							case "subSequence" :
								markerSkin_base = "skin_minimal_dark/skin/hs_marker-subseq-avail.png";
								markerSkin_hover = "skin_minimal_dark/skin/hs_marker-subseq-hover.png";
								markerSkin_hilite = "skin_minimal_dark/skin/hs_marker-subseq-hilite.png";
							break;
						}
						markerBuilder += 			'data-marker-normal-state-path="' + markerSkin_base + '" ';
						markerBuilder += 			'data-marker-selected-state-path="' + markerSkin_hover + '" ';
						markerBuilder += 			'data-marker-hilite-state-path="' + markerSkin_hilite + '" ';
						markerBuilder += 			'data-marker-left="' + hotSpotArray[i].xPoz + '" ';
						markerBuilder += 			'data-marker-top="' + hotSpotArray[i].yPoz + '" ';
						markerBuilder += 			'data-marker-width="32" ';
						markerBuilder += 			'data-marker-height="38" ';
						markerBuilder += 			'data-show-after-zoom-factor="' + hotSpotArray[i].zoomThreshViz + '" ';
						markerBuilder += 			'data-markerCustomID="HSMarker_' + (i + 1) + '" ';
						markerBuilder += 			'></li>';
						$( '#megazoomPlayList > ul' ).append( markerBuilder );
					}
					//FWDUtils.onReady(function(){
						//console.log('before init called');
						init();
						//setupViwer();
						//console.log('after init called');
					//});
				});
				*/
				
				var zoomNavPoz = currentBasePage_Content_PageMedia_Main[0].mediaFile_ZoomNavPoz;
				if( zoomNavPoz == undefined || zoomNavPoz == "" || zoomNavPoz == null ){
					zoomNavPoz = "topright";
				}
				megazoomEmbed({ 
					'usage' : 				'basePageContent' , 
					'largeImage' : 			currentBasePage_Content_PageMedia_Main[0].mediaFile_Display , //'screenshot1.png' , 
					'navImage' : 			currentBasePage_Content_PageMedia_Main[0].mediaFile_ZoomNav , //'screenshot1_t.jpg' 
					'zoomNavPoz' :			zoomNavPoz
				});
				/*
				$("#basePageHotSpotMapContainer").find("div").first().find("div").first().find("div").each(function(){
					$(this).addClass("HSNode");
				});
				*/
			}
		}
		var grabCaption = currentBasePage_Content_PageMedia_Main[g].mediaCaption;
		if( grabCaption != "" && grabCaption != null && grabCaption != undefined ){
			if( currentBasePage_Content_PageMedia_Main.length  == 1 ){
				if( currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1" ){
					
					// visible caption box
					var singleMediaCaptionBuild = '<div class="singleMediaDisplayCaptionBox" aria-hidden="true">';
					singleMediaCaptionBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner">' + grabCaption + '</div>';
					singleMediaCaptionBuild += 	'</div>';
					//$('.CET-Activity-Content-Main-MediaBlock').after(singleMediaCaptionBuild);
					$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').after(singleMediaCaptionBuild);
					
					// screenreader
					var singleMediaCaptionAccessBuild = '<div class="singleMediaDisplayCaptionBoxAccess accessViz">';
					singleMediaCaptionAccessBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner"><span class="accessViz">' + langPack.screenreader.stepBase.stepMediaNonLaunchCaption + '</span>' + grabCaption + '</div>';
					singleMediaCaptionAccessBuild += 	'</div>';
					$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').append( singleMediaCaptionAccessBuild );
					
					
					// needed to place caption behind media block?
					//var mediaBoxZ = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').zIndex();
					//$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('z-index', mediaBoxZ - 1);
					
					switch( nodeMetaOptionList.ImageFraming ){
						case "Clear" :
							
						break;
						case "Default" : 
						default :
							$('.CET-SubSequence-Content-Main-MediaBlock .mediaLauncher-image').css('border-radius', '0.3em .3em 0 0');
						break;
					}
					
				}
			}
		}
		
		
		var descriptionDisplay = currentBasePage_Content_PageMedia_Main[g].descriptionDisplay;
		if( descriptionDisplay != "" && descriptionDisplay != null && descriptionDisplay != undefined ){
			//assessmentChoiceObjectData.outputFeedback_Media_descriptionDisplay = 	descriptionDisplay; // ADA long description
			var singleMediaDisplayDescriptionBuild = '<div class="accessViz">' + langPack.screenreader.stepBase.stepMediaLaunchDesc + descriptionDisplay + '</div>';
			$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').append( singleMediaDisplayDescriptionBuild );
		}
		var descriptionLaunched = currentBasePage_Content_PageMedia_Main[g].descriptionLaunched;
		if( descriptionLaunched != "" && descriptionLaunched != null && descriptionLaunched != undefined ){
			//assessmentChoiceObjectData.outputFeedback_Media_descriptionLaunched = 	descriptionLaunched; // ADA long description
		}
		
	}
	// process main media GRID file(s) for current main page
	if( currentBasePage_Content_PageMedia_MainGrid.length > 0 ){
		if( viewPortIsNarrow ){
			pageMediaContainerWidth = '100%';
		}else{
			if( nodeMetaOptionList.ImageW != undefined && nodeMetaOptionList.ImageW != null && nodeMetaOptionList.ImageW != "" ){
				pageMediaContainerWidth = nodeMetaOptionList.ImageW + '%';
			}else{
				pageMediaContainerWidth = '100%';
			}
		}
		$('.CET-Activity-Content-Main-MediaBlock').css('width', pageMediaContainerWidth);
		/*
		var launcherPresent = false;
		// if has "launched" file element
		if(currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != "" && currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != null && currentBasePage_Content_PageMedia_Main[g].mediaFile_Launched != undefined){
			launcherPresent = true;
		}
		*/
		currentBasePage_Content_PageMediaStyle = "mediaGrid";
		//makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, 0); 
		$('.CET-Activity-Content-Main-MediaBlock').append( mediaGridBuilder({
			'groupIncrement' : 	0 ,
			'gridCount' :  			currentBasePage_Content_PageMedia_MainGrid.length , 
			'dataPool' : 			"main"
		}) );		
		//$('.CET-Activity-Content-Main-MediaBlock').append(mediaGridBuilder(0, currentBasePage_Content_PageMedia_MainGrid.length, "main"));
	    gridBoxThumbCaptionRestyle(0, currentBasePage_Content_PageMedia_MainGrid.length, "main");
	    gridBoxThumbFillBox();
	    maximizah('main');
		/*
		for(var h = 0 ; h < currentBasePage_Content_PageMedia_MainGrid.length ; h++){
			// if building main content page SINGULAR media (not deco, bg)
			//if(currentBasePage_Content_PageMedia_Main.length  == 1 && currentBasePage_Content_PageMedia_Main[g].mediaRole == "Main1"){
				switch (currentBasePage_Content_PageMedia_MainGrid[h].mediaType){
					case "Image":
						if(currentBasePage_Content_PageMedia_MainGrid[h].mediaVariant == "Basic"){
							if(launcherPresent){
								//currentBasePage_Content_PageMediaStyle = "singleMedia-ImageLauncher";
								makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, h);
								var imageLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								imageLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="&#xe603;"></div>';
								imageLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(imageLauncherIconBuilder);
							}else{
								//currentBasePage_Content_PageMediaStyle = "singleMedia-ImageDisplay";
								makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, h);
							}
						}
						break;
					case "Video":
						if(currentBasePage_Content_PageMedia_MainGrid[h].mediaVariant == "Vimeo"){
							if(launcherPresent){ // should always be a launcher!
								//currentBasePage_Content_PageMediaStyle = "singleMedia-VimeoLauncher";
								makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, h);
								var vimeoLauncherIconBuilder = 		'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								vimeoLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="&#xe612;"></div>';
								vimeoLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(vimeoLauncherIconBuilder);
								$('.CET-MediaLauncher-MediaTypeOverlay-Image').css('border-radius', '0.1em');
							}
						}
						break;
					case "Document": 
						if(currentBasePage_Content_PageMedia_MainGrid[h].mediaVariant == "PDF"){
							if(launcherPresent){ // should always be a launcher!
								//currentBasePage_Content_PageMediaStyle = "singleMedia-PDFLauncher";
								makeMediaLauncherContent(currentBasePage_Content_PageMediaStyle, h);
								var pdfLauncherIconBuilder = 			'<div class="CET-MediaLauncher-MediaTypeOverlay-Container">';
								pdfLauncherIconBuilder += 				'<div class="CET-MediaLauncher-MediaTypeOverlay-Image" data-StepStoneIcon="&#xe61a;"></div>';
								pdfLauncherIconBuilder += 			'</div>';
								$('.mediaLauncher-image.launchable').append(pdfLauncherIconBuilder);
							}
						}
						break;
				}// end switch
			//}
			if(currentBasePage_Content_PageMedia_MainGrid[h].mediaCaption != "" && currentBasePage_Content_PageMedia_MainGrid[h].mediaCaption != null && currentBasePage_Content_PageMedia_MainGrid[h].mediaCaption != undefined){
				if(currentBasePage_Content_PageMedia_Main.length == 1 && currentBasePage_Content_PageMedia_MainGrid[h].mediaRole == "Main1"){
					var singleMediaCaptionBuild = '<div class="singleMediaDisplayCaptionBox">';
					singleMediaCaptionBuild +=     	'<div class="singleMediaDisplayCaptionBoxInner">' + currentBasePage_Content_PageMedia_MainGrid[h].mediaCaption + '</div>';
					singleMediaCaptionBuild += 	'</div>';
					$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').css('border-radius', '0.3em .3em 0 0');
					//$('.CET-Activity-Content-Main-MediaBlock').after(singleMediaCaptionBuild);
					$('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').after(singleMediaCaptionBuild);
					// needed to place caption behind media block?
					//var mediaBoxZ = $('.CET-Activity-Content-Main-MediaBlock .mediaLauncher-image').zIndex();
					//$('.CET-Activity-Content-Main-MediaBlock .singleMediaDisplayCaptionBox').css('z-index', mediaBoxZ - 1);
				}
			}
		}
		*/
	}
	//if(pageMediaStyle == "multiMediaGrid"){
	//currentBasePage_Assessment_OutputList
	//if(currentBasePage_Content_PageMediaStyle == "mediaGrid"){
		//$('#CET-Activity-Content-Title-Text').html('<strong>Make a Recommendation:</strong> Radiography Results');
		//$('.CET-Activity-Content-Main-TextBlock').html('<h1>Review the three radiographs below and select the most appropriate interpretation.</h1>');
	    //$('.CET-Activity-Content-Main-MediaBlock').append(mediaGridBuilder(0, currentBasePage_Content_PageMedia_MainGrid.length, "main"));
	    //gridBoxThumbCaptionRestyle(0, currentBasePage_Content_PageMedia_MainGrid.length, "main");
	    //gridBoxThumbFillBox();
	    //maximizah('main');
	//}
	//if(pageMediaStyle == "subSequenceLauncherGrid"){
	//if(currentBasePage_Content_PageMediaStyle == "subSequenceLauncherGrid"){
		//$('#CET-Activity-Content-Title-Text').html('<strong>Physical Examination Findings');
		//$('.CET-Activity-Content-Main-TextBlock').html('Performing a thorough physical exam is necessary component of any HAC diagnosis. Compatible clinical signs are often the first clue to promt you to consider HAC.<br />Keep in mind that HAC is quite variable in its presentation, and patients may exhibit only some of these signs. especially in the earlier stages of the disease.<br /><br />Learn more about the various clinical signs associated with HAC below:');
	    //$('.CET-Activity-Content-Main-MediaBlock').append(mediaGridBuilder(0, currentBasePage_Content_PageMedia_MainGrid.length, "main"));
	    //gridBoxThumbCaptionRestyle(0, currentBasePage_Content_PageMedia_MainGrid.length, "main");
	    //gridBoxThumbFillBox();
	    //maximizah('main');
	//}
	// process deco file for current main page
	$( '.CET-Activity-Content-Main-TextBlock-Accent-Container' ).hide(); // resets with new html when page advances
	for( var j = 0 ; j < currentBasePage_Content_PageMedia_Deco.length ; j++ ){
		currentBasePage_Content_PageDeco1Image = currentBasePage_Content_PageMedia_Deco[j].mediaFile_Display;
		if( currentBasePage_Content_PageDeco1Image != 'none' ){
			$( '.CET-Activity-Content-Main-TextBlock-Accent-Container' ).show();
			$('.CET-Activity-Content-Main-TextBlock-Accent').css({
				//'background-image': 'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image + '")'//,
				//'display': 'block',
				//'position': 'relative'
				//'width': '100px'
			});
			//singleMediaBuild('Image', '../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image, "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
			//singleMediaBuild('Image', CETActivityContentPath + '/' + CETActivityID + CETActivityVersion + '/media/' + currentBasePage_Content_PageDeco1Image, "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
			singleMediaBuild('Image', mediaPathConstructor({ 'mediaFileName' : currentBasePage_Content_PageDeco1Image }), "MainDeco1", $('.CET-Activity-Content-Main-TextBlock-Accent') );
			//singleMediaBuild( 'Image', '../../content/' + CETActivityID + '/media/' + currentCETActivity_AuthorDataObject.authorPortraitFileName, "About", $('.authorBioCardPortraitImage') );
			/*
			$('.CET-Activity-Content-Main-TextBlock-Accent').css({
				'background-image': 'url("../../content/' + CETActivityID + '/media/' + currentBasePage_Content_PageDeco1Image + '")'//,
				//'display': 'block',
				//'position': 'relative'
			});
			$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css('height', '400px');
			/*/
		}//else{
			//$( '.CET-Activity-Content-Main-TextBlock-Accent-Container' ).hide(); // resets with new html when page advances
		//}
	}
	//navNewItemsNotify();
	//$('#CET-Activity-Container').append( $('#CET-Activity-Footer') );
    // -------------------------------------------------------------------------
    
    
    iFrameResize({
	    'log' : false ,
	    'checkOrigin' : false
	});
    
    
    
    // hides assessment
	if( !currentBasePage_Assessment_Present ){
		$('#CET-Activity-Content-Assessment').hide().removeClass( "focalItem" ).removeAttr( 'tabindex' );
		//enablePageContinue("forceForward");
	}else{
		buildPageAssessment();
	}
	/*
	if(pageType == "infoOnly"){
		$('#CET-Activity-Content-Assessment').hide();
		enablePageContinue("forceForward");
	}else{
		buildPageAssessment();
	}
	*/
	/*
	switch (pageBGImage){
		case "multiMediaGrid":
		break;
		case "singleMedia-ImageLauncher":
			$('.CET-Activity-Content-Main-TextBlock-Accent').html('<img src = "../img/accents/accent_exam_sm.png" />');
			$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css('margin', '2em');
		break;
		case "singleMedia-VideoLauncher":
			$('.CET-Activity-Content-Main-TextBlock-Accent').html('<img src = "../img/accents/accent_minilecture_sm.png" />');
			$('.CET-Activity-Content-Main-TextBlock-Accent-Container').css('margin', '2em');
		break;
	}
	*/
	// controls indication icon in left of page title bar
	var stepTypeAccessible = "";
	var assessmentInstruction = "";
	if( currentBasePage_Assessment_Present ){ // standard assessment label icon
		currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_assessment;
		$('#CET-Activity-Content-Title-PageTypeIndicator').attr( 'data-buttonAction' , "StepAssessmentAnchor" );
		stepTypeAccessible = langPack.screenreader.stepBase.stepTypeAssessment;
		assessmentInstruction = langPack.screenreader.stepBase.stepTypeAssessmentSkip;
	}else{
		if( activeDataSource == "draggybox1" ){
			currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_start;
			stepTypeAccessible = langPack.screenreader.stepBase.stepTypeIntro;
		}else if( activeDataSource == "draggybox2" ){
			currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_end;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeConclusion;
		}else{
			switch( currentBasePage_Meta_nodeContentTheme ){
				case "Basic":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_infoonly;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeBasic;
				break;
				//case "Intro":
					//currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_start;
				//break;
				case "Patient History":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_history;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypePatientHistory;
				break;
				case "Physical Examination":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_exam;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypePhysicalExam;
				break;
				case "Lab Results":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_labresults;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeLabResults;
				break;
				case "Video Lecture":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_minilecture;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeVideoLecture;
				break;
				/*case "Conclusion":
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_end;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeConclusion;
				break;*/
				default:
					currentBasePage_Meta_pageTypeIndicatorIcon = webFontAssignmentObject.badge_infoonly;
					stepTypeAccessible = langPack.screenreader.stepBase.stepTypeBasic;
				break;
			}
		}
	}
		
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(currentBasePage_Meta_pageTypeIndicatorIcon)[0].data);
	
	$('#CET-Activity-Content-Title-PageTypeIndicator-Accessible').html( langPack.screenreader.stepBase.stepType + stepTypeAccessible + assessmentInstruction );
	
	/*
	// TRY TO FIGURE THIS OUT
	//-- adding these items to node options in xml
	//<nodeContent_Option optionLabel="ContentBGSolidOpacity">90</nodeContent_Option>
	//<nodeContent_Option optionLabel="ContentBGSolidColor">LightBlue1</nodeContent_Option>
	if(nodeMetaOptionList.ContentBGSolidColor != undefined && nodeMetaOptionList.ContentBGSolidColor != null && nodeMetaOptionList.ContentBGSolidColor != ""){
		currentBasePage_Content_PageBGSolidColor = nodeMetaOptionList.ContentBGSolidColor;
	}else{
		currentBasePage_Content_PageBGSolidColor = 'LightBlue1';
	}
	$('#CET-Activity-Content-BGContainer').addClass('ContentBGSolidColor-' + currentBasePage_Content_PageBGSolidColor);
	if(nodeMetaOptionList.ContentBGSolidOpacity != undefined && nodeMetaOptionList.ContentBGSolidOpacity != null && nodeMetaOptionList.ContentBGSolidOpacity != ""){
		currentBasePage_Content_PageBGSolidOpacity = nodeMetaOptionList.ContentBGSolidOpacity;
	}else{
		currentBasePage_Content_PageBGSolidOpacity = '90';
	}
	$('#CET-Activity-Content-BGContainer').addClass('ContentBGSolidOpacity-' + currentBasePage_Content_PageBGSolidOpacity);
	/*/
	// seem to need to get these values from all other major elements, and subtract the sum when resizing to fit viewport
	/*
	var activityVMargins = 								grabCSSVerticalPaddingValues('#CET-Activity-Container', 'margin');
	var activityHeaderVPadding = 					grabCSSVerticalPaddingValues('#CET-Activity-Header', 'padding');
	var activityContentTitleBarVPadding = 		grabCSSVerticalPaddingValues('#CET-Activity-Content-Title-Bar', 'padding');
	var activityContentVPadding = 					grabCSSVerticalPaddingValues('#CET-Activity-Content', 'padding');
	var activityFooterVPadding = 						grabCSSVerticalPaddingValues('#CET-Activity-Footer', 'padding');
	verticalRemoval_MarginsAndPadding = 
		activityVMargins[0] + activityVMargins[1] +
		activityHeaderVPadding[0] + activityHeaderVPadding[1] +
		activityContentTitleBarVPadding[0] + activityContentTitleBarVPadding[1] +
		activityContentVPadding[0] + activityContentVPadding[1] +
		activityFooterVPadding[0] + activityFooterVPadding[1];
	*/
	for( var p = 0 ; p < currentBasePage_Content_PageClipboardList.length ; p++ ){
		//clipBoardProcessNewElement(currentBasePage_Content_PageClipboardList[p].mediaFile_Launched, currentBasePage_Content_PageClipboardList[p].clipboardCategory);
		clipBoardProcessNewElement( 'NewPage', currentBasePage_Content_PageClipboardList[p]);
	}
	//var activityTarget = 					dashboardSideNavItemActive - 2;
	//function clipBoardProcessNewElement(clipBoardFile, clipBoardFileParentCategory){
	/*
	if( courseClipboardStorageArrayStack[activityTarget].length > 0 ){
		clipboardGridStackArray = [];
		clipboardGridStackArray = courseClipboardStorageArrayStack[activityTarget].concat();
		courseClipboardStorageArrayStack[activityTarget] = [];
	}
	*/
	updateClipboardOnNavFreshNotification();
	if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus != 'Completed' ){
		currentCourseModuleUserPassage = "FirstPass";
		courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Incomplete';
	}
	// check count of current path group
	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
	var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
	var currentPathStep = 			parseInt(splitCourseModuleGroupedActive[2]);
	var currentGroupPathsCount = masterJSONStorage.pathParamsSet[courseModule_Group-1].length;
	//disablePageContinueCheck(true);
	if( !currentBasePage_Assessment_Present ){
		if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
			if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length == masterJSONStorage.pathStructureSet[courseModule_Group - 1][courseModule_Module - 1].nodeMapUnits.length ){
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Completed';
			}
		}
		if( activeDataSource == "draggybox1" ){
			continueButtonUpdate("Right", "CONTINUE", "StepForward");
		}else if( activeDataSource == "draggybox2" ){
			//if( !CETCourseOnlyToggle ){
			//if( !CETCourseOnlyToggle ){
			var courseModuleArrayLength = courseModuleArray.length;
			var multipleLearningModules = false;
			if( courseModuleArrayLength > 1 ){
				multipleLearningModules = true;
			}else{
				if( courseModuleArray[courseModule_Group - 1].modules.length > 1 ){ 
					multipleLearningModules = true;
				}
			}
			if( multipleLearningModules || 
			courseAssessment_Present || 
			courseSurvey_Present ||
			courseCertificate_Present ){
			 	$('.CET-Activity-Content-Main-TextBlock').append('<br /><br /><span class="activityCompletionTextTail">' + langPack.ui.stepBase.stepText.toContinue + '</span>');
			}
			//unitCompletionContentTail = 			masterJSONStorage.courseParams.courseCompletionButton; // default text to add to activity completion, or blank
			exitMenuItem = 								masterJSONStorage.courseParams.exitMenuItem; // "Exit",
			//courseCompletionButton = 				masterJSONStorage.courseParams.courseCompletionButton; // "Exit",
			if( exitMenuItem == undefined || exitMenuItem == '' || exitMenuItem == null ){
				$('#menuNavItem-exit').remove(); // hide instead?  affect any indexing/counting of menu items? might be problems if removing button
    		}
			if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Completed';
				if( courseModule_Module == currentGroupPathsCount ){ // current path in group is the last path in parent group
					continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
				}else{
					continueButtonUpdate("RightDouble", "NEXT", "LaunchNextPathInGroup");
				}
			}
			if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
				// handling the progress status being complete during buildNewBasePage process
				// allowing using next button to go to next path even if not truly complete
				if( courseModule_Module == currentGroupPathsCount ){ // current path in group is the last path in parent group
					continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
				}else{
					continueButtonUpdate("RightDouble", "NEXT", "LaunchNextPathInGroup");
				}
				/*
				if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length == masterJSONStorage.pathStructureSet[courseModule_Group - 1][courseModule_Module - 1].nodeMapUnits.length ){
					continueButtonUpdate("Dashboard", "RETURN", "LaunchDashboard");
				}else{
					continueButtonUpdate("RightDouble", "NEXT", "LaunchNextPathInGroup");
				}
				*/
			}
			// if index of current path in group is not matching the count of the group, double arrow forward
			// otherwise, launch dashboard
			//continueButtonUpdate("Credits", "CREDITS", "LaunchCredits");
		}else{
			//console.log('wuuk');
			if( currentBasePage_Assessment_OutputList[0].outputBehavior == 'Step Forward'){
				continueButtonUpdate("Right", "CONTINUE", "StepForward");
			}else if( currentBasePage_Assessment_OutputList[0].outputBehavior == 'Redirect'){
				//console.log('should do redirect');
				continueButtonUpdate("Right", "CONTINUE", "Redirect");
			}
		}
	}else{
		if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
		}
		if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
			continueButtonUpdate("Right", "CONTINUE", "StepForward");
		}
	}
	//maximizeCETActivityContentHeight();
	if( $('body').attr( 'data-activePathType' ) == "Procedural" ){
		// if visited sequence matches the ideal path, then all "required" items have been visited and the path is complete
		var currentPathStructure = 		masterJSONStorage.pathStructureSet[courseModule_Group-1][courseModule_Module-1];
		var linearPathList = 					currentPathStructure.idealPath;
		var pathCompletelyViewed = 		true;
		var currentPathHistory = 			courseStatusObject.courseModuleGroupStack[courseModule_Group-1][courseModule_Module-1].userPath;
		var cphIntegers = currentPathHistory.map(function (x){ // reorder attempting to match ideal path sequence 
	    	return parseInt( x ); 
		});
		linearPathListLoop:
		//for( var cphi = 0 ; cphi < cphIntegers.length ; cphi++ ){
		for( var lpli = 0 ; lpli < linearPathList.length ; lpli++ ){
			//var pathHistoryCheck = 			cphOrderedNums[cphi]; //parseInt( currentPathHistory[cphi] );
			var linearPathStepCheck = 		parseInt( linearPathList[lpli] );
			//if( pathHistoryCheck != linearPathStepCheck ){
			if( cphIntegers.indexOf(linearPathStepCheck) == -1 ){
				pathCompletelyViewed = 	false;
				break linearPathListLoop;
			}
		}
		/*
		pathHistoryLoop:
		for( var cphi = 0 ; cphi < cphOrderedNums.length ; cphi++ ){
			var pathHistoryCheck = 			cphOrderedNums[cphi]; //parseInt( currentPathHistory[cphi] );
			var linearPathStepCheck = 		parseInt( linearPathList[cphi] );
			if( pathHistoryCheck != linearPathStepCheck ){
				pathCompletelyViewed = 	false;
				break pathHistoryLoop;
			}
		}
		*/
		if( pathCompletelyViewed ){
			courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus = 'Completed';
		}
	}
	var topBarHeaderBuild = '';
	if( displayActivityType ){
    	topBarHeaderBuild += '<em>' + courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType + '</em>: ';
    }
	topBarHeaderBuild += courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityLabel;
	$('#CET-Activity-Header-Title .contentHeaderTitleTextVisible').html( topBarHeaderBuild );
	maximizerDelayRelay({ 'postAction' : "HideWaitCover" });
	//$('#CET-Activity-Content-Main').scrollTop(0);
	//$('#CET-Activity-Content-Main').scrollTo(0,0);
	$('#CET-Activity-Content').animate({ scrollTop: 0 }, "slow");
	
	
		
	var pathScoringData = masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].scoring;
	if( pathScoringData != undefined && pathScoringData !== "" ){ // redundant check if in function scope, already have this clearance?
		//if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
		//if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].activitiesCompleteCount == 'Completed' ){
		if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].moduleProgressStatus == 'Completed' ){
			//if( activeDataSource == "draggybox2" ){
				tallyPathProgressScoring({ 
					'courseModule' : courseModuleGroupedActive ,
					'triggerID' : "Build New Base Page - Module Status Completed"
				});
			//}
		}
	}
	
	var checkPathType = masterJSONStorage.pathParamsSet[courseModule_Group - 1][courseModule_Module - 1].meta.pathType;
	//if( checkPathType == undefined || checkPathType == "" ){ // Legacy handling from when case-study only and this wasn't recorded
		//checkPathType = "Case Study";
	//}
	var checkForCompletion = false;
	switch( checkPathType ){
		case undefined : // Legacy handling from when case-study only and this wasn't recorded
		case null : 
		case '' : 
		case 'Case Study' :
			// check if conclusion step has been reached
			var courseModule_Step = Number( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].lastViewedStep );
			if( courseModule_Step == 2 ){
				checkForCompletion = true;
			}
			checkPathType = "Case Study"; // enforce?
		break;
		case 'Procedural' : 
			// check if all steps have been viewed -- just check matching length, not alignment of ids in sequence (for now)
			if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length == masterJSONStorage.pathStructureSet[courseModule_Group - 1][courseModule_Module - 1].nodeMapUnits.length ){
				checkForCompletion = true;
			}
		break;
	}
	//console.log( "checkForCompletion = " + checkForCompletion );
	//if( persistentData.dataModel == 'SCORM1.2' ){
	persistentData.allowSuspend = 									true;
	if( checkForCompletion && authoringMode != "PathBuilder" ){ // if true, is marked as completed path
		activitiesCompleteCountArray[courseModule_Group - 1][courseModule_Module - 1] = 	1;
		activitiesCompleteCount = 										activitiesCompleteCountSum();
		// have a toggle in course params that decides if "passed" status should be sent, or completed
		// toggle should allow passed even if no scoring
		// however, if scoring is enabled, then the passing score (including assessment weighting effect, if present) must be achieved in order for passed status
		// for now just setting completed
		
		//console.log( "activitiesCompleteCount = " + activitiesCompleteCount );
		//console.log( "sideNavLearningModuleTotalCount = " + sideNavLearningModuleTotalCount );
		
		if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // all activities / modules completed
			// handle completion data
			if( persistentData.dataModel == 'SCORM1.2' ){
				prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
				if( persistentData.toggleSessionTimeAccrue ){
					setSessionTime();
					persistentData.toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
				}
			}
			
			var setCourseProgressString = "completed";
			var completionReportPassFail = masterJSONStorage.courseParams.persistentData.completionReportPassFail;
			// check if scoring enabled
			// if so, check if achieved course score total is >= the passing score
			if( masterJSONStorage.courseParams.scoring != undefined && masterJSONStorage.courseParams.scoring != '' ){
				// check both the whole number and the fraction
				var courseParamsPassingScoreSplit = 					masterJSONStorage.courseParams.scoring.passingScore.split(".");
				var courseParamsPassingScoreWholeNum = 			courseParamsPassingScoreSplit[0];
				var courseParamsPassingScoreFractionNum = 		courseParamsPassingScoreSplit[1];
				var courseTallyModuleScores = 							0.00;
				if( masterJSONStorage.courseParams.scoring.scoreReportMethod == "Passed" ){
					courseTallyModuleScores = 							activitiesCompleteCount;
				}else{
					for( var u = 0 ; u < courseStatusObject.courseModuleGroupStack.length ; u++ ){
						for( var v = 0 ; v < courseStatusObject.courseModuleGroupStack[u].length ; v++ ){
							if( courseStatusObject.courseModuleGroupStack[u][v].talliedScore != undefined && 
								courseStatusObject.courseModuleGroupStack[u][v].talliedScore != "" ){
								courseTallyModuleScores = 				courseTallyModuleScores + parseFloat(courseStatusObject.courseModuleGroupStack[u][v].talliedScore);
							}
						}
					}
				}
				courseStatusObject.courseModulesScore = 			courseTallyModuleScores.toFixed(2);
				var courseModulesScoreSplit = 							courseStatusObject.courseModulesScore.split("."); 
				var courseModulesScoreWholeNum = 					courseModulesScoreSplit[0];
				var courseModulesScoreFractionNum = 				courseModulesScoreSplit[1];
				
				console.log( "courseModulesScoreWholeNum = " + Number(courseModulesScoreWholeNum) );
				console.log( "courseModulesScoreFractionNum = " + Number(courseModulesScoreFractionNum) );
				console.log( "courseParamsPassingScoreWholeNum = " + Number(courseParamsPassingScoreWholeNum) );
				console.log( "courseParamsPassingScoreFractionNum = " + Number(courseParamsPassingScoreFractionNum) );
				
				var courseModulesScoreWholeNumIsPassed = 		false;
				if( Number(courseModulesScoreWholeNum) >= Number(courseParamsPassingScoreWholeNum) ){
					courseModulesScoreWholeNumIsPassed = 		true;
				}
				var courseModulesScoreFractionNumIsPassed = 	false;
				if( Number(courseModulesScoreFractionNum) >= Number(courseParamsPassingScoreFractionNum) ){
					courseModulesScoreFractionNumIsPassed = 		true;
				}
				switch( masterJSONStorage.courseParams.scoring.scoreReportMethod ){
					case "Scaled" :
						// currently only scaling 0-100
						//useMaxScore = 100.00;
						var getScorePerc = (courseStatusObject.courseModulesScore / masterJSONStorage.courseParams.scoring.maxScore) * 100;
						courseStatusObject.reportedScore = Number(getScorePerc.toFixed(2));	
					break;
					case "Summed" :
						courseStatusObject.reportedScore = courseStatusObject.courseModulesScore;
					break;
					case "Passed" :
						courseStatusObject.reportedScore = activitiesCompleteCount;
					break;
				}
				console.log( "courseStatusObject.reportedScore = " + courseStatusObject.reportedScore );
				console.log( "courseModulesScoreWholeNumIsPassed = " + courseModulesScoreWholeNumIsPassed );
				console.log( "courseModulesScoreFractionNumIsPassed = " + courseModulesScoreFractionNumIsPassed );
				if( persistentData.dataModel == 'SCORM1.2' ){
					setScore(); // also sets suspend data
				}
				if( courseModulesScoreWholeNumIsPassed && courseModulesScoreFractionNumIsPassed ){
					courseStatusObject.coursePassFailResultStatus = "Passed";
					if( completionReportPassFail != undefined && completionReportPassFail == "true" || completionReportPassFail == true ){
						setCourseProgressString = "passed";
					}
				}else{
					courseStatusObject.coursePassFailResultStatus = "Failed";
					if( completionReportPassFail != undefined && completionReportPassFail == "true" || completionReportPassFail == true ){
						setCourseProgressString = "failed";
					}
				}
			}else{ // no scoring present, default to passed
				courseStatusObject.coursePassFailResultStatus = "Passed";
				if( completionReportPassFail != undefined && completionReportPassFail == "true" || completionReportPassFail == true ){
					setCourseProgressString = "passed";
				}
				if( persistentData.dataModel == 'SCORM1.2' ){
					setSuspendData();
				}
			}
			//console.log( "setCourseProgressString = " + setCourseProgressString );
			// not really part of scoring data section but in interface it is present here
			//var completionReportPassFail = masterJSONStorage.courseParams.persistentData.completionReportPassFail;
			//if( completionReportPassFail != undefined && completionReportPassFail == "true" || completionReportPassFail == true ){
				// if no instruction regarding pass/fail report, or instruction is false, set course status to completed in lms
				//if( persistentData.dataModel == 'SCORM1.2' ){
					//setCourseProgressLMS('completed');
				//}
			//}else{
			if( persistentData.dataModel == 'SCORM1.2' ){
				setCourseProgressLMS(setCourseProgressString);
			}
			//}
		}else{ // course not yet completed, just set suspend
			if( persistentData.dataModel == 'SCORM1.2' ){
				// no score/status change, just skip to the data suspend
				setSuspendData();
			}
		}
	}else{ // module not yet completed
		if( persistentData.dataModel == 'SCORM1.2' ){
			setSuspendData();
		}
	}
	
	//setTimeout(function(){
		//$('#CET-Activity-Content-Bumper').
		//$('#CET-Activity-Content').addClass( "webkitOverflowScrollingTouch" );
		//$('#CET-Activity-Content').removeClass( "overflowYHidden" ).addClass( "overflowYAuto" );
	//}, 5000);
	
	//}
	/*
	if(activeDataSource == "draggybox2"){
		if(persistentData == 'SCORM'){
			//console.log('here');
			if(persistentData_Simulation){
				//setSuspendData({ 'method' : 'suspendStringTest' });
			}else{
				if(currentDashboardSelectedArea == "courseAssessment"){
					if(courseStatusObject.courseAssessmentScore < useMasteryScore){ // failed
						setCourseProgressLMS('failed');
						setScore(); // also sets suspend data
					}
					if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
						prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
					    if(toggleSessionTimeAccrue){
					   	  setSessionTime();
				   	    }
				   	    setCourseProgressLMS('passed');
				   	    setScore(); // also sets suspend data
						toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
					}
				}
				// currently the survey must be complete to return to the dashboard from the morphed continue button 
				if(currentDashboardSelectedArea == "courseSurvey"){
					setCourseProgressLMS('completed');
					prepareDateStamp(); // this should only make the verbose text, stamp should already be stored to suspend_data
					// pertinent interactions - likert, fill-in, performance.  just use performance.
					for( var c = 1 ; c < courseSurveyDataArray[0].length ; c++ ){
						var reduce1 = c - 1;
						switch ( courseSurveyDataArray[0][c][0].activityType ){
							case 'basic':
								for( var d = 1 ; d < courseSurveyDataArray[0][c].length ; d++ ){
									if( courseSurveyDataArray[0][c][d].selected ){
										//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
										//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
										//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
										scorm.set( "cmi.interactions." + reduce1 + ".student_response", courseSurveyDataArray[0][c][d].label );
									}
								}
							break;
							case 'dropList':
								for( var d = 1 ; d < courseSurveyDataArray[0][c].length ; d++ ){
									if( courseSurveyDataArray[0][c][d].selected ){
										//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
										//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
										//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
										scorm.set( "cmi.interactions." + reduce1 + ".student_response", courseSurveyDataArray[0][c][d].label );
									}
								}
							break;
							case 'textArea':
								//for( var d = 1 ; d < courseSurveyDataArray[c].length ; d++ ){
									//if( courseSurveyDataArray[c][d].selected ){
										//scorm.set( "cmi.interactions." + c + ".id", courseSurveyDataArray[c][0].questionText );
										//scorm.set( "cmi.interactions." + reduce1 + ".id", "SurveyResponse" + c );
										//scorm.set( "cmi.interactions." + reduce1 + ".type", "performance" );
										scorm.set( "cmi.interactions." + reduce1 + ".student_response", courseSurveyDataArray[0][c][0].capturedData );
									//}
								//}
							break;
						}
					}
					setSuspendData();
				}
				if(currentDashboardSelectedArea == "courseModule"){
					if( !courseAssessment_Present ){
						if( activitiesCompleteCount >= sideNavLearningModuleTotalCount ){ // all activities / modules completed
						//if( courseStatusObject.courseAssessmentScore >= useMasteryScore ){ // passed
							courseStatusObject.courseAssessmentScore = 100;
							if( !courseSurvey_Present ){
								setCourseProgressLMS('passed');
							}else{
								setCourseProgressLMS('completed');
							}
							prepareDateStamp(); // for preparing date record in suspend data.  should be first time initializing datestamp, as isn't stored until assessment is submitted
						    if( toggleSessionTimeAccrue ){
								setSessionTime();
							}
							setScore(); // also sets suspend data
							toggleSessionTimeAccrue = false; // after we've achieved the first passing score, shouldn't have to accrue any more session timeStamp
						}
					}else{
						setSuspendData();
					}
				}
			}
		}
	}
	*/
	
	//waitCoverController({ 'coverAction' : "Hide" });
	
	//setTimeout(function(){
		$( '#CET-Activity-Content-Title-Text' ).focus();
		updateFocus({ 'action' : "Update" });
	//}, 1000);
	
}
// ! =============================================================
// ! F.Clipboard.Launcher ---
function clipboardLauncher(event){
	if(UIButtons_Supressed){
		return;
	}
	debounceUIButtons();
	mediaGridStacksEnabled = true;
	level3LightboxLauncher("clipboard");	
}
// ! F.Clipboard.Build stacks ---
function buildClipboardStacks(){
	var gridBoxGroupBuild;
	var gridBoxBuild;
	var gridBoxGroupStackBuild = 	'<div class="clipboardGridGroupStackContainer">';
	
	
	for (var k = 0 ; k < clipboardGridStackArray.length ; k++) { // each grid group (2)
		var groupFirstFlag = "";
		var groupLastFlag = "";
		if( k == 0 ){
			groupFirstFlag = "clipboardGridGroupContainerFirst ";
		}
		if( k == clipboardGridStackArray.length-1 ){
			groupLastFlag = "clipboardGridGroupContainerLast ";
		}
		
		gridBoxGroupBuild = 				'<div class="gridGroupContainer clipboardGridGroupContainer ' + groupFirstFlag + groupLastFlag + 'focalItem" tabindex="0">';
		//$('.CET-Activity-Content-Main-TextBlock').html('<h1>Review the three radiographs below and select the most appropriate interpretation.</h1>');
		gridBoxGroupBuild += 					'<div class="gridGroupLabel" aria-hidden="true"><strong>' + clipboardGridStackArray[k][0] + '</strong></div>';
		gridBoxGroupBuild += mediaGridBuilder({ // dump set of box divs into group
			'groupIncrement' : 	k ,
			'gridCount' :  			clipboardGridStackArray[k].length ,
			'dataPool' : 			"clipboard"
		});	
		gridBoxGroupBuild += 				'</div>'; // close grid group container
		gridBoxGroupStackBuild += 		gridBoxGroupBuild; // dump grid group into stack of all groups
	}
	gridBoxGroupStackBuild += 		'</div>'; // close stack of all groups
	$('.lightBoxDialog_Level3_Content').append(gridBoxGroupStackBuild);
	
	$('.gridGroupLabel').css('color', skinPrimaryColor);
	
	$( '.clipboardGridGroupContainer' ).each(function(){ 
		var grabGroupLabel = $(this).find( '.gridGroupLabel' ).text();
		var grabGroupAriaLabel = $(this).find( '.mediaGridContainer' ).attr( 'aria-label' );
		//$(this).find('.gridGroupLabelAccess').text( "Clipboard Item Group Label: " + grabGroupLabel );
		//$(this).find('.mediaGridContainer').attr( 'aria-label' , langPack.screenreader.clipboard.gridGroupLabel + grabGroupLabel );
		placeLocalizedContent({
			'targetItem' : 		$(this).find('.mediaGridContainer') ,
			'srcData' : 		langPack.screenreader.clipboard.gridGroupLabel + grabGroupLabel + langPack.screenreader.clipboard.gridGroup, 
			'placementMode' : 	"Attribute" , 
			'placementMode2' : 	"aria-label"
		});
	});
	
    for (var p = 0 ; p < clipboardGridStackArray.length ; p++) { // each grid group (2)
    	gridBoxThumbCaptionRestyle(p, clipboardGridStackArray[p].length, "clipboard");
    }
	gridBoxThumbFillBox();
	
	updateClipboardGridFreshNotification();
	
}
// ! F.Clipboard.Update Nav notification ---
function updateClipboardOnNavFreshNotification(){
	
	if( $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length > 0 ) { 
		var currentSum = $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').text();
	}
	
	var updatedCBFreshSum = 0;
	for( var a = 0 ; a < clipboardGridStackArray.length ; a++ ){ // each category
		for( var b = 1 ; b < clipboardGridStackArray[a].length ; b++ ){ // each box in the category
			//if( clipboardGridStackArray[a][b][5] == "Fresh" ){
			if( clipboardGridStackArray[a][b].viewStatus == "Fresh" ){
				updatedCBFreshSum++;
			}
		}
	}
	
	if(updatedCBFreshSum > 0){
		// if num circle already exists, just update it
		if($('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length > 0) { 
			$('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').text(updatedCBFreshSum);
		}else{
			$('#navItem-menu .navItemInnerContainer').prepend('<div class="notifyNumBox-summed notifyNumBox-summed-Inside" aria-hidden="true">' + updatedCBFreshSum + '</div>');
		}
		
		if($('#menuNavItem-clipboard .notifyNumBox-cb').length > 0) { 
			$('#menuNavItem-clipboard .notifyNumBox-cb').text(updatedCBFreshSum);
		}else{
			$('#menuNavItem-clipboard').append('<div class="notifyNumBox-cb">' + updatedCBFreshSum + '</div>');
		}
		
		if(currentSum != updatedCBFreshSum){
			$('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').fadeIn(300).fadeOut(300).fadeIn(300).fadeOut(300).fadeIn(300);
			$('#menuNavItem-clipboard .notifyNumBox-cb').fadeIn(300).fadeOut(300).fadeIn(300).fadeOut(300).fadeIn(300);
			//$('#ariaLivePolite').text( "Clipboard Notice: New items added to clipboard." );
			placeLocalizedContent({
				'targetItem' : 		$( '#ariaLivePolite' ) ,
				'srcData' : 		langPack.screenreader.ariaLiveNotice.clipboardNewItems
			});
		}
		
		var checkUnviewedNum = "";
		var checkUnviewedNumNum = 0;
		if( $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length ){
			checkUnviewedNum = $('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').text();
			checkUnviewedNumNum = parseInt(checkUnviewedNum);
		}
		if( checkUnviewedNumNum > 0 ){
			if( checkUnviewedNumNum > 1 ){
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="NavMenuSpaceReturn"]' ) ,
					'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuMultiCBItems ,
					'varSet' : 			[$('.notifyNumBox-cb').text()]
				});
				
				//$('.accessMenuClipboardUnviewedNotice').text( " : There are " + $('.notifyNumBox-cb').text() + " unviewed clipboard items." );
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
					'srcData' : 		langPack.screenreader.bottomNav.menuButton.clipboardMultiCBItems ,
					'varSet' : 			[$('.notifyNumBox-cb').text()]
				});
			}else{
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="NavMenuSpaceReturn"]' ) ,
					'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuSingleCBItem
				});
				
				//$('.accessMenuClipboardUnviewedNotice').text( " : There is " + $('.notifyNumBox-cb').text() + " unviewed clipboard item." );
				placeLocalizedContent({
					'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
					'srcData' : 		langPack.screenreader.bottomNav.menuButton.clipboardSingleCBItem
				});
			}
		}else{
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavMenuSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuNoCBItems
			});
			
			//$('.accessMenuClipboardUnviewedNotice').text( $('.notifyNumBox-cb').empty() );
			//$('.accessMenuClipboardUnviewedNotice').text("");
			placeLocalizedContent({
				'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
				'srcData' : 		langPack.screenreader.bottomNav.menuButton.clipboardNoCBItems
			});
		}
		
	}else{
		if($('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').length > 0) { 
			$('#navItem-menu .navItemInnerContainer .notifyNumBox-summed').remove();
		}
		if($('#menuNavItem-clipboard .notifyNumBox-cb').length > 0) { 
			$('#menuNavItem-clipboard .notifyNumBox-cb').remove();
		}
		
		placeLocalizedContent({
			'targetItem' : 		$( '[data-uiText="NavMenuSpaceReturn"]' ) ,
			'srcData' : 		langPack.screenreader.bottomNav.menuButton.menuNoCBItems
		});
		placeLocalizedContent({
			'targetItem' : 		$( '[data-uiText="NavMenuClipboardSpaceReturn"]' ) ,
			'srcData' : 		langPack.screenreader.bottomNav.menuButton.clipboardNoCBItems
		});
		
	}
		
	$('.notifyNumBox-summed').css('background-color', skinPrimaryColor);	
	$('.notifyNumBox-cb').css('background-color', skinPrimaryColor);	
	
}
// ! F.Clipboard.Update Grid notification ---
function updateClipboardGridFreshNotification(){
	
	//console.log( "updateClipboardGridFreshNotification" );
	
	for(var a = 0 ; a < clipboardGridStackArray.length ; a++){ // each category
		for(var b = 1 ; b < clipboardGridStackArray[a].length ; b++){ // each box in the category
			//if(clipboardGridStackArray[a][b][5] == "Fresh"){
			if(clipboardGridStackArray[a][b].viewStatus == "Fresh"){
				//$('.gridGroupContainer:nth-child(' + (a + 1) + ') .mediaGridBoxOuter:nth-child(' + b + ') .mediaGridBox').append('<div class="notifyNumBox-onGridBox">+</div>');
				
				//console.log( "should place star on grid group " + (a + 1) + " , grid box " + b );
				
				$('.gridGroupContainer:nth-child(' + (a + 1) + ') .mediaGridBoxOuter:nth-child(' + b + ') .mediaGridBox').append('<div class="notifyNumBox-onGridBox"><div class="notifyNumBox-onGridBox-Icon" data-StepStoneIcon="' + webFontAssignmentObject.star1_solid + '"></div></div>'); 
				//$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML("&#xe622;")[0].data);
			}
			//if(clipboardGridStackArray[a][b][5] == "Viewed"){
			//if(clipboardGridStackArray[a][b].viewStatus == "Fresh"){
			if(clipboardGridStackArray[a][b].viewStatus == "Viewed"){
				if($('.gridGroupContainer:nth-child(' + (a + 1) + ') .mediaGridBoxOuter:nth-child(' + b + ') .mediaGridBox .notifyNumBox-onGridBox').length > 0) { 
				    $('.gridGroupContainer:nth-child(' + (a + 1) + ') .mediaGridBoxOuter:nth-child(' + b + ') .mediaGridBox .notifyNumBox-onGridBox').remove();
				}
			}
		}
	}
	
	$('.notifyNumBox-onGridBox').css('background-color', skinPrimaryColor);	
	
	updateClipboardOnNavFreshNotification();
	
	/*
	mediaTypeParse = 			mediaGridDataArray[gridGroup][launchedMediaItem + 1][1];
			mediaFileParse = 				mediaGridDataArray[gridGroup][launchedMediaItem + 1][3];
			enlargementItemPage_Nav_TotalPages = mediaGridDataArray[gridGroup].length - 1;
			mediaGridDataArray[gridGroup][launchedMediaItem + 1][5] = "Viewed";

	$('.gridGroupContainer:nth-child(1) .mediaGridBoxOuter:nth-child(2) .mediaGridBox').append('<div class="notifyNumBox-onGridBox">!</div>');
	$('.gridGroupContainer:nth-child(2) .mediaGridBoxOuter:nth-child(1) .mediaGridBox').append('<div class="notifyNumBox-onGridBox">!</div>');
	
	*/
}
// ! F.ClipBoard.Compare progress data ---
function compareActivityClipboardList( context ){
	var lastUserPathStepNum = context.lastUserPathStepNum;
	
	var splitCourseModuleGroupedActive = 	courseModuleGroupedActive.split('_');
	var courseModule_Group = 						Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 					Number(splitCourseModuleGroupedActive[1]);
	//var lastUserPathIndex = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length - 1;
	
	/*
	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
				var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
				var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]);
				//CETActivityID = courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].moduleID; 
	*/
	
	// HERE -- this should be handled differently between case study and proc., no?
	// 
	
	for( var j = 0 ; j < courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath.length ; j++ ){ // linearly step through each item in user's progress path
		var currentPathCheckStep = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].userPath[j];
		var currentPathCheckSplit = currentPathCheckStep.split(':');
		var clipboardModuleIterationPath = courseClipBoardCatalog[courseModule_Group - 1][courseModule_Module - 1];
		for( var k = 0 ; k < clipboardModuleIterationPath.length ; k++ ){ // step through each node listed in the available catalog for current activity, in order to check for a matching index number
			if( parseInt(clipboardModuleIterationPath[k][0]) == parseInt(currentPathCheckSplit[0]) ){ // if the number of the node in the clipboard catalog exists in the current user path step being checked
				for( var m = 1 ; m < clipboardModuleIterationPath[k].length ; m++ ){ // loop through items in the catalog entry for current node from step value, after id number (as many as exist for step num)
					clipBoardProcessNewElement( 'Recall', clipboardModuleIterationPath[k][m] );
					//console.log('should recall ' +  JSON.stringify( clipboardModuleIterationPath[k][m] , null , 4 ) );
				}
			}
		}
		if( $('body').attr( 'data-activePathType' ) == "Case Study" ){
			if( currentPathCheckSplit[0] == lastUserPathStepNum ){
				//console.log( "end of path - " + currentPathCheckSplit[0] );
				break;
			}
		}
	}
	
	//console.log( "next line is the clipboardgridstackarray after first cacl process:" );
	//console.log( JSON.stringify( clipboardGridStackArray , null , 4 ) );
	
	// attempt cleanup of empty elements in cb view status, though should be more elegant and not require this cleanup
	var viewStatusPath = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus;
	for( var n = 0 ; n < viewStatusPath.length ; n++ ){ // loop through items in the view status array, by category grouping
		var fullLengthStoredViewStatusList = viewStatusPath[n].length; // check count of items in target view status list
		//console.log("vspl =" + viewStatusPath[n].length);
		//console.log("fullLengthStoredViewStatusList =" + fullLengthStoredViewStatusList);
		if( fullLengthStoredViewStatusList == 0 ){
			viewStatusPath.splice( n , 1 );
		//if( clipboardGridStackArray[n] != undefined && clipboardGridStackArray[n].length > 0 ){
			//if( fullLengthStoredViewStatusList > (clipboardGridStackArray[n].length - 1) ){
				// currently removing extra items from beginning of array.  
				//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[n].splice( 0, fullLengthStoredViewStatusList - (clipboardGridStackArray[n].length - 1) );
			//}
		}
	}
	
	// fallback error handler for intermittent scorm clipboard view status list issue where extra item(s) are being added to list 
	// attempt to clean up extra characters added to the view status list from intermittent scorm/moodle issue
	// may result in incorrect view status but will avoid lock-up
	//console.log( "clipboardGridStackArray len = " + clipboardGridStackArray.length );
	if(clipboardGridStackArray.length > 0){
		//console.log( "clipboardGridStackArray join = " + clipboardGridStackArray.join() );
		for( var n = 0 ; n < courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus.length ; n++ ){ // loop through items in the view status array, by category grouping
			var fullLengthStoredViewStatusList = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[n].length; // check count of items in target view status list
			//if( clipboardGridStackArray[n] != undefined && clipboardGridStackArray[n].length > 0 ){
				//if( fullLengthStoredViewStatusList > (clipboardGridStackArray[n].length - 1) ){
					// currently removing extra items from beginning of array.  
					//courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[n].splice( 0, fullLengthStoredViewStatusList - (clipboardGridStackArray[n].length - 1) );
				//}
			//}
		}
	}
	
	// after we've processed all clipboard elements, we check and set any that have been stored as "viewed" in the active cb grid table
	var viewStatusPath = courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus;
	if( viewStatusPath != undefined ){
		for( var n = 0 ; n < viewStatusPath.length ; n++ ){ // loop through items in the view status array, by category grouping
			for( var p = 0 ; p < viewStatusPath[n].length ; p++ ){ // loop through items in the category grouping
				//console.log( 'n = ' + n );
				//console.log( 'p = ' + p );
				//console.log( 'courseModule_Group - 1 = ' + (courseModule_Group - 1) );
				//console.log( 'courseModule_Module - 1 = ' + (courseModule_Module - 1) );
				// fallback error handler for intermittent scorm clipboard view status list issue where extra item(s) are being added to list
				//if( (p + 1) < (clipboardGridStackArray[n].length - 1) ){
				if( clipboardGridStackArray.length > 0 ){
					if( viewStatusPath[n][p] == 1 ){
						//clipboardGridStackArray[n][p + 1][5] = "Viewed"; 
						clipboardGridStackArray[n][p + 1].viewStatus = "Viewed"; 
					}
				}
			}
		}
	}
	
	
	updateClipboardOnNavFreshNotification();
	
	//loadNewActivityPage("draggybox" + lastUserPathStepNum);
	
	//waitCoverController({ 'coverAction' : "Launch" });
	
	var setCurrentPathType	= 						context.setCurrentPathType;
	if( setCurrentPathType != "" && setCurrentPathType != null && setCurrentPathType != undefined ){
		//*
		loadNewActivityPage({ 
			'loadDataFile' : lastUserPathStepNum , 
			'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType 
		});
		//*/
		/*
		waitCoverController({ 
			'coverAction' : 	"Launch" , 
			'loadStep' : 		lastUserPathStepNum ,
			'setCurrentPathType' : courseModuleArray[courseModule_Group - 1].modules[courseModule_Module - 1].activityType 
		});
		/*/
	}else{
		loadNewActivityPage({ 'loadDataFile' : lastUserPathStepNum });
		/*
		waitCoverController({ 
			'coverAction' : 	"Launch" , 
			'loadStep' : 		lastUserPathStepNum
		});
		/*/
	}
	
}

// ! F.ClipBoard.Process & Add new element to array/grid ---
function clipBoardProcessNewElement( processType , clipBoardQuarantineItemInspect ){
	//console.log( "cbpne process type = " + processType );
	//console.log( clipboardGridStackArray );
	//console.log(processType + " --- " + viewStatus);
	// ===[ step 0 - setup vars ]=======================================================
	// set up quarantine storage elements from passed object
	
	//console.log("clipboard process new element : ");
	//console.log( JSON.stringify( clipBoardQuarantineItemInspect , null , 4 ) );
	
	var clipBoardQuarantineItem_Category = 						clipBoardQuarantineItemInspect.clipboardCategory;
	var clipBoardQuarantineItem_DisplayFile = 					clipBoardQuarantineItemInspect.mediaFile_Display;
	var clipBoardQuarantineItem_LaunchFile = 					clipBoardQuarantineItemInspect.mediaFile_Launched;
	var clipBoardQuarantineItem_Caption = 						clipBoardQuarantineItemInspect.mediaCaption;
	if( clipBoardQuarantineItemInspect.descriptionDisplay != undefined ){
		var clipBoardQuarantineItem_DescriptionDisplay =		clipBoardQuarantineItemInspect.descriptionDisplay; // ADA long description
	}
	if( clipBoardQuarantineItemInspect.descriptionLaunched != undefined ){
		var clipBoardQuarantineItem_DescriptionLaunched = 		clipBoardQuarantineItemInspect.descriptionLaunched; // ADA long description
	}
	var clipBoardQuarantineItem_LaunchMediaType = 		clipBoardQuarantineItemInspect.mediaType;
	var clipBoardQuarantineItem_LaunchMediaVariant = 		clipBoardQuarantineItemInspect.mediaVariant;
	if( clipBoardQuarantineItemInspect.mediaFile_ZoomNav != undefined ){
		var clipBoardQuarantineItem_LaunchNav = 				clipBoardQuarantineItemInspect.mediaFile_ZoomNav;
	}
	if( clipBoardQuarantineItemInspect.mediaFile_Poster != undefined ){
		var clipBoardQuarantineItem_Poster = 					clipBoardQuarantineItemInspect.mediaFile_Poster;
	}
	if( clipBoardQuarantineItemInspect.captionTracks != undefined ){
		var clipBoardQuarantineItem_CaptionTracks = 			clipBoardQuarantineItemInspect.captionTracks;
	}
	
	var splitCourseModuleGroupedActive = courseModuleGroupedActive.split('_');
	var courseModule_Group = 		Number(splitCourseModuleGroupedActive[0]);
	var courseModule_Module = 	Number(splitCourseModuleGroupedActive[1]); 
				
	//console.log( "cat = " + clipBoardQuarantineItem_Category );
	
	// initialize existence flags and placement indexes
	var cbCategoryExists = 											false;
	//var cbFileExists = 												false;
	var cbPackageExists = 											false;
	var caseCBCategoryInsertionIndex = 						0;
	var caseCBFileInsertionIndex = 								0;
	
	// ===[ step 1 - check if category already exists ]=======================================================
	for( var k = 0 ; k < clipboardGridStackArray.length ; k++ ){ // pass through existing category array length
		//console.log( 'step 1 - ' + clipboardGridStackArray[k][0] + " --- " + clipBoardQuarantineItem_Category );
		if( clipboardGridStackArray[k][0] == clipBoardQuarantineItem_Category ){ // if first element of the current loop-pass category set matches the passed category label
			cbCategoryExists = 										true;
			caseCBCategoryInsertionIndex = 						k;
			break;
		}
	}
	
	// ===[ step 2 - category doesn't exist -- make it | otherwise, skip to step 3 ]=======================================================
	// here we also check if the clipboard file already exists in any existing categories -- if so, we don't make a new category
	if( !cbCategoryExists ){ // if category doesn't exist, push new sub array and add new category as zero index element
		//console.log( 'step 2 - category ' + clipBoardQuarantineItem_Category + " doesn't exist" );
		caseCBCategoryInsertionIndex = 							clipboardGridStackArray.length - 1;
		for( var t = 0 ; t < clipboardGridStackArray.length ; t++ ){ // loop through existing categories
			//console.log('cbpne cycle t = ' + t);
			//for( var w = 0 ; w < clipboardGridStackArray[v][1].length ; w++ ){ // within each category, loop through actionable category set file list
			for( var u = 1 ; u < clipboardGridStackArray[t].length ; u++ ){ // within each category, loop through each clipboard item element array
				//console.log('cbpne cycle u = ' + u);
				//if( clipboardGridStackArray[t][u][3] == clipBoardQuarantineItem_LaunchFile ){ // if a clipboard item already exists in category, skip to step 3
				//if( clipboardGridStackArray[t][u][4] == clipBoardQuarantineItem_Caption ){ // if clipboard package already exists in category, skip to step 3
				if( clipboardGridStackArray[t][u].caption == clipBoardQuarantineItem_Caption ){ // if clipboard package already exists in category, skip to step 3
					//console.log( 'step 2 - file ' + clipBoardQuarantineItem_LaunchFile + " exists in category " + clipBoardQuarantineItem_Category + ', skipping to step 3' );
					//console.log( 'step 2 - package ' + clipBoardQuarantineItem_Caption + " exists in category " + clipBoardQuarantineItem_Category + ', skipping to step 3' );
					cbPackageExists = 							true;
					//console.log('cbp exists 1 = ' + cbPackageExists);
					break;
				}
			}
		}
		// if reached here, both the clipboard file AND category do not yet exist in stack.
		// this makes a new category array and an empty child array inside of the new category
		// new file is added in step 4 if step 3 is passed
		if(!cbPackageExists){ // only access this section of step 2 if cb file doesn't yet exist
			//console.log( 'step 2 - file ' + clipBoardQuarantineItem_LaunchFile + " does not exist in category " + clipBoardQuarantineItem_Category );
			//console.log( 'step 2 - package ' + clipBoardQuarantineItem_Caption + " does not exist in category " + clipBoardQuarantineItem_Category );
			caseCBCategoryInsertionIndex = 	clipboardGridStackArray.length; // new category insertion index is end of existing stack
			//clipboardGridStackArray.push( [clipBoardQuarantineItem_Category, []] ); // push new category set, element 0 = label, element 1 = file list sub array
			clipboardGridStackArray.push( [clipBoardQuarantineItem_Category, {}] ); // push new category set, element 0 = label, element 1 = file list sub array
			var newCBCategoryViewStatusGroup = [];
			if( processType == 'NewPage' ){
				if( courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus == '' || 
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[0] == 'x' || 
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[0][0] == 'x' ){
					//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[0] = [0];
					//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[0][0] = 0;
					courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[0] = newCBCategoryViewStatusGroup;
					//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[checkCBInsertionSpot - 1].push(0);
				}else{
					//if(processType == 'Recall'){
						//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex] = 1;
						//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus.push(newCBCategoryViewStatusGroup);
					//}else if(processType == 'NewPage'){
						courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus.push(newCBCategoryViewStatusGroup);
					//}
					//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus.push(newCBCategoryViewStatusGroup);
				}
			}
		}
	}
	
	// ===[ step 3 - check if clipboard file already exists in category ]=======================================================
	// if we find match here, we exit the function and abort the file addition
	for( var g = 1 ; g < clipboardGridStackArray[caseCBCategoryInsertionIndex].length ; g++ ){ // loop through actionable category set file list
		//console.log('cycle g = ' + g);
		//console.log( 'step 3 - ' + clipboardGridStackArray[caseCBCategoryInsertionIndex][g][4] + " --- " + clipBoardQuarantineItem_Caption );
		//if( clipboardGridStackArray[caseCBCategoryInsertionIndex][g][3] == clipBoardQuarantineItem_LaunchFile ){
		//if( clipboardGridStackArray[caseCBCategoryInsertionIndex][g][4] == clipBoardQuarantineItem_Caption ){
		if( clipboardGridStackArray[caseCBCategoryInsertionIndex][g].caption == clipBoardQuarantineItem_Caption ){ // if clipboard package already exists in category, skip to step 3
			//console.log( 'step 3 - package ' + clipBoardQuarantineItem_Caption + " exists in category " + clipBoardQuarantineItem_Category );
			cbPackageExists = 							true;
			//console.log('cbp exists 2 = ' + cbPackageExists);
			return;
		}
	}
	
	// ===[ step 4 - add new cb file]=======================================================
	if( !cbPackageExists ){ // only perform following if cb file doesn't yet exist..
		//console.log('no cbp exists 2');
		if( cbCategoryExists ){ //push new sub array and add new file as zero index element
			//var newBlankArray = [];
			//clipboardGridStackArray[caseCBCategoryInsertionIndex].push(newBlankArray);
			var newBlankObj = {};			
			clipboardGridStackArray[caseCBCategoryInsertionIndex].push(newBlankObj);
		}
		var checkCBInsertionSpot = clipboardGridStackArray[caseCBCategoryInsertionIndex].length;
		/*
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_LaunchMediaType); 
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_LaunchMediaVariant);
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_DisplayFile);
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_LaunchFile);
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_Caption);
		*/
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].launchMediaType = 		clipBoardQuarantineItem_LaunchMediaType;
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].launchMediaVariant = 	clipBoardQuarantineItem_LaunchMediaVariant;
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].displayFile = 				clipBoardQuarantineItem_DisplayFile;
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].launchFile = 					clipBoardQuarantineItem_LaunchFile;
		clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].caption = 						clipBoardQuarantineItem_Caption;
		
		if( clipBoardQuarantineItem_DescriptionDisplay != undefined ){
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].descriptionDisplay =		clipBoardQuarantineItem_DescriptionDisplay; // ADA long description
		}
		if( clipBoardQuarantineItem_DescriptionLaunched != undefined ){
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].descriptionLaunched = 		clipBoardQuarantineItem_DescriptionLaunched; // ADA long description
		}
		
		if( clipBoardQuarantineItem_Poster != undefined ){
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].poster = 					clipBoardQuarantineItem_Poster;
		}
		if( clipBoardQuarantineItem_CaptionTracks != undefined ){
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].captionTracks = 		clipBoardQuarantineItem_CaptionTracks;
		}
		
		/*if( viewStatus ){
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push("Viewed");
			if(processType == 'Recall'){
				courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex] = 1;
			}else if(processType == 'NewPage'){
				courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex].push(1);
			}
		}else{*/
			//clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push("Fresh");
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].viewStatus = "Fresh";
			if( processType == 'Recall' ){
				//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex] = 0;
			}else if(processType == 'NewPage'){
				courseStatusObject.courseModuleGroupStack[courseModule_Group - 1][courseModule_Module - 1].clipboardElementViewStatus[caseCBCategoryInsertionIndex].push(0);
			}
		//}
		if( processType == 'Recall' ){ 
			//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex] = 0;
		}
		
		// need to add this after view status, because there is always view status but not always zoom nav
		// part of current method reasoning is that we concatenate the arrays to store as progress data
		// switching to an object would help clean this up but would require reworking progress recording system
		if( clipBoardQuarantineItem_LaunchNav != undefined ){
			//clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].push(clipBoardQuarantineItem_LaunchNav);
			clipboardGridStackArray[caseCBCategoryInsertionIndex][checkCBInsertionSpot - 1].zoomNavFile = clipBoardQuarantineItem_LaunchNav;
		}
		
		//if( courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[0][0] == '' ){
		//if( checkCBInsertionSpot < 2 ){
			//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[0][0] = 0;
			//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[checkCBInsertionSpot - 1].push(0);
		//}else{
			//courseStatusObject.courseModuleGroupStack[currentCourseModule].clipboardElementViewStatus[caseCBCategoryInsertionIndex].push(0);
		//}
	}
}
// ! =============================================================
// ! F.CourseAssessment.Build current page ---
function buildPageAssessment(){
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	$.ajax({
		type:			'GET',//'POST',
		url: 			'assessmentLoader.html' + dummyTStamp()
	}).done(function (doneResponse){
		pageAssessmentSelectionArray[0] = [];
		
		$('#CET-Activity-Content-Assessment').append(doneResponse).addClass( "focalItem" ).attr( 'tabindex' , "0" );
		
		switch (currentBasePage_Assessment_Type){
			case "Single Answer - Multiple Choice":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
				switch (currentBasePage_Assessment_Variant){
					case "Basic":
						$('#CET-Activity-Content-Assessment-Main').addClass('SAMC-Text-Basic'); 
					break;
					//case "MediaGrid":
					case "Media":
						$('#CET-Activity-Content-Assessment-Main').addClass('SAMC-Grid-Basic');
					break;
				}
			break;
			case "Multiple Answer - Multiple Choice":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
				switch (currentBasePage_Assessment_Variant){
					case "Basic":
						$('#CET-Activity-Content-Assessment-Main').addClass('MAMC-Text-Basic'); 
					break;
					//case "MediaGrid":
					case "Media":
						$('#CET-Activity-Content-Assessment-Main').addClass('MAMC-Grid-Basic');
					break;
				}
			break;
			case "Advanced Multiple Answer - Multiple Choice":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
				switch (currentBasePage_Assessment_Variant){
					case "Basic":
						$('#CET-Activity-Content-Assessment-Main').addClass('AMAMC-Text-Basic'); 
					break;
					//case "MediaGrid":
					case "Media":
						$('#CET-Activity-Content-Assessment-Main').addClass('AMAMC-Grid-Basic');
					break;
				}
			break;
			case "Write In - Field List":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
				switch (currentBasePage_Assessment_Variant){
					case "Basic":
						$('#CET-Activity-Content-Assessment-Main').addClass('WriteIn-List-Basic'); 
					break;
					//case "MediaGrid":
					case "Media":
						$('#CET-Activity-Content-Assessment-Main').addClass('WriteIn-MediaList-Basic');
					break;
				}
				$('.CET-Activity-Content-Assessment-PageChoiceSet.UDArrowGroup').attr( 'data-UDArrowGroup' , "StepAssessmentWriteInFieldList" );
			break;
			case "Matching":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
			break;
			case "Ranking":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , currentBasePage_Assessment_Type );
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentVariant' , currentBasePage_Assessment_Variant );
			break;
			case "PassThrough":
			case "Pass Through":
				$('#CET-Activity-Content-Assessment').attr( 'data-pageAssessmentType' , "Pass Through" );
			break;
		}
		
		/*
		switch( currentBasePage_Assessment_Type ){
			case "Single Answer - Multiple Choice":
				assessmentChoice += ' data-choiceListItemType="SAMC"'; // space at beginning
			break;
			case "Multiple Answer - Multiple Choice":
				assessmentChoice += ' data-choiceListItemType="MAMC"'; // space at beginning
			break;
			case "Matching":
				assessmentChoice += ' data-choiceListItemType="Matching"'; // space at beginning
			break;
			case "Ranking":
				assessmentChoice += ' data-choiceListItemType="Ranking"'; // space at beginning
			break;
		}
		*/
		//if(assessmentInstruction == "none"){
		
		var useInstructionLine = "";
		if( currentBasePage_Assessment_InstructionText != "" && 
			currentBasePage_Assessment_InstructionText != null && 
			currentBasePage_Assessment_InstructionText != undefined ){
			//if(currentBasePage_Assessment_InstructionText == "Default"){
				//if(currentBasePage_Assessment_Type == "Multiple Answer - Multiple Choice"){
					//$('#CET-Activity-Content-Assessment-InstructionLine').html('<strong>CHOOSE THE BEST OPTION(S):</strong>');
				//}else{
					//$('#CET-Activity-Content-Assessment-InstructionLine').html('<strong>CHOOSE THE BEST OPTION:</strong>');
				//}
			//}else{
				
				//useInstructionLine = currentBasePage_Assessment_InstructionText + " : ";
				
				//$('#CET-Activity-Content-Assessment-InstructionLine').html('<strong>' + currentBasePage_Assessment_InstructionText + '</strong>');
				$('#CET-Activity-Content-Assessment-InstructionLine').html('<span class="accessViz stepAssessmentInstructionPre"></span><strong>' + currentBasePage_Assessment_InstructionText + '</strong><span class="accessViz stepAssessmentInstructionPost"></span>');
				
				//useInstructionLine = '<strong>' + currentBasePage_Assessment_InstructionText + '</strong>';
				
			//}
		}else{
			$('#CET-Activity-Content-Assessment-InstructionLine').hide();
		}
		
		switch (currentBasePage_Assessment_Variant){
			case "Basic":
				/*placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment') ,
					'placementMode' : 	"Attribute" , 
					'placementMode2' : 	"aria-label" , 
					'srcData' : 		langPack.screenreader.stepBase.stepAssessment , 
					'varSet' : 			[useInstructionLine]
				});*/
				placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment-InstructionLine .stepAssessmentInstructionPre') ,
					'srcData' : 		langPack.screenreader.stepBase.stepAssessmentInstructTextPre
				});
				placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment-InstructionLine .stepAssessmentInstructionPost') ,
					'srcData' : 		langPack.screenreader.stepBase.stepAssessmentInstructTextPost
				});
			break;
			//case "MediaGrid":
			case "Media":
				/*placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment') ,
					'placementMode' : 	"Attribute" , 
					'placementMode2' : 	"aria-label" , 
					'srcData' : 		langPack.screenreader.stepBase.stepAssessmentGrid , 
					'varSet' : 			[useInstructionLine]
				});*/
				placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment-InstructionLine .stepAssessmentInstructionPre') ,
					'srcData' : 		langPack.screenreader.stepBase.stepAssessmentInstructGridPre
				});
				placeLocalizedContent({
					'targetItem' : 		$('#CET-Activity-Content-Assessment-InstructionLine .stepAssessmentInstructionPost') ,
					'srcData' : 		langPack.screenreader.stepBase.stepAssessmentInstructGridPost
				});
			break;
		}
		
		if(currentBasePage_Assessment_HintText != "" && currentBasePage_Assessment_HintText != null && currentBasePage_Assessment_HintText != undefined){
			
		}else{
			$('#CET-Activity-Content-Assessment-HintButtonContainer').hide();
		}
		
		/*
			$assessmentStyle = $_POST['assessmentStyle'];
			switch ($assessmentStyle){
				
				//case "textBasic":
				case "Basic":
					$assessmentClass = 'Single Answer - Multiple Choice-Text-Basic';
					break;
					
				//case "gridBasic":
				case "MediaGrid":
					$assessmentClass = 'Single Answer - Multiple Choice-Grid-Basic';
					break;
				
			}
		}
		
		<div id="CET-Activity-Content-Assessment-Main" class="<? echo $assessmentClass; ?>">
			<ul id="CET-Activity-Content-Assessment-PageChoiceSet">
		
		*/
		
		//if(currentBasePage_Assessment_OutputShuffle == "True"){
		if( currentBasePage_Assessment_OutputShuffle ){
			// very simple js random
			//currentBasePage_Assessment_OutputList.sort(function() {
				//return .5 - Math.random();
			//});
			// better random
			currentBasePage_Assessment_OutputList = shuffleArray(currentBasePage_Assessment_OutputList);
		}
		
		// after performing possible shuffle, set up the list for comparing handled-output selections against the "control" list
		switch( currentBasePage_Assessment_Type  ){
			case "Multiple Answer - Multiple Choice" :
				for (var u = 0 ; u < currentBasePage_Assessment_OutputList.length ; u++){
					if( currentBasePage_Assessment_OutputList[u].outputStatus == "Correct" ){ // MAMC should always have an output status for each choice
						nodeAssessment_SpecialHandling_OutputStatusMatchList.push('on');
					}else{
						nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off'); 
					}
				}
			break;
			case "Advanced Multiple Answer - Multiple Choice" :
				for (var a = 0 ; a < currentBasePage_Assessment_OutputList.length ; a++){
					// first check the choice vitals, then the patterns.  repeat when comparing.
					if( currentBasePage_Assessment_OutputList[a].outputStatus != undefined && 
						currentBasePage_Assessment_OutputList[a].outputStatus != "" && 
						currentBasePage_Assessment_OutputList[a].outputStatus != null ){
						if( currentBasePage_Assessment_OutputList[a].outputStatus == "Correct" ){
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push('on');
						}else{
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off'); 
						}
						if( currentBasePage_Assessment_OutputList[a].selectionRequirement != undefined && 
							currentBasePage_Assessment_OutputList[a].selectionRequirement != "" && 
							currentBasePage_Assessment_OutputList[a].selectionRequirement != null ){
							if( currentBasePage_Assessment_OutputList[a].selectionRequirement == "Vital" ){
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('on');
							}else{
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
							}
						}else{
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
						}
					}else{ /* is patterned */
						var inPatternMatchFound = false;
						nodeAssessment_SpecialHandling_OutputStatusMatchList.push( "pattern" );
						nodeAssessment_SpecialHandling_VitalCorrectMatchList.push( "pattern" );
						// instead of "pattern", can actually dig through patterns and check for existence of choice in patterns?
						/*
						cycleAndPatterns:
						for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns.length ; b++ ){
							cycleAndPatternChoices:
							for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].choices.length ; c++ ){
								if( currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].choices[c] == (a+1) ){
									if( currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[b].statusMatch == "Correct" ){
										nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'on-and_' + (b+1) );
										inPatternMatchFound = true;
										break cycleAndPatterns;
									}
								}
							}
						}
						if( !inPatternMatchFound ){
							cycleOrPatterns:
							for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns.length ; b++ ){
								cycleOrPatternChoices:
								for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].choices.length ; c++ ){
									if( currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].choices[c] == (a+1) ){
										if( currentBasePage_Assessment_SpecialHandlingData.rules.orPatterns[b].statusMatch == "Correct" ){
											nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'on-or_' + (b+1) );
											inPatternMatchFound = true;
											break cycleOrPatterns;
										}
									}
								}
							}
						}
						if( !inPatternMatchFound ){
							cycleAvoidPatterns:
							for( var b = 0 ; b < currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns.length ; b++ ){
								cycleAvoidPatternChoices:
								for( var c = 0 ; c < currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].choices.length ; c++ ){
									if( currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].choices[c] == (a+1) ){
										if( currentBasePage_Assessment_SpecialHandlingData.rules.avoidPatterns[b].statusMatch == "Correct" ){
											nodeAssessment_SpecialHandling_OutputStatusMatchList.push( 'off-avoid_' + (b+1) ); //needs to be off, not on
											inPatternMatchFound = true;
											break cycleAvoidPatterns;
										}
									}
								}
							}
						}
						if( !inPatternMatchFound ){
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off');
						}
						*/
						//currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[0].statusNonMatch == "Correct"
						//currentBasePage_Assessment_SpecialHandlingData.rules.andPatterns[0].statusNone == "Correct"
						//nodeAssessment_SpecialHandling_OutputStatusMatchList.push('pattern');
						//nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('pattern'); 
					}
					
				}
				// add vital items from patterns.  these are appended to the vital matchlist assembled from choices.  
				// need to use same ordering when comparing
				/*
				var patternsPath = masterJSONStorage.currentStep.Assessment.specialHandling.rules;
				if( patternsPath["andPatterns"] != undefined && patternsPath["andPatterns"].length > 0 ){
					for( var b = 0 ; b < patternsPath["andPatterns"].length ; b++ ){
						if( patternsPath["andPatterns"][b].require != undefined && 
							patternsPath["andPatterns"][b].require != "" && 
							patternsPath["andPatterns"][b].require != null ){
							if( patternsPath["andPatterns"][b].require == "Vital" ){
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('on');
							}else{
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
							}
						}else{
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
						}
					}
				}
				if( patternsPath["orPatterns"] != undefined && patternsPath["orPatterns"].length > 0 ){
					for( var b = 0 ; b < patternsPath["orPatterns"].length ; b++ ){
						if( patternsPath["orPatterns"][b].require != undefined && 
							patternsPath["orPatterns"][b].require != "" && 
							patternsPath["orPatterns"][b].require != null ){
							if( patternsPath["orPatterns"][b].require == "Vital" ){
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('on');
							}else{
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
							}
						}else{
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
						}
					}
				}
				if( patternsPath["avoidPatterns"] != undefined && patternsPath["avoidPatterns"].length > 0 ){
					for( var b = 0 ; b < patternsPath["avoidPatterns"].length ; b++ ){
						if( patternsPath["avoidPatterns"][b].require != undefined && 
							patternsPath["avoidPatterns"][b].require != "" && 
							patternsPath["avoidPatterns"][b].require != null ){
							if( patternsPath["avoidPatterns"][b].require == "Vital" ){
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('on');
							}else{
								nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
							}
						}else{
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
						}
					}
				}
				*/
			break;
			case "Write In - Field List" :
				for (var a = 0 ; a < currentBasePage_Assessment_OutputList.length ; a++){
					if( currentBasePage_Assessment_OutputList[a].outputStatus != undefined && 
						currentBasePage_Assessment_OutputList[a].outputStatus != "" && 
						currentBasePage_Assessment_OutputList[a].outputStatus != null ){
						if( currentBasePage_Assessment_OutputList[a].outputStatus.statusFilledMatch == "Correct" ){
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push('on');
						}else{
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off'); 
						}
					}else{
						nodeAssessment_SpecialHandling_OutputStatusMatchList.push('off'); 
					}
					if( currentBasePage_Assessment_OutputList[a].matchRequirement != undefined && 
						currentBasePage_Assessment_OutputList[a].matchRequirement != "" && 
						currentBasePage_Assessment_OutputList[a].matchRequirement != null ){
						if( currentBasePage_Assessment_OutputList[a].matchRequirement == "Vital" ){
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('on');
						}else{
							nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
						}
					}else{
						nodeAssessment_SpecialHandling_VitalCorrectMatchList.push('off'); 
					}
				}
			break;
			case "Matching" :
				for( var a = 0 ; a < currentBasePage_Assessment_OutputList.length ; a++ ){
					for( var b = 0 ; b < currentBasePage_Assessment_OutputList[a].choiceOptions.length ; b++ ){
						if( currentBasePage_Assessment_OutputList[a].choiceOptions[b].outputStatus == "Correct" ){
							nodeAssessment_SpecialHandling_OutputStatusMatchList.push( String( b + 1 ) ); 
						}
					}
				}
				// if matching, cycle through the choice blocks and shuffle any shuffle-flagged option stacks
				for( var cycleChoiceBlocks = 0 ; cycleChoiceBlocks < currentBasePage_Assessment_OutputList.length ; cycleChoiceBlocks++ ){
					if( currentBasePage_Assessment_OutputList[cycleChoiceBlocks].choiceOptionShuffle == true ){
						currentBasePage_Assessment_OutputList[cycleChoiceBlocks].choiceOptions = shuffleArray( currentBasePage_Assessment_OutputList[cycleChoiceBlocks].choiceOptions );
					}
				}
			break;
			case "Ranking" : // set up as a straight incrementing sequence, always
				for( var a = 0 ; a < pageAssessmentSelectionArray[0].length ; a++ ){
					nodeAssessment_SpecialHandling_OutputStatusMatchList.push( String( a + 1 ) ); 
				}
			break;
		}
		
		//if(assessmentStyle == "textBasic"){
		if( currentBasePage_Assessment_Variant == "Basic" ){
			//for (var u = 0 ; u < assessmentListArray.length ; u++){
				
			var assessmentChoice = "";
		    //assessmentChoice += '<li class="choiceList_Item">';
		    //*
		    var choiceStackExtremePoz = "";
			
			switch( currentBasePage_Assessment_Type ){
			    case "Write In - Field List":
			    	for( var u = 0 ; u < masterJSONStorage.currentStep.Assessment.inputFieldSetup.fieldCount ; u++ ){
				    	assessmentChoice = "";
				    	choiceStackExtremePoz = "";
				    	if( u == 0 ){
						   choiceStackExtremePoz = " choiceGroupFirst";
					    }
					    if( u == masterJSONStorage.currentStep.Assessment.inputFieldSetup.fieldCount - 1 ){
						    choiceStackExtremePoz = " choiceGroupLast";
					    }
					    /*
					    <span class="accessViz stepAssessmentInstructionPre">Step Assessment : </span>
<strong>fill in the fields:</strong>
<span class="accessViz stepAssessmentInstructionPost"> : Use space or return to interact with the assessment, then use the up or down arrow keys to cycle the assessment elements and make your selections. After you are satisfied with your assessment selections, check the results by navigating to the Check button by using tab key.</span>

						langPack.screenreader.stepBase.stepMediaGrid;
						langPack.screenreader.stepBase.stepAssessmentWriteInFieldListSlot1
						"Write-In Field List slot [var1] of [var2]. Current field value is : [var3]. Use space or return to focus this input field for keyboard interaction, and use escape key to return to the list of input field slots for further entries.  Use tab key to jump to the Check button from within an input field."
						
					    */
					    /*
					    switch(currentBasePage_Assessment_Type){
							
							"stepAssessmentMatchSlot1" : 		"Matching Slot ", //"Matching Slot [var1] : [var2] : Use space or return to open the list of items to rank",
							"stepAssessmentMatchSlot2" : 		" : Use space or return to open the list of possible matching options.",
							"stepAssessmentMatchSlotOption1" : 	"Matching Slot [var1] : Option [var2] of [var3] : ", // "Matching Slot [var1] : Option [var2] of [var3] : Use space or return to place this option in matching slot [var1]",
							"stepAssessmentMatchSlotOption2" : 	" : Use space or return to place this option in matching slot [var1] ",
							*/
							
							/*
							case "Matching": // receive oid of selected option
								var matchFill1 = placeLocalizedContent({
									'srcData' : 		langPack.screenreader.stepBase.stepAssessmentMatchSlotOption1 ,
									'placementMode' : 	"Return" , 
									'varSet' : 			[
										choiceBlockIndex+1 ,
										a+1 , 
										optionsDataPath.length // choiceBlockIndex+1
									]
								});
								optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceMatchingOptionListItemAccess">' + matchFill1 + '</span>' + choiceLabel + '<span class="accessViz choiceMatchingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentMatchSlotOption2 + (choiceBlockIndex+1) + '</span></li>';
								//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceMatchingOptionListItemAccess">' + setAssessType + ' Slot ' + (choiceBlockIndex+1) + ' : Option ' + (a+1) + ' of ' + optionsDataPath.length + ' : </span>' + choiceLabel + '<span class="accessViz choiceMatchingOptionListItemAccessSpaceReturn"> : Use space or return to place this option in matching slot ' + (choiceBlockIndex+1) + '</span></li>'; 
							break;
							case "Ranking": // receive oid of selected option
								//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + setAssessType + ' Slot ' + (choiceBlockIndex+1) + ' : Option ' + (a+1) + ' of ' + optionsDataPath.length + ' : </span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn"> : Use space or return to place this option in ranking slot ' + (choiceBlockIndex+1) + '</span></li>'; 
								//optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 + '</span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 + (choiceBlockIndex+1) + '</span></li>';
								var rankFill1 = placeLocalizedContent({
									'srcData' : 		langPack.screenreader.stepBase.stepAssessmentRankSlotOption1 ,
									'placementMode' : 	"Return" , 
									'varSet' : 			[
										choiceBlockIndex+1 ,
										a+1 , 
										optionsDataPath.length // choiceBlockIndex+1
									]
								});
								optionStack += 			'<li class="choiceOptionListItem' + choiceOptionExtremePoz + choiceOptionSelected + ' focalItem arrowNavUD" tabindex="0"><span class="accessViz choiceRankingOptionListItemAccess">' + rankFill1 + '</span>' + choiceLabel + '<span class="accessViz choiceRankingOptionListItemAccessSpaceReturn">' + langPack.screenreader.stepBase.stepAssessmentRankSlotOption2 + (choiceBlockIndex+1) + '</span></li>';
								
								
								
							break;
						}
					    */
					    
					    var writeInFieldListSlotAccessFill1 = placeLocalizedContent({
							'srcData' : 		langPack.screenreader.stepBase.stepAssessmentWriteInFieldListSlot1 ,
							'placementMode' : 	"Return" , 
							'varSet' : 			[
								u+1 ,
								masterJSONStorage.currentStep.Assessment.inputFieldSetup.fieldCount
							]
						});
					    
						assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="InputFieldBasic">'; // begin li opener tag
						assessmentChoice += 	'<span class="accessViz choiceWriteInFieldListItemAccess1">' + writeInFieldListSlotAccessFill1 + '</span>';
						assessmentChoice += 	'<span class="accessViz choiceWriteInFieldListBlankInput">blank</span>';
						assessmentChoice += 	'<div class="CET-Choice-InputField" data-ChoiceInputFieldStyle="FieldList"><input type="text" class="stepAssessmentInputFieldListItem" maxlength="50"/></div>';
						assessmentChoice += 	'<span class="accessViz choiceWriteInFieldListItemAccess2">' + langPack.screenreader.stepBase.stepAssessmentWriteInFieldListSlot2 + '</span>';
						assessmentChoice += '</li>';
						$('#CET-Activity-Content-Assessment-PageChoiceSet').append(assessmentChoice);
						pageAssessmentSelectionArray[0][u] = "";
					}
					
					// temp dev only, remove!
					/*
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(1) .stepAssessmentInputFieldListItem' ).val( "red" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(2) .stepAssessmentInputFieldListItem' ).val( "orange" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(3) .stepAssessmentInputFieldListItem' ).val( "yellow" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(4) .stepAssessmentInputFieldListItem' ).val( "green" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(5) .stepAssessmentInputFieldListItem' ).val( "blue" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(6) .stepAssessmentInputFieldListItem' ).val( "indigo" );
					$( '[data-choiceMechanism="InputFieldBasic"]:nth-child(7) .stepAssessmentInputFieldListItem' ).val( "violet" );
					/*/
				break;
				default :
					//assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic"'; // begin li opener tag
					for( var u = 0 ; u < currentBasePage_Assessment_OutputList.length ; u++ ){
						assessmentChoice = "";
						choiceStackExtremePoz = "";
						var choiceDisplayText = currentBasePage_Assessment_OutputList[u].outputDisplayText;
						if( choiceDisplayText == undefined ){
							choiceDisplayText = "";
						}
						// begin li opener tag
						/*if( currentBasePage_Assessment_Type ==  "Advanced Multiple Answer - Multiple Choice" ){
							 assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-amamcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '" data-selectionStatus="Unselected"';
						}else{
							 assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic"';
						}*/
					    switch( currentBasePage_Assessment_Type ){
							case "Single Answer - Multiple Choice":
								//assessmentChoice += ' data-choiceListItemType="SAMC"'; // space at beginning
								assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-samcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '" data-selectionStatus="Unselected"';
							break;
							case "Multiple Answer - Multiple Choice":
								//assessmentChoice += ' data-choiceListItemType="MAMC"'; // space at beginning
								assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-mamcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '" data-selectionStatus="Unselected"';
							break;
							case "Advanced Multiple Answer - Multiple Choice":
								assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-amamcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '" data-selectionStatus="Unselected"';
								
							break;
							case "Matching":
								assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-amamcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '"';
								var choiceOptionSelectedCount = 0;
								var choiceOptionDisabledCount = 0;
								for( var cycleChoiceList = 0 ; cycleChoiceList < currentBasePage_Assessment_OutputList[u].choiceOptions.length ; cycleChoiceList++ ){
									var choiceOptionSelectionStatus = currentBasePage_Assessment_OutputList[u].choiceOptions[cycleChoiceList].selectionStatus;
									if( choiceOptionSelectionStatus == "Selected"){
										choiceOptionSelectedCount++;
									}
									if( choiceOptionSelectionStatus == "Disabled"){
										choiceOptionDisabledCount++;
									}
								}
								if( choiceOptionSelectedCount > 0 ){
									assessmentChoice += ' data-choiceListItemStatus="Selected"'; // space at beginning
								}else{
									assessmentChoice += ' data-choiceListItemStatus="Unselected"'; // space at beginning
								}
							break;
							case "Ranking":
								assessmentChoice += '<li class="choiceList_Item' + choiceStackExtremePoz + ' focalItem arrowNavUD" tabindex="0" data-choiceMechanism="ToggleBasic" data-amamcChoice="1-' + currentBasePage_Assessment_OutputList[u].choiceID + '"';
								var choiceRankPlacement = currentBasePage_Assessment_OutputList[u].rankPlaced;
								if( choiceRankPlacement != undefined ){
									assessmentChoice += ' data-choiceListItemStatus="Selected"'; // space at beginning
								}else{
									assessmentChoice += ' data-choiceListItemStatus="Unselected"'; // space at beginning
								}
							break;
						}
						//assessmentChoice += ' aria-label="Step Asssessment Choice Label : ' + choiceDisplayText + '">'; // close li opener tag
						assessmentChoice += '>'; // close li opener tag
						//*/
					    switch( currentBasePage_Assessment_Type ){
							case "Matching":
								assessmentChoice += '<div class="CET-Choice-Header" data-ChoiceHeaderStyle="MatchingText"><span class="accessViz">Matching Element Droplist : </span>' + choiceDisplayText + '<span class="accessViz"> : Use space or return to open the list of options for this matching element.</span></div>';
								assessmentChoice += '<div class="choiceOptionSet">'; // for better layout against matching choice header
							break;    
						}
						if( currentBasePage_Assessment_Type != "Write In - Field List" ){
							assessmentChoice += 		'<div class="CET-Choice-Icon-Container">';
					    	switch( currentBasePage_Assessment_Type ){
								case "Single Answer - Multiple Choice":
									assessmentChoice += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="RadioBasic" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"><div class="radioInner"></div></div>';
								break;
								case "Multiple Answer - Multiple Choice":
									assessmentChoice += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="CheckBoxBasic" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"><div class="radioInner"></div></div>';
								break;
								case "Advanced Multiple Answer - Multiple Choice":
									assessmentChoice += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="CheckBoxBasic" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"><div class="radioInner"></div></div>';
								break;
								case "Matching":
									var choiceOptionSelectedCount = 0;
									var choiceOptionDisabledCount = 0;
									assessmentChoice += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="OptionDropperMatching" data-StepStoneIcon="' + webFontAssignmentObject.arrow2_down + '"><div class="radioInner"></div></div>';
								break;
								case "Ranking":
									assessmentChoice += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="OptionDropperRanking" aria-hidden="true">' + ( u + 1 ) + '</div>';
									
								break;
							}
							assessmentChoice += 		'</div>';
						}
						switch( currentBasePage_Assessment_Type ){
							case "Single Answer - Multiple Choice":
								assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessSAMCChoiceLabel">' + langPack.screenreader.stepBase.stepAssessmentSAMCTextUnselected1 + '</span><span class="choiceDisplayText">' + choiceDisplayText + '</span><span class="accessViz accessSAMCChoiceInstruction">' + langPack.screenreader.stepBase.stepAssessmentSAMCTextUnselected2 + '</span></div>';
								// : This is the selected option.
							break;
							case "Multiple Answer - Multiple Choice":
								assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessMAMCChoiceLabel">' + langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected1 + '</span><span class="choiceDisplayText">' + choiceDisplayText + '</span><span class="accessViz accessMAMCChoiceInstruction">' + langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected2 + '</span></div>';
								// : Use space or return to un-select this option.
							break;
							case "Advanced Multiple Answer - Multiple Choice":
								assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessMAMCChoiceLabel">' + langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected1 + '</span><span class="choiceDisplayText">' + choiceDisplayText + '</span><span class="accessViz accessMAMCChoiceInstruction">' + langPack.screenreader.stepBase.stepAssessmentMAMCTextUnselected2 + '</span></div>';
								// : Use space or return to un-select this option.
							break;
							// i don't think this case is ever reached here....
							case "Write In - Field List":
								assessmentChoice += 	'<div class="CET-Choice-InputField" data-ChoiceInputFieldStyle="FieldList"><input type="text" class="stepAssessmentInputFieldListItem" maxlength="50"/></div>';
							break;
							case "Matching":
								// for each choice, look in otions for for selection status
								// if all are Unselected / None are Selected, set droplist dropper label to centered SELECT
								for( var cycleChoiceList = 0 ; cycleChoiceList < currentBasePage_Assessment_OutputList[u].choiceOptions.length ; cycleChoiceList++ ){
									var choiceOptionSelectionStatus = currentBasePage_Assessment_OutputList[u].choiceOptions[cycleChoiceList].selectionStatus;
									if( choiceOptionSelectionStatus == "Selected"){
										choiceOptionSelectedCount++;
									}
									if( choiceOptionSelectionStatus == "Disabled"){
										choiceOptionDisabledCount++;
									}
								}
								if( choiceOptionSelectedCount > 0 ){
									//assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz">Droplist Choice Label : </span>' + choiceDisplayText + '<span class="accessViz"> : Use space or return to select this option</span></div>';
									assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessMatchingSlotDropperLabel">' + langPack.screenreader.stepBase.stepAssessmentMatchSlot1 + (u+1) + ' : </span>' + choiceDisplayText + '<span class="accessViz accessMatchingSlotDropperInstruction">' + langPack.screenreader.stepBase.stepAssessmentMatchSlot2 + '</span></div>';
								}else{
									//assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz">Choice Label : </span><div class="selectOptionNotice">' + langPack.ui.stepBase.stepAssessment.selectOption + '</div><span class="accessViz"> : Use space or return to select this option</span></div>';
									assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessMatchingSlotDropperLabel">' + langPack.screenreader.stepBase.stepAssessmentMatchSlot1 + (u+1) + ' : </span><div class="selectOptionNotice">' + langPack.ui.stepBase.stepAssessment.selectOption + '</div><span class="accessViz accessMatchingSlotDropperInstruction">' + langPack.screenreader.stepBase.stepAssessmentMatchSlot2 + '</span></div>';
								}
								assessmentChoice += 		'</div>'; // closing choiceOptionSet
							break;
							case "Ranking":
								var choiceRankPlacement = currentBasePage_Assessment_OutputList[u].rankPlaced;
								if( choiceRankPlacement != undefined ){
									//assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessRankingSlotDropperLabel">Ranking Slot ' + (u+1) + ' : </span>' + choiceDisplayText + '<span class="accessViz accessRankingSlotDropperInstruction"> : Use space or return to open the list of items to rank</span></div>';
									assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessRankingSlotDropperLabel">' + langPack.screenreader.stepBase.stepAssessmentRankSlot1 + (u+1) + ' : </span>' + choiceDisplayText + '<span class="accessViz accessRankingSlotDropperInstruction">' + langPack.screenreader.stepBase.stepAssessmentRankSlot2 + '</span></div>';
								}else{
									//assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessRankingSlotDropperLabel">Ranking Slot ' + (u+1) + ' : </span><div class="selectOptionNotice">' + langPack.ui.stepBase.stepAssessment.selectOption + '</div><span class="accessViz accessRankingSlotDropperInstruction"> : Use space or return to open the list of items to rank</span></div>';
									assessmentChoice += 		'<div class="CET-Choice-Text"><span class="accessViz accessRankingSlotDropperLabel">' + langPack.screenreader.stepBase.stepAssessmentRankSlot1 + (u+1) + ' : </span><div class="selectOptionNotice">' + langPack.ui.stepBase.stepAssessment.selectOption + '</div><span class="accessViz accessRankingSlotDropperInstruction">' + langPack.screenreader.stepBase.stepAssessmentRankSlot2 + '</span></div>';
								}
							break;
						}
						assessmentChoice += 	'</li>';
						$('#CET-Activity-Content-Assessment-PageChoiceSet').append(assessmentChoice);
					}
					for( var i = 1 ; i <= currentBasePage_Assessment_OutputList.length ; i++ ){
						pageAssessmentSelectionArray[0][i-1] = "off";
					}
				break;
			}
		}
		
		//if(assessmentStyle == "gridBasic"){
		//if(currentBasePage_Assessment_Variant == "MediaGrid"){
		if( currentBasePage_Assessment_Variant == "Media" ){
			/*
			// store output media grid display image
			assessmentChoiceObjectData.outputMedia_Display = $(this).find("nodeAssessment_OutputMediaFile_Display").text();
			// store output media grid launched file
			assessmentChoiceObjectData.outputMedia_Launched = $(this).find("nodeAssessment_OutputMediaFile_Launched").text();
			*/
			//$('#CET-Activity-Content-Assessment-Main').append(mediaGridBuilder(0, assessmentGridArray.length, "assessment"));
			
			$('#CET-Activity-Content-Assessment-Main').append( mediaGridBuilder({
				'groupIncrement' : 	0 ,
				'gridCount' :  			currentBasePage_Assessment_OutputList.length , 
				'dataPool' : 			"assessment"
			}) );
		    var gridChoiceTick = 	'<div class="CET-Choice-Icon-Container">';
			//gridChoiceTick += 			'<div class="CET-Choice-Radio" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"></div>';
			switch( currentBasePage_Assessment_Type ){
				case "Single Answer - Multiple Choice":
					gridChoiceTick += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="RadioBasic" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"><div class="radioInner"></div></div>';
				break;
				case "Multiple Answer - Multiple Choice":
					gridChoiceTick += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="CheckBoxBasic" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"><div class="radioInner"></div></div>';
				break;
				case "Advanced Multiple Answer - Multiple Choice":
						
				break;
				case "Matching":
					gridChoiceTick += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="OptionDropperMatching" data-StepStoneIcon="' + webFontAssignmentObject.arrow2_down + '"><div class="radioInner"></div></div>';
				break;
				case "Ranking":
					gridChoiceTick += 	'<div class="CET-Choice-Radio" data-ChoiceRadioStyle="OptionDropperRanking"><div class="radioInner"></div></div>';
				break;
			}
			gridChoiceTick += 		'</div>';
			$('#CET-Activity-Content-Assessment-Main .mediaGridCaptionBox').prepend(gridChoiceTick);
		    //gridBoxThumbCaptionRestyle(0, assessmentGridArray.length, "assessment");
		    gridBoxThumbCaptionRestyle(0, currentBasePage_Assessment_OutputList.length, "assessment");
		    gridBoxThumbFillBox();
		    //for(var i = 1 ; i <= assessmentGridArray.length ; i++){
		    for(var i = 1 ; i <= currentBasePage_Assessment_OutputList.length ; i++){
				pageAssessmentSelectionArray[0][i-1] = "off";
			}
		}
		/*
		switch( currentBasePage_Assessment_Type ){
			case "Single Answer - Multiple Choice":
				$('#CET-Activity-Content-Assessment-Main .CET-Choice-Radio').css('border-radius', '50%');
				$('#CET-Activity-Content-Assessment-Main .CET-Choice-Radio').append('<div class="radioInner"></div>');
				break;
			case "Multiple Answer - Multiple Choice":
				$('#CET-Activity-Content-Assessment-Main .CET-Choice-Radio').css('border-radius', '0.15em');
				$('#CET-Activity-Content-Assessment-Main .CET-Choice-Radio').append('<div class="radioInner"></div>');
			break;
		}
		*/
		//border-radius: 					50%; 		/* for radio */
		/*border-radius: 					0.1em;*/ 		/* for checkbox */
		
		placeLocalizedContent({
			'targetItem' : 		$( '[data-uiText="StepAssessment-ReviewFeedbackButtonLabel"]' ) ,
			'srcData' : 		langPack.ui.stepBase.reviewFeedbackButton.reviewFeedback
		});
		
		$("#CET-Activity-Content-Assessment").removeClass("stepAssessmentResultsReviewable");
		$("#CET-Activity-Content-Assessment-ReviewFeedbackButtonContainer").hide();
		$('#CET-Activity-Content-Assessment').show();
		maximizeCETActivityContentHeight();	
	}).fail(function (failResponse){
		console.log('error');
	});
}
// ! F.CourseAssessment/Survey.Initialize settings ---
function revertQuizConditions(){
	quizType = 													'';
	courseAssessmentDataArray = 						[];
	currentCourseAssessmentPage = 					1;
	currentCourseAssessmentBlockIncrement = 		1;
	
	courseSurveyDataArray = 								[];
	currentCourseSurveyPage = 							1;
	currentCourseSurveyBlockIncrement = 				1;

	totalCourseAssessmentScore = 						0;
	totalCourseAssessmentCorrect = 					0;
	currentCourseAssessmentPageCorrectTally = 	0;
}
/* ! F.CourseAssessment/Survey.Load and Init --- */
function quizLoader(passQuizType){
	$('#CET-Activity-Content-Assessment').hide();
	revertQuizConditions();
	continueButtonUpdate("Right", "CONTINUE", "Disabled");
	quizType = passQuizType;
	if( passQuizType == 'RACE Assessment' ){
		loadAssessmentData();
	}else if( passQuizType == 'RACE Survey' ){
		loadSurveyData();
	}
}
// ! F.CourseAssessment/Survey.Revert question block selection status---
function revertCourseQuizQBlock(event){
	if( quizType == 'RACE Assessment' ){
		var activeContentBlockIndex = $(event.target).closest('.qBlock').index();
		//#f5f4f0
		if( $(event.target).parent().hasClass('dropListContent') ){
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('background', 'none');
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('color', 'black');
		}else{
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('background', '#f5f4f0');
		}
		courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].blockSelectionMade = 		false;
		//if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "basic"){
		if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][0].activityType == "Basic"){
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('color', '#54524C');
			//$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('color', 'rgba(255,255,255,0)'); // make inner dot transparent
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('color', 'transparent'); // make inner dot transparent
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px #54524C');
			//$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.form_rb1)[0].data); // set placeholder
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio .radioInner').css('background', 'transparent');
		
			for( var a = 1 ; a < courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex].length ; a++){
				courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][a].selected = false;
			}
		}else{
			for( var a = 1 ; a < courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex].length ; a++){
				courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex][a].selected = false;
			}
		}
	}else if( quizType == 'RACE Survey' ){
		var activeContentBlockIndex = $(event.target).closest('.qBlock').index();
		if( $(event.target).parent().hasClass('dropListContent') ){
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('background', 'none');
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('color', 'black');
		}else{
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('background', '#f5f4f0');
		}
		courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].blockSelectionMade = 		false;
		//if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "basic"){
		if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][0].activityType == "Basic"){
			$(event.target).closest('.qBlock').find('.qActivityChoice').css('color', '#54524C');
			//$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('color', 'rgba(255,255,255,0)'); // make inner dot transparent
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('color', 'transparent'); // make inner dot transparent
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').css('box-shadow', '0px 0px 0px 2px #54524C');
			//$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.form_rb1)[0].data); // set placeholder
			$(event.target).closest('.qBlock').find('.qActivityChoice').find('.CET-Choice-Radio .radioInner').css('background', 'transparent');
		
			for( var a = 1 ; a < courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex].length ; a++){
				courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][a].selected = false;
			}
		}else{
			for( var a = 1 ; a < courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex].length ; a++){
				courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex][a].selected = false;
			}
		}
	}
}

// ! F.CourseAssessment/Survey.UI.Nav buttonhandling ---
function quizNavReact(){
	if( quizType == 'RACE Assessment' ){
		checkCourseAssessmentScore();
		totalCourseAssessmentCorrect += currentCourseAssessmentPageCorrectTally;
		if( currentCourseAssessmentPage == courseAssessmentDataArray.length ){
			var totalQBlockCount = currentCourseAssessmentBlockIncrement - 1;
			courseStatusObject.courseAssessmentScore = Math.round( totalCourseAssessmentCorrect / totalQBlockCount * 100 );
			//console.log( "assessment done! " + (Math.round(totalCourseAssessmentCorrect / totalQBlockCount * 100)) + "%" );
		}else{
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
			currentCourseAssessmentPage++;
			buildCourseAssessmentContentPage();
		}
		$(this).hide();
	}else if( quizType == 'RACE Survey' ){
		if( currentCourseSurveyPage == courseSurveyDataArray.length ){
			//console.log( "survey done!" );
			courseStatusObject.courseSurveyStatus = 1;
		}else{
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
			currentCourseSurveyPage++;
			buildCourseSurveyContentPage();
		}
		$(this).hide();
	}
	$('#CET-Activity-Content').animate({ scrollTop: 0 }, "slow");
}

// ! F.CourseAssessment.Score checking ---
function checkCourseAssessmentScore(){
	var pageBlockTotal = courseAssessmentDataArray[currentCourseAssessmentPage - 1].length;
	currentCourseAssessmentPageCorrectTally = 0;
	for( var a = 1 ; a < pageBlockTotal ; a++ ){
		for( var b = 1 ; b < courseAssessmentDataArray[currentCourseAssessmentPage - 1][a].length ; b++ ){
			if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].status == "Correct" && courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].selected == true){
				currentCourseAssessmentPageCorrectTally++;
			}
		}
	}
	//alert(pageBlockCorrectTally);
}
// ! F.CourseAssessment/Survey.Page Completion handling ---
function checkCourseQuizPageCompletion(){
	if( quizType == 'RACE Assessment' ){
		var pageBlockTotal = courseAssessmentDataArray[currentCourseAssessmentPage - 1].length;
		var pageBlockSelectionMadeTally = 0;
		for( var a = 1 ; a < pageBlockTotal ; a++ ){
			if( courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][0].blockSelectionMade == true ){
				pageBlockSelectionMadeTally++;
			}
		}
		var pageComplete = false;
		if( pageBlockSelectionMadeTally >= (pageBlockTotal - 1) ){
			pageComplete = true;
		}
		if(pageComplete){
			if( currentCourseAssessmentPage == courseAssessmentDataArray.length ){
				//$('#nextBut').html('Finish');
				continueButtonUpdate("Finish", "FINISH", "LaunchDashboard"); 
			}else{
				//$('#nextBut').html('Next');
				continueButtonUpdate("Right", "CONTINUE", "CourseAssessmentNextPage");
			}
			//$('#nextBut').show();
		}else{
			//$('#nextBut').hide();
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
		}
	}else if( quizType == 'RACE Survey' ){
		var pageBlockTotal = courseSurveyDataArray[currentCourseSurveyPage - 1].length;
		var pageBlockSelectionMadeTally = 0;
		for( var a = 1 ; a < pageBlockTotal ; a++ ){
			if( courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].blockSelectionMade == true && courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].status == 'Required'){
				pageBlockSelectionMadeTally++;
			}
		}
		var pageComplete = false;
		//if( pageBlockSelectionMadeTally >= (pageBlockTotal - 1) ){
		//if( pageBlockSelectionMadeTally >= (pageRequirementTotal - 1) ){
		if( pageBlockSelectionMadeTally >= (surveyRequirementTotal) ){
			pageComplete = true;
		}
		if(pageComplete){
			if( currentCourseSurveyPage == courseSurveyDataArray.length ){
				//$('#nextBut').html('Finish');
				continueButtonUpdate("Finish", "FINISH", "LaunchDashboard");
			}else{
				//$('#nextBut').html('Next');
				continueButtonUpdate("Right", "CONTINUE", "CourseSurveyNextPage");
			}
			//$('#nextBut').show();
		}else{
			//$('#nextBut').hide();
			continueButtonUpdate("Right", "CONTINUE", "Disabled");
		}
	}
}
// ! F.CourseAssessment.Load data ---
function loadAssessmentData(){
	//revertQuizConditions();
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	var useURL = CETCourseContentPath + 'json/assessmentData.json' + dummyTStamp();
	if( isAuthoringMode ){
		//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		if( authoringMode == "PathBuilder" ){
			useURL = '../' + useURL;
		}
	}
	$.ajax({
		type:			'GET',//'POST',
		//url: 			'../../content/Meta/xml/assessmentData.xml?' + dummyTS,
		//url: 			CETCourseContentPath + '/xml/assessmentData.xml?' + dummyTS,
		//dataType: 	'xml',
		url: 			useURL,
		dataType: 	'json'
	}).done(function (doneResponse){
		var elementCount = 0;
		// json version
		masterJSONStorage.courseAssessmentData = 		doneResponse.assessmentParams;
		var courseAssessmentType = 		masterJSONStorage.courseAssessmentData.assessmentMeta.type;
		var courseAssessmentVariant = 	masterJSONStorage.courseAssessmentData.assessmentMeta.variant;
		for( var i = 0 ; i < masterJSONStorage.courseAssessmentData.assessmentPages.length ; i++ ){
			var courseAssessmentPageDataArray = 	[];
			courseAssessmentPageDataArray.push( masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageHeader );
			for( var j = 0 ; j < masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks.length ; j++ ){
				var blockDataArray = 	[];
				// build group info in first sub-array element
				var blockMainDataObject = 							{};
				blockMainDataObject.blockActive = 			false;
				blockMainDataObject.activityType = 			masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].type;
				if( masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].shuffleChoices == "True"){
					blockMainDataObject.shuffle = 				true;
				}else{
					blockMainDataObject.shuffle = 				false;
				}
				//blockMainDataObject.shuffle = 						$(this).find('courseAssessmentContent_AssessBlockActivity').attr('shuffleElements');
				blockMainDataObject.blockSelectionMade = 		false;
				blockMainDataObject.questionText = 				masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].displayText;
				if( masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].placeHolderText != undefined ){
					blockMainDataObject.label = 						masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].placeHolderText;
				}
				blockMainDataObject.closedH = 						0;
				blockDataArray.push(blockMainDataObject);
				// build drop list info afterward
				var assessOptionCount = 0;
				var tempElementsArray = [];
				for( var k = 0 ; k < masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].choices.length ; k++ ){
					var blockOptionsDataObject = 	{};
					blockOptionsDataObject.label = 					masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].choices[k].displayText;
					if( masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].choices[k].status == 'Correct' 
					&&
					masterJSONStorage.courseAssessmentData.assessmentPages[i].assessmentPageBlocks[j].choices[k].status != undefined ){
						blockOptionsDataObject.status = 			"Correct";
					}else{
						blockOptionsDataObject.status = 			"Incorrect";
					}
					blockOptionsDataObject.selected = 			false;
					tempElementsArray.push(blockOptionsDataObject);
				}
				if( blockMainDataObject.shuffle ){
					tempElementsArray = shuffleArray(tempElementsArray);
				}
				blockDataArray = blockDataArray.concat(tempElementsArray);
				courseAssessmentPageDataArray.push(blockDataArray);
				elementCount++;
			}
			courseAssessmentDataArray.push(courseAssessmentPageDataArray);
		}
		// xml method
		/*
		$(response).find("courseAssessmentContent_Page").each(function(){
			var courseAssessmentPageDataArray = 	[];
			courseAssessmentPageDataArray.push( $(this).find("courseAssessmentContent_PageHeader").text() );
			$(this).find("courseAssessmentContent_AssessBlock").each(function(){
				var blockDataArray = 	[];
				// build group info in first sub-array element
				var blockMainDataObject = 							{};
				blockMainDataObject.blockActive = 				false;
				blockMainDataObject.activityType = 				$(this).find('courseAssessmentContent_AssessBlockActivity').attr('type');
				if( $(this).find('courseAssessmentContent_AssessBlockActivity').attr('shuffleElements') == "True"){
					blockMainDataObject.shuffle = 					true;
				}else{
					blockMainDataObject.shuffle = 					false;
				}
				//blockMainDataObject.shuffle = 						$(this).find('courseAssessmentContent_AssessBlockActivity').attr('shuffleElements');
				blockMainDataObject.blockSelectionMade = 		false;
				blockMainDataObject.questionText = 				$(this).find('courseAssessmentContent_AssessBlockText').text();
				blockMainDataObject.label = 							$(this).find('courseAssessmentContent_AssessBlockActivity').attr('placeHolder');
				blockMainDataObject.closedH = 						0;
				blockDataArray.push(blockMainDataObject);
				// build drop list info afterward
				var assessOptionCount = 0;
				var tempElementsArray = [];
				$(this).find("courseAssessmentContent_AssessBlockActivityElement").each(function(){
					var blockOptionsDataObject = 	{};
					blockOptionsDataObject.label = 					$(this).text();
					if( $(this).attr('status') == 'Correct' ){
						blockOptionsDataObject.status = 			"Correct";
					}else{
						blockOptionsDataObject.status = 			"Incorrect";
					}
					blockOptionsDataObject.selected = 			false;
					tempElementsArray.push(blockOptionsDataObject);
				});
				if( blockMainDataObject.shuffle ){
					tempElementsArray = shuffleArray(tempElementsArray);
				}
				blockDataArray = blockDataArray.concat(tempElementsArray);
				courseAssessmentPageDataArray.push(blockDataArray);
				elementCount++;
			});
			courseAssessmentDataArray.push(courseAssessmentPageDataArray);
		});
		*/
		buildCourseAssessmentContentPage();
	}).fail(function (failResponse){
		console.log('error');
	});
}
// ! F.CourseAssessment.Build content page ---
function buildCourseAssessmentContentPage(){
	//$('#quizForm').empty();
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_courseassessment)[0].data);
	$('#CET-Activity-Content-Title-Text .normalViz').html('<strong>RACE</strong> Assessment');
	$('#CET-Activity-Content-Main').empty();
	$('#CET-Activity-Content-Main').append('<div id="quizForm"></div>');
	//$('#CET-Activity-Content-Assessment').hide();
	for( var a = 0 ; a < courseAssessmentDataArray[currentCourseAssessmentPage - 1].length ; a++){
		if( a == 0 ){
			$('#quizForm').html('<div class="quizTopText">' + courseAssessmentDataArray[currentCourseAssessmentPage - 1][0] + '</div>');
		}else{
			for( var b = 0 ; b < courseAssessmentDataArray[currentCourseAssessmentPage - 1][a].length ; b++){
				// build qblock html for block
				if( b == 0 ){
					var qBlockBuild = 	'<div id="q' + currentCourseAssessmentBlockIncrement + '" class="qBlock">';
					qBlockBuild += 			'<div class="qText"></div>';
				    qBlockBuild += 			'<div class="qActivity">';
				    //if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "basic"){
					if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "Basic"){
					    qBlockBuild += 			'<div class="qActivityChoiceContainer"></div>';
				    }
				    //if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "dropList"){
					if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "DropList"){
					    qBlockBuild += 			'<div class="dropListContainer">';
					    qBlockBuild += 				'<div class="dropListContent">';
					    qBlockBuild += 					'<div class="menuSelectedLabel"></div>';
					    qBlockBuild += 				'</div>';
					    qBlockBuild += 			'</div>';
					    qBlockBuild += 			'<div class="menuSelectDropButton"></div>';
				    }
				    qBlockBuild += 			'</div>';
				    qBlockBuild += 		'</div>';
					//$('#quizForm').append(qBlockBuild);
					
					//$('#CET-Activity-Content-Main').append(qBlockBuild);
					$('#quizForm').append(qBlockBuild);
					$('#q' + currentCourseAssessmentBlockIncrement + ' .qText').append(currentCourseAssessmentBlockIncrement + ". " + courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].questionText);
					//if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "dropList"){
					if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].activityType == "DropList"){
						$('#q' + currentCourseAssessmentBlockIncrement + ' .menuSelectedLabel').append(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].label);
						courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].closedH = $('#q' + currentCourseAssessmentBlockIncrement + ' .menuSelectedLabel').outerHeight(true);
						$('#q' + currentCourseAssessmentBlockIncrement + ' .dropListContainer').css('height', (courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].closedH) + 'px');
					}
				}else{
					//if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][0].activityType == "basic"){
					if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][0].activityType == "Basic"){
						var qSlotBuild = 				'<div class="qActivityChoice">';
						qSlotBuild += 						'<div class="CET-Choice-Icon-Container">';
						qSlotBuild += 							'<div class="CET-Choice-Radio" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"></div>';
						qSlotBuild += 						'</div>';
						qSlotBuild += 						'<div class="qActivityChoiceText">' + courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].label + '</div>';
						qSlotBuild += 					'</div>';
						
						$('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .qActivityChoiceContainer').append(qSlotBuild);
						//$('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .qActivityChoiceContainer').append('<div class="qActivityChoice">[Icon' + (b) + '] ' + courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].label + '</div>');
					    $('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .qActivityChoiceContainer').css('height', (courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].closedH) + 'px');
					    
					    $('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .qActivityChoiceContainer .CET-Choice-Radio').css('border-radius', '50%');
						$('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .qActivityChoiceContainer .CET-Choice-Radio').append('<div class="radioInner"></div>');
				    }
				    //if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][0].activityType == "dropList"){
				    if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][0].activityType == "DropList"){
				    	//$('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .dropListContent').append('<div class="qActivityChoice">[Icon' + (b) + '] ' + courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].label + '</div>');
				    	$('#q' + (currentCourseAssessmentBlockIncrement - 1) + ' .dropListContent').append('<div class="qActivityChoice">' + courseAssessmentDataArray[currentCourseAssessmentPage - 1][a][b].label + '</div>');
				    }
				}
				if( b == 0 ){
					currentCourseAssessmentBlockIncrement++;
				}
			}
		}
		
	}
	$('#quizForm .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
	//iconHideShowTest();
	maximizeCETActivityContentHeight();
	//$('#CET-Activity-Content-Main').scrollTop(0);
	$('#CET-Activity-Content').animate({ scrollTop: 0 }, "slow");
}
// ! =============================================================
// ! F.CourseSurvey.Load data --- 
function loadSurveyData(){
	//revertQuizConditions();
	//var dummyTS = Number(new Date()); // appended to xml request, seems to help with web error (code?)
	var useURL = CETCourseContentPath + 'json/surveyData.json' + dummyTStamp();
	if( isAuthoringMode ){
		//if( authoringMode == "PathBuilder" || authoringMode == "CoursePackager" ){
		if( authoringMode == "PathBuilder" ){
			useURL = '../' + useURL;
		}
	}
	$.ajax({
		type:			'GET',//'POST',
		//url: 			'../../content/Meta/xml/surveyData.xml?' + dummyTS,
		//url: 			CETCourseContentPath + '/xml/surveyData.xml?' + dummyTS,
		url: 			useURL,
		//dataType: 	'xml',
		dataType: 	'json'
	}).done(function (doneResponse){
		var elementCount = 0;
		// json version
		masterJSONStorage.surveyData = 	doneResponse.surveyParams;
		var surveyType = 							masterJSONStorage.surveyData.surveyMeta.type;
		var surveyVariant = 						masterJSONStorage.surveyData.surveyMeta.variant;
		for( var i = 0 ; i < masterJSONStorage.surveyData.surveyPages.length ; i++ ){
			var courseSurveyPageDataArray = 	[];
			courseSurveyPageDataArray.push( masterJSONStorage.surveyData.surveyPages[i].surveyPageHeader );
			for( var j = 0 ; j < masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks.length ; j++ ){
				var blockDataArray = 	[];
				// build group info in first sub-array element
				var blockMainDataObject = 							{};
				blockMainDataObject.blockActive = 			false;
				blockMainDataObject.activityType = 			masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].type;
				//blockMainDataObject.activityType = 				$(this).find('courseSurveyContent_AssessBlockActivity').attr('type');
				if( masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].shuffleChoices == 'True' ){
					blockMainDataObject.shuffle = 					true;
				}else{
					blockMainDataObject.shuffle = 					false;
				}
				blockMainDataObject.blockSelectionMade = 		false;
				blockMainDataObject.questionText = 				masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].displayText;
				blockMainDataObject.label = 							masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].placeHolderText;
				blockMainDataObject.closedH = 						0;
				blockMainDataObject.status = 						masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].status;
				blockMainDataObject.capturedData = 				'';
				//if( $(this).attr('status') == 'Required' ){
					//blockMainDataObject.status = 					"Required";
				//}else{
					//blockMainDataObject.status = 					"Optional";
				//}
				blockDataArray.push(blockMainDataObject);
				// build drop list info afterward
				var assessOptionCount = 0;
				var tempElementsArray = [];
				//$(this).find("courseSurveyContent_SurveyBlockActivityElement").each(function(){
				if( masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].choices != undefined ){
					for( var k = 0 ; k < masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].choices.length ; k++ ){
						var blockOptionsDataObject = 					{};
						blockOptionsDataObject.label = 					masterJSONStorage.surveyData.surveyPages[i].surveyPageBlocks[j].choices[k].displayText;
						blockOptionsDataObject.selected = 			false;
						blockOptionsDataObject.capturedData = 		'';
						tempElementsArray.push(blockOptionsDataObject);
					}
				}
				if(blockMainDataObject.shuffle == true){
					tempElementsArray = shuffleArray(tempElementsArray);
				}
				blockDataArray = blockDataArray.concat(tempElementsArray);
				courseSurveyPageDataArray.push(blockDataArray);
				elementCount++;
			}
			courseSurveyDataArray.push(courseSurveyPageDataArray);
		}
		
		//xml version
		/*
		$(response).find("courseSurveyContent_Page").each(function(){
			var courseSurveyPageDataArray = 	[];
			courseSurveyPageDataArray.push( $(this).find("courseSurveyContent_PageHeader").text() );
			$(this).find("courseSurveyContent_SurveyBlock").each(function(){
				var blockDataArray = 	[];
				// build group info in first sub-array element
				var blockMainDataObject = 							{};
				blockMainDataObject.blockActive = 				false;
				blockMainDataObject.activityType = 				$(this).find('courseSurveyContent_SurveyBlockActivity').attr('type');
				//blockMainDataObject.activityType = 				$(this).find('courseSurveyContent_AssessBlockActivity').attr('type');
				if( $(this).find('courseSurveyContent_SurveyBlockActivity').attr('shuffleElements') == 'True' ){
					blockMainDataObject.shuffle = 					true;
				}else{
					blockMainDataObject.shuffle = 					false;
				}
				blockMainDataObject.blockSelectionMade = 		false;
				blockMainDataObject.questionText = 				$(this).find('courseSurveyContent_SurveyBlockText').text();
				blockMainDataObject.label = 							$(this).find('courseSurveyContent_SurveyBlockActivity').attr('placeHolder');
				blockMainDataObject.closedH = 						0;
				blockMainDataObject.status = 						$(this).find('courseSurveyContent_SurveyBlockActivity').attr('status');
				blockMainDataObject.capturedData = 				'';
				//if( $(this).attr('status') == 'Required' ){
					//blockMainDataObject.status = 					"Required";
				//}else{
					//blockMainDataObject.status = 					"Optional";
				//}
				blockDataArray.push(blockMainDataObject);
				// build drop list info afterward
				var assessOptionCount = 0;
				var tempElementsArray = [];
				$(this).find("courseSurveyContent_SurveyBlockActivityElement").each(function(){
					var blockOptionsDataObject = 	{};
					blockOptionsDataObject.label = 					$(this).text();
					blockOptionsDataObject.selected = 			false;
					blockOptionsDataObject.capturedData = 		'';
					tempElementsArray.push(blockOptionsDataObject);
				});
				if(blockMainDataObject.shuffle == true){
					tempElementsArray = shuffleArray(tempElementsArray);
				}
				blockDataArray = blockDataArray.concat(tempElementsArray);
				courseSurveyPageDataArray.push(blockDataArray);
				elementCount++;
			});
			courseSurveyDataArray.push(courseSurveyPageDataArray);
		});
		*/
		
		buildCourseSurveyContentPage();
	}).fail(function (failResponse){
		console.log('error');
	});
}
// ! F.CourseSurvey.Build content page ---
function buildCourseSurveyContentPage(){
	//$('#quizForm').empty();
	$('.CET-Activity-Content-Title-PageTypeIndicator-Icon').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.badge_coursesurvey)[0].data);
	$('#CET-Activity-Content-Title-Text .normalViz').html('<strong>RACE</strong> Survey');
	$('#CET-Activity-Content-Main').empty();
	$('#CET-Activity-Content-Main').append('<div id="quizForm"></div>');
	//*
	for( var a = 0 ; a < courseSurveyDataArray[currentCourseSurveyPage - 1].length ; a++){
		if( a == 0 ){
			$('#quizForm').html('<div class="quizTopText">' + courseSurveyDataArray[currentCourseSurveyPage - 1][0] + '</div>');
		}else{
			for( var b = 0 ; b < courseSurveyDataArray[currentCourseSurveyPage - 1][a].length ; b++){
				// build qblock html for block
				if( b == 0 ){
					var qBlockBuild = 	'<div id="q' + currentCourseSurveyBlockIncrement + '" class="qBlock">';
					
					if( courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].status == 'Required' ){
						qBlockBuild += 			'<div class="qText surveyRequirement"></div>';
						surveyRequirementTotal++;
					}else if( courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].status == 'Optional' ){
						qBlockBuild += 			'<div class="qText"></div>';
					}
				    qBlockBuild += 			'<div class="qActivity">';
				    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "basic"){
					if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "Basic"){
					    qBlockBuild += 			'<div class="qActivityChoiceContainer"></div>';
				    }
				    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "dropList"){
				    if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "DropList"){
					    qBlockBuild += 			'<div class="dropListContainer">';
					    qBlockBuild += 				'<div class="dropListContent">';
					    qBlockBuild += 					'<div class="menuSelectedLabel"></div>';
					    qBlockBuild += 				'</div>';
					    qBlockBuild += 			'</div>';
					    qBlockBuild += 			'<div class="menuSelectDropButton webFontForceRedrawClass"></div>';
				    }
				    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "textArea"){
				    if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "TextArea"){
					    qBlockBuild += 			'<textarea class="courseSurveyTextArea" cols="0" rows="0"></textarea>';
					    qBlockBuild += 			'<div class="textAreaCharCountContainer"></div>';
				    }
				    qBlockBuild += 			'</div>';
				    qBlockBuild += 		'</div>';
					//$('#quizForm').append(qBlockBuild);
					//$('#CET-Activity-Content-Main').append(qBlockBuild);
					//$('#CET-Activity-Content-Main').append(qBlockBuild);
					$('#quizForm').append(qBlockBuild);
					/*
					var itemNum;
					if( courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].status == 'Required' ){
						itemNum = '<span class="surveyRequirementMarker">' + currentCourseSurveyBlockIncrement + '</span>';
					}else if( courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].status == 'Optional' ){
						itemNum = currentCourseSurveyBlockIncrement;
					}						
					*/
					$('#q' + currentCourseSurveyBlockIncrement + ' .qText').append(currentCourseSurveyBlockIncrement + ". " + courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].questionText);
					//if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "dropList"){
					if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].activityType == "DropList"){
						$('#q' + currentCourseSurveyBlockIncrement + ' .menuSelectedLabel').append(courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label);
						courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH = $('#q' + currentCourseSurveyBlockIncrement + ' .menuSelectedLabel').outerHeight(true);
						$('#q' + currentCourseSurveyBlockIncrement + ' .dropListContainer').css('height', (courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH) + 'px');
					}
				}else{
					//if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].activityType == "basic"){
					if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].activityType == "Basic"){
						var qSlotBuild = 	'<div class="qActivityChoice">';
						qSlotBuild += 		'<div class="CET-Choice-Icon-Container">';
						qSlotBuild += 			'<div class="CET-Choice-Radio" data-StepStoneIcon="' + webFontAssignmentObject.form_rb1 + '"></div>';
						qSlotBuild += 		'</div>';
						qSlotBuild += 		'<div class="qActivityChoiceText">' + courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label + '</div>';
						qSlotBuild += 	'</div>';
						
						//$('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .qActivityChoiceContainer').append('<div class="qActivityChoice">[Icon' + (b) + '] ' + courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label + '</div>');
						$('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .qActivityChoiceContainer').append(qSlotBuild);
					    $('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .qActivityChoiceContainer').css('height', (courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].closedH) + 'px');
					    
					    $('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .qActivityChoiceContainer .CET-Choice-Radio').css('border-radius', '50%');
						$('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .qActivityChoiceContainer .CET-Choice-Radio').append('<div class="radioInner"></div>');
				    }
				    //if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].activityType == "dropList"){
				    if(courseSurveyDataArray[currentCourseSurveyPage - 1][a][0].activityType == "DropList"){
				    	//$('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .dropListContent').append('<div class="qActivityChoice">[Icon' + (b) + '] ' + courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label + '</div>');
				    	$('#q' + (currentCourseSurveyBlockIncrement - 1) + ' .dropListContent').append('<div class="qActivityChoice">' + courseSurveyDataArray[currentCourseSurveyPage - 1][a][b].label + '</div>');
				    }
				}
				if( b == 0 ){
					currentCourseSurveyBlockIncrement++;
				}
			}
		}
	}
	$('#quizForm .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
	webFontForceRedraw('.menuSelectDropButton');
	//*/
	$('.courseSurveyTextArea').val('');
    $('.courseSurveyTextArea').autosize();
    pruneTextAreaText();
    maximizeCETActivityContentHeight();
    //$('#CET-Activity-Content-Main').scrollTop(0);
    $('#CET-Activity-Content').animate({ scrollTop: 0 }, "slow");
}
// ! =============================================================
// ! F.Certificate.Thumbnail.Update size ---
function resizeCertificateThumb(){
	//*
	// Get on screen image
	//certificateThumbPreparedImage = $('#preparedImageFromCanvas');
	// Create new offscreen image to test
	//certificateThumbPreparedImageCopy = new Image();
	//certificateThumbPreparedImageCopy.src = certificateThumbPreparedImage.attr("src");
	
	// Get accurate measurements from that.
	var measureImgWidth = certificateThumbPreparedImageCopy.width;
	var measureImgHeight = certificateThumbPreparedImageCopy.height;
	var certificateImageContainerNativeWHRatio = 	measureImgWidth / measureImgHeight;
	//*/

    var imageContainer = 									$('#courseCertificateContent #canvasContainer');
    //var imageDataObject = 									$('#preparedImageFromCanvas');
    //var certificateImageNativeWidth = 					imageDataObject.width();
	//var certificateImageNativeHeight = 					imageDataObject.height();
	//var certificateImageContainerNativeWHRatio = 	certificateImageNativeWidth / certificateImageNativeHeight;
	//var currentMediaWidth = 	$('.CET-Activity-Content-Main-MediaBlock').width();
	//currentMediaWidth = 	 							imageContainerObject.width();
    var currentCertificateContainerWidth = 	 		$('#preparedImageFromCanvas').width();//imageContainer.width();
	//console.log(currentBasePage_SingleMediaImageObject.src + " --- " + singleMediaBGImageNativeWidth + " --- " + singleMediaBGImageNativeHeight);
	
	//alert( "a - " + $('#preparedImageFromCanvas').width() );
	//alert( "b - " + $('#certificateThumbPreparedImageCopy').width() );
	//alert( currentCertificateContainerWidth + " --- " + certificateImageContainerNativeWHRatio );
	
    imageContainer.css('height', Math.round( (currentCertificateContainerWidth / certificateImageContainerNativeWHRatio) ) + 'px');
    //alert( $('#courseCertificateContent #canvasContainer').width() );
    //alert( $('#courseCertificateContent #canvasContainer').height() );
}
// ! =============================================================
// ! F.UI.Droplist handle toggles ---
function toggleDropMenu(event, forceDirection){
	if(typeof(forceDirection)==='undefined') forceDirection = null;
	if( quizType == 'RACE Assessment' ){
		var activeContentBlockIndex = $(event.target).closest('.qBlock').index();
	    var animateToNewHeight;
	    if(courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex + 1][0].blockActive == false){
		   courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex + 1][0].blockActive = true;
		   $(event.target).closest('.qBlock').find('.menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_up)[0].data);
		   animateToNewHeight = $(event.target).closest('.qBlock').find('.dropListContent').height() + extraDropListOffset;
	    }else{
		    courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex + 1][0].blockActive = false;
		    $(event.target).closest('.qBlock').find('.menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
			courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex + 1][0].closedH = $(event.target).closest('.qBlock').find('.menuSelectedLabel').outerHeight() + extraDropListOffset;
	        animateToNewHeight = courseAssessmentDataArray[currentCourseAssessmentPage - 1][activeContentBlockIndex + 1][0].closedH;
	    }
	    $(event.target).closest('.qBlock').find('.dropListContainer').clearQueue();
	    $(event.target).closest('.qBlock').find('.dropListContainer').animate({
    		height: 		animateToNewHeight
		},{
    		start: 	function(){
    			dropListAnimationStatus('courseAssessment', 'start')
			},complete: 	function(){
    			dropListAnimationStatus('courseAssessment', 'complete')
			}
	    });
	}else if( quizType == 'RACE Survey' ){
		var activeContentBlockIndex = $(event.target).closest('.qBlock').index();
	    var animateToNewHeight;
	    if(courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex + 1][0].blockActive == false){
		   courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex + 1][0].blockActive = true;
		   $(event.target).closest('.qBlock').find('.menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_up)[0].data);
		   animateToNewHeight = $(event.target).closest('.qBlock').find('.dropListContent').height() + extraDropListOffset;
	    }else{
		    courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex + 1][0].blockActive = false;
		    $(event.target).closest('.qBlock').find('.menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
			courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex + 1][0].closedH = $(event.target).closest('.qBlock').find('.menuSelectedLabel').outerHeight() + extraDropListOffset;
	        animateToNewHeight = courseSurveyDataArray[currentCourseSurveyPage - 1][activeContentBlockIndex + 1][0].closedH;
	    }
	    $(event.target).closest('.qBlock').find('.dropListContainer').clearQueue();
	    $(event.target).closest('.qBlock').find('.dropListContainer').animate({
    		height: 		animateToNewHeight
		},{
    		start: 	function(){
    			dropListAnimationStatus('courseSurvey', 'start')
			},complete: 	function(){
    			dropListAnimationStatus('courseSurvey', 'complete')
			}
	    });
	}else if( quizType == 'Sidenav' ){
		var animateToNewHeight;
		if(sideNavDropListStatus == "Closed"){
			$('.sideNavDropList .menuSelectedLabel').hide();
			$('.sideNavDropList .menuSelectDropButton').hide();
			//$('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_up)[0].data);
			animateToNewHeight = $('.sideNavDropList .dropListContent').outerHeight(true) + extraDropListOffset;
		}else if(sideNavDropListStatus == "Dropped"){
			$('.sideNavDropList .menuSelectedLabel').show();
			$('.sideNavDropList .menuSelectDropButton').show();
			//$('.sideNavDropList .menuSelectDropButton').attr('data-StepStoneIcon', $.parseHTML(webFontAssignmentObject.arrow2_down)[0].data);
			//animateToNewHeight = sideNavDropListClosedH;
			animateToNewHeight = $('.sideNavDropList .menuSelectedLabel').outerHeight(true);
		}
		$('.sideNavDropList .dropListContainer').clearQueue();
	    $('.sideNavDropList .dropListContainer').animate({
    		height: 		animateToNewHeight
		},{
    		start: 	function(){
    			dropListAnimationStatus('sideNavDropList', 'start')
			},complete: 	function(){
    			dropListAnimationStatus('sideNavDropList', 'complete')
			}
	    });
	}
	
	function dropListAnimationStatus(dropListType, status){
		if(dropListType == 'sideNavDropList'){
			if(status == 'start'){
				$('.sideNavDropList').find('.qActivityChoice').css('opacity', 1);
				//$('.sideNavDropList .qActivityChoice').css( 'box-shadow', '0 1.1em 0 -1em rgba(50, 50, 50, 0.35)' );
			}else if(status == 'complete'){
	    		if(sideNavDropListStatus == "Closed"){
					sideNavDropListStatus = "Dropped";
				}else if(sideNavDropListStatus == "Dropped"){
					sideNavDropListStatus = "Closed";
					$('.sideNavDropList').find('.qActivityChoice').css('opacity', 0);
					//$('.sideNavDropList .qActivityChoice').css( 'box-shadow', 'none' );
				}
			}
		}else{
	    	if(status == 'start'){
				$(event.target).closest('.qBlock').find('.qActivityChoice').css('opacity', 1);
				$(event.target).closest('.qBlock').find('.menuSelectedLabel').css( 'box-shadow', '0 1.1em 0 -1em rgba(50, 50, 50, 0.35)' );
			}else if(status == 'complete'){
				/*
	    		if(sideNavDropListStatus == "Closed"){
					sideNavDropListStatus = "Dropped";
				}else if(sideNavDropListStatus == "Dropped"){
					$(event.target).closest('.qBlock').find('.qActivityChoice').css('opacity', 0);
					$(event.target).closest('.qBlock').find('.menuSelectedLabel').css( 'box-shadow', 'none' );
					sideNavDropListClosedH = $('.sideNavDropList .dropListContainer').outerHeight(true);
					sideNavDropListStatus = "Closed";
				}
				*/
			}
		}
		maximizeCETActivityContentHeight();
	}
}
// ! =============================================================

// ! F.Util.TextArea.Keep input text areas limited to set maximum --- 
function pruneTextAreaText(event){
	if( typeof(event) === 'undefined' ){
		$('.textAreaCharCountContainer').html(maxCommentBoxInputLength);
		$('.textAreaCharCountContainer').prepend('Characters remaining: ');
		$('.textAreaCharCountContainer').append(' / ' + maxCommentBoxInputLength);
	}else{
		var fullVal = $(event.target).val();
		var activeQBlockIndex = $(event.target).closest('.qBlock').index();
		if(fullVal.length > maxCommentBoxInputLength){
			$(event.target).val(fullVal.substr(0, maxCommentBoxInputLength)).trigger('autosize.resize');
			$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').html(0);
		}else{
			$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').html(maxCommentBoxInputLength - fullVal.length);
		}
		$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').prepend('Characters remaining: ');
		$(event.target).closest('.qActivity').find('.textAreaCharCountContainer').append(' / ' + maxCommentBoxInputLength);
		
		courseSurveyDataArray[currentCourseSurveyPage - 1][activeQBlockIndex][0].capturedData = $(event.target).val();
		if( $(event.target).val().length > 0 ){
			courseSurveyDataArray[currentCourseSurveyPage - 1][activeQBlockIndex][0].blockSelectionMade = true;
		}else{
			courseSurveyDataArray[currentCourseSurveyPage - 1][activeQBlockIndex][0].blockSelectionMade = false;
		}
		checkCourseQuizPageCompletion();
	}
}